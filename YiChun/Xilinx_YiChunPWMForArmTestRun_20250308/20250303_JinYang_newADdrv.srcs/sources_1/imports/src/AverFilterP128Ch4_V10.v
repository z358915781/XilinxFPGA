// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\AverFilterP128Ch4_V10\AverFilterP128Ch4_V10.v
// Created: 2024-03-13 19:46:35
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 3.125e-06
// Target subsystem base rate: 3.125e-06
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: AverFilterP128Ch4_V10
// Source Path: AverFilterP128Ch4_V10/AverFilterP128Ch4_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module AverFilterP128Ch4_V10
          (
           g_clk,
           Rst_n,
           Pulse,
           Filter_In0,
           Filter_In1,
           Filter_In2,
           Filter_In3,
           Filter_Out0,
           Filter_Out1,
           Filter_Out2,
           Filter_Out3
          );



  input   g_clk;
  input   Rst_n;
  input   Pulse;
  input   signed [11:0] Filter_In0;  // sfix12
  input   signed [11:0] Filter_In1;  // sfix12
  input   signed [11:0] Filter_In2;  // sfix12
  input   signed [11:0] Filter_In3;  // sfix12
  output  signed [11:0] Filter_Out0;  // sfix12
  output  signed [11:0] Filter_Out1;  // sfix12
  output  signed [11:0] Filter_Out2;  // sfix12
  output  signed [11:0] Filter_Out3;  // sfix12

  reg [1:0] Unit_Delay7_out1;  // ufix2
  wire [1:0] Add1_out1;  // ufix2
  wire CT51_out1;
  wire CT12_out1;
  reg  Unit_Delay54_out1;
  wire Switch20_out1;
  wire Switch17_out1;
  wire Or3_out1;
  wire Switch208_out1;
  reg  Unit_Delay55_out1;
  wire CT70_out1;
  wire Or2_out1;
  wire [8:0] Switch83_out1;  // ufix9
  reg [8:0] Unit_Delay32_out1;  // ufix9
  wire [8:0] Add11_out1;  // ufix9
  wire Ro10_relop1;
  reg  Unit_Delay57_out1;
  wire Switch49_out1;
  wire Switch105_out1;
  reg  Unit_Delay1_out1;
  wire CT55_out1;
  wire CT57_out1;
  wire CT59_out1;
  wire CT61_out1;
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire switch_compare_1;
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] Switch84_out1;  // sfix12
  wire signed [11:0] Switch97_out1;  // sfix12
  wire [8:0] Add12_out1;  // ufix9
  wire signed [11:0] Simple_Dual_Port_RAM2_out1;  // sfix12
  wire switch_compare_1_1;
  wire signed [11:0] Switch98_out1;  // sfix12
  wire signed [19:0] Add7_stage2_1;  // sfix20
  wire signed [19:0] Add7_stage2_2;  // sfix20
  wire signed [19:0] Add7_op_stage2;  // sfix20
  wire CT60_out1;
  wire CT58_out1;
  wire CT56_out1;
  reg signed [18:0] Unit_Delay33_out1;  // sfix19
  wire signed [18:0] Switch79_out1;  // sfix19
  wire signed [18:0] Switch87_out1;  // sfix19
  wire signed [18:0] B24_out1_signal2;  // sfix19
  reg signed [18:0] Unit_Delay34_out1;  // sfix19
  wire signed [18:0] Switch89_out1;  // sfix19
  wire signed [18:0] B25_out1_signal2;  // sfix19
  reg signed [18:0] Unit_Delay35_out1;  // sfix19
  wire signed [18:0] Switch91_out1;  // sfix19
  wire signed [18:0] signal2;  // sfix19
  wire signed [18:0] s_3;  // sfix19
  wire signed [18:0] signal2_1;  // sfix19
  wire signed [18:0] s_4;  // sfix19
  wire signed [18:0] signal2_2;  // sfix19
  wire signed [18:0] s_5;  // sfix19
  reg signed [18:0] Unit_Delay30_out1;  // sfix19
  wire signed [18:0] signal2_3;  // sfix19
  wire signed [18:0] signal2_4;  // sfix19
  wire signed [18:0] signal2_5;  // sfix19
  wire signed [19:0] Add7_stage3_add_temp;  // sfix20
  wire signed [19:0] Add7_stage3_1;  // sfix20
  wire signed [18:0] Add7_out1;  // sfix19
  wire signed [18:0] Switch80_out1;  // sfix19
  wire [11:0] Bit_Slice6_out1;  // ufix12
  wire signed [11:0] Data_Type_S11_out1;  // sfix12
  wire [11:0] Bit_Slice1_out1;  // ufix12
  wire signed [11:0] Data_Type_S12_out1;  // sfix12
  wire [11:0] Bit_Slice2_out1;  // ufix12
  wire signed [11:0] Data_Type_S13_out1;  // sfix12
  wire [11:0] Bit_Slice3_out1;  // ufix12
  wire signed [11:0] Data_Type_S15_out1;  // sfix12


  assign Add1_out1 = 2'b01 + Unit_Delay7_out1;



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1 <= Add1_out1;
      end
    end



  assign CT51_out1 = Unit_Delay7_out1 == 2'b00;



  assign CT12_out1 = Unit_Delay7_out1 == 2'b00;



  assign Switch20_out1 = (Pulse == 1'b0 ? Unit_Delay54_out1 :
              1'b1);



  assign Switch17_out1 = (CT12_out1 == 1'b0 ? Switch20_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch17_out1;
      end
    end



  assign Or3_out1 = Pulse | Unit_Delay54_out1;



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Switch208_out1;
      end
    end



  assign Switch208_out1 = (CT12_out1 == 1'b0 ? Unit_Delay55_out1 :
              Or3_out1);



  assign CT70_out1 = Unit_Delay7_out1 == 2'b00;



  assign Or2_out1 = Switch208_out1 & CT70_out1;



  assign Switch83_out1 = (Switch208_out1 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  assign Add11_out1 = Switch83_out1 + Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 9'b000000000;
      end
      else begin
        Unit_Delay32_out1 <= Add11_out1;
      end
    end



  assign Ro10_relop1 = Unit_Delay32_out1 > Add11_out1;



  assign Switch49_out1 = (Ro10_relop1 == 1'b0 ? Unit_Delay57_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Switch49_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch105_out1;
      end
    end



  assign Switch105_out1 = (Or2_out1 == 1'b0 ? Unit_Delay1_out1 :
              Unit_Delay57_out1);



  assign CT55_out1 = Unit_Delay7_out1 == 2'b00;



  assign CT57_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT59_out1 = Unit_Delay7_out1 == 2'b10;



  assign CT61_out1 = Unit_Delay7_out1 == 2'b11;



  assign signal1 = (CT61_out1 == 1'b0 ? Filter_In3 :
              Filter_In3);



  assign s = signal1;

  assign signal1_1 = (CT59_out1 == 1'b0 ? s :
              Filter_In2);



  assign s_1 = signal1_1;

  assign signal1_2 = (CT57_out1 == 1'b0 ? s_1 :
              Filter_In1);



  assign s_2 = signal1_2;

  assign switch_compare_1 = Switch105_out1 > 1'b0;



  assign signal1_3 = (CT55_out1 == 1'b0 ? s_2 :
              Filter_In0);



  assign signal1_4 = signal1_3;

  assign signal1_5 = signal1_4;

  assign Switch84_out1 = (switch_compare_1 == 1'b0 ? 12'sb000000000000 :
              signal1_5);



  assign Switch97_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1);



  assign Add12_out1 = Add11_out1 + 9'b000000001;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(9),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch84_out1),
                                                               .wr_addr(Add11_out1),
                                                               .wr_en(Switch208_out1),
                                                               .rd_addr(Add12_out1),
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)
                                                               );

  assign switch_compare_1_1 = Switch105_out1 > 1'b0;



  assign Switch98_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1);



  assign Add7_stage2_1 = {{8{Switch97_out1[11]}}, Switch97_out1};
  assign Add7_stage2_2 = {{8{Switch98_out1[11]}}, Switch98_out1};
  assign Add7_op_stage2 = Add7_stage2_1 - Add7_stage2_2;



  assign CT60_out1 = Unit_Delay7_out1 == 2'b11;



  assign CT58_out1 = Unit_Delay7_out1 == 2'b10;



  assign CT56_out1 = Unit_Delay7_out1 == 2'b01;



  assign Switch87_out1 = (CT56_out1 == 1'b0 ? Unit_Delay33_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch87_out1;
      end
    end



  assign B24_out1_signal2 = Unit_Delay33_out1;

  assign Switch89_out1 = (CT58_out1 == 1'b0 ? Unit_Delay34_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay34_out1 <= Switch89_out1;
      end
    end



  assign B25_out1_signal2 = Unit_Delay34_out1;

  assign Switch91_out1 = (CT60_out1 == 1'b0 ? Unit_Delay35_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay35_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay35_out1 <= Switch91_out1;
      end
    end



  assign signal2 = (CT61_out1 == 1'b0 ? Unit_Delay35_out1 :
              Unit_Delay35_out1);



  assign s_3 = signal2;

  assign signal2_1 = (CT59_out1 == 1'b0 ? s_3 :
              B25_out1_signal2);



  assign s_4 = signal2_1;

  assign signal2_2 = (CT57_out1 == 1'b0 ? s_4 :
              B24_out1_signal2);



  assign s_5 = signal2_2;

  assign signal2_3 = (CT55_out1 == 1'b0 ? s_5 :
              Unit_Delay30_out1);



  assign signal2_4 = signal2_3;

  assign signal2_5 = signal2_4;

  assign Add7_stage3_1 = {signal2_5[18], signal2_5};
  assign Add7_stage3_add_temp = Add7_op_stage2 + Add7_stage3_1;
  assign Add7_out1 = Add7_stage3_add_temp[18:0];



  assign Switch79_out1 = (switch_compare_1_1 == 1'b0 ? 19'sb0000000000000000000 :
              Add7_out1);



  assign Switch80_out1 = (CT51_out1 == 1'b0 ? Unit_Delay30_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch80_out1;
      end
    end



  assign Bit_Slice6_out1 = Unit_Delay30_out1[18:7];



  assign Data_Type_S11_out1 = Bit_Slice6_out1;



  assign Filter_Out0 = Data_Type_S11_out1;

  assign Bit_Slice1_out1 = Unit_Delay33_out1[18:7];



  assign Data_Type_S12_out1 = Bit_Slice1_out1;



  assign Filter_Out1 = Data_Type_S12_out1;

  assign Bit_Slice2_out1 = Unit_Delay34_out1[18:7];



  assign Data_Type_S13_out1 = Bit_Slice2_out1;



  assign Filter_Out2 = Data_Type_S13_out1;

  assign Bit_Slice3_out1 = Unit_Delay35_out1[18:7];



  assign Data_Type_S15_out1 = Bit_Slice3_out1;



  assign Filter_Out3 = Data_Type_S15_out1;

endmodule  // AverFilterP128Ch4_V10

