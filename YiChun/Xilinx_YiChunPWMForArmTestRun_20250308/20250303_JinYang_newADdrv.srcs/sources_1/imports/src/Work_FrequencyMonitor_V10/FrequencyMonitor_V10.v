// -------------------------------------------------------------
// 
// File Name: Work_FrequencyMonitor_V10\FrequencyMonitor_V10\FrequencyMonitor_V10.v
// Created: 2017-05-23 13:47:40
// 
// Generated by MATLAB 8.6 and HDL Coder 3.7
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FrequencyMonitor_V10
// Source Path: FrequencyMonitor_V10/FrequencyMonitor_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FrequencyMonitor_V10
          (
           g_clk,
           Rst_n,
           Pulse_4096Hz,
           Monitor_Reset,
           In0,
           Reference0,
           Delay0,
           In1,
           Reference1,
           Delay1,
           In2,
           Reference2,
           Delay2,
           In3,
           Reference3,
           Delay3,
           In4,
           Reference4,
           Delay4,
           In5,
           Reference5,
           Delay5,
           Out0,
           Out1,
           Out2,
           Out3,
           Out4,
           Out5
          );


  input   g_clk;
  input   Rst_n;
  input   Pulse_4096Hz;
  input   Monitor_Reset;
  input   signed [15:0] In0;  // int16
  input   signed [15:0] Reference0;  // int16
  input   signed [15:0] Delay0;  // int16
  input   signed [15:0] In1;  // int16
  input   signed [15:0] Reference1;  // int16
  input   signed [15:0] Delay1;  // int16
  input   signed [15:0] In2;  // int16
  input   signed [15:0] Reference2;  // int16
  input   signed [15:0] Delay2;  // int16
  input   signed [15:0] In3;  // int16
  input   signed [15:0] Reference3;  // int16
  input   signed [15:0] Delay3;  // int16
  input   signed [15:0] In4;  // int16
  input   signed [15:0] Reference4;  // int16
  input   signed [15:0] Delay4;  // int16
  input   signed [15:0] In5;  // int16
  input   signed [15:0] Reference5;  // int16
  input   signed [15:0] Delay5;  // int16
  output  Out0;
  output  Out1;
  output  Out2;
  output  Out3;
  output  Out4;
  output  Out5;


  reg [2:0] Unit_Delay43_out1;  // ufix3
  wire [2:0] Add1_out1;  // ufix3
  wire CT41_out1;
  wire CT1_out1;
  reg  Unit_Delay4_out1;
  wire Switch4_out1;
  wire Switch1_out1;
  wire Or2_out1;
  wire Switch5_out1;
  reg  Unit_Delay6_out1;
  wire CT207_out1;
  reg  Unit_Delay121_out1;
  wire Switch308_out1;
  wire Switch307_out1;
  wire Or1_out1;
  wire Switch309_out1;
  reg  Unit_Delay122_out1;
  wire CT2_out1;
  wire CT4_out1;
  wire CT3_out1;
  wire CT8_out1;
  wire CT5_out1;
  wire signed [15:0] signal1;  // int16
  wire signed [15:0] s;  // int16
  wire signed [15:0] signal1_1;  // int16
  wire signed [15:0] s_1;  // int16
  wire signed [15:0] signal1_2;  // int16
  wire signed [15:0] s_2;  // int16
  wire signed [15:0] signal1_3;  // int16
  wire signed [15:0] s_3;  // int16
  wire signed [15:0] signal1_4;  // int16
  wire signed [15:0] s_4;  // int16
  wire signed [15:0] signal2;  // int16
  wire signed [15:0] s_5;  // int16
  wire signed [15:0] signal2_1;  // int16
  wire signed [15:0] s_6;  // int16
  wire signed [15:0] signal2_2;  // int16
  wire signed [15:0] s_7;  // int16
  wire signed [15:0] signal2_3;  // int16
  wire signed [15:0] s_8;  // int16
  wire signed [15:0] signal2_4;  // int16
  wire signed [15:0] s_9;  // int16
  wire signed [15:0] signal1_5;  // int16
  wire signed [15:0] signal1_6;  // int16
  wire signed [15:0] signal1_7;  // int16
  wire signed [15:0] signal2_5;  // int16
  wire signed [15:0] signal2_6;  // int16
  wire signed [15:0] signal2_7;  // int16
  wire Dy1_relop1;
  wire signed [15:0] Switch11_out1;  // int16
  wire signed [15:0] Switch3_out1;  // int16
  wire signed [15:0] signal3;  // int16
  wire signed [15:0] s_10;  // int16
  wire signed [15:0] signal3_1;  // int16
  wire signed [15:0] s_11;  // int16
  wire signed [15:0] signal3_2;  // int16
  wire signed [15:0] s_12;  // int16
  wire signed [15:0] signal3_3;  // int16
  wire signed [15:0] s_13;  // int16
  wire signed [15:0] signal3_4;  // int16
  wire signed [15:0] s_14;  // int16
  wire signed [15:0] signal3_5;  // int16
  wire signed [15:0] signal3_6;  // int16
  wire signed [15:0] signal3_7;  // int16
  reg signed [15:0] Unit_Delay22_out1;  // int16
  wire signed [15:0] Switch27_out1;  // int16
  wire signed [15:0] Switch46_out1;  // int16
  reg signed [15:0] Unit_Delay7_out1;  // int16
  wire signed [15:0] Switch7_out1;  // int16
  wire signed [15:0] Bus_Creator1_out1_signal4;  // int16
  reg signed [15:0] Unit_Delay9_out1;  // int16
  wire signed [15:0] Switch10_out1;  // int16
  wire signed [15:0] Bus_Creator3_out1_signal4;  // int16
  reg signed [15:0] Unit_Delay71_out1;  // int16
  wire signed [15:0] Switch14_out1;  // int16
  wire signed [15:0] Bus_Creator2_out1_signal4;  // int16
  reg signed [15:0] Unit_Delay93_out1;  // int16
  wire signed [15:0] Switch22_out1;  // int16
  wire signed [15:0] Bus_Creator5_out1_signal4;  // int16
  reg signed [15:0] Unit_Delay11_out1;  // int16
  wire signed [15:0] Bus_Creator4_out1_signal4;  // int16
  wire CT10_out1;
  wire signed [15:0] Switch2_out1;  // int16
  wire signed [15:0] Switch28_out1;  // int16
  wire Dy2_relop1;
  wire signed [15:0] Switch25_out1;  // int16
  wire signed [15:0] Bus_Creator4_out1_signal4_1;  // int16
  wire signed [15:0] signal4;  // int16
  wire signed [15:0] s_15;  // int16
  wire signed [15:0] signal4_1;  // int16
  wire signed [15:0] s_16;  // int16
  wire signed [15:0] signal4_2;  // int16
  wire signed [15:0] s_17;  // int16
  wire signed [15:0] signal4_3;  // int16
  wire signed [15:0] s_18;  // int16
  wire signed [15:0] signal4_4;  // int16
  wire signed [15:0] s_19;  // int16
  wire signed [15:0] signal4_5;  // int16
  wire signed [15:0] signal4_6;  // int16
  wire signed [15:0] signal4_7;  // int16
  wire signed [15:0] Add3_out1;  // int16
  reg  Unit_Delay8_out1;
  wire Switch30_out1;
  wire Switch8_out1;
  wire Bus_Creator1_out1_signal5;
  reg  Unit_Delay60_out1;
  wire Switch12_out1;
  wire Bus_Creator3_out1_signal5;
  reg  Unit_Delay82_out1;
  wire Switch15_out1;
  wire Bus_Creator2_out1_signal5;
  reg  Unit_Delay10_out1;
  wire Switch23_out1;
  wire Bus_Creator5_out1_signal5;
  reg  Unit_Delay12_out1;
  wire Bus_Creator4_out1_signal5;
  wire Switch26_out1;
  wire Bus_Creator4_out1_signal5_1;
  wire signal5;
  wire s_20;
  wire signal5_1;
  wire s_21;
  wire signal5_2;
  wire s_22;
  wire signal5_3;
  wire s_23;
  wire signal5_4;
  wire s_24;
  reg  Unit_Delay23_out1;
  wire signal5_5;
  wire signal5_6;
  wire signal5_7;
  wire Switch29_out1;
  wire Switch47_out1;


  assign Add1_out1 = 3'b001 + Unit_Delay43_out1;



  always @(posedge g_clk)
    begin : Unit_Delay43_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1 <= 3'b000;
      end
      else begin
        Unit_Delay43_out1 <= Add1_out1;
      end
    end



  assign CT41_out1 = Unit_Delay43_out1 == 3'b000;



  assign CT1_out1 = Unit_Delay43_out1 == 3'b000;



  assign Switch4_out1 = (Monitor_Reset == 1'b0 ? Unit_Delay4_out1 :
              1'b1);



  assign Switch1_out1 = (CT1_out1 == 1'b0 ? Switch4_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 1'b0;
      end
      else begin
        Unit_Delay4_out1 <= Switch1_out1;
      end
    end



  assign Or2_out1 = Monitor_Reset | Unit_Delay4_out1;



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 1'b0;
      end
      else begin
        Unit_Delay6_out1 <= Switch5_out1;
      end
    end



  assign Switch5_out1 = (CT1_out1 == 1'b0 ? Unit_Delay6_out1 :
              Or2_out1);



  assign CT207_out1 = Unit_Delay43_out1 == 3'b000;



  assign Switch308_out1 = (Pulse_4096Hz == 1'b0 ? Unit_Delay121_out1 :
              1'b1);



  assign Switch307_out1 = (CT207_out1 == 1'b0 ? Switch308_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay121_process
      if (Rst_n == 1'b0) begin
        Unit_Delay121_out1 <= 1'b0;
      end
      else begin
        Unit_Delay121_out1 <= Switch307_out1;
      end
    end



  assign Or1_out1 = Pulse_4096Hz | Unit_Delay121_out1;



  always @(posedge g_clk)
    begin : Unit_Delay122_process
      if (Rst_n == 1'b0) begin
        Unit_Delay122_out1 <= 1'b0;
      end
      else begin
        Unit_Delay122_out1 <= Switch309_out1;
      end
    end



  assign Switch309_out1 = (CT207_out1 == 1'b0 ? Unit_Delay122_out1 :
              Or1_out1);



  assign CT2_out1 = Unit_Delay43_out1 == 3'b001;



  assign CT4_out1 = Unit_Delay43_out1 == 3'b010;



  assign CT3_out1 = Unit_Delay43_out1 == 3'b011;



  assign CT8_out1 = Unit_Delay43_out1 == 3'b100;



  assign CT5_out1 = Unit_Delay43_out1 == 3'b101;



  assign signal1 = (CT5_out1 == 1'b0 ? In5 :
              In5);



  assign s = signal1;

  assign signal1_1 = (CT8_out1 == 1'b0 ? s :
              In4);



  assign s_1 = signal1_1;

  assign signal1_2 = (CT3_out1 == 1'b0 ? s_1 :
              In3);



  assign s_2 = signal1_2;

  assign signal1_3 = (CT4_out1 == 1'b0 ? s_2 :
              In2);



  assign s_3 = signal1_3;

  assign signal1_4 = (CT2_out1 == 1'b0 ? s_3 :
              In1);



  assign s_4 = signal1_4;

  assign signal2 = (CT5_out1 == 1'b0 ? Reference5 :
              Reference5);



  assign s_5 = signal2;

  assign signal2_1 = (CT8_out1 == 1'b0 ? s_5 :
              Reference4);



  assign s_6 = signal2_1;

  assign signal2_2 = (CT3_out1 == 1'b0 ? s_6 :
              Reference3);



  assign s_7 = signal2_2;

  assign signal2_3 = (CT4_out1 == 1'b0 ? s_7 :
              Reference2);



  assign s_8 = signal2_3;

  assign signal2_4 = (CT2_out1 == 1'b0 ? s_8 :
              Reference1);



  assign s_9 = signal2_4;

  assign signal1_5 = (CT41_out1 == 1'b0 ? s_4 :
              In0);



  assign signal1_6 = signal1_5;

  assign signal1_7 = signal1_6;

  assign signal2_5 = (CT41_out1 == 1'b0 ? s_9 :
              Reference0);



  assign signal2_6 = signal2_5;

  assign signal2_7 = signal2_6;

  assign Dy1_relop1 = signal1_7 > signal2_7;



  assign Switch11_out1 = (Dy1_relop1 == 1'b0 ? 16'sb1111111111111111 :
              16'sb0000000000000001);



  assign Switch3_out1 = (Switch309_out1 == 1'b0 ? 16'sb0000000000000000 :
              Switch11_out1);



  assign signal3 = (CT5_out1 == 1'b0 ? Delay5 :
              Delay5);



  assign s_10 = signal3;

  assign signal3_1 = (CT8_out1 == 1'b0 ? s_10 :
              Delay4);



  assign s_11 = signal3_1;

  assign signal3_2 = (CT3_out1 == 1'b0 ? s_11 :
              Delay3);



  assign s_12 = signal3_2;

  assign signal3_3 = (CT4_out1 == 1'b0 ? s_12 :
              Delay2);



  assign s_13 = signal3_3;

  assign signal3_4 = (CT2_out1 == 1'b0 ? s_13 :
              Delay1);



  assign s_14 = signal3_4;

  assign signal3_5 = (CT41_out1 == 1'b0 ? s_14 :
              Delay0);



  assign signal3_6 = signal3_5;

  assign signal3_7 = signal3_6;

  assign Switch46_out1 = (CT41_out1 == 1'b0 ? Unit_Delay22_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch46_out1;
      end
    end



  assign Switch7_out1 = (CT2_out1 == 1'b0 ? Unit_Delay7_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay7_out1 <= Switch7_out1;
      end
    end



  assign Bus_Creator1_out1_signal4 = Unit_Delay7_out1;

  assign Switch10_out1 = (CT4_out1 == 1'b0 ? Unit_Delay9_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch10_out1;
      end
    end



  assign Bus_Creator3_out1_signal4 = Unit_Delay9_out1;

  assign Switch14_out1 = (CT3_out1 == 1'b0 ? Unit_Delay71_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay71_process
      if (Rst_n == 1'b0) begin
        Unit_Delay71_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay71_out1 <= Switch14_out1;
      end
    end



  assign Bus_Creator2_out1_signal4 = Unit_Delay71_out1;

  assign Switch22_out1 = (CT8_out1 == 1'b0 ? Unit_Delay93_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay93_process
      if (Rst_n == 1'b0) begin
        Unit_Delay93_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay93_out1 <= Switch22_out1;
      end
    end



  assign Bus_Creator5_out1_signal4 = Unit_Delay93_out1;

  assign Bus_Creator4_out1_signal4 = Unit_Delay11_out1;

  assign Switch28_out1 = (CT10_out1 == 1'b0 ? Switch2_out1 :
              16'sb0000000000000000);



  assign Dy2_relop1 = Switch28_out1 >= signal3_7;



  assign Switch27_out1 = (Dy2_relop1 == 1'b0 ? Switch28_out1 :
              signal3_7);



  assign Switch25_out1 = (CT5_out1 == 1'b0 ? Unit_Delay11_out1 :
              Switch27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch25_out1;
      end
    end



  assign Bus_Creator4_out1_signal4_1 = Unit_Delay11_out1;

  assign signal4 = (CT5_out1 == 1'b0 ? Bus_Creator4_out1_signal4_1 :
              Bus_Creator4_out1_signal4);



  assign s_15 = signal4;

  assign signal4_1 = (CT8_out1 == 1'b0 ? s_15 :
              Bus_Creator5_out1_signal4);



  assign s_16 = signal4_1;

  assign signal4_2 = (CT3_out1 == 1'b0 ? s_16 :
              Bus_Creator2_out1_signal4);



  assign s_17 = signal4_2;

  assign signal4_3 = (CT4_out1 == 1'b0 ? s_17 :
              Bus_Creator3_out1_signal4);



  assign s_18 = signal4_3;

  assign signal4_4 = (CT2_out1 == 1'b0 ? s_18 :
              Bus_Creator1_out1_signal4);



  assign s_19 = signal4_4;

  assign signal4_5 = (CT41_out1 == 1'b0 ? s_19 :
              Unit_Delay22_out1);



  assign signal4_6 = signal4_5;

  assign signal4_7 = signal4_6;

  assign Add3_out1 = Switch3_out1 + signal4_7;



  assign Switch2_out1 = (Switch5_out1 == 1'b0 ? Add3_out1 :
              16'sb1111111111111111);



  assign CT10_out1 = Switch2_out1 <= 16'sb0000000000000000;



  assign Switch8_out1 = (CT2_out1 == 1'b0 ? Unit_Delay8_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 1'b0;
      end
      else begin
        Unit_Delay8_out1 <= Switch8_out1;
      end
    end



  assign Bus_Creator1_out1_signal5 = Unit_Delay8_out1;

  assign Switch12_out1 = (CT4_out1 == 1'b0 ? Unit_Delay60_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay60_process
      if (Rst_n == 1'b0) begin
        Unit_Delay60_out1 <= 1'b0;
      end
      else begin
        Unit_Delay60_out1 <= Switch12_out1;
      end
    end



  assign Bus_Creator3_out1_signal5 = Unit_Delay60_out1;

  assign Switch15_out1 = (CT3_out1 == 1'b0 ? Unit_Delay82_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay82_process
      if (Rst_n == 1'b0) begin
        Unit_Delay82_out1 <= 1'b0;
      end
      else begin
        Unit_Delay82_out1 <= Switch15_out1;
      end
    end



  assign Bus_Creator2_out1_signal5 = Unit_Delay82_out1;

  assign Switch23_out1 = (CT8_out1 == 1'b0 ? Unit_Delay10_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 1'b0;
      end
      else begin
        Unit_Delay10_out1 <= Switch23_out1;
      end
    end



  assign Bus_Creator5_out1_signal5 = Unit_Delay10_out1;

  assign Bus_Creator4_out1_signal5 = Unit_Delay12_out1;

  assign Switch26_out1 = (CT5_out1 == 1'b0 ? Unit_Delay12_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 1'b0;
      end
      else begin
        Unit_Delay12_out1 <= Switch26_out1;
      end
    end



  assign Bus_Creator4_out1_signal5_1 = Unit_Delay12_out1;

  assign signal5 = (CT5_out1 == 1'b0 ? Bus_Creator4_out1_signal5_1 :
              Bus_Creator4_out1_signal5);



  assign s_20 = signal5;

  assign signal5_1 = (CT8_out1 == 1'b0 ? s_20 :
              Bus_Creator5_out1_signal5);



  assign s_21 = signal5_1;

  assign signal5_2 = (CT3_out1 == 1'b0 ? s_21 :
              Bus_Creator2_out1_signal5);



  assign s_22 = signal5_2;

  assign signal5_3 = (CT4_out1 == 1'b0 ? s_22 :
              Bus_Creator3_out1_signal5);



  assign s_23 = signal5_3;

  assign signal5_4 = (CT2_out1 == 1'b0 ? s_23 :
              Bus_Creator1_out1_signal5);



  assign s_24 = signal5_4;

  assign signal5_5 = (CT41_out1 == 1'b0 ? s_24 :
              Unit_Delay23_out1);



  assign signal5_6 = signal5_5;

  assign signal5_7 = signal5_6;

  assign Switch29_out1 = (Dy2_relop1 == 1'b0 ? signal5_7 :
              1'b1);



  assign Switch30_out1 = (CT10_out1 == 1'b0 ? Switch29_out1 :
              1'b0);



  assign Switch47_out1 = (CT41_out1 == 1'b0 ? Unit_Delay23_out1 :
              Switch30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 1'b0;
      end
      else begin
        Unit_Delay23_out1 <= Switch47_out1;
      end
    end



  assign Out0 = Unit_Delay23_out1;

  assign Out1 = Unit_Delay8_out1;

  assign Out2 = Unit_Delay60_out1;

  assign Out3 = Unit_Delay82_out1;

  assign Out4 = Unit_Delay10_out1;

  assign Out5 = Unit_Delay12_out1;

endmodule  // FrequencyMonitor_V10

