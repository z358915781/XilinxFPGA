// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\GridPll_V23_3\GridPll_V23_3.v
// Created: 2024-04-19 01:39:28
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.2207e-05
// Target subsystem base rate: 1.2207e-05
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: GridPll_V23_3
// Source Path: GridPll_V23_3/GridPll_V23_3
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module GridPll_V23_3
          (
           g_clk,
           Rst_n,
           Uuv_b12,
           Uvw_b12,
           Uwu_b12,
           Um_ref_b12,
           Wref_add_b18,
           PLL_Kp_b12,
           PLL_Ki_b12,
           Sinwt_b12,
           Coswt_b12,
           PLL_Kdiff_b16,
           PLL_Kx_b16,
           PLL_Ky_b16,
           Freq_Droop_b16,
           Pulse_4096Hz,
           DY11_En,
           Simu_On,
           VolLoop_En,
           Um_Droop_b12,
           Zvrting,
           PLLRcvPluse,
           SDQEn,
           dw18Lmt_b18,
           KOut_s12,
           Kin_s12,
           Um_s12,
           PLL_Fre,
           WtLoad,
           WtLoadOffset,
           EnNoPLL,
           Flt,
           ERR,
           wt_b13,
           w_b18,
           wt_b35,
           Udp_b12,
           Uqp_b12,
           Udn_b12,
           Uqn_b12,
           Delta_w_b16,
           dwdt_b16,
           Pulse50x1_Hz,
           Pulse50x16_Hz,
           Pulse50x32_Hz,
           Pulse50x64_Hz,
           Pulse50x128_Hz,
           Pulse50x256_Hz,
           Pulse50x512_Hz,
           Pulse50x1024_Hz,
           Delta_wIq_b12,
			  Switch3_out1
          );



  input   g_clk;
  input   Rst_n;
  output   signed [11:0] Switch3_out1;  // sfix12
  input   signed [11:0] Uuv_b12;  // sfix12
  input   signed [11:0] Uvw_b12;  // sfix12
  input   signed [11:0] Uwu_b12;  // sfix12
  input   signed [11:0] Um_ref_b12;  // sfix12
  input   signed [17:0] Wref_add_b18;  // sfix18
  input   signed [11:0] PLL_Kp_b12;  // sfix12
  input   signed [11:0] PLL_Ki_b12;  // sfix12
  input   signed [11:0] Sinwt_b12;  // sfix12
  input   signed [11:0] Coswt_b12;  // sfix12
  input   signed [15:0] PLL_Kdiff_b16;  // int16
  input   signed [15:0] PLL_Kx_b16;  // int16
  input   signed [15:0] PLL_Ky_b16;  // int16
  input   signed [15:0] Freq_Droop_b16;  // int16
  input   Pulse_4096Hz;
  input   DY11_En;
  input   Simu_On;
  input   VolLoop_En;
  input   signed [11:0] Um_Droop_b12;  // sfix12
  input   Zvrting;
  input   PLLRcvPluse;
  input   SDQEn;
  input   signed [17:0] dw18Lmt_b18;  // sfix18
  input   signed [11:0] KOut_s12;  // sfix12
  input   signed [11:0] Kin_s12;  // sfix12
  input   signed [11:0] Um_s12;  // sfix12
  input   [15:0] PLL_Fre;  // uint16
  input   WtLoad;
  input   [12:0] WtLoadOffset;  // ufix13
  input   EnNoPLL;
  input   Flt;
  input   ERR;
  output  [12:0] wt_b13;  // ufix13
  output  signed [17:0] w_b18;  // sfix18
  output  [34:0] wt_b35;  // ufix35
  output  signed [11:0] Udp_b12;  // sfix12
  output  signed [11:0] Uqp_b12;  // sfix12
  output  signed [11:0] Udn_b12;  // sfix12
  output  signed [11:0] Uqn_b12;  // sfix12
  output  signed [15:0] Delta_w_b16;  // int16
  output  signed [15:0] dwdt_b16;  // int16
  output  Pulse50x1_Hz;
  output  Pulse50x16_Hz;
  output  Pulse50x32_Hz;
  output  Pulse50x64_Hz;
  output  Pulse50x128_Hz;
  output  Pulse50x256_Hz;
  output  Pulse50x512_Hz;
  output  Pulse50x1024_Hz;
  output  signed [11:0] Delta_wIq_b12;  // sfix12

  reg [6:0] Unit_Delay5_out1;  // ufix7
  wire [6:0] Add12_out1;  // ufix7
  wire CT97_out1;
  wire [6:0] Switch126_out1;  // ufix7
  wire CT13_out1;
  wire CT23_out1;
  wire CT29_out1;
  wire CT31_out1;
  wire CT33_out1;
  wire CT39_out1;
  wire CT41_out1;
  wire CT12_out1;
  wire CT20_out1;
  wire CT5_out1;
  wire CT21_out1;
  wire CT15_out1;
  wire CT18_out1;
  wire signed [23:0] Product2_mul_temp;  // sfix24
  wire signed [35:0] Product2_out1;  // sfix36
  wire [24:0] Bit_Slice16_out1;  // ufix25
  wire signed [24:0] Data_Type_Conversion9_out1;  // sfix25
  wire RO3_relop1;
  wire signed [24:0] Constant20_out1_dtc;  // sfix25
  wire signed [24:0] Switch7_out1;  // sfix25
  wire RO21_relop1;
  wire signed [24:0] Constant10_out1_dtc;  // sfix25
  wire signed [11:0] Data_Type_Conversion13_out1;  // sfix12
  wire signed [23:0] Product1_mul_temp;  // sfix24
  wire signed [35:0] Product_out1;  // sfix36
  wire [24:0] Bit_Slice10_out1;  // ufix25
  wire signed [24:0] Data_Type_Conversion2_out1;  // sfix25
  wire RO6_relop1;
  wire signed [24:0] Constant19_out1_dtc;  // sfix25
  wire signed [24:0] Switch41_out1;  // sfix25
  wire RO11_relop1;
  wire signed [24:0] Constant18_out1_dtc;  // sfix25
  wire signed [24:0] Switch5_out1;  // sfix25
  wire signed [11:0] Data_Type_Conversion10_out1;  // sfix12
  wire signed [12:0] Unary_Minus2_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1;  // sfix12
  wire signed [24:0] Switch1_out1;  // sfix25
  wire signed [11:0] Data_Type_Conversion6_out1;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire signed [11:0] signal3;  // sfix12
  wire signed [11:0] signal3_1;  // sfix12
  wire signed [11:0] signal3_2;  // sfix12
  wire Or3_out1;
  wire CT4_out1;
  wire CT19_out1;
  wire CT123_out1;
  reg  Unit_Delay52_out1;
  wire Switch124_out1;
  wire Switch123_out1;
  wire Or1_out1;
  wire Switch125_out1;
  reg  Unit_Delay53_out1;
  wire Or5_out1;
  wire CT11_out1;
  wire Or6_out1;
  wire CT22_out1;
  wire Or7_out1;
  wire CT25_out1;
  wire Or8_out1;
  wire CT37_out1;
  wire Or9_out1;
  wire CT26_out1;
  wire CT6_out1;
  wire CT44_out1;
  reg  Unit_Delay7_out1;  // ufix1
  wire [8:0] Add11_add_temp;  // ufix9
  wire Add1_out1;  // ufix1
  wire CT51_out1;
  wire CT12_out1_1;
  wire CT70_out1;
  wire CT55_out1;
  wire CT57_out1;
  reg [6:0] Unit_Delay38_out1;  // ufix7
  wire [6:0] Add12_out1_1;  // ufix7
  wire CT97_out1_1;
  wire [6:0] Switch126_out1_1;  // ufix7
  wire CT99_out1;
  wire CT58_out1;
  wire CT5_out1_1;
  wire CT1_out1;
  wire CT3_out1;
  wire CT2_out1;
  wire CT7_out1;
  wire CT4_out1_1;
  wire CT47_out1;
  wire CT48_out1;
  wire CT49_out1;
  wire CT50_out1;
  wire CT51_out1_1;
  wire CT52_out1;
  wire CT53_out1;
  wire CT54_out1;
  wire CT33_out1_1;
  wire CT90_out1;
  wire CT30_out1;
  wire CT32_out1;
  wire CT34_out1;
  wire CT16_out1;
  wire CT13_out1_1;
  reg [1:0] Unit_Delay10_out1;  // ufix2
  wire [1:0] Add1_out1_1;  // ufix2
  wire CT35_out1;
  wire CT24_out1;
  wire CT36_out1;
  wire CT38_out1;
  wire CT37_out1_1;
  wire CT31_out1_1;
  wire CT29_out1_1;
  wire CT89_out1;
  wire CT98_out1;
  wire signed [11:0] Switch107_out1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1;  // sfix12
  wire signed [11:0] Switch107_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_3;  // sfix12
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] Switch107_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_4;  // sfix12
  wire signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [12:0] Unary_Minus5_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [12:0] Unary_Minus4_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] Switch106_out1;  // sfix12
  wire signed [11:0] signal2_8;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  wire signed [11:0] Switch105_out1;  // sfix12
  wire signed [11:0] signal2_9;  // sfix12
  wire signed [11:0] s_9;  // sfix12
  wire signed [11:0] Switch104_out1;  // sfix12
  wire signed [11:0] signal2_10;  // sfix12
  wire signed [11:0] s_10;  // sfix12
  wire signed [11:0] Switch103_out1;  // sfix12
  wire signed [11:0] signal2_11;  // sfix12
  wire signed [11:0] s_11;  // sfix12
  wire signed [11:0] Switch102_out1;  // sfix12
  wire signed [11:0] signal2_12;  // sfix12
  wire signed [11:0] s_12;  // sfix12
  wire signed [11:0] Switch101_out1;  // sfix12
  wire signal3_3;
  wire s_13;
  wire signal3_4;
  wire s_14;
  wire signal3_5;
  wire s_15;
  wire signal3_6;
  wire s_16;
  wire signal3_7;
  wire s_17;
  wire signal3_8;
  wire s_18;
  wire signal3_9;
  wire s_19;
  wire signal3_10;
  wire s_20;
  wire signal3_11;
  wire s_21;
  wire signal3_12;
  wire s_22;
  wire signal3_13;
  wire s_23;
  wire signal3_14;
  wire s_24;
  wire signal3_15;
  wire s_25;
  wire signal3_16;
  wire signal3_17;
  wire signal3_18;
  wire signed [11:0] signal2_13;  // sfix12
  wire signed [11:0] signal2_14;  // sfix12
  wire signed [11:0] signal2_15;  // sfix12
  wire signed [24:0] Constant9_out1_dtc;  // sfix25
  wire signed [24:0] Constant2_out1_dtc;  // sfix25
  wire signed [24:0] Constant1_out1_dtc;  // sfix25
  wire CT57_out1_1;
  wire CT56_out1;
  wire signed [24:0] Constant14_out1_dtc;  // sfix25
  wire signed [24:0] Constant13_out1_dtc;  // sfix25
  wire signed [12:0] Abs_y;  // sfix13
  wire signed [11:0] Abs_out1;  // sfix12
  wire signed [23:0] Mpyb28_2_mul_temp;  // sfix24
  wire signed [27:0] Mpyb28_2_out1;  // sfix28
  wire [12:0] Bit_Slice6_out1;  // ufix13
  wire signed [12:0] Data_Type_S10_out1;  // sfix13
  wire signed [23:0] RO28_1_1;  // sfix24
  wire RO28_relop1;
  wire signed [23:0] Data_Type_S10_out1_dtc;  // sfix24
  wire signed [23:0] Switch104_out1_1;  // sfix24
  wire RO27_relop1;
  wire signed [23:0] Switch131_out1;  // sfix24
  wire signed [11:0] Data_Type_Conversion24_out1;  // sfix12
  wire Ro11_relop1_1;
  wire signed [23:0] Mpyb28_1_mul_temp;  // sfix24
  wire signed [27:0] Mpyb28_1_out1;  // sfix28
  wire [12:0] Bit_Slice1_out1;  // ufix13
  wire signed [12:0] Data_Type_S1_out1;  // sfix13
  wire signed [23:0] RO2_1_1;  // sfix24
  wire RO2_relop1;
  wire signed [23:0] Data_Type_S1_out1_dtc;  // sfix24
  wire signed [23:0] Switch1_out1_1;  // sfix24
  wire RO1_relop1;
  wire signed [23:0] Switch2_out1;  // sfix24
  wire signed [11:0] Data_Type_Conversion1_out1;  // sfix12
  wire Ro12_relop1;
  wire Switch234_out1;
  reg  Unit_Delay112_out1;
  wire Switch235_out1;
  wire Or5_out1_1;
  wire Logical_3_out1;
  wire signed [11:0] Add5_out1;  // sfix12
  wire signed [11:0] SW10_out1;  // sfix12
  reg signed [11:0] Delay6_out1;  // sfix12
  wire RO51_relop1;
  wire Logical_7_out1;
  wire signed [11:0] SW9_out1;  // sfix12
  wire signed [11:0] Switch4_out1_1;  // sfix12
  wire signed [11:0] signal2_16;  // sfix12
  wire signed [11:0] s_26;  // sfix12
  wire Logical_1_out1;
  wire signed [11:0] Add1_out1_2;  // sfix12
  wire signed [11:0] SW8_out1;  // sfix12
  reg signed [11:0] Delay4_out1;  // sfix12
  wire RO71_relop1;
  wire Logical_6_out1;
  wire signed [11:0] SW4_out1;  // sfix12
  wire signed [11:0] Switch3_out1;  // sfix12
  wire signed [11:0] signal2_17;  // sfix12
  wire signed [11:0] signal2_18;  // sfix12
  wire signed [23:0] Data_Type_Conversion4_out1;  // sfix24
  wire Compare_To_Constant5_out1;
  wire Compare_To_Constant3_out1;
  wire [23:0] Switch84_out1;  // ufix24
  reg [23:0] Unit_Delay51_out1;  // ufix24
  wire [23:0] bit_shift0_out1;  // ufix24
  wire Compare_To_Constant4_out1;
  wire CT3_out1_1;
  wire Or4_out1;
  wire CT42_out1;
  wire CT34_out1_1;
  wire CT32_out1_1;
  wire CT24_out1_1;
  wire CT16_out1_1;
  reg signed [31:0] s1z5_out1;  // int32
  wire signed [31:0] signal2_19;  // int32
  wire signed [31:0] signal2_20;  // int32
  wire signed [31:0] signal3_19;  // int32
  wire signed [31:0] s_27;  // int32
  reg signed [31:0] s1z5_out1_1;  // int32
  wire signed [31:0] signal2_21;  // int32
  wire signed [31:0] signal2_22;  // int32
  wire signed [31:0] signal3_20;  // int32
  wire signed [31:0] signal3_21;  // int32
  wire signed [31:0] s_28;  // int32
  reg signed [31:0] s1z5_out1_2;  // int32
  wire signed [31:0] signal2_23;  // int32
  wire signed [31:0] signal2_24;  // int32
  wire signed [31:0] signal3_22;  // int32
  wire signed [31:0] signal3_23;  // int32
  wire signed [31:0] s_29;  // int32
  reg signed [31:0] s1z5_out1_3;  // int32
  wire signed [31:0] signal2_25;  // int32
  wire signed [31:0] signal2_26;  // int32
  wire signed [31:0] Bus_Creator3_out1_signal3;  // int32
  wire signed [47:0] Constant8_out1_dtc;  // sfix48
  wire signed [47:0] Constant5_out1_dtc;  // sfix48
  wire signed [17:0] signal4;  // sfix18
  wire signed [17:0] signal4_1;  // sfix18
  wire signed [17:0] signal4_2;  // sfix18
  wire signed [18:0] signal4_dtc;  // sfix19
  wire signed [18:0] UM_5_in0;  // sfix19
  wire signed [17:0] UM_5_out1;  // sfix18
  wire signed [17:0] signal5;  // sfix18
  wire signed [17:0] signal5_1;  // sfix18
  wire signed [17:0] signal5_2;  // sfix18
  wire signed [15:0] signal5_dtc;  // int16
  wire switch_compare_1;
  wire CT14_out1;
  wire CT40_out1;
  wire CT30_out1_1;
  wire signed [47:0] Constant1_out1_dtc_1;  // sfix48
  wire signed [47:0] Constant12_out1_dtc;  // sfix48
  wire signed [31:0] Constant29_out1_dtc;  // int32
  wire signed [31:0] Constant28_out1_dtc;  // int32
  wire Log1_out1;
  reg  Unit_Delay1_out1;
  wire Log3_out1;
  wire CT7_out1_1;
  wire Log2_out1;
  wire CT84_out1;
  wire [15:0] Switch138_out1;  // uint16
  wire [15:0] Add14_out1;  // uint16
  reg [15:0] Unit_Delay61_out1;  // uint16
  wire Relational_Operator9_relop1;
  wire [8:0] Switch8_out1;  // ufix9
  wire [8:0] Add7_out1;  // ufix9
  reg [8:0] Unit_Delay3_out1;  // ufix9
  wire [8:0] Add11_out1;  // ufix9
  wire [34:0] Switch9_out1;  // ufix35
  wire [34:0] RAM512_out1;  // ufix35
  wire [35:0] Add13_add_temp;  // ufix36
  wire [12:0] Add13_out1;  // ufix13
  wire [34:0] Add13_out1_dtc;  // ufix35
  wire [34:0] Add3_out1;  // ufix35
  reg [34:0] Unit_Delay20_out1;  // ufix35
  wire signed [17:0] Data_Type_Conversion11_out1;  // sfix18
  wire signed [35:0] Gain_out1;  // sfix36_En16
  reg signed [31:0] Dly_3_out1;  // int32
  reg signed [31:0] s1z4_out1;  // int32
  wire signed [31:0] SW_1_out1;  // int32
  reg signed [31:0] s1z4_out1_1;  // int32
  wire signed [31:0] DTC_b16_1_out1;  // int32
  wire signed [31:0] signal1;  // int32
  wire signed [31:0] signal1_1;  // int32
  wire signed [32:0] UM_3_in0;  // sfix33
  wire signed [31:0] UM_3_out1;  // int32
  reg signed [31:0] s1z4_out1_2;  // int32
  wire signed [31:0] signal1_2;  // int32
  wire signed [31:0] signal1_3;  // int32
  wire signed [32:0] UM_4_in0;  // sfix33
  wire signed [31:0] UM_4_out1;  // int32
  reg signed [15:0] Dly_4_out1;  // int16
  wire signed [15:0] Data_Type_S4_out1;  // int16
  wire signed [15:0] SW_5_out1;  // int16
  wire signed [16:0] UM_1_in0;  // sfix17
  wire signed [15:0] UM_1_out1;  // int16
  reg signed [15:0] Dly_1_out1;  // int16
  wire signed [15:0] Switch17_out1;  // int16
  wire signed [15:0] SW_2_out1;  // int16
  wire signed [16:0] UM_2_in0;  // sfix17
  wire signed [15:0] UM_2_out1;  // int16
  wire signed [15:0] signal2_27;  // int16
  wire signed [15:0] s_30;  // int16
  wire signed [15:0] signal2_28;  // int16
  wire signed [15:0] signal2_29;  // int16
  wire signed [17:0] DTC_b18_6_out1;  // sfix18
  wire signed [17:0] signal2_30;  // sfix18
  wire signed [17:0] signal2_31;  // sfix18
  wire signed [31:0] DTC_b18_1_out1;  // int32
  wire signed [31:0] signal2_32;  // int32
  wire signed [31:0] s_31;  // int32
  reg signed [31:0] Dly_2_out1;  // int32
  wire signed [31:0] signal2_33;  // int32
  wire signed [31:0] s_32;  // int32
  reg signed [31:0] Dly_5_out1;  // int32
  wire signed [31:0] signal2_34;  // int32
  wire signed [31:0] s_33;  // int32
  wire signed [31:0] signal2_35;  // int32
  wire signed [31:0] s_34;  // int32
  wire signed [31:0] signal2_36;  // int32
  wire signed [31:0] s_35;  // int32
  wire signed [31:0] signal2_37;  // int32
  wire signed [31:0] signal2_38;  // int32
  wire signed [47:0] Add4_out1;  // sfix48
  wire RO62_relop1;
  wire signed [47:0] Switch8_out1_1;  // sfix48
  wire RO32_relop1;
  wire signed [47:0] Switch7_out1_1;  // sfix48
  wire signed [23:0] Data_Type_Conversion3_out1;  // sfix24
  wire signed [31:0] alpha_dtc;  // int32
  wire signed [31:0] signal1_4;  // int32
  wire signed [31:0] signal1_5;  // int32
  reg signed [31:0] s1z4_out1_3;  // int32
  wire signed [31:0] signal1_6;  // int32
  wire signed [31:0] signal1_7;  // int32
  reg signed [31:0] Unit_Delay17_out1;  // int32
  wire signed [31:0] Add_out1;  // int32
  wire signed [31:0] Switch38_out1;  // int32
  wire signed [47:0] Abs2_out1;  // sfix48
  wire [29:0] Bit_Slice3_out1;  // ufix30
  wire signed [27:0] DTC_b16_0_out1;  // sfix28
  wire signed [28:0] UM_0_in0;  // sfix29
  wire signed [27:0] UM_0_out1;  // sfix28
  wire CT0_0_out1;
  wire signed [27:0] Switch28_out1;  // sfix28
  reg signed [31:0] s1z4_out1_4;  // int32
  wire signed [31:0] signal1_8;  // int32
  wire signed [31:0] signal1_9;  // int32
  reg signed [31:0] Unit_Delay30_out1;  // int32
  wire signed [31:0] Switch51_out1;  // int32
  wire signed [38:0] Switch26_out1;  // sfix39
  wire signed [37:0] Switch26_out1_dtc;  // sfix38
  wire signed [15:0] Switch23_out1;  // int16
  wire signed [18:0] Add5_sub_temp;  // sfix19
  wire signed [18:0] Add5_1;  // sfix19
  wire signed [18:0] Add5_2;  // sfix19
  wire signed [16:0] Add5_out1_1;  // sfix17
  wire [30:0] Bit_Concat3_out1;  // ufix31
  wire signed [30:0] Data_Type_S1_out1_1;  // sfix31
  wire signed [37:0] Data_Type_S15_out1;  // sfix38
  wire signed [37:0] signal8;  // sfix38
  wire signed [37:0] signal8_1;  // sfix38
  wire signed [37:0] signal8_2;  // sfix38
  wire signed [37:0] signal7;  // sfix38
  wire signed [38:0] signal7_dtc;  // sfix39
  wire signed [18:0] Add8_sub_temp;  // sfix19
  wire signed [18:0] Add8_1;  // sfix19
  wire signed [18:0] Add8_2;  // sfix19
  wire signed [16:0] Add8_out1;  // sfix17
  wire [30:0] Bit_Concat1_out1;  // ufix31
  wire signed [30:0] Data_Type_S19_out1;  // sfix31
  wire signed [37:0] Data_Type_S14_out1;  // sfix38
  wire signed [37:0] signal7_1;  // sfix38
  wire signed [37:0] signal7_2;  // sfix38
  wire signed [37:0] Switch36_out1;  // sfix38
  wire signed [37:0] Switch59_out1;  // sfix38
  reg signed [37:0] Unit_Delay8_out1;  // sfix38
  wire signed [37:0] Switch18_out1;  // sfix38
  wire signed [37:0] signal6;  // sfix38
  wire signed [37:0] signal6_1;  // sfix38
  wire signed [37:0] signal6_2;  // sfix38
  reg signed [23:0] s1z4_out1_5;  // sfix24
  wire signed [23:0] Data_Type_Conversion7_out1;  // sfix24
  wire signed [23:0] signal1_10;  // sfix24
  wire signed [23:0] signal1_11;  // sfix24
  wire signed [23:0] Switch68_out1;  // sfix24
  wire signed [23:0] signal2_39;  // sfix24
  wire signed [23:0] signal2_40;  // sfix24
  wire signed [23:0] signal2_41;  // sfix24
  wire signed [23:0] Switch37_out1;  // sfix24
  wire signed [38:0] Add9_1;  // sfix39
  wire signed [38:0] Add9_2;  // sfix39
  wire signed [38:0] Add9_out1;  // sfix39
  wire signed [38:0] RO10_1_1;  // sfix39
  wire RO10_relop1;
  wire signed [38:0] RO111_1_1;  // sfix39
  wire RO111_relop1;
  wire [23:0] Bit_Slice9_out1;  // ufix24
  wire signed [23:0] Data_Type_S6_out1;  // sfix24
  wire signed [23:0] signal9;  // sfix24
  wire signed [23:0] signal9_1;  // sfix24
  wire signed [23:0] signal9_2;  // sfix24
  wire signed [18:0] Switch22_out1;  // sfix19
  wire signed [15:0] Switch22_out1_dtc;  // int16
  reg signed [31:0] s1z5_out1_4;  // int32
  wire signed [31:0] DTC_b16_2_out1;  // int32
  wire signed [31:0] signal2_42;  // int32
  wire signed [31:0] signal2_43;  // int32
  wire signed [31:0] Bus_Creator19_out1_signal3;  // int32
  reg signed [31:0] s1z5_out1_5;  // int32
  wire signed [31:0] signal2_44;  // int32
  wire signed [31:0] signal2_45;  // int32
  wire signed [31:0] Bus_Creator10_out1_signal3;  // int32
  reg signed [31:0] s1z5_out1_6;  // int32
  wire signed [31:0] signal2_46;  // int32
  wire signed [31:0] signal2_47;  // int32
  wire signed [31:0] Bus_Creator20_out1_signal3;  // int32
  wire signed [48:0] Abs2_y;  // sfix49
  wire [17:0] Bit_Slice4_out1;  // ufix18
  wire signed [19:0] DTC_b32_0_out1;  // sfix20
  wire signed [20:0] UM_11_in0;  // sfix21
  wire signed [19:0] UM_1_out1_1;  // sfix20
  wire CT0_1_out1;
  wire signed [19:0] Switch31_out1;  // sfix20
  reg signed [31:0] s1z5_out1_7;  // int32
  wire signed [31:0] signal2_48;  // int32
  wire signed [31:0] signal2_49;  // int32
  wire signed [31:0] Bus_Creator11_out1_signal3;  // int32
  wire signed [31:0] signal3_24;  // int32
  wire signed [31:0] s_36;  // int32
  wire signed [31:0] signal3_25;  // int32
  wire signed [31:0] s_37;  // int32
  wire signed [31:0] signal3_26;  // int32
  wire signed [31:0] s_38;  // int32
  wire signed [31:0] signal3_27;  // int32
  wire signed [31:0] s_39;  // int32
  wire signed [31:0] signal3_28;  // int32
  wire signed [31:0] signal3_29;  // int32
  reg signed [15:0] Unit_Delay10_out1_1;  // int16
  wire signed [15:0] Data_Type_Conversion1_out1_1;  // int16
  wire signed [15:0] Switch15_out1;  // int16
  wire RO161_relop1;
  wire signed [15:0] Switch16_out1;  // int16
  wire RO12_relop1_1;
  wire signed [31:0] DTC_b16_2_out1_1;  // int32
  wire signed [31:0] Bus_Creator3_out1_signal2;  // int32
  reg signed [31:0] Unit_Delay14_out1;  // int32
  wire signed [31:0] Switch28_out1_1;  // int32
  wire signed [31:0] Bus_Creator19_out1_signal2;  // int32
  reg signed [31:0] Unit_Delay18_out1;  // int32
  wire signed [31:0] Switch40_out1;  // int32
  wire signed [31:0] SW_7_out1;  // int32
  wire signed [31:0] Bus_Creator10_out1_signal2;  // int32
  reg signed [31:0] Unit_Delay19_out1;  // int32
  wire signed [31:0] Switch45_out1;  // int32
  wire signed [31:0] Bus_Creator20_out1_signal2;  // int32
  reg signed [31:0] Unit_Delay31_out1;  // int32
  wire signed [31:0] Switch53_out1;  // int32
  wire signed [31:0] SW_4_out1;  // int32
  wire signed [31:0] Bus_Creator11_out1_signal2;  // int32
  wire [23:0] Switch86_out1;  // ufix24
  reg [23:0] Unit_Delay50_out1;  // ufix24
  wire [23:0] Switch122_out1;  // ufix24
  wire [23:0] Bitwise_Operator1_out1;  // ufix24
  wire signed [11:0] Switch0_out1;  // sfix12
  wire signed [36:0] Product11_mul_temp;  // sfix37
  wire signed [24:0] Product11_1;  // sfix25
  wire signed [35:0] Product1_out1;  // sfix36
  wire Compare_To_Constant2_out1;
  reg [23:0] Unit_Delay38_out1_1;  // ufix24
  wire [23:0] Switch87_out1;  // ufix24
  wire signed [23:0] Data_Type_Conversion5_out1;  // sfix24
  wire signed [23:0] signal2_50;  // sfix24
  wire signed [23:0] signal2_51;  // sfix24
  wire signed [31:0] DTC_b18_3_out1;  // int32
  wire signed [31:0] signal2_52;  // int32
  wire signed [31:0] s_40;  // int32
  wire signed [31:0] signal2_53;  // int32
  wire signed [31:0] s_41;  // int32
  wire signed [31:0] signal2_54;  // int32
  wire signed [31:0] s_42;  // int32
  wire signed [31:0] signal2_55;  // int32
  wire signed [31:0] s_43;  // int32
  wire signed [31:0] signal2_56;  // int32
  wire signed [31:0] signal2_57;  // int32
  wire [36:0] Bit_Slice20_out1;  // ufix37
  wire signed [24:0] Data_Type_Conversion12_out1;  // sfix25
  wire RO61_relop1;
  wire signed [24:0] Switch8_out1_2;  // sfix25
  wire RO31_relop1;
  wire signed [24:0] Switch7_out1_2;  // sfix25
  wire signed [11:0] Data_Type_Conversion8_out1;  // sfix12
  reg signed [11:0] s1z4_out1_6;  // sfix12
  wire signed [11:0] signal1_12;  // sfix12
  wire signed [11:0] signal1_13;  // sfix12
  wire [1:0] Bit_Concat_out1;  // ufix2
  wire CT2_out1_1;
  wire signed [11:0] Switch3_out1_1;  // sfix12
  reg signed [17:0] Unit_Delay33_out1;  // sfix18
  wire [11:0] Bit_Slice1_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S12_out1;  // sfix12
  wire signed [11:0] Switch107_out1_5;  // sfix12
  wire signed [11:0] Switch1_out1_2;  // sfix12
  wire signed [11:0] Switch1_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay1_out1_1;  // sfix12
  wire Bit_Slice1_out1_2;  // ufix1
  wire signed [17:0] Switch79_out1;  // sfix18
  wire signed [17:0] Switch87_out1_1;  // sfix18
  wire signed [17:0] signal2_58;  // sfix18
  wire signed [17:0] s_44;  // sfix18
  reg signed [17:0] Unit_Delay30_out1_1;  // sfix18
  wire signed [17:0] signal2_59;  // sfix18
  wire signed [17:0] signal2_60;  // sfix18
  wire signed [17:0] signal2_61;  // sfix18
  wire [6:0] Add11_out1_1;  // ufix7
  wire [6:0] Add12_out1_2;  // ufix7
  wire signed [11:0] Switch84_out1_1;  // sfix12
  wire Switch208_out1;
  wire signed [11:0] Simple_Dual_Port_RAM2_out1;  // sfix12
  wire signed [11:0] Switch98_out1;  // sfix12
  reg signed [11:0] Unit_Delay21_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion2_out1_1;  // sfix12
  wire signed [11:0] Switch58_out1;  // sfix12
  wire signed [11:0] Switch107_out1_6;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_5;  // sfix12
  wire signed [24:0] Add_out1_1;  // sfix25
  reg signed [24:0] Delay16_out1;  // sfix25
  wire signed [24:0] Switch13_out1;  // sfix25
  reg signed [11:0] Unit_Delay69_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion3_out1_1;  // sfix12
  wire signed [11:0] Switch150_out1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1;  // sfix12
  wire signed [11:0] Switch6_out1;  // sfix12
  reg signed [11:0] Unit_Delay11_out1;  // sfix12
  wire signed [11:0] Switch29_out1;  // sfix12
  reg signed [11:0] Unit_Delay5_out1_1;  // sfix12
  wire signed [11:0] Switch7_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay12_out1;  // sfix12
  wire signed [11:0] Switch31_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1_1;  // sfix12
  wire signed [12:0] Unary_Minus_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1_1;  // sfix12
  wire [7:0] Add16_out1;  // uint8
  wire [7:0] Add19_out1;  // uint8
  reg [7:0] Unit_Delay16_out1;  // uint8
  wire Switch210_out1;
  wire [7:0] Switch50_out1;  // uint8
  wire signed [11:0] signal1_14;  // sfix12
  wire signed [11:0] s_45;  // sfix12
  wire signed [11:0] signal1_15;  // sfix12
  wire signed [11:0] signal1_16;  // sfix12
  wire signed [11:0] signal1_17;  // sfix12
  wire signed [11:0] UVctDelay_Ram_out1;  // sfix12
  wire signed [11:0] Switch215_out1;  // sfix12
  wire signed [11:0] Switch54_out1;  // sfix12
  wire signed [11:0] signal2_62;  // sfix12
  wire signed [11:0] s_46;  // sfix12
  reg signed [11:0] Unit_Delay17_out1_1;  // sfix12
  wire signed [11:0] signal2_63;  // sfix12
  wire signed [11:0] signal2_64;  // sfix12
  wire signed [11:0] signal2_65;  // sfix12
  wire Relational_Operator3_relop1;
  reg  Unit_Delay32_out1;
  wire Switch209_out1;
  wire Switch82_out1;
  wire Or4_out1_1;
  reg  Unit_Delay56_out1;
  wire signed [11:0] Switch52_out1;  // sfix12
  wire signed [12:0] Unary_Minus1_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1;  // sfix12
  wire signed [11:0] signal2_66;  // sfix12
  wire signed [11:0] s_47;  // sfix12
  wire signed [11:0] signal2_67;  // sfix12
  wire signed [11:0] s_48;  // sfix12
  wire signed [11:0] signal2_68;  // sfix12
  wire signed [11:0] s_49;  // sfix12
  wire signed [11:0] signal2_69;  // sfix12
  wire signed [11:0] signal2_70;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12
  wire signed [11:0] Switch17_out1_1;  // sfix12
  wire signed [11:0] signal1_18;  // sfix12
  wire signed [11:0] s_50;  // sfix12
  wire signed [11:0] signal1_19;  // sfix12
  wire signed [11:0] s_51;  // sfix12
  wire signed [11:0] signal1_20;  // sfix12
  wire signed [11:0] s_52;  // sfix12
  wire signed [11:0] signal1_21;  // sfix12
  wire signed [11:0] signal1_22;  // sfix12
  wire signed [12:0] Add4_add_temp;  // sfix13
  wire signed [12:0] Add4_1;  // sfix13
  wire signed [12:0] Add4_2;  // sfix13
  wire signed [24:0] Add4_out1_1;  // sfix25
  wire RO8_relop1;
  wire signed [24:0] Switch76_out1;  // sfix25
  wire RO7_relop1;
  wire signed [24:0] Switch79_out1_1;  // sfix25
  wire [23:0] Bit_Slice2_out1;  // ufix24
  reg signed [11:0] Unit_Delay13_out1;  // sfix12
  wire signed [11:0] Switch33_out1;  // sfix12
  wire signed [11:0] signal1_23;  // sfix12
  wire signed [11:0] s_53;  // sfix12
  wire signed [11:0] signal1_24;  // sfix12
  wire signed [11:0] s_54;  // sfix12
  wire signed [11:0] signal1_25;  // sfix12
  wire signed [11:0] s_55;  // sfix12
  wire signed [11:0] signal1_26;  // sfix12
  wire signed [11:0] s_56;  // sfix12
  wire signed [11:0] signal1_27;  // sfix12
  wire signed [11:0] s_57;  // sfix12
  wire signed [11:0] signal1_28;  // sfix12
  wire signed [11:0] s_58;  // sfix12
  wire signed [11:0] signal1_29;  // sfix12
  wire signed [11:0] s_59;  // sfix12
  wire signed [11:0] signal1_30;  // sfix12
  wire signed [11:0] s_60;  // sfix12
  wire signed [11:0] signal1_31;  // sfix12
  wire signed [11:0] s_61;  // sfix12
  wire signed [11:0] signal1_32;  // sfix12
  wire signed [11:0] s_62;  // sfix12
  wire signed [11:0] signal1_33;  // sfix12
  wire signed [11:0] s_63;  // sfix12
  wire signed [11:0] signal1_34;  // sfix12
  wire signed [11:0] s_64;  // sfix12
  wire signed [11:0] signal1_35;  // sfix12
  wire signed [11:0] s_65;  // sfix12
  wire signed [11:0] signal1_36;  // sfix12
  wire signed [11:0] signal1_37;  // sfix12
  wire signed [11:0] signal1_38;  // sfix12
  wire signed [23:0] Product_out1_1;  // sfix24
  wire signed [25:0] Add_add_temp;  // sfix26
  wire signed [25:0] Add_1;  // sfix26
  wire signed [25:0] Add_2;  // sfix26
  wire CT55_out1_1;
  wire signed [24:0] Switch41_out1_1;  // sfix25
  wire CT56_out1_1;
  wire signed [24:0] Switch42_out1;  // sfix25
  wire [13:0] Bit_Slice1_out1_3;  // ufix14
  reg signed [11:0] Unit_Delay22_out1;  // sfix12
  wire signed [11:0] Switch59_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_6;  // sfix12
  wire signed [11:0] signal1_39;  // sfix12
  wire signed [11:0] s_66;  // sfix12
  wire signed [11:0] signal1_40;  // sfix12
  wire signed [11:0] signal1_41;  // sfix12
  wire signed [11:0] signal1_42;  // sfix12
  wire Switch105_out1_1;
  wire switch_compare_1_1;
  wire signed [11:0] Switch97_out1;  // sfix12
  wire signed [18:0] Add7_stage2_1;  // sfix19
  wire signed [18:0] Add7_stage2_2;  // sfix19
  wire signed [18:0] Add7_op_stage2;  // sfix19
  wire signed [18:0] Add7_stage3_add_temp;  // sfix19
  wire signed [18:0] Add7_stage3_1;  // sfix19
  wire signed [17:0] Add7_out1_1;  // sfix18
  wire [6:0] Switch83_out1;  // ufix7
  reg [6:0] Unit_Delay32_out1_1;  // ufix7
  wire Ro10_relop1_1;
  reg  Unit_Delay57_out1;
  wire Switch49_out1;
  reg  Unit_Delay1_out1_2;
  reg  Unit_Delay27_out1;
  reg  Unit_Delay54_out1;
  wire Switch20_out1;
  wire Switch17_out1_2;
  wire [4:0] Bit_Slice12_out1;  // ufix5
  reg [4:0] Unit_Delay24_out1;  // ufix5
  wire [12:0] Bit_Slice6_out1_1;  // ufix13
  wire Or3_out1_1;
  reg  Unit_Delay55_out1;
  wire Or2_out1;
  wire switch_compare_1_2;
  wire signed [17:0] Switch80_out1;  // sfix18
  wire [11:0] Bit_Slice6_out1_2;  // ufix12
  wire signed [11:0] Data_Type_S11_out1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  reg signed [11:0] Unit_Delay0_out1;  // sfix12
  wire Bit_Slice_out1;  // ufix1
  wire CT1_out1_1;
  wire signed [11:0] Switch2_out1_1;  // sfix12
  wire signed [11:0] Switch11_out1;  // sfix12
  wire signed [11:0] signal1_43;  // sfix12
  wire signed [11:0] s_67;  // sfix12
  wire signed [11:0] signal1_44;  // sfix12
  wire signed [11:0] signal1_45;  // sfix12
  wire signed [11:0] s_68;  // sfix12
  wire signed [11:0] signal1_46;  // sfix12
  wire signed [11:0] signal1_47;  // sfix12
  wire signed [15:0] DTC_b18_4_out1;  // int16
  wire signed [15:0] signal1_48;  // int16
  wire signed [15:0] s_69;  // int16
  wire signed [15:0] signal1_49;  // int16
  wire signed [15:0] s_70;  // int16
  wire signed [15:0] signal1_50;  // int16
  wire signed [15:0] s_71;  // int16
  wire signed [15:0] signal1_51;  // int16
  wire signed [15:0] s_72;  // int16
  wire signed [15:0] signal1_52;  // int16
  wire signed [15:0] signal1_53;  // int16
  wire signed [47:0] Product6_mul_temp;  // sfix48
  wire signed [31:0] Product6_out1;  // int32
  wire signed [32:0] Add41_add_temp;  // sfix33
  wire signed [32:0] Add41_1;  // sfix33
  wire signed [32:0] Add41_2;  // sfix33
  wire RO64_relop1;
  wire signed [47:0] Switch8_out1_3;  // sfix48
  wire RO34_relop1;
  wire signed [47:0] Switch7_out1_4;  // sfix48
  reg signed [23:0] s1z4_out1_7;  // sfix24
  wire signed [23:0] signal1_54;  // sfix24
  wire signed [23:0] signal1_55;  // sfix24
  wire signed [23:0] Switch67_out1;  // sfix24
  wire [17:0] Bit_Slice2_out1_1;  // ufix18
  wire signed [17:0] Data_Type_S2_out1;  // sfix18
  wire signed [17:0] signal1_56;  // sfix18
  wire signed [17:0] signal1_57;  // sfix18
  wire signed [17:0] signal1_58;  // sfix18
  wire signed [18:0] Add6_1;  // sfix19
  wire signed [18:0] Add6_2;  // sfix19
  wire signed [18:0] Add6_out1;  // sfix19
  wire signed [18:0] RO5_1_1;  // sfix19
  wire RO5_relop1;
  wire signed [18:0] RO9_1_1;  // sfix19
  wire RO9_relop1;
  wire signed [24:0] Add10_add_temp;  // sfix25
  wire signed [24:0] Add10_1;  // sfix25
  wire signed [24:0] Add10_2;  // sfix25
  wire signed [25:0] Add10_out1;  // sfix26
  reg signed [25:0] Unit_Delay9_out1;  // sfix26
  wire signed [25:0] Switch19_out1;  // sfix26
  wire RO63_relop1;
  wire signed [31:0] Switch8_out1_4;  // int32
  wire RO33_relop1;
  wire signed [31:0] Switch7_out1_5;  // int32
  reg signed [15:0] Unit_Delay12_out1_1;  // int16
  wire signed [15:0] Switch25_out1;  // int16
  wire signed [15:0] signal1_59;  // int16
  wire signed [15:0] s_73;  // int16
  wire signed [15:0] signal1_60;  // int16
  wire signed [15:0] signal1_61;  // int16
  wire signed [15:0] s_74;  // int16
  wire signed [15:0] signal1_62;  // int16
  wire signed [15:0] signal1_63;  // int16
  wire signed [31:0] DTC_b18_2_out1;  // int32
  wire signed [31:0] signal1_64;  // int32
  wire signed [31:0] s_75;  // int32
  wire signed [31:0] signal1_65;  // int32
  wire signed [31:0] s_76;  // int32
  wire signed [31:0] signal1_66;  // int32
  wire signed [31:0] s_77;  // int32
  wire signed [31:0] signal1_67;  // int32
  wire signed [31:0] s_78;  // int32
  wire signed [31:0] signal1_68;  // int32
  wire signed [31:0] s_79;  // int32
  wire signed [31:0] signal1_69;  // int32
  wire signed [31:0] signal1_70;  // int32
  reg signed [31:0] Unit_Delay6_out1;  // int32
  wire signed [31:0] Switch20_out1_1;  // int32
  wire RO16_relop1;
  wire signed [31:0] Switch57_out1;  // int32
  wire RO15_relop1;
  wire signed [31:0] Switch56_out1;  // int32
  wire signed [35:0] From141_out1_dtc;  // sfix36_En16
  wire signed [35:0] Switch81_out1;  // sfix36_En16
  wire signed [29:0] Data_Type_Conversion_out1;  // sfix30
  wire signed [36:0] Add3_add_temp;  // sfix37
  wire signed [36:0] Add3_1;  // sfix37
  wire signed [36:0] Add3_2;  // sfix37
  wire [12:0] y;  // ufix13
  wire [12:0] y_1;  // ufix13
  wire [12:0] y_2;  // ufix13
  wire CT59_out1;
  reg signed [11:0] Unit_Delay23_out1;  // sfix12
  wire signed [11:0] Switch60_out1;  // sfix12
  wire signed [11:0] Switch107_out1_7;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_7;  // sfix12
  wire CT60_out1;
  reg signed [11:0] Unit_Delay24_out1_1;  // sfix12
  wire signed [11:0] Switch61_out1;  // sfix12
  wire signed [11:0] Switch107_out1_8;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_8;  // sfix12
  wire signed [15:0] DTC_b16_1_out1_1;  // int16
  reg [12:0] Unit_Delay33_out1_1;  // ufix13
  wire Relational_Operator7_relop1;
  wire [8:0] Bit_Slice15_out1;  // ufix9
  reg [8:0] Unit_Delay27_out1_1;  // ufix9
  wire Relational_Operator6_relop1;
  wire [7:0] Bit_Slice8_out1;  // uint8
  reg [7:0] Unit_Delay22_out1_1;  // uint8
  wire Relational_Operator1_relop1;
  wire [6:0] Bit_Slice11_out1;  // ufix7
  reg [6:0] Unit_Delay23_out1_1;  // ufix7
  wire Relational_Operator2_relop1;
  wire [5:0] Bit_Slice7_out1;  // ufix6
  reg [5:0] Unit_Delay21_out1_1;  // ufix6
  wire Relational_Operator8_relop1;
  wire [3:0] Bit_Slice13_out1;  // ufix4
  reg [3:0] Unit_Delay25_out1;  // ufix4
  wire Relational_Operator4_relop1;
  wire [2:0] Bit_Slice14_out1;  // ufix3
  reg [2:0] Unit_Delay26_out1;  // ufix3
  wire Relational_Operator5_relop1;

  // WT
  // 
  // -100
  // 2000
  // 
  // 1
  // 
  // 1
  // 
  // 1
  // 
  // 1
  // 
  // Ki=1 represent 1/64
  // 
  // Ki=1 represent 1/512
  // 
  // Ki=1 represent 1/4


  assign Add12_out1 = 7'b0000001 + Unit_Delay5_out1;



  assign CT97_out1 = Add12_out1 >= 7'b0011001;



  assign Switch126_out1 = (CT97_out1 == 1'b0 ? Add12_out1 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay51_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch126_out1;
      end
    end



  assign CT13_out1 = Unit_Delay5_out1 == 7'b0000011;



  assign CT23_out1 = Unit_Delay5_out1 == 7'b0000111;



  assign CT29_out1 = Unit_Delay5_out1 == 7'b0001001;



  assign CT31_out1 = Unit_Delay5_out1 == 7'b0001010;



  assign CT33_out1 = Unit_Delay5_out1 == 7'b0001011;



  assign CT39_out1 = Unit_Delay5_out1 == 7'b0001101;



  assign CT41_out1 = Unit_Delay5_out1 == 7'b0001110;



  assign CT12_out1 = Unit_Delay5_out1 == 7'b0000011;



  assign CT20_out1 = Unit_Delay5_out1 == 7'b0000100;



  assign CT5_out1 = Unit_Delay5_out1 == 7'b0000101;



  assign CT21_out1 = Unit_Delay5_out1 == 7'b0000100;



  assign CT15_out1 = Unit_Delay5_out1 == 7'b0000010;



  assign CT18_out1 = Unit_Delay5_out1 == 7'b0000010;



  assign Product2_mul_temp = Um_Droop_b12 * 12'sb001001100010;
  assign Product2_out1 = {{12{Product2_mul_temp[23]}}, Product2_mul_temp};



  assign Bit_Slice16_out1 = Product2_out1[35:11];



  assign Data_Type_Conversion9_out1 = Bit_Slice16_out1;



  assign RO3_relop1 = Data_Type_Conversion9_out1 > 25'sb0000000000000011111111111;



  assign Constant20_out1_dtc = 25'sb0000000000000011111111111;



  assign Switch7_out1 = (RO3_relop1 == 1'b0 ? Data_Type_Conversion9_out1 :
              Constant20_out1_dtc);



  assign RO21_relop1 = Switch7_out1 < 25'sb1111111111111100000000001;



  assign Constant10_out1_dtc = 25'sb1111111111111100000000001;



  assign Data_Type_Conversion13_out1 = Freq_Droop_b16[11:0];



  assign Product1_mul_temp = Data_Type_Conversion13_out1 * 12'sb000111111110;
  assign Product_out1 = {{12{Product1_mul_temp[23]}}, Product1_mul_temp};



  assign Bit_Slice10_out1 = Product_out1[35:11];



  assign Data_Type_Conversion2_out1 = Bit_Slice10_out1;



  assign RO6_relop1 = Data_Type_Conversion2_out1 > 25'sb0000000000000011111111111;



  assign Constant19_out1_dtc = 25'sb0000000000000011111111111;



  assign Switch41_out1 = (RO6_relop1 == 1'b0 ? Data_Type_Conversion2_out1 :
              Constant19_out1_dtc);



  assign RO11_relop1 = Switch41_out1 < 25'sb1111111111111100000000001;



  assign Constant18_out1_dtc = 25'sb1111111111111100000000001;



  assign Switch5_out1 = (RO21_relop1 == 1'b0 ? Switch7_out1 :
              Constant10_out1_dtc);



  assign Data_Type_Conversion10_out1 = Switch5_out1[11:0];



  assign Unary_Minus2_in0 =  - ({Data_Type_Conversion10_out1[11], Data_Type_Conversion10_out1});
  assign Unary_Minus_out1 = Unary_Minus2_in0[11:0];



  assign Switch1_out1 = (RO11_relop1 == 1'b0 ? Switch41_out1 :
              Constant18_out1_dtc);



  assign Data_Type_Conversion6_out1 = Switch1_out1[11:0];



  assign Switch4_out1 = Unary_Minus_out1;



  assign signal3 = (CT18_out1 == 1'b0 ? Switch4_out1 :
              Switch4_out1);



  assign signal3_1 = signal3;

  assign signal3_2 = signal3_1;

  assign Or3_out1 = VolLoop_En;



  assign CT4_out1 = Unit_Delay5_out1 == 7'b0000000;



  assign CT19_out1 = Unit_Delay5_out1 == 7'b0000110;



  assign CT123_out1 = Unit_Delay5_out1 == 7'b0000000;



  assign Switch124_out1 = (Pulse_4096Hz == 1'b0 ? Unit_Delay52_out1 :
              1'b1);



  assign Switch123_out1 = (CT123_out1 == 1'b0 ? Switch124_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay52_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1 <= 1'b0;
      end
      else begin
        Unit_Delay52_out1 <= Switch123_out1;
      end
    end



  assign Or1_out1 = Pulse_4096Hz | Unit_Delay52_out1;



  always @(posedge g_clk)
    begin : Unit_Delay53_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1 <= Switch125_out1;
      end
    end



  assign Switch125_out1 = (CT123_out1 == 1'b0 ? Unit_Delay53_out1 :
              Or1_out1);



  assign Or5_out1 = CT19_out1 & Switch125_out1;



  assign CT11_out1 = Unit_Delay5_out1 == 7'b0000111;



  assign Or6_out1 = CT11_out1 & Switch125_out1;



  assign CT22_out1 = Unit_Delay5_out1 == 7'b0001000;



  assign Or7_out1 = CT22_out1 & Switch125_out1;



  assign CT25_out1 = Unit_Delay5_out1 == 7'b0001100;



  assign Or8_out1 = CT25_out1 & Switch125_out1;



  assign CT37_out1 = Unit_Delay5_out1 == 7'b0001101;



  assign Or9_out1 = CT37_out1 & Switch125_out1;



  assign CT26_out1 = Unit_Delay5_out1 == 7'b0000010;



  assign CT6_out1 = Unit_Delay5_out1 == 7'b0000001;



  assign CT44_out1 = Unit_Delay5_out1 == 7'b0000000;



  assign Add11_add_temp = 9'b000000001 + ({8'b0, Unit_Delay7_out1});
  assign Add1_out1 = Add11_add_temp[0];



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1 <= Add1_out1;
      end
    end



  assign CT51_out1 = Unit_Delay7_out1 == 1'b0;



  assign CT12_out1_1 = Unit_Delay7_out1 == 1'b0;



  assign CT70_out1 = Unit_Delay7_out1 == 1'b0;



  assign CT55_out1 = Unit_Delay7_out1 == 1'b0;



  assign CT57_out1 = Unit_Delay7_out1 == 1'b1;



  assign Add12_out1_1 = 7'b0000001 + Unit_Delay38_out1;



  assign CT97_out1_1 = Add12_out1_1 >= 7'b0101101;



  assign Switch126_out1_1 = (CT97_out1_1 == 1'b0 ? Add12_out1_1 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay38_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay38_out1 <= Switch126_out1_1;
      end
    end



  assign CT99_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT58_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT5_out1_1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT1_out1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT3_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT2_out1 = Unit_Delay38_out1 == 7'b0000011;



  assign CT7_out1 = Unit_Delay38_out1 == 7'b0000100;



  assign CT4_out1_1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT47_out1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT48_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT49_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT50_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT51_out1_1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT52_out1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT53_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT54_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT33_out1_1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT90_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT30_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT32_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT34_out1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT16_out1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT13_out1_1 = Unit_Delay38_out1 == 7'b0000010;



  assign Add1_out1_1 = 2'b01 + Unit_Delay10_out1;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 2'b00;
      end
      else begin
        Unit_Delay10_out1 <= Add1_out1_1;
      end
    end



  assign CT35_out1 = Unit_Delay10_out1 == 2'b00;



  assign CT24_out1 = Unit_Delay10_out1 == 2'b00;



  assign CT36_out1 = Unit_Delay10_out1 == 2'b00;



  assign CT38_out1 = Unit_Delay10_out1 == 2'b01;



  assign CT37_out1_1 = Unit_Delay10_out1 == 2'b01;



  assign CT31_out1_1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT29_out1_1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT89_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT98_out1 = Unit_Delay38_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay398_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1 <= Switch107_out1;
      end
    end



  assign Switch107_out1 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1 :
              Uwu_b12);



  always @(posedge g_clk)
    begin : Unit_Delay391_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_1 <= Switch107_out1_1;
      end
    end



  assign Switch107_out1_1 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_1 :
              Uvw_b12);



  always @(posedge g_clk)
    begin : Unit_Delay39_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_2 <= Switch107_out1_2;
      end
    end



  assign Switch107_out1_2 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_2 :
              Uuv_b12);



  always @(posedge g_clk)
    begin : Unit_Delay393_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_3 <= Switch107_out1_3;
      end
    end



  assign Switch107_out1_3 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_3 :
              Coswt_b12);



  assign signal2 = (CT54_out1 == 1'b0 ? Switch107_out1_3 :
              Switch107_out1_3);



  assign s = signal2;

  always @(posedge g_clk)
    begin : Unit_Delay392_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_4 <= Switch107_out1_4;
      end
    end



  assign Switch107_out1_4 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_4 :
              Sinwt_b12);



  assign signal2_1 = (CT53_out1 == 1'b0 ? s :
              Switch107_out1_4);



  assign s_1 = signal2_1;

  assign Unary_Minus5_in0 =  - ({Switch107_out1_4[11], Switch107_out1_4});
  assign Unary_Minus5_out1 = Unary_Minus5_in0[11:0];



  assign signal2_2 = (CT52_out1 == 1'b0 ? s_1 :
              Unary_Minus5_out1);



  assign s_2 = signal2_2;

  assign signal2_3 = (CT51_out1_1 == 1'b0 ? s_2 :
              Switch107_out1_3);



  assign s_3 = signal2_3;

  assign signal2_4 = (CT50_out1 == 1'b0 ? s_3 :
              Switch107_out1_3);



  assign s_4 = signal2_4;

  assign Unary_Minus4_in0 =  - ({Switch107_out1_4[11], Switch107_out1_4});
  assign Unary_Minus4_out1 = Unary_Minus4_in0[11:0];



  assign signal2_5 = (CT49_out1 == 1'b0 ? s_4 :
              Unary_Minus4_out1);



  assign s_5 = signal2_5;

  assign signal2_6 = (CT48_out1 == 1'b0 ? s_5 :
              Switch107_out1_4);



  assign s_6 = signal2_6;

  assign signal2_7 = (CT47_out1 == 1'b0 ? s_6 :
              Switch107_out1_3);



  assign s_7 = signal2_7;

  assign Switch106_out1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb000000000000);



  assign signal2_8 = (CT4_out1_1 == 1'b0 ? s_7 :
              Switch106_out1);



  assign s_8 = signal2_8;

  assign Switch105_out1 = (DY11_En == 1'b0 ? 12'sb001100010100 :
              12'sb001010101011);



  assign signal2_9 = (CT7_out1 == 1'b0 ? s_8 :
              Switch105_out1);



  assign s_9 = signal2_9;

  assign Switch104_out1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb110101010101);



  assign signal2_10 = (CT2_out1 == 1'b0 ? s_9 :
              Switch104_out1);



  assign s_10 = signal2_10;

  assign Switch103_out1 = (DY11_En == 1'b0 ? 12'sb110101010101 :
              12'sb110011101100);



  assign signal2_11 = (CT3_out1 == 1'b0 ? s_10 :
              Switch103_out1);



  assign s_11 = signal2_11;

  assign Switch102_out1 = (DY11_En == 1'b0 ? 12'sb000000000000 :
              12'sb000110001010);



  assign signal2_12 = (CT1_out1 == 1'b0 ? s_11 :
              Switch102_out1);



  assign s_12 = signal2_12;

  assign Switch101_out1 = (DY11_En == 1'b0 ? 12'sb001010101011 :
              12'sb000110001010);



  assign signal3_3 = (CT54_out1 == 1'b0 ? 1'b0 :
              1'b0);



  assign s_13 = signal3_3;

  assign signal3_4 = (CT53_out1 == 1'b0 ? s_13 :
              1'b1);



  assign s_14 = signal3_4;

  assign signal3_5 = (CT52_out1 == 1'b0 ? s_14 :
              1'b0);



  assign s_15 = signal3_5;

  assign signal3_6 = (CT51_out1_1 == 1'b0 ? s_15 :
              1'b1);



  assign s_16 = signal3_6;

  assign signal3_7 = (CT50_out1 == 1'b0 ? s_16 :
              1'b0);



  assign s_17 = signal3_7;

  assign signal3_8 = (CT49_out1 == 1'b0 ? s_17 :
              1'b1);



  assign s_18 = signal3_8;

  assign signal3_9 = (CT48_out1 == 1'b0 ? s_18 :
              1'b0);



  assign s_19 = signal3_9;

  assign signal3_10 = (CT47_out1 == 1'b0 ? s_19 :
              1'b1);



  assign s_20 = signal3_10;

  assign signal3_11 = (CT4_out1_1 == 1'b0 ? s_20 :
              1'b0);



  assign s_21 = signal3_11;

  assign signal3_12 = (CT7_out1 == 1'b0 ? s_21 :
              1'b0);



  assign s_22 = signal3_12;

  assign signal3_13 = (CT2_out1 == 1'b0 ? s_22 :
              1'b1);



  assign s_23 = signal3_13;

  assign signal3_14 = (CT3_out1 == 1'b0 ? s_23 :
              1'b0);



  assign s_24 = signal3_14;

  assign signal3_15 = (CT1_out1 == 1'b0 ? s_24 :
              1'b0);



  assign s_25 = signal3_15;

  assign signal3_16 = (CT5_out1_1 == 1'b0 ? s_25 :
              1'b1);



  assign signal3_17 = signal3_16;

  assign signal3_18 = signal3_17;

  assign signal2_13 = (CT5_out1_1 == 1'b0 ? s_12 :
              Switch101_out1);



  assign signal2_14 = signal2_13;

  assign signal2_15 = signal2_14;

  assign Constant9_out1_dtc = 25'sb0000000000000000000000000;



  assign Constant2_out1_dtc = 25'sb0001111111111111111111111;



  assign Constant1_out1_dtc = 25'sb1110000000000000000000001;



  assign CT57_out1_1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT56_out1 = Unit_Delay7_out1 == 1'b1;



  assign Constant14_out1_dtc = 25'sb0000000000000011111111111;



  assign Constant13_out1_dtc = 25'sb1111111111111100000000001;



  assign Abs_y = (Um_s12 < 12'sb000000000000 ?  - ({Um_s12[11], Um_s12}) :
              {Um_s12[11], Um_s12});
  assign Abs_out1 = Abs_y[11:0];



  assign Mpyb28_2_mul_temp = Um_ref_b12 * KOut_s12;
  assign Mpyb28_2_out1 = {{4{Mpyb28_2_mul_temp[23]}}, Mpyb28_2_mul_temp};



  assign Bit_Slice6_out1 = Mpyb28_2_out1[23:11];



  assign Data_Type_S10_out1 = Bit_Slice6_out1;



  assign RO28_1_1 = {{11{Data_Type_S10_out1[12]}}, Data_Type_S10_out1};
  assign RO28_relop1 = RO28_1_1 > 24'sb000000000000011111111111;



  assign Data_Type_S10_out1_dtc = {{11{Data_Type_S10_out1[12]}}, Data_Type_S10_out1};



  assign Switch104_out1_1 = (RO28_relop1 == 1'b0 ? Data_Type_S10_out1_dtc :
              24'sb000000000000011111111111);



  assign RO27_relop1 = Switch104_out1_1 < 24'sb111111111111100000000001;



  assign Switch131_out1 = (RO27_relop1 == 1'b0 ? Switch104_out1_1 :
              24'sb111111111111100000000001);



  assign Data_Type_Conversion24_out1 = Switch131_out1[11:0];



  assign Ro11_relop1_1 = Abs_out1 >= Data_Type_Conversion24_out1;



  assign Mpyb28_1_mul_temp = Um_ref_b12 * Kin_s12;
  assign Mpyb28_1_out1 = {{4{Mpyb28_1_mul_temp[23]}}, Mpyb28_1_mul_temp};



  assign Bit_Slice1_out1 = Mpyb28_1_out1[23:11];



  assign Data_Type_S1_out1 = Bit_Slice1_out1;



  assign RO2_1_1 = {{11{Data_Type_S1_out1[12]}}, Data_Type_S1_out1};
  assign RO2_relop1 = RO2_1_1 > 24'sb000000000000011111111111;



  assign Data_Type_S1_out1_dtc = {{11{Data_Type_S1_out1[12]}}, Data_Type_S1_out1};



  assign Switch1_out1_1 = (RO2_relop1 == 1'b0 ? Data_Type_S1_out1_dtc :
              24'sb000000000000011111111111);



  assign RO1_relop1 = Switch1_out1_1 < 24'sb111111111111100000000001;



  assign Switch2_out1 = (RO1_relop1 == 1'b0 ? Switch1_out1_1 :
              24'sb111111111111100000000001);



  assign Data_Type_Conversion1_out1 = Switch2_out1[11:0];



  assign Ro12_relop1 = Abs_out1 <= Data_Type_Conversion1_out1;



  always @(posedge g_clk)
    begin : Unit_Delay112_process
      if (Rst_n == 1'b0) begin
        Unit_Delay112_out1 <= 1'b0;
      end
      else begin
        Unit_Delay112_out1 <= Switch234_out1;
      end
    end



  assign Switch235_out1 = (Ro12_relop1 == 1'b0 ? Unit_Delay112_out1 :
              1'b1);



  assign Switch234_out1 = (Ro11_relop1_1 == 1'b0 ? Switch235_out1 :
              1'b0);



  assign Or5_out1_1 = Zvrting | Switch234_out1;



  assign Logical_3_out1 =  ~ Or5_out1_1;



  assign SW10_out1 = (Or5_out1_1 == 1'b0 ? Add5_out1 :
              12'sb000000000000);



  always @(posedge g_clk)
    begin : Delay6_process
      if (Rst_n == 1'b0) begin
        Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Delay6_out1 <= SW10_out1;
      end
    end



  assign RO51_relop1 = Delay6_out1 < PLL_Ki_b12;



  assign Logical_7_out1 = RO51_relop1 & (PLLRcvPluse & Logical_3_out1);



  assign SW9_out1 = (Logical_7_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000101);



  assign Add5_out1 = SW9_out1 + Delay6_out1;



  assign Switch4_out1_1 = (EnNoPLL == 1'b0 ? PLL_Ki_b12 :
              Add5_out1);



  assign signal2_16 = (CT6_out1 == 1'b0 ? Switch4_out1_1 :
              Switch4_out1_1);



  assign s_26 = signal2_16;

  assign Logical_1_out1 =  ~ Or5_out1_1;



  assign SW8_out1 = (Or5_out1_1 == 1'b0 ? Add1_out1_2 :
              12'sb000000000000);



  always @(posedge g_clk)
    begin : Delay4_process
      if (Rst_n == 1'b0) begin
        Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Delay4_out1 <= SW8_out1;
      end
    end



  assign RO71_relop1 = Delay4_out1 < PLL_Kp_b12;



  assign Logical_6_out1 = RO71_relop1 & (PLLRcvPluse & Logical_1_out1);



  assign SW4_out1 = (Logical_6_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000101);



  assign Add1_out1_2 = SW4_out1 + Delay4_out1;



  assign Switch3_out1 = (EnNoPLL == 1'b0 ? PLL_Kp_b12 :
              Add1_out1_2);



  assign signal2_17 = (CT4_out1 == 1'b0 ? s_26 :
              Switch3_out1);



  assign signal2_18 = signal2_17;

  assign Data_Type_Conversion4_out1 = {{12{signal2_18[11]}}, signal2_18};



  assign Compare_To_Constant5_out1 = Unit_Delay5_out1 == 7'b0010100;



  assign Compare_To_Constant3_out1 = Unit_Delay5_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay511_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay51_out1 <= Switch84_out1;
      end
    end



  assign bit_shift0_out1 = Unit_Delay51_out1 >> 8'd1;



  assign Switch84_out1 = (Compare_To_Constant3_out1 == 1'b0 ? bit_shift0_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant4_out1 = Unit_Delay5_out1 == 7'b0000000;



  assign CT3_out1_1 = Unit_Delay5_out1 == 7'b0010100;



  assign Or4_out1 = CT3_out1_1 & Switch125_out1;



  assign CT42_out1 = Unit_Delay5_out1 == 7'b0001110;



  assign CT34_out1_1 = Unit_Delay5_out1 == 7'b0001011;



  assign CT32_out1_1 = Unit_Delay5_out1 == 7'b0001010;



  assign CT24_out1_1 = Unit_Delay5_out1 == 7'b0000111;



  assign CT16_out1_1 = Unit_Delay5_out1 == 7'b0000101;



  assign signal2_19 = (CT6_out1 == 1'b0 ? s1z5_out1 :
              32'sb00000000000000000000000000000000);



  assign signal2_20 = signal2_19;

  always @(posedge g_clk)
    begin : s1z57_process
      if (Rst_n == 1'b0) begin
        s1z5_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1 <= signal2_20;
      end
    end



  assign signal3_19 = (CT6_out1 == 1'b0 ? s1z5_out1 :
              s1z5_out1);



  assign s_27 = signal3_19;

  assign signal2_21 = (CT4_out1 == 1'b0 ? s1z5_out1_1 :
              32'sb00000000000000000000000000000000);



  assign signal2_22 = signal2_21;

  always @(posedge g_clk)
    begin : s1z56_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_1 <= signal2_22;
      end
    end



  assign signal3_20 = (CT4_out1 == 1'b0 ? s_27 :
              s1z5_out1_1);



  assign signal3_21 = signal3_20;

  assign s_28 = signal3_21;

  assign signal2_23 = (CT26_out1 == 1'b0 ? s1z5_out1_2 :
              32'sb00000000000000000000000000000000);



  assign signal2_24 = signal2_23;

  always @(posedge g_clk)
    begin : s1z55_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_2 <= signal2_24;
      end
    end



  assign signal3_22 = (CT26_out1 == 1'b0 ? s_28 :
              s1z5_out1_2);



  assign signal3_23 = signal3_22;

  assign s_29 = signal3_23;

  assign signal2_25 = (Or5_out1 == 1'b0 ? s1z5_out1_3 :
              32'sb00000000000000000000000000000000);



  assign signal2_26 = signal2_25;

  always @(posedge g_clk)
    begin : s1z5_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_3 <= signal2_26;
      end
    end



  assign Bus_Creator3_out1_signal3 = s1z5_out1_3;

  assign Constant8_out1_dtc = 48'sh0000003FFFFF;



  assign Constant5_out1_dtc = 48'shFFFFFFC00001;



  assign signal4 = (CT18_out1 == 1'b0 ? dw18Lmt_b18 :
              dw18Lmt_b18);



  assign signal4_1 = signal4;

  assign signal4_2 = signal4_1;

  assign signal4_dtc = {signal4_2[17], signal4_2};



  assign UM_5_in0 =  - ({dw18Lmt_b18[17], dw18Lmt_b18});
  assign UM_5_out1 = UM_5_in0[17:0];



  assign signal5 = (CT18_out1 == 1'b0 ? UM_5_out1 :
              UM_5_out1);



  assign signal5_1 = signal5;

  assign signal5_2 = signal5_1;

  assign signal5_dtc = signal5_2[15:0];



  assign switch_compare_1 = Switch125_out1 > 1'b0;



  assign CT14_out1 = Unit_Delay5_out1 == 7'b0000010;



  assign CT40_out1 = Unit_Delay5_out1 == 7'b0001101;



  assign CT30_out1_1 = Unit_Delay5_out1 == 7'b0001001;



  assign Constant1_out1_dtc_1 = 48'sh00007FFFFFFF;



  assign Constant12_out1_dtc = 48'shFFFF80000000;



  assign Constant29_out1_dtc = 32'sb00000000000000011111111111111111;



  assign Constant28_out1_dtc = 32'sb11111111111111100000000000000001;



  assign Log1_out1 =  ~ WtLoad;



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Log1_out1;
      end
    end



  assign Log3_out1 = WtLoad & Unit_Delay1_out1;



  assign CT7_out1_1 = PLL_Fre != 16'b0000000000000000;



  assign Log2_out1 = Log3_out1 & CT7_out1_1;



  assign CT84_out1 = PLL_Fre >= 16'b1111111111111010;



  assign Switch138_out1 = (CT84_out1 == 1'b0 ? PLL_Fre :
              16'b1111111111111010);



  always @(posedge g_clk)
    begin : Unit_Delay61_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1 <= Add14_out1;
      end
    end



  assign Add14_out1 = Switch138_out1 + Unit_Delay61_out1;



  assign Relational_Operator9_relop1 = Add14_out1 < Unit_Delay61_out1;



  assign Switch8_out1 = (Relational_Operator9_relop1 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 9'b000000000;
      end
      else begin
        Unit_Delay3_out1 <= Add7_out1;
      end
    end



  assign Add7_out1 = Switch8_out1 + Unit_Delay3_out1;



  assign Add11_out1 = Add7_out1 + 9'b000000001;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(9),
                                        .DataWidth(35)
                                        )
                                    u_RAM512   (.g_clk(g_clk),
                                                .wr_din(Switch9_out1),
                                                .wr_addr(Add7_out1),
                                                .wr_en(Relational_Operator9_relop1),
                                                .rd_addr(Add11_out1),
                                                .rd_dout(RAM512_out1)
                                                );

  assign Add13_add_temp = ({23'b0, WtLoadOffset}) + ({1'b0, RAM512_out1});
  assign Add13_out1 = Add13_add_temp[12:0];



  assign Add13_out1_dtc = {22'b0, Add13_out1};



  assign Switch9_out1 = (Log2_out1 == 1'b0 ? Add3_out1 :
              Add13_out1_dtc);



  always @(posedge g_clk)
    begin : Unit_Delay201_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 35'h000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch9_out1;
      end
    end



  assign Gain_out1 = {{2{Data_Type_Conversion11_out1[17]}}, {Data_Type_Conversion11_out1, 16'b0000000000000000}};



  assign SW_1_out1 = (Or4_out1 == 1'b0 ? Dly_3_out1 :
              s1z4_out1);



  always @(posedge g_clk)
    begin : Dly_3_process
      if (Rst_n == 1'b0) begin
        Dly_3_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Dly_3_out1 <= SW_1_out1;
      end
    end



  assign signal1 = (Or7_out1 == 1'b0 ? s1z4_out1_1 :
              DTC_b16_1_out1);



  assign signal1_1 = signal1;

  always @(posedge g_clk)
    begin : s1z42_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z4_out1_1 <= signal1_1;
      end
    end



  assign UM_3_in0 =  - ({s1z4_out1_1[31], s1z4_out1_1});
  assign UM_3_out1 = UM_3_in0[31:0];



  assign signal1_2 = (Or9_out1 == 1'b0 ? s1z4_out1_2 :
              DTC_b16_1_out1);



  assign signal1_3 = signal1_2;

  always @(posedge g_clk)
    begin : s1z44_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z4_out1_2 <= signal1_3;
      end
    end



  assign UM_4_in0 =  - ({s1z4_out1_2[31], s1z4_out1_2});
  assign UM_4_out1 = UM_4_in0[31:0];



  assign SW_5_out1 = (Or4_out1 == 1'b0 ? Dly_4_out1 :
              Data_Type_S4_out1);



  always @(posedge g_clk)
    begin : Dly_4_process
      if (Rst_n == 1'b0) begin
        Dly_4_out1 <= 16'sb0000000000000000;
      end
      else begin
        Dly_4_out1 <= SW_5_out1;
      end
    end



  assign UM_1_in0 =  - ({Dly_4_out1[15], Dly_4_out1});
  assign UM_1_out1 = UM_1_in0[15:0];



  assign SW_2_out1 = (Or4_out1 == 1'b0 ? Dly_1_out1 :
              Switch17_out1);



  always @(posedge g_clk)
    begin : Dly_1_process
      if (Rst_n == 1'b0) begin
        Dly_1_out1 <= 16'sb0000000000000000;
      end
      else begin
        Dly_1_out1 <= SW_2_out1;
      end
    end



  assign UM_2_in0 =  - ({Dly_1_out1[15], Dly_1_out1});
  assign UM_2_out1 = UM_2_in0[15:0];



  assign signal2_27 = (CT5_out1 == 1'b0 ? UM_2_out1 :
              UM_2_out1);



  assign s_30 = signal2_27;

  assign signal2_28 = (CT20_out1 == 1'b0 ? s_30 :
              UM_1_out1);



  assign signal2_29 = signal2_28;

  assign DTC_b18_6_out1 = {{2{signal2_29[15]}}, signal2_29};



  assign signal2_30 = (CT12_out1 == 1'b0 ? DTC_b18_6_out1 :
              Wref_add_b18);



  assign signal2_31 = signal2_30;

  assign DTC_b18_1_out1 = {{14{signal2_31[17]}}, signal2_31};



  assign signal2_32 = (CT41_out1 == 1'b0 ? DTC_b18_1_out1 :
              UM_4_out1);



  assign s_31 = signal2_32;

  assign signal2_33 = (CT39_out1 == 1'b0 ? s_31 :
              Dly_2_out1);



  assign s_32 = signal2_33;

  assign signal2_34 = (CT33_out1 == 1'b0 ? s_32 :
              Dly_5_out1);



  assign s_33 = signal2_34;

  assign signal2_35 = (CT31_out1 == 1'b0 ? s_33 :
              UM_3_out1);



  assign s_34 = signal2_35;

  assign signal2_36 = (CT29_out1 == 1'b0 ? s_34 :
              Dly_5_out1);



  assign s_35 = signal2_36;

  assign signal2_37 = (CT23_out1 == 1'b0 ? s_35 :
              Dly_3_out1);



  assign signal2_38 = signal2_37;

  assign RO62_relop1 = Add4_out1 > 48'sh00007FFFFFFF;



  assign Switch8_out1_1 = (RO62_relop1 == 1'b0 ? Add4_out1 :
              Constant1_out1_dtc_1);



  assign RO32_relop1 = Switch8_out1_1 < 48'shFFFF80000000;



  assign Switch7_out1_1 = (RO32_relop1 == 1'b0 ? Switch8_out1_1 :
              Constant12_out1_dtc);



  assign Data_Type_Conversion3_out1 = Switch7_out1_1[23:0];



  assign alpha_dtc = {{8{Data_Type_Conversion3_out1[23]}}, Data_Type_Conversion3_out1};



  assign signal1_4 = (Or5_out1 == 1'b0 ? s1z4_out1 :
              alpha_dtc);



  assign signal1_5 = signal1_4;

  always @(posedge g_clk)
    begin : s1z4_process
      if (Rst_n == 1'b0) begin
        s1z4_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z4_out1 <= signal1_5;
      end
    end



  assign signal1_6 = (Or6_out1 == 1'b0 ? s1z4_out1_3 :
              DTC_b16_1_out1);



  assign signal1_7 = signal1_6;

  always @(posedge g_clk)
    begin : s1z41_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z4_out1_3 <= signal1_7;
      end
    end



  assign Switch38_out1 = (CT30_out1_1 == 1'b0 ? Unit_Delay17_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay171_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch38_out1;
      end
    end



  assign Bit_Slice3_out1 = Abs2_out1[47:18];



  assign DTC_b16_0_out1 = $signed(Bit_Slice3_out1[27:0]);



  assign UM_0_in0 =  - ({DTC_b16_0_out1[27], DTC_b16_0_out1});
  assign UM_0_out1 = UM_0_in0[27:0];



  assign CT0_0_out1 = Add4_out1 >= 48'sh000000000000;



  assign Switch28_out1 = (CT0_0_out1 == 1'b0 ? UM_0_out1 :
              DTC_b16_0_out1);



  assign DTC_b16_1_out1 = {{4{Switch28_out1[27]}}, Switch28_out1};



  assign signal1_8 = (Or8_out1 == 1'b0 ? s1z4_out1_4 :
              DTC_b16_1_out1);



  assign signal1_9 = signal1_8;

  always @(posedge g_clk)
    begin : s1z43_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z4_out1_4 <= signal1_9;
      end
    end



  assign Switch51_out1 = (CT40_out1 == 1'b0 ? Unit_Delay30_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay301_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch51_out1;
      end
    end



  assign Switch26_out1_dtc = Switch26_out1[37:0];



  assign Add5_1 = {signal5_2[17], signal5_2};
  assign Add5_2 = {{3{Switch23_out1[15]}}, Switch23_out1};
  assign Add5_sub_temp = Add5_1 - Add5_2;
  assign Add5_out1_1 = Add5_sub_temp[16:0];



  assign Bit_Concat3_out1 = {Add5_out1_1, 14'b00000000000000};



  assign Data_Type_S1_out1_1 = Bit_Concat3_out1;



  assign Data_Type_S15_out1 = {{7{Data_Type_S1_out1_1[30]}}, Data_Type_S1_out1_1};



  assign signal8 = (CT18_out1 == 1'b0 ? Data_Type_S15_out1 :
              Data_Type_S15_out1);



  assign signal8_1 = signal8;

  assign signal8_2 = signal8_1;

  assign signal7_dtc = {signal7[37], signal7};



  assign Add8_1 = {signal4_2[17], signal4_2};
  assign Add8_2 = {{3{Switch23_out1[15]}}, Switch23_out1};
  assign Add8_sub_temp = Add8_1 - Add8_2;
  assign Add8_out1 = Add8_sub_temp[16:0];



  assign Bit_Concat1_out1 = {Add8_out1, 14'b00000000000000};



  assign Data_Type_S19_out1 = Bit_Concat1_out1;



  assign Data_Type_S14_out1 = {{7{Data_Type_S19_out1[30]}}, Data_Type_S19_out1};



  assign signal7_1 = (CT18_out1 == 1'b0 ? Data_Type_S14_out1 :
              Data_Type_S14_out1);



  assign signal7_2 = signal7_1;

  assign signal7 = signal7_2;

  assign Switch59_out1 = (VolLoop_En == 1'b0 ? Switch36_out1 :
              38'sh0000000000);



  assign Switch18_out1 = (CT14_out1 == 1'b0 ? Unit_Delay8_out1 :
              Switch59_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 38'sh0000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch18_out1;
      end
    end



  assign signal6 = (CT18_out1 == 1'b0 ? Unit_Delay8_out1 :
              Unit_Delay8_out1);



  assign signal6_1 = signal6;

  assign signal6_2 = signal6_1;

  assign signal1_10 = (CT6_out1 == 1'b0 ? s1z4_out1_5 :
              Data_Type_Conversion7_out1);



  assign signal1_11 = signal1_10;

  always @(posedge g_clk)
    begin : s1z47_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_5 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z4_out1_5 <= signal1_11;
      end
    end



  assign Switch68_out1 = (Or3_out1 == 1'b0 ? s1z4_out1_5 :
              24'sb000000000000000000000000);



  assign signal2_39 = (CT18_out1 == 1'b0 ? Switch68_out1 :
              Switch68_out1);



  assign signal2_40 = signal2_39;

  assign signal2_41 = signal2_40;

  assign Switch37_out1 = (switch_compare_1 == 1'b0 ? 24'sb000000000000000000000000 :
              signal2_41);



  assign Add9_1 = {{15{Switch37_out1[23]}}, Switch37_out1};
  assign Add9_2 = {signal6_2[37], signal6_2};
  assign Add9_out1 = Add9_1 + Add9_2;



  assign RO10_1_1 = {signal7[37], signal7};
  assign RO10_relop1 = Add9_out1 > RO10_1_1;



  assign Switch26_out1 = (RO10_relop1 == 1'b0 ? Add9_out1 :
              signal7_dtc);



  assign RO111_1_1 = {signal8_2[37], signal8_2};
  assign RO111_relop1 = Switch26_out1 < RO111_1_1;



  assign Switch36_out1 = (RO111_relop1 == 1'b0 ? Switch26_out1_dtc :
              signal8_2);



  assign Bit_Slice9_out1 = Switch36_out1[37:14];



  assign Data_Type_S6_out1 = Bit_Slice9_out1;



  assign signal9 = (CT18_out1 == 1'b0 ? Data_Type_S6_out1 :
              Data_Type_S6_out1);



  assign signal9_1 = signal9;

  assign signal9_2 = signal9_1;

  assign Switch22_out1_dtc = Switch22_out1[15:0];



  assign signal2_42 = (Or6_out1 == 1'b0 ? s1z5_out1_4 :
              DTC_b16_2_out1);



  assign signal2_43 = signal2_42;

  always @(posedge g_clk)
    begin : s1z51_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_4 <= signal2_43;
      end
    end



  assign Bus_Creator19_out1_signal3 = s1z5_out1_4;

  assign signal2_44 = (Or7_out1 == 1'b0 ? s1z5_out1_5 :
              DTC_b16_2_out1);



  assign signal2_45 = signal2_44;

  always @(posedge g_clk)
    begin : s1z52_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_5 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_5 <= signal2_45;
      end
    end



  assign Bus_Creator10_out1_signal3 = s1z5_out1_5;

  assign signal2_46 = (Or8_out1 == 1'b0 ? s1z5_out1_6 :
              DTC_b16_2_out1);



  assign signal2_47 = signal2_46;

  always @(posedge g_clk)
    begin : s1z53_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_6 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_6 <= signal2_47;
      end
    end



  assign Bus_Creator20_out1_signal3 = s1z5_out1_6;

  assign Abs2_y = (Add4_out1 < 48'sh000000000000 ?  - ({Add4_out1[47], Add4_out1}) :
              {Add4_out1[47], Add4_out1});
  assign Abs2_out1 = Abs2_y[47:0];



  assign Bit_Slice4_out1 = Abs2_out1[17:0];



  assign DTC_b32_0_out1 = {2'b0, Bit_Slice4_out1};



  assign UM_11_in0 =  - ({DTC_b32_0_out1[19], DTC_b32_0_out1});
  assign UM_1_out1_1 = UM_11_in0[19:0];



  assign CT0_1_out1 = Add4_out1 >= 48'sh000000000000;



  assign Switch31_out1 = (CT0_1_out1 == 1'b0 ? UM_1_out1_1 :
              DTC_b32_0_out1);



  assign DTC_b16_2_out1 = {{12{Switch31_out1[19]}}, Switch31_out1};



  assign signal2_48 = (Or9_out1 == 1'b0 ? s1z5_out1_7 :
              DTC_b16_2_out1);



  assign signal2_49 = signal2_48;

  always @(posedge g_clk)
    begin : s1z54_process
      if (Rst_n == 1'b0) begin
        s1z5_out1_7 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z5_out1_7 <= signal2_49;
      end
    end



  assign Bus_Creator11_out1_signal3 = s1z5_out1_7;

  assign signal3_24 = (Or9_out1 == 1'b0 ? s_29 :
              Bus_Creator11_out1_signal3);



  assign s_36 = signal3_24;

  assign signal3_25 = (Or8_out1 == 1'b0 ? s_36 :
              Bus_Creator20_out1_signal3);



  assign s_37 = signal3_25;

  assign signal3_26 = (Or7_out1 == 1'b0 ? s_37 :
              Bus_Creator10_out1_signal3);



  assign s_38 = signal3_26;

  assign signal3_27 = (Or6_out1 == 1'b0 ? s_38 :
              Bus_Creator19_out1_signal3);



  assign s_39 = signal3_27;

  assign signal3_28 = (Or5_out1 == 1'b0 ? s_39 :
              Bus_Creator3_out1_signal3);



  assign signal3_29 = signal3_28;

  assign Switch15_out1 = (CT16_out1_1 == 1'b0 ? Unit_Delay10_out1_1 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay101_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay10_out1_1 <= Switch15_out1;
      end
    end



  assign RO161_relop1 = 16'sb0000000011111111 > Unit_Delay10_out1_1;



  assign Switch16_out1 = (RO161_relop1 == 1'b0 ? 16'sb0000000011111111 :
              Unit_Delay10_out1_1);



  assign RO12_relop1_1 = Switch16_out1 > 16'sb1111111100000001;



  assign Switch17_out1 = (RO12_relop1_1 == 1'b0 ? 16'sb1111111100000001 :
              Switch16_out1);



  assign DTC_b16_2_out1_1 = {{16{Switch17_out1[15]}}, Switch17_out1};



  assign Bus_Creator3_out1_signal2 = DTC_b16_2_out1_1;

  assign Switch28_out1_1 = (CT24_out1_1 == 1'b0 ? Unit_Delay14_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay141_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch28_out1_1;
      end
    end



  assign Bus_Creator19_out1_signal2 = Unit_Delay14_out1;

  assign Switch40_out1 = (CT32_out1_1 == 1'b0 ? Unit_Delay18_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch40_out1;
      end
    end



  assign SW_7_out1 = (Or4_out1 == 1'b0 ? Dly_5_out1 :
              Unit_Delay18_out1);



  always @(posedge g_clk)
    begin : Dly_5_process
      if (Rst_n == 1'b0) begin
        Dly_5_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Dly_5_out1 <= SW_7_out1;
      end
    end



  assign Bus_Creator10_out1_signal2 = Dly_5_out1;

  assign Switch45_out1 = (CT34_out1_1 == 1'b0 ? Unit_Delay19_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch45_out1;
      end
    end



  assign Bus_Creator20_out1_signal2 = Unit_Delay19_out1;

  assign Switch53_out1 = (CT42_out1 == 1'b0 ? Unit_Delay31_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay31_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay31_out1 <= Switch53_out1;
      end
    end



  assign SW_4_out1 = (Or4_out1 == 1'b0 ? Dly_2_out1 :
              Unit_Delay31_out1);



  always @(posedge g_clk)
    begin : Dly_2_process
      if (Rst_n == 1'b0) begin
        Dly_2_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Dly_2_out1 <= SW_4_out1;
      end
    end



  assign Bus_Creator11_out1_signal2 = Dly_2_out1;

  always @(posedge g_clk)
    begin : Unit_Delay50_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay50_out1 <= Switch86_out1;
      end
    end



  assign Switch122_out1 = (Compare_To_Constant4_out1 == 1'b0 ? Unit_Delay50_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator1_out1 = Switch84_out1 | Switch122_out1;



  assign Product11_1 = {1'b0, Bitwise_Operator1_out1};
  assign Product11_mul_temp = Product11_1 * Switch0_out1;
  assign Product1_out1 = Product11_mul_temp[35:0];



  assign Compare_To_Constant2_out1 = Product1_out1 <= 36'sh0003FF001;



  assign Switch86_out1 = (Compare_To_Constant2_out1 == 1'b0 ? Switch122_out1 :
              Bitwise_Operator1_out1);



  assign Switch87_out1 = (Compare_To_Constant5_out1 == 1'b0 ? Unit_Delay38_out1_1 :
              Switch86_out1);



  always @(posedge g_clk)
    begin : Unit_Delay381_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay38_out1_1 <= Switch87_out1;
      end
    end



  assign Data_Type_Conversion5_out1 = Unit_Delay38_out1_1;



  assign signal2_50 = (CT26_out1 == 1'b0 ? Data_Type_Conversion4_out1 :
              Data_Type_Conversion5_out1);



  assign signal2_51 = signal2_50;

  assign DTC_b18_3_out1 = {{8{signal2_51[23]}}, signal2_51};



  assign signal2_52 = (Or9_out1 == 1'b0 ? DTC_b18_3_out1 :
              Bus_Creator11_out1_signal2);



  assign s_40 = signal2_52;

  assign signal2_53 = (Or8_out1 == 1'b0 ? s_40 :
              Bus_Creator20_out1_signal2);



  assign s_41 = signal2_53;

  assign signal2_54 = (Or7_out1 == 1'b0 ? s_41 :
              Bus_Creator10_out1_signal2);



  assign s_42 = signal2_54;

  assign signal2_55 = (Or6_out1 == 1'b0 ? s_42 :
              Bus_Creator19_out1_signal2);



  assign s_43 = signal2_55;

  assign signal2_56 = (Or5_out1 == 1'b0 ? s_43 :
              Bus_Creator3_out1_signal2);



  assign signal2_57 = signal2_56;

  assign Bit_Slice20_out1 = Add4_out1[47:11];



  assign Data_Type_Conversion12_out1 = $signed(Bit_Slice20_out1[24:0]);



  assign RO61_relop1 = Data_Type_Conversion12_out1 > 25'sb0000000000000011111111111;



  assign Switch8_out1_2 = (RO61_relop1 == 1'b0 ? Data_Type_Conversion12_out1 :
              Constant14_out1_dtc);



  assign RO31_relop1 = Switch8_out1_2 < 25'sb1111111111111100000000001;



  assign Switch7_out1_2 = (RO31_relop1 == 1'b0 ? Switch8_out1_2 :
              Constant13_out1_dtc);



  assign Data_Type_Conversion8_out1 = Switch7_out1_2[11:0];



  assign signal1_12 = (CT26_out1 == 1'b0 ? s1z4_out1_6 :
              Data_Type_Conversion8_out1);



  assign signal1_13 = signal1_12;

  always @(posedge g_clk)
    begin : s1z45_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_6 <= 12'sb000000000000;
      end
      else begin
        s1z4_out1_6 <= signal1_13;
      end
    end



  assign CT2_out1_1 = Bit_Concat_out1 == 2'b11;



  assign Switch3_out1_1 = (CT2_out1_1 == 1'b0 ? s1z4_out1_6 :
              12'sb100000000001);



  assign Bit_Slice1_out1_1 = Unit_Delay33_out1[17:6];



  assign Data_Type_S12_out1 = Bit_Slice1_out1_1;



  assign Switch1_out1_2 = (Flt == 1'b0 ? Data_Type_S12_out1 :
              Switch107_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_1 <= Switch1_out1_3;
      end
    end



  assign Switch1_out1_3 = (CT44_out1 == 1'b0 ? Unit_Delay1_out1_1 :
              Switch1_out1_2);



  assign Bit_Slice1_out1_2 = Switch1_out1_3[11];



  assign Switch87_out1_1 = (CT56_out1 == 1'b0 ? Unit_Delay33_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 18'sb000000000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch87_out1_1;
      end
    end



  assign signal2_58 = (CT57_out1 == 1'b0 ? Unit_Delay33_out1 :
              Unit_Delay33_out1);



  assign s_44 = signal2_58;

  assign signal2_59 = (CT55_out1 == 1'b0 ? s_44 :
              Unit_Delay30_out1_1);



  assign signal2_60 = signal2_59;

  assign signal2_61 = signal2_60;

  assign Add12_out1_2 = Add11_out1_1 + 7'b0000001;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch84_out1_1),
                                                               .wr_addr(Add11_out1_1),
                                                               .wr_en(Switch208_out1),
                                                               .rd_addr(Add12_out1_2),
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)
                                                               );

  assign Switch98_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1);



  assign Switch58_out1 = (CT57_out1_1 == 1'b0 ? Unit_Delay21_out1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch58_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay394_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_5 <= Switch107_out1_6;
      end
    end



  assign Switch107_out1_6 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_5 :
              Unit_Delay21_out1);



  always @(posedge g_clk)
    begin : Delay16_process
      if (Rst_n == 1'b0) begin
        Delay16_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        Delay16_out1 <= Add_out1_1;
      end
    end



  assign Switch13_out1 = (signal3_18 == 1'b0 ? Delay16_out1 :
              Constant9_out1_dtc);



  assign Switch150_out1 = (CT89_out1 == 1'b0 ? Unit_Delay69_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay69_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay69_out1 <= Switch150_out1;
      end
    end



  assign Switch6_out1 = (SDQEn == 1'b0 ? Unit_Delay69_out1 :
              Unit_Delay4_out1);



  assign Switch29_out1 = (CT29_out1_1 == 1'b0 ? Unit_Delay11_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch29_out1;
      end
    end



  assign Switch7_out1_3 = (SDQEn == 1'b0 ? Unit_Delay11_out1 :
              Unit_Delay5_out1_1);



  assign Switch31_out1_1 = (CT31_out1_1 == 1'b0 ? Unit_Delay12_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch31_out1_1;
      end
    end



  assign Unary_Minus_in0 =  - ({Unit_Delay20_out1_1[11], Unit_Delay20_out1_1});
  assign Unary_Minus_out1_1 = Unary_Minus_in0[11:0];



  assign Add19_out1 = Add16_out1 + 8'b00000001;



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay16_out1 <= Add16_out1;
      end
    end



  assign Switch50_out1 = (Switch210_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  assign Add16_out1 = Switch50_out1 + Unit_Delay16_out1;



  assign signal1_14 = (CT38_out1 == 1'b0 ? Unit_Delay5_out1_1 :
              Unit_Delay5_out1_1);



  assign s_45 = signal1_14;

  assign signal1_15 = (CT36_out1 == 1'b0 ? s_45 :
              Unit_Delay4_out1);



  assign signal1_16 = signal1_15;

  assign signal1_17 = signal1_16;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram   (.g_clk(g_clk),
                                                       .wr_din(signal1_17),
                                                       .wr_addr(Add16_out1),
                                                       .wr_en(Switch210_out1),
                                                       .rd_addr(Add19_out1),
                                                       .rd_dout(UVctDelay_Ram_out1)
                                                       );

  assign Switch54_out1 = (CT37_out1_1 == 1'b0 ? Unit_Delay20_out1_1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1_1 <= Switch54_out1;
      end
    end



  assign signal2_62 = (CT38_out1 == 1'b0 ? Unit_Delay20_out1_1 :
              Unit_Delay20_out1_1);



  assign s_46 = signal2_62;

  assign signal2_63 = (CT36_out1 == 1'b0 ? s_46 :
              Unit_Delay17_out1_1);



  assign signal2_64 = signal2_63;

  assign signal2_65 = signal2_64;

  assign Switch209_out1 = (Relational_Operator3_relop1 == 1'b0 ? Unit_Delay32_out1 :
              1'b1);



  assign Switch82_out1 = (CT24_out1 == 1'b0 ? Switch209_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 1'b0;
      end
      else begin
        Unit_Delay32_out1 <= Switch82_out1;
      end
    end



  assign Or4_out1_1 = Relational_Operator3_relop1 | Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay56_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1 <= Switch210_out1;
      end
    end



  assign Switch210_out1 = (CT24_out1 == 1'b0 ? Unit_Delay56_out1 :
              Or4_out1_1);



  assign Switch215_out1 = (Switch210_out1 == 1'b0 ? signal2_65 :
              UVctDelay_Ram_out1);



  assign Switch52_out1 = (CT35_out1 == 1'b0 ? Unit_Delay17_out1_1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1_1 <= Switch52_out1;
      end
    end



  assign Unary_Minus1_in0 =  - ({Unit_Delay17_out1_1[11], Unit_Delay17_out1_1});
  assign Unary_Minus1_out1 = Unary_Minus1_in0[11:0];



  assign signal2_66 = (CT34_out1 == 1'b0 ? Unary_Minus1_out1 :
              Unary_Minus1_out1);



  assign s_47 = signal2_66;

  assign signal2_67 = (CT32_out1 == 1'b0 ? s_47 :
              Unit_Delay20_out1_1);



  assign s_48 = signal2_67;

  assign signal2_68 = (CT30_out1 == 1'b0 ? s_48 :
              Unit_Delay17_out1_1);



  assign s_49 = signal2_68;

  assign signal2_69 = (CT90_out1 == 1'b0 ? s_49 :
              Unary_Minus_out1_1);



  assign signal2_70 = signal2_69;

  assign Switch14_out1 = (CT13_out1_1 == 1'b0 ? Unit_Delay4_out1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch14_out1;
      end
    end



  assign Switch17_out1_1 = (CT16_out1 == 1'b0 ? Unit_Delay5_out1_1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1_1 <= Switch17_out1_1;
      end
    end



  assign signal1_18 = (CT34_out1 == 1'b0 ? Unit_Delay5_out1_1 :
              Unit_Delay5_out1_1);



  assign s_50 = signal1_18;

  assign signal1_19 = (CT32_out1 == 1'b0 ? s_50 :
              Unit_Delay4_out1);



  assign s_51 = signal1_19;

  assign signal1_20 = (CT30_out1 == 1'b0 ? s_51 :
              Unit_Delay5_out1_1);



  assign s_52 = signal1_20;

  assign signal1_21 = (CT90_out1 == 1'b0 ? s_52 :
              Unit_Delay4_out1);



  assign signal1_22 = signal1_21;

  assign Add4_1 = {signal1_22[11], signal1_22};
  assign Add4_2 = {signal2_70[11], signal2_70};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_out1_1 = {{12{Add4_add_temp[12]}}, Add4_add_temp};



  assign RO8_relop1 = Add4_out1_1 > 25'sb0000000000000111111111111;



  assign Switch76_out1 = (RO8_relop1 == 1'b0 ? Add4_out1_1 :
              25'sb0000000000000111111111111);



  assign RO7_relop1 = Switch76_out1 < 25'sb1111111111111000000000001;



  assign Switch79_out1_1 = (RO7_relop1 == 1'b0 ? Switch76_out1 :
              25'sb1111111111111000000000001);



  assign Bit_Slice2_out1 = Switch79_out1_1[24:1];



  assign Data_Type_Conversion3_out1_1 = $signed(Bit_Slice2_out1[11:0]);



  assign Switch33_out1 = (CT33_out1_1 == 1'b0 ? Unit_Delay13_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1 <= Switch33_out1;
      end
    end



  assign signal1_23 = (CT54_out1 == 1'b0 ? Unit_Delay13_out1 :
              Unit_Delay13_out1);



  assign s_53 = signal1_23;

  assign signal1_24 = (CT53_out1 == 1'b0 ? s_53 :
              Unit_Delay12_out1);



  assign s_54 = signal1_24;

  assign signal1_25 = (CT52_out1 == 1'b0 ? s_54 :
              Unit_Delay13_out1);



  assign s_55 = signal1_25;

  assign signal1_26 = (CT51_out1_1 == 1'b0 ? s_55 :
              Unit_Delay12_out1);



  assign s_56 = signal1_26;

  assign signal1_27 = (CT50_out1 == 1'b0 ? s_56 :
              Switch7_out1_3);



  assign s_57 = signal1_27;

  assign signal1_28 = (CT49_out1 == 1'b0 ? s_57 :
              Switch6_out1);



  assign s_58 = signal1_28;

  assign signal1_29 = (CT48_out1 == 1'b0 ? s_58 :
              Switch7_out1_3);



  assign s_59 = signal1_29;

  assign signal1_30 = (CT47_out1 == 1'b0 ? s_59 :
              Switch6_out1);



  assign s_60 = signal1_30;

  assign signal1_31 = (CT4_out1_1 == 1'b0 ? s_60 :
              Switch107_out1);



  assign s_61 = signal1_31;

  assign signal1_32 = (CT7_out1 == 1'b0 ? s_61 :
              Switch107_out1_1);



  assign s_62 = signal1_32;

  assign signal1_33 = (CT2_out1 == 1'b0 ? s_62 :
              Switch107_out1_2);



  assign s_63 = signal1_33;

  assign signal1_34 = (CT3_out1 == 1'b0 ? s_63 :
              Switch107_out1);



  assign s_64 = signal1_34;

  assign signal1_35 = (CT1_out1 == 1'b0 ? s_64 :
              Switch107_out1_1);



  assign s_65 = signal1_35;

  assign signal1_36 = (CT5_out1_1 == 1'b0 ? s_65 :
              Switch107_out1_2);



  assign signal1_37 = signal1_36;

  assign signal1_38 = signal1_37;

  assign Product_out1_1 = signal1_38 * signal2_15;



  assign Add_1 = {{2{Product_out1_1[23]}}, Product_out1_1};
  assign Add_2 = {Switch13_out1[24], Switch13_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1_1 = Add_add_temp[24:0];



  assign CT55_out1_1 = Add_out1_1 > 25'sb0001111111111111111111111;



  assign Switch41_out1_1 = (CT55_out1_1 == 1'b0 ? Add_out1_1 :
              Constant2_out1_dtc);



  assign CT56_out1_1 = Switch41_out1_1 < 25'sb1110000000000000000000001;



  assign Switch42_out1 = (CT56_out1_1 == 1'b0 ? Switch41_out1_1 :
              Constant1_out1_dtc);



  assign Bit_Slice1_out1_3 = Switch42_out1[24:11];



  assign Data_Type_Conversion2_out1_1 = $signed(Bit_Slice1_out1_3[11:0]);



  assign Switch59_out1_1 = (CT58_out1 == 1'b0 ? Unit_Delay22_out1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch59_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay395_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_6 <= Switch107_out1_5;
      end
    end



  assign Switch107_out1_5 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_6 :
              Unit_Delay22_out1);



  assign signal1_39 = (CT57_out1 == 1'b0 ? Switch107_out1_5 :
              Switch107_out1_5);



  assign s_66 = signal1_39;

  assign signal1_40 = (CT55_out1 == 1'b0 ? s_66 :
              Switch107_out1_6);



  assign signal1_41 = signal1_40;

  assign signal1_42 = signal1_41;

  assign switch_compare_1_1 = Switch105_out1_1 > 1'b0;



  assign Switch84_out1_1 = (switch_compare_1_1 == 1'b0 ? 12'sb000000000000 :
              signal1_42);



  assign Switch97_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_1);



  assign Add7_stage2_1 = {{7{Switch97_out1[11]}}, Switch97_out1};
  assign Add7_stage2_2 = {{7{Switch98_out1[11]}}, Switch98_out1};
  assign Add7_op_stage2 = Add7_stage2_1 - Add7_stage2_2;



  assign Add7_stage3_1 = {signal2_61[17], signal2_61};
  assign Add7_stage3_add_temp = Add7_op_stage2 + Add7_stage3_1;
  assign Add7_out1_1 = Add7_stage3_add_temp[17:0];



  assign Switch83_out1 = (Switch208_out1 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1_1 = Switch83_out1 + Unit_Delay32_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay321_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay32_out1_1 <= Add11_out1_1;
      end
    end



  assign Ro10_relop1_1 = Unit_Delay32_out1_1 > Add11_out1_1;



  assign Switch49_out1 = (Ro10_relop1_1 == 1'b0 ? Unit_Delay57_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Switch49_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_2 <= Switch105_out1_1;
      end
    end



  assign Switch20_out1 = (Unit_Delay27_out1 == 1'b0 ? Unit_Delay54_out1 :
              1'b1);



  assign Switch17_out1_2 = (CT12_out1_1 == 1'b0 ? Switch20_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch17_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay241_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 5'b00000;
      end
      else begin
        Unit_Delay24_out1 <= Bit_Slice12_out1;
      end
    end



  assign Bit_Slice12_out1 = Bit_Slice6_out1_1[4:0];



  assign Relational_Operator3_relop1 = Bit_Slice12_out1 < Unit_Delay24_out1;



  always @(posedge g_clk)
    begin : Unit_Delay271_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1 <= 1'b0;
      end
      else begin
        Unit_Delay27_out1 <= Relational_Operator3_relop1;
      end
    end



  assign Or3_out1_1 = Unit_Delay27_out1 | Unit_Delay54_out1;



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Switch208_out1;
      end
    end



  assign Switch208_out1 = (CT12_out1_1 == 1'b0 ? Unit_Delay55_out1 :
              Or3_out1_1);



  assign Or2_out1 = Switch208_out1 & CT70_out1;



  assign Switch105_out1_1 = (Or2_out1 == 1'b0 ? Unit_Delay1_out1_2 :
              Unit_Delay57_out1);



  assign switch_compare_1_2 = Switch105_out1_1 > 1'b0;



  assign Switch79_out1 = (switch_compare_1_2 == 1'b0 ? 18'sb000000000000000000 :
              Add7_out1_1);



  assign Switch80_out1 = (CT51_out1 == 1'b0 ? Unit_Delay30_out1_1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        Unit_Delay30_out1_1 <= Switch80_out1;
      end
    end



  assign Bit_Slice6_out1_2 = Unit_Delay30_out1_1[17:6];



  assign Data_Type_S11_out1 = Bit_Slice6_out1_2;



  assign Switch10_out1 = (Flt == 1'b0 ? Data_Type_S11_out1 :
              Switch107_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay0_process
      if (Rst_n == 1'b0) begin
        Unit_Delay0_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay0_out1 <= Switch0_out1;
      end
    end



  assign Switch0_out1 = (CT44_out1 == 1'b0 ? Unit_Delay0_out1 :
              Switch10_out1);



  assign Bit_Slice_out1 = Switch0_out1[11];



  assign Bit_Concat_out1 = {Bit_Slice_out1, Bit_Slice1_out1_2};



  assign CT1_out1_1 = Bit_Concat_out1 == 2'b10;



  assign Switch2_out1_1 = (CT1_out1_1 == 1'b0 ? Switch3_out1_1 :
              12'sb011111111111);



  assign Switch11_out1 = (ERR == 1'b0 ? Switch2_out1_1 :
              Switch1_out1_3);



  assign signal1_43 = (CT6_out1 == 1'b0 ? Switch11_out1 :
              Switch11_out1);



  assign s_67 = signal1_43;

  assign signal1_44 = (CT4_out1 == 1'b0 ? s_67 :
              Switch11_out1);



  assign signal1_45 = signal1_44;

  assign s_68 = signal1_45;

  assign signal1_46 = (CT26_out1 == 1'b0 ? s_68 :
              Switch1_out1_3);



  assign signal1_47 = signal1_46;

  assign DTC_b18_4_out1 = {{4{signal1_47[11]}}, signal1_47};



  assign signal1_48 = (Or9_out1 == 1'b0 ? DTC_b18_4_out1 :
              PLL_Ky_b16);



  assign s_69 = signal1_48;

  assign signal1_49 = (Or8_out1 == 1'b0 ? s_69 :
              PLL_Kx_b16);



  assign s_70 = signal1_49;

  assign signal1_50 = (Or7_out1 == 1'b0 ? s_70 :
              PLL_Ky_b16);



  assign s_71 = signal1_50;

  assign signal1_51 = (Or6_out1 == 1'b0 ? s_71 :
              PLL_Kx_b16);



  assign s_72 = signal1_51;

  assign signal1_52 = (Or5_out1 == 1'b0 ? s_72 :
              PLL_Kdiff_b16);



  assign signal1_53 = signal1_52;

  assign Product6_mul_temp = signal1_53 * signal2_57;
  assign Product6_out1 = Product6_mul_temp[31:0];



  assign Add41_1 = {Product6_out1[31], Product6_out1};
  assign Add41_2 = {signal3_29[31], signal3_29};
  assign Add41_add_temp = Add41_1 + Add41_2;
  assign Add4_out1 = {{15{Add41_add_temp[32]}}, Add41_add_temp};



  assign RO64_relop1 = Add4_out1 > 48'sh0000003FFFFF;



  assign Switch8_out1_3 = (RO64_relop1 == 1'b0 ? Add4_out1 :
              Constant8_out1_dtc);



  assign RO34_relop1 = Switch8_out1_3 < 48'shFFFFFFC00001;



  assign Switch7_out1_4 = (RO34_relop1 == 1'b0 ? Switch8_out1_3 :
              Constant5_out1_dtc);



  assign Data_Type_Conversion7_out1 = Switch7_out1_4[23:0];



  assign signal1_54 = (CT4_out1 == 1'b0 ? s1z4_out1_7 :
              Data_Type_Conversion7_out1);



  assign signal1_55 = signal1_54;

  always @(posedge g_clk)
    begin : s1z46_process
      if (Rst_n == 1'b0) begin
        s1z4_out1_7 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z4_out1_7 <= signal1_55;
      end
    end



  assign Switch67_out1 = (Or3_out1 == 1'b0 ? s1z4_out1_7 :
              24'sb000000000000000000000000);



  assign Bit_Slice2_out1_1 = Switch67_out1[23:6];



  assign Data_Type_S2_out1 = Bit_Slice2_out1_1;



  assign signal1_56 = (CT18_out1 == 1'b0 ? Data_Type_S2_out1 :
              Data_Type_S2_out1);



  assign signal1_57 = signal1_56;

  assign signal1_58 = signal1_57;

  assign Add6_1 = {{7{signal3_2[11]}}, signal3_2};
  assign Add6_2 = {signal1_58[17], signal1_58};
  assign Add6_out1 = Add6_1 + Add6_2;



  assign RO5_1_1 = {signal4_2[17], signal4_2};
  assign RO5_relop1 = Add6_out1 > RO5_1_1;



  assign Switch22_out1 = (RO5_relop1 == 1'b0 ? Add6_out1 :
              signal4_dtc);



  assign RO9_1_1 = {signal5_2[17], signal5_2};
  assign RO9_relop1 = Switch22_out1 < RO9_1_1;



  assign Switch23_out1 = (RO9_relop1 == 1'b0 ? Switch22_out1_dtc :
              signal5_dtc);



  assign Add10_1 = {{9{Switch23_out1[15]}}, Switch23_out1};
  assign Add10_2 = {signal9_2[23], signal9_2};
  assign Add10_add_temp = Add10_1 + Add10_2;
  assign Add10_out1 = {Add10_add_temp[24], Add10_add_temp};



  assign Switch19_out1 = (CT15_out1 == 1'b0 ? Unit_Delay9_out1 :
              Add10_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch19_out1;
      end
    end



  assign Data_Type_S4_out1 = Unit_Delay9_out1[15:0];



  assign RO63_relop1 = Add_out1 > 32'sb00000000000000001111111111111111;



  assign Switch8_out1_4 = (RO63_relop1 == 1'b0 ? Add_out1 :
              32'sb00000000000000001111111111111111);



  assign RO33_relop1 = Switch8_out1_4 < 32'sb11111111111111110000000000000000;



  assign Switch7_out1_5 = (RO33_relop1 == 1'b0 ? Switch8_out1_4 :
              32'sb11111111111111110000000000000000);



  assign Data_Type_Conversion1_out1_1 = Switch7_out1_5[15:0];



  assign Switch25_out1 = (CT21_out1 == 1'b0 ? Unit_Delay12_out1_1 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay121_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay12_out1_1 <= Switch25_out1;
      end
    end



  assign signal1_59 = (CT5_out1 == 1'b0 ? Unit_Delay12_out1_1 :
              Unit_Delay12_out1_1);



  assign s_73 = signal1_59;

  assign signal1_60 = (CT20_out1 == 1'b0 ? s_73 :
              Data_Type_S4_out1);



  assign signal1_61 = signal1_60;

  assign s_74 = signal1_61;

  assign signal1_62 = (CT12_out1 == 1'b0 ? s_74 :
              Data_Type_S4_out1);



  assign signal1_63 = signal1_62;

  assign DTC_b18_2_out1 = {{16{signal1_63[15]}}, signal1_63};



  assign signal1_64 = (CT41_out1 == 1'b0 ? DTC_b18_2_out1 :
              Unit_Delay30_out1);



  assign s_75 = signal1_64;

  assign signal1_65 = (CT39_out1 == 1'b0 ? s_75 :
              s1z4_out1_4);



  assign s_76 = signal1_65;

  assign signal1_66 = (CT33_out1 == 1'b0 ? s_76 :
              Unit_Delay18_out1);



  assign s_77 = signal1_66;

  assign signal1_67 = (CT31_out1 == 1'b0 ? s_77 :
              Unit_Delay17_out1);



  assign s_78 = signal1_67;

  assign signal1_68 = (CT29_out1 == 1'b0 ? s_78 :
              s1z4_out1_3);



  assign s_79 = signal1_68;

  assign signal1_69 = (CT23_out1 == 1'b0 ? s_79 :
              s1z4_out1);



  assign signal1_70 = signal1_69;

  assign Add_out1 = signal1_70 + signal2_38;



  assign Switch20_out1_1 = (CT13_out1 == 1'b0 ? Unit_Delay6_out1 :
              Add_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch20_out1_1;
      end
    end



  assign RO16_relop1 = Unit_Delay6_out1 > 32'sb00000000000000011111111111111111;



  assign Switch57_out1 = (RO16_relop1 == 1'b0 ? Unit_Delay6_out1 :
              Constant29_out1_dtc);



  assign RO15_relop1 = Switch57_out1 < 32'sb11111111111111100000000000000001;



  assign Switch56_out1 = (RO15_relop1 == 1'b0 ? Switch57_out1 :
              Constant28_out1_dtc);



  assign Data_Type_Conversion11_out1 = Switch56_out1[17:0];



  assign From141_out1_dtc = {{2{Data_Type_Conversion11_out1[17]}}, {Data_Type_Conversion11_out1, 16'b0000000000000000}};



  assign Switch81_out1 = (Simu_On == 1'b0 ? From141_out1_dtc :
              Gain_out1);



  assign Data_Type_Conversion_out1 = {{10{Switch81_out1[35]}}, Switch81_out1[35:16]};



  assign Add3_1 = {{7{Data_Type_Conversion_out1[29]}}, Data_Type_Conversion_out1};
  assign Add3_2 = {2'b0, Unit_Delay20_out1};
  assign Add3_add_temp = Add3_1 + Add3_2;
  assign Add3_out1 = Add3_add_temp[34:0];



  assign Bit_Slice6_out1_1 = Add3_out1[34:22];



  assign y = Bit_Slice6_out1_1;

  assign y_1 = y;

  assign y_2 = y_1;

  assign wt_b13 = y_2;

  assign w_b18 = Data_Type_Conversion11_out1;

  assign wt_b35 = Add3_out1;

  assign Udp_b12 = Switch107_out1_6;

  assign Uqp_b12 = Switch107_out1_5;

  assign CT59_out1 = Unit_Delay38_out1 == 7'b0001011;



  assign Switch60_out1 = (CT59_out1 == 1'b0 ? Unit_Delay23_out1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch60_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay396_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_7 <= Switch107_out1_7;
      end
    end



  assign Switch107_out1_7 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_7 :
              Unit_Delay23_out1);



  assign Udn_b12 = Switch107_out1_7;

  assign CT60_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign Switch61_out1 = (CT60_out1 == 1'b0 ? Unit_Delay24_out1_1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1_1 <= Switch61_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay397_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_8 <= Switch107_out1_8;
      end
    end



  assign Switch107_out1_8 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_8 :
              Unit_Delay24_out1_1);



  assign Uqn_b12 = Switch107_out1_8;

  assign Delta_w_b16 = Data_Type_S4_out1;

  assign DTC_b16_1_out1_1 = Unit_Delay31_out1[15:0];



  assign dwdt_b16 = DTC_b16_1_out1_1;

  always @(posedge g_clk)
    begin : Unit_Delay331_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_1 <= 13'b0000000000000;
      end
      else begin
        Unit_Delay33_out1_1 <= Bit_Slice6_out1_1;
      end
    end



  assign Relational_Operator7_relop1 = Bit_Slice6_out1_1 < Unit_Delay33_out1_1;



  assign Pulse50x1_Hz = Relational_Operator7_relop1;

  assign Bit_Slice15_out1 = Bit_Slice6_out1_1[8:0];



  always @(posedge g_clk)
    begin : Unit_Delay27_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1_1 <= 9'b000000000;
      end
      else begin
        Unit_Delay27_out1_1 <= Bit_Slice15_out1;
      end
    end



  assign Relational_Operator6_relop1 = Bit_Slice15_out1 < Unit_Delay27_out1_1;



  assign Pulse50x16_Hz = Relational_Operator6_relop1;

  assign Bit_Slice8_out1 = Bit_Slice6_out1_1[7:0];



  always @(posedge g_clk)
    begin : Unit_Delay221_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1_1 <= 8'b00000000;
      end
      else begin
        Unit_Delay22_out1_1 <= Bit_Slice8_out1;
      end
    end



  assign Relational_Operator1_relop1 = Bit_Slice8_out1 < Unit_Delay22_out1_1;



  assign Pulse50x32_Hz = Relational_Operator1_relop1;

  assign Bit_Slice11_out1 = Bit_Slice6_out1_1[6:0];



  always @(posedge g_clk)
    begin : Unit_Delay231_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay23_out1_1 <= Bit_Slice11_out1;
      end
    end



  assign Relational_Operator2_relop1 = Bit_Slice11_out1 < Unit_Delay23_out1_1;



  assign Pulse50x64_Hz = Relational_Operator2_relop1;

  assign Bit_Slice7_out1 = Bit_Slice6_out1_1[5:0];



  always @(posedge g_clk)
    begin : Unit_Delay211_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1_1 <= 6'b000000;
      end
      else begin
        Unit_Delay21_out1_1 <= Bit_Slice7_out1;
      end
    end



  assign Relational_Operator8_relop1 = Bit_Slice7_out1 < Unit_Delay21_out1_1;



  assign Pulse50x128_Hz = Relational_Operator8_relop1;

  assign Pulse50x256_Hz = Relational_Operator3_relop1;

  assign Bit_Slice13_out1 = Bit_Slice6_out1_1[3:0];



  always @(posedge g_clk)
    begin : Unit_Delay25_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1 <= 4'b0000;
      end
      else begin
        Unit_Delay25_out1 <= Bit_Slice13_out1;
      end
    end



  assign Relational_Operator4_relop1 = Bit_Slice13_out1 < Unit_Delay25_out1;



  assign Pulse50x512_Hz = Relational_Operator4_relop1;

  assign Bit_Slice14_out1 = Bit_Slice6_out1_1[2:0];



  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 3'b000;
      end
      else begin
        Unit_Delay26_out1 <= Bit_Slice14_out1;
      end
    end



  assign Relational_Operator5_relop1 = Bit_Slice14_out1 < Unit_Delay26_out1;



  assign Pulse50x1024_Hz = Relational_Operator5_relop1;

  assign Delta_wIq_b12 = Switch4_out1;




endmodule  // GridPll_V23_3

