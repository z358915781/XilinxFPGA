// -------------------------------------------------------------
// 
// File Name: Work_MulMpy_V10\MulMpy_V10\MulMpy_V10.v
// Created: 2017-04-12 19:27:18
// 
// Generated by MATLAB 8.6 and HDL Coder 3.7
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MulMpy_V10
// Source Path: MulMpy_V10/MulMpy_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MulMpy_V10
          (
           g_clk,
           Rst_n,
           InA0,
           InB0,
           InA1,
           InB1,
           InA2,
           InB2,
           InA3,
           InB3,
           InA4,
           InB4,
           InA5,
           InB5,
           InA6,
           InB6,
           InA7,
           InB7,
           InA8,
           InB8,
           InA9,
           InB9,
           InA10,
           InB10,
           InA11,
           InB11,
           InA12,
           InB12,
           InA13,
           InB13,
           InA14,
           InB14,
           InA15,
           InB15,
           InA16,
           InB16,
           InA17,
           InB17,
           InA18,
           InB18,
           InA19,
           InB19,
           InA20,
           InB20,
           InA21,
           InB21,
           InA22,
           InB22,
           InA23,
           InB23,
           InA24,
           InB24,
           InA25,
           InB25,
           InA26,
           InB26,
           InA27,
           InB27,
           InA28,
           InB28,
           InA29,
           InB29,
           InA30,
           InB30,
           InA31,
           InB31,
           MpyOut0,
           MpyOut1,
           MpyOut2,
           MpyOut3,
           MpyOut4,
           MpyOut5,
           MpyOut6,
           MpyOut7,
           MpyOut8,
           MpyOut9,
           MpyOut10,
           MpyOut11,
           MpyOut12,
           MpyOut13,
           MpyOut14,
           MpyOut15,
           MpyOut16,
           MpyOut17,
           MpyOut18,
           MpyOut19,
           MpyOut20,
           MpyOut21,
           MpyOut22,
           MpyOut23,
           MpyOut24,
           MpyOut25,
           MpyOut26,
           MpyOut27,
           MpyOut28,
           MpyOut29,
           MpyOut30,
           MpyOut31
          );


  input   g_clk;
  input   Rst_n;
  input   signed [11:0] InA0;  // sfix12
  input   signed [11:0] InB0;  // sfix12
  input   signed [11:0] InA1;  // sfix12
  input   signed [11:0] InB1;  // sfix12
  input   signed [11:0] InA2;  // sfix12
  input   signed [11:0] InB2;  // sfix12
  input   signed [11:0] InA3;  // sfix12
  input   signed [11:0] InB3;  // sfix12
  input   signed [11:0] InA4;  // sfix12
  input   signed [11:0] InB4;  // sfix12
  input   signed [11:0] InA5;  // sfix12
  input   signed [11:0] InB5;  // sfix12
  input   signed [11:0] InA6;  // sfix12
  input   signed [11:0] InB6;  // sfix12
  input   signed [11:0] InA7;  // sfix12
  input   signed [11:0] InB7;  // sfix12
  input   signed [11:0] InA8;  // sfix12
  input   signed [11:0] InB8;  // sfix12
  input   signed [11:0] InA9;  // sfix12
  input   signed [11:0] InB9;  // sfix12
  input   signed [11:0] InA10;  // sfix12
  input   signed [11:0] InB10;  // sfix12
  input   signed [11:0] InA11;  // sfix12
  input   signed [11:0] InB11;  // sfix12
  input   signed [11:0] InA12;  // sfix12
  input   signed [11:0] InB12;  // sfix12
  input   signed [11:0] InA13;  // sfix12
  input   signed [11:0] InB13;  // sfix12
  input   signed [11:0] InA14;  // sfix12
  input   signed [11:0] InB14;  // sfix12
  input   signed [11:0] InA15;  // sfix12
  input   signed [11:0] InB15;  // sfix12
  input   signed [11:0] InA16;  // sfix12
  input   signed [11:0] InB16;  // sfix12
  input   signed [11:0] InA17;  // sfix12
  input   signed [11:0] InB17;  // sfix12
  input   signed [11:0] InA18;  // sfix12
  input   signed [11:0] InB18;  // sfix12
  input   signed [11:0] InA19;  // sfix12
  input   signed [11:0] InB19;  // sfix12
  input   signed [11:0] InA20;  // sfix12
  input   signed [11:0] InB20;  // sfix12
  input   signed [11:0] InA21;  // sfix12
  input   signed [11:0] InB21;  // sfix12
  input   signed [11:0] InA22;  // sfix12
  input   signed [11:0] InB22;  // sfix12
  input   signed [11:0] InA23;  // sfix12
  input   signed [11:0] InB23;  // sfix12
  input   signed [11:0] InA24;  // sfix12
  input   signed [11:0] InB24;  // sfix12
  input   signed [11:0] InA25;  // sfix12
  input   signed [11:0] InB25;  // sfix12
  input   signed [11:0] InA26;  // sfix12
  input   signed [11:0] InB26;  // sfix12
  input   signed [11:0] InA27;  // sfix12
  input   signed [11:0] InB27;  // sfix12
  input   signed [11:0] InA28;  // sfix12
  input   signed [11:0] InB28;  // sfix12
  input   signed [11:0] InA29;  // sfix12
  input   signed [11:0] InB29;  // sfix12
  input   signed [11:0] InA30;  // sfix12
  input   signed [11:0] InB30;  // sfix12
  input   signed [11:0] InA31;  // sfix12
  input   signed [11:0] InB31;  // sfix12
  output  signed [11:0] MpyOut0;  // sfix12
  output  signed [11:0] MpyOut1;  // sfix12
  output  signed [11:0] MpyOut2;  // sfix12
  output  signed [11:0] MpyOut3;  // sfix12
  output  signed [11:0] MpyOut4;  // sfix12
  output  signed [11:0] MpyOut5;  // sfix12
  output  signed [11:0] MpyOut6;  // sfix12
  output  signed [11:0] MpyOut7;  // sfix12
  output  signed [11:0] MpyOut8;  // sfix12
  output  signed [11:0] MpyOut9;  // sfix12
  output  signed [11:0] MpyOut10;  // sfix12
  output  signed [11:0] MpyOut11;  // sfix12
  output  signed [11:0] MpyOut12;  // sfix12
  output  signed [11:0] MpyOut13;  // sfix12
  output  signed [11:0] MpyOut14;  // sfix12
  output  signed [11:0] MpyOut15;  // sfix12
  output  signed [11:0] MpyOut16;  // sfix12
  output  signed [11:0] MpyOut17;  // sfix12
  output  signed [11:0] MpyOut18;  // sfix12
  output  signed [11:0] MpyOut19;  // sfix12
  output  signed [11:0] MpyOut20;  // sfix12
  output  signed [11:0] MpyOut21;  // sfix12
  output  signed [11:0] MpyOut22;  // sfix12
  output  signed [11:0] MpyOut23;  // sfix12
  output  signed [11:0] MpyOut24;  // sfix12
  output  signed [11:0] MpyOut25;  // sfix12
  output  signed [11:0] MpyOut26;  // sfix12
  output  signed [11:0] MpyOut27;  // sfix12
  output  signed [11:0] MpyOut28;  // sfix12
  output  signed [11:0] MpyOut29;  // sfix12
  output  signed [11:0] MpyOut30;  // sfix12
  output  signed [11:0] MpyOut31;  // sfix12


  reg [4:0] Unit_Delay43_out1;  // ufix5
  wire [4:0] Add1_out1;  // ufix5
  wire CT3_out1;
  wire CT5_out1;
  wire CT6_out1;
  wire CT7_out1;
  wire CT8_out1;
  wire CT9_out1;
  wire CT11_out1;
  wire CT12_out1;
  wire CT4_out1;
  wire CT10_out1;
  wire CT13_out1;
  wire CT14_out1;
  wire CT15_out1;
  wire CT16_out1;
  wire CT1_out1;
  wire CT2_out1;
  wire CT26_out1;
  wire CT28_out1;
  wire CT29_out1;
  wire CT30_out1;
  wire CT31_out1;
  wire CT32_out1;
  wire CT19_out1;
  wire CT20_out1;
  wire CT27_out1;
  wire CT18_out1;
  wire CT21_out1;
  wire CT22_out1;
  wire CT23_out1;
  wire CT24_out1;
  wire CT17_out1;
  wire CT25_out1;
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal1_8;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  wire signed [11:0] signal1_9;  // sfix12
  wire signed [11:0] s_9;  // sfix12
  wire signed [11:0] signal1_10;  // sfix12
  wire signed [11:0] s_10;  // sfix12
  wire signed [11:0] signal1_11;  // sfix12
  wire signed [11:0] s_11;  // sfix12
  wire signed [11:0] signal1_12;  // sfix12
  wire signed [11:0] s_12;  // sfix12
  wire signed [11:0] signal1_13;  // sfix12
  wire signed [11:0] s_13;  // sfix12
  wire signed [11:0] signal1_14;  // sfix12
  wire signed [11:0] s_14;  // sfix12
  wire signed [11:0] signal1_15;  // sfix12
  wire signed [11:0] s_15;  // sfix12
  wire signed [11:0] signal1_16;  // sfix12
  wire signed [11:0] s_16;  // sfix12
  wire signed [11:0] signal1_17;  // sfix12
  wire signed [11:0] s_17;  // sfix12
  wire signed [11:0] signal1_18;  // sfix12
  wire signed [11:0] s_18;  // sfix12
  wire signed [11:0] signal1_19;  // sfix12
  wire signed [11:0] s_19;  // sfix12
  wire signed [11:0] signal1_20;  // sfix12
  wire signed [11:0] s_20;  // sfix12
  wire signed [11:0] signal1_21;  // sfix12
  wire signed [11:0] s_21;  // sfix12
  wire signed [11:0] signal1_22;  // sfix12
  wire signed [11:0] s_22;  // sfix12
  wire signed [11:0] signal1_23;  // sfix12
  wire signed [11:0] s_23;  // sfix12
  wire signed [11:0] signal1_24;  // sfix12
  wire signed [11:0] s_24;  // sfix12
  wire signed [11:0] signal1_25;  // sfix12
  wire signed [11:0] s_25;  // sfix12
  wire signed [11:0] signal1_26;  // sfix12
  wire signed [11:0] s_26;  // sfix12
  wire signed [11:0] signal1_27;  // sfix12
  wire signed [11:0] s_27;  // sfix12
  wire signed [11:0] signal1_28;  // sfix12
  wire signed [11:0] s_28;  // sfix12
  wire signed [11:0] signal1_29;  // sfix12
  wire signed [11:0] s_29;  // sfix12
  wire signed [11:0] signal1_30;  // sfix12
  wire signed [11:0] s_30;  // sfix12
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s_31;  // sfix12
  wire signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_32;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_33;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] s_34;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] s_35;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] s_36;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] s_37;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [11:0] s_38;  // sfix12
  wire signed [11:0] signal2_8;  // sfix12
  wire signed [11:0] s_39;  // sfix12
  wire signed [11:0] signal2_9;  // sfix12
  wire signed [11:0] s_40;  // sfix12
  wire signed [11:0] signal2_10;  // sfix12
  wire signed [11:0] s_41;  // sfix12
  wire signed [11:0] signal2_11;  // sfix12
  wire signed [11:0] s_42;  // sfix12
  wire signed [11:0] signal2_12;  // sfix12
  wire signed [11:0] s_43;  // sfix12
  wire signed [11:0] signal2_13;  // sfix12
  wire signed [11:0] s_44;  // sfix12
  wire signed [11:0] signal2_14;  // sfix12
  wire signed [11:0] s_45;  // sfix12
  wire signed [11:0] signal2_15;  // sfix12
  wire signed [11:0] s_46;  // sfix12
  wire signed [11:0] signal2_16;  // sfix12
  wire signed [11:0] s_47;  // sfix12
  wire signed [11:0] signal2_17;  // sfix12
  wire signed [11:0] s_48;  // sfix12
  wire signed [11:0] signal2_18;  // sfix12
  wire signed [11:0] s_49;  // sfix12
  wire signed [11:0] signal2_19;  // sfix12
  wire signed [11:0] s_50;  // sfix12
  wire signed [11:0] signal2_20;  // sfix12
  wire signed [11:0] s_51;  // sfix12
  wire signed [11:0] signal2_21;  // sfix12
  wire signed [11:0] s_52;  // sfix12
  wire signed [11:0] signal2_22;  // sfix12
  wire signed [11:0] s_53;  // sfix12
  wire signed [11:0] signal2_23;  // sfix12
  wire signed [11:0] s_54;  // sfix12
  wire signed [11:0] signal2_24;  // sfix12
  wire signed [11:0] s_55;  // sfix12
  wire signed [11:0] signal2_25;  // sfix12
  wire signed [11:0] s_56;  // sfix12
  wire signed [11:0] signal2_26;  // sfix12
  wire signed [11:0] s_57;  // sfix12
  wire signed [11:0] signal2_27;  // sfix12
  wire signed [11:0] s_58;  // sfix12
  wire signed [11:0] signal2_28;  // sfix12
  wire signed [11:0] s_59;  // sfix12
  wire signed [11:0] signal2_29;  // sfix12
  wire signed [11:0] s_60;  // sfix12
  wire signed [11:0] signal2_30;  // sfix12
  wire signed [11:0] s_61;  // sfix12
  wire signed [11:0] signal1_31;  // sfix12
  wire signed [11:0] signal1_32;  // sfix12
  wire signed [11:0] signal2_31;  // sfix12
  wire signed [11:0] signal2_32;  // sfix12
  wire signed [23:0] Product_out1;  // sfix24
  wire [14:0] Bit_Slice_out1;  // ufix15
  wire signed [14:0] Data_Type_S9_out1;  // sfix15
  wire RO34_relop1;
  wire signed [14:0] Switch297_out1;  // sfix15
  wire RO33_relop1;
  wire signed [14:0] Switch298_out1;  // sfix15
  wire signed [11:0] Data_Type_Conversion30_out1;  // sfix12
  reg signed [11:0] Unit_Delay1_out1;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12
  reg signed [11:0] Unit_Delay2_out1;  // sfix12
  wire signed [11:0] Switch16_out1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1;  // sfix12
  wire signed [11:0] Switch18_out1;  // sfix12
  reg signed [11:0] Unit_Delay5_out1;  // sfix12
  wire signed [11:0] Switch20_out1;  // sfix12
  reg signed [11:0] Unit_Delay10_out1;  // sfix12
  wire signed [11:0] Switch22_out1;  // sfix12
  reg signed [11:0] Unit_Delay11_out1;  // sfix12
  wire signed [11:0] Switch24_out1;  // sfix12
  reg signed [11:0] Unit_Delay12_out1;  // sfix12
  wire signed [11:0] Switch26_out1;  // sfix12
  reg signed [11:0] Unit_Delay13_out1;  // sfix12
  wire signed [11:0] Switch32_out1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1;  // sfix12
  wire signed [11:0] Switch2_out1;  // sfix12
  reg signed [11:0] Unit_Delay14_out1;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  reg signed [11:0] Unit_Delay15_out1;  // sfix12
  wire signed [11:0] Switch6_out1;  // sfix12
  reg signed [11:0] Unit_Delay16_out1;  // sfix12
  wire signed [11:0] Switch8_out1;  // sfix12
  reg signed [11:0] Unit_Delay6_out1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  reg signed [11:0] Unit_Delay7_out1;  // sfix12
  wire signed [11:0] Switch12_out1;  // sfix12
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] Switch28_out1;  // sfix12
  reg signed [11:0] Unit_Delay9_out1;  // sfix12
  wire signed [11:0] Switch30_out1;  // sfix12
  reg signed [11:0] Unit_Delay17_out1;  // sfix12
  wire signed [11:0] Switch38_out1;  // sfix12
  reg signed [11:0] Unit_Delay25_out1;  // sfix12
  wire signed [11:0] Switch40_out1;  // sfix12
  reg signed [11:0] Unit_Delay26_out1;  // sfix12
  wire signed [11:0] Switch42_out1;  // sfix12
  reg signed [11:0] Unit_Delay28_out1;  // sfix12
  wire signed [11:0] Switch45_out1;  // sfix12
  reg signed [11:0] Unit_Delay18_out1;  // sfix12
  wire signed [11:0] Switch47_out1;  // sfix12
  reg signed [11:0] Unit_Delay19_out1;  // sfix12
  wire signed [11:0] Switch49_out1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1;  // sfix12
  wire signed [11:0] Switch51_out1;  // sfix12
  reg signed [11:0] Unit_Delay21_out1;  // sfix12
  wire signed [11:0] Switch58_out1;  // sfix12
  reg signed [11:0] Unit_Delay27_out1;  // sfix12
  wire signed [11:0] Switch44_out1;  // sfix12
  reg signed [11:0] Unit_Delay22_out1;  // sfix12
  wire signed [11:0] Switch59_out1;  // sfix12
  reg signed [11:0] Unit_Delay23_out1;  // sfix12
  wire signed [11:0] Switch61_out1;  // sfix12
  reg signed [11:0] Unit_Delay24_out1;  // sfix12
  wire signed [11:0] Switch63_out1;  // sfix12
  reg signed [11:0] Unit_Delay29_out1;  // sfix12
  wire signed [11:0] Switch34_out1;  // sfix12
  reg signed [11:0] Unit_Delay30_out1;  // sfix12
  wire signed [11:0] Switch36_out1;  // sfix12
  reg signed [11:0] Unit_Delay31_out1;  // sfix12
  wire signed [11:0] Switch53_out1;  // sfix12
  reg signed [11:0] Unit_Delay32_out1;  // sfix12
  wire signed [11:0] Switch56_out1;  // sfix12


  // <S1>/Add1
  assign Add1_out1 = 5'b00001 + Unit_Delay43_out1;



  // <S1>/Unit Delay43
  // 
  // <S1>/Goto57
  // 
  // <S1>/From10
  // 
  // <S1>/Goto57
  // 
  // <S1>/From8
  // 
  // <S1>/Goto57
  // 
  // <S1>/From64
  // 
  // <S1>/Goto57
  // 
  // <S1>/From62
  // 
  // <S1>/Goto57
  // 
  // <S1>/From60
  // 
  // <S1>/Goto57
  // 
  // <S1>/From6
  // 
  // <S1>/Goto57
  // 
  // <S1>/From59
  // 
  // <S1>/Goto57
  // 
  // <S1>/From57
  // 
  // <S1>/Goto57
  // 
  // <S1>/From54
  // 
  // <S1>/Goto57
  // 
  // <S1>/From52
  // 
  // <S1>/Goto57
  // 
  // <S1>/From50
  // 
  // <S1>/Goto57
  // 
  // <S1>/From48
  // 
  // <S1>/Goto57
  // 
  // <S1>/From46
  // 
  // <S1>/Goto57
  // 
  // <S1>/From44
  // 
  // <S1>/Goto57
  // 
  // <S1>/From43
  // 
  // <S1>/Goto57
  // 
  // <S1>/From41
  // 
  // <S1>/Goto57
  // 
  // <S1>/From4
  // 
  // <S1>/Goto57
  // 
  // <S1>/From39
  // 
  // <S1>/Goto57
  // 
  // <S1>/From37
  // 
  // <S1>/Goto57
  // 
  // <S1>/From35
  // 
  // <S1>/Goto57
  // 
  // <S1>/From33
  // 
  // <S1>/Goto57
  // 
  // <S1>/From31
  // 
  // <S1>/Goto57
  // 
  // <S1>/From29
  // 
  // <S1>/Goto57
  // 
  // <S1>/From27
  // 
  // <S1>/Goto57
  // 
  // <S1>/From25
  // 
  // <S1>/Goto57
  // 
  // <S1>/From23
  // 
  // <S1>/Goto57
  // 
  // <S1>/From21
  // 
  // <S1>/Goto57
  // 
  // <S1>/From2
  // 
  // <S1>/Goto57
  // 
  // <S1>/From19
  // 
  // <S1>/Goto57
  // 
  // <S1>/From17
  // 
  // <S1>/Goto57
  // 
  // <S1>/From14
  // 
  // <S1>/Goto57
  // 
  // <S1>/From12
  always @(posedge g_clk)
    begin : Unit_Delay43_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1 <= 5'b00000;
      end
      else begin
        Unit_Delay43_out1 <= Add1_out1;
      end
    end



  // <S1>/CT3
  assign CT3_out1 = Unit_Delay43_out1 == 5'b00000;



  // <S1>/CT5
  assign CT5_out1 = Unit_Delay43_out1 == 5'b00001;



  // <S1>/CT6
  assign CT6_out1 = Unit_Delay43_out1 == 5'b00010;



  // <S1>/CT7
  assign CT7_out1 = Unit_Delay43_out1 == 5'b00011;



  // <S1>/CT8
  assign CT8_out1 = Unit_Delay43_out1 == 5'b00100;



  // <S1>/CT9
  assign CT9_out1 = Unit_Delay43_out1 == 5'b00101;



  // <S1>/CT11
  assign CT11_out1 = Unit_Delay43_out1 == 5'b00110;



  // <S1>/CT12
  assign CT12_out1 = Unit_Delay43_out1 == 5'b00111;



  // <S1>/CT4
  assign CT4_out1 = Unit_Delay43_out1 == 5'b01000;



  // <S1>/CT10
  assign CT10_out1 = Unit_Delay43_out1 == 5'b01001;



  // <S1>/CT13
  assign CT13_out1 = Unit_Delay43_out1 == 5'b01010;



  // <S1>/CT14
  assign CT14_out1 = Unit_Delay43_out1 == 5'b01011;



  // <S1>/CT15
  assign CT15_out1 = Unit_Delay43_out1 == 5'b01100;



  // <S1>/CT16
  assign CT16_out1 = Unit_Delay43_out1 == 5'b01101;



  // <S1>/CT1
  assign CT1_out1 = Unit_Delay43_out1 == 5'b01110;



  // <S1>/CT2
  assign CT2_out1 = Unit_Delay43_out1 == 5'b01111;



  // <S1>/CT26
  assign CT26_out1 = Unit_Delay43_out1 == 5'b10000;



  // <S1>/CT28
  assign CT28_out1 = Unit_Delay43_out1 == 5'b10001;



  // <S1>/CT29
  assign CT29_out1 = Unit_Delay43_out1 == 5'b10010;



  // <S1>/CT30
  assign CT30_out1 = Unit_Delay43_out1 == 5'b10011;



  // <S1>/CT31
  assign CT31_out1 = Unit_Delay43_out1 == 5'b10100;



  // <S1>/CT32
  assign CT32_out1 = Unit_Delay43_out1 == 5'b10101;



  // <S1>/CT19
  assign CT19_out1 = Unit_Delay43_out1 == 5'b10110;



  // <S1>/CT20
  assign CT20_out1 = Unit_Delay43_out1 == 5'b10111;



  // <S1>/CT27
  assign CT27_out1 = Unit_Delay43_out1 == 5'b11000;



  // <S1>/CT18
  assign CT18_out1 = Unit_Delay43_out1 == 5'b11001;



  // <S1>/CT21
  assign CT21_out1 = Unit_Delay43_out1 == 5'b11010;



  // <S1>/CT22
  assign CT22_out1 = Unit_Delay43_out1 == 5'b11011;



  // <S1>/CT23
  assign CT23_out1 = Unit_Delay43_out1 == 5'b11100;



  // <S1>/CT24
  assign CT24_out1 = Unit_Delay43_out1 == 5'b11101;



  // <S1>/CT17
  assign CT17_out1 = Unit_Delay43_out1 == 5'b11110;



  // <S1>/CT25
  assign CT25_out1 = Unit_Delay43_out1 == 5'b11111;



  // <S1>/Switch54
  // 
  // <S1>/Switch54
  assign signal1 = (CT25_out1 == 1'b0 ? InA31 :
              InA31);



  // <S1>/Switch52
  // 
  // <S1>/Switch54
  assign s = signal1;

  // <S1>/Switch52
  // 
  // <S1>/Switch52
  // 
  // <S1>/Switch52
  assign signal1_1 = (CT17_out1 == 1'b0 ? s :
              InA30);



  // <S1>/Switch35
  assign s_1 = signal1_1;

  // <S1>/Switch35
  // 
  // <S1>/Switch35
  // 
  // <S1>/Switch35
  assign signal1_2 = (CT24_out1 == 1'b0 ? s_1 :
              InA29);



  // <S1>/Switch64
  assign s_2 = signal1_2;

  // <S1>/Switch64
  // 
  // <S1>/Switch64
  // 
  // <S1>/Switch64
  assign signal1_3 = (CT23_out1 == 1'b0 ? s_2 :
              InA28);



  // <S1>/Switch62
  assign s_3 = signal1_3;

  // <S1>/Switch62
  // 
  // <S1>/Switch62
  // 
  // <S1>/Switch62
  assign signal1_4 = (CT22_out1 == 1'b0 ? s_3 :
              InA27);



  // <S1>/Switch60
  assign s_4 = signal1_4;

  // <S1>/Switch60
  // 
  // <S1>/Switch60
  // 
  // <S1>/Switch60
  assign signal1_5 = (CT21_out1 == 1'b0 ? s_4 :
              InA26);



  // <S1>/Switch55
  assign s_5 = signal1_5;

  // <S1>/Switch55
  // 
  // <S1>/Switch55
  // 
  // <S1>/Switch55
  assign signal1_6 = (CT18_out1 == 1'b0 ? s_5 :
              InA25);



  // <S1>/Switch33
  assign s_6 = signal1_6;

  // <S1>/Switch33
  // 
  // <S1>/Switch33
  // 
  // <S1>/Switch33
  assign signal1_7 = (CT27_out1 == 1'b0 ? s_6 :
              InA24);



  // <S1>/Switch57
  assign s_7 = signal1_7;

  // <S1>/Switch57
  // 
  // <S1>/Switch57
  // 
  // <S1>/Switch57
  assign signal1_8 = (CT20_out1 == 1'b0 ? s_7 :
              InA23);



  // <S1>/Switch50
  assign s_8 = signal1_8;

  // <S1>/Switch50
  // 
  // <S1>/Switch50
  // 
  // <S1>/Switch50
  assign signal1_9 = (CT19_out1 == 1'b0 ? s_8 :
              InA22);



  // <S1>/Switch48
  assign s_9 = signal1_9;

  // <S1>/Switch48
  // 
  // <S1>/Switch48
  // 
  // <S1>/Switch48
  assign signal1_10 = (CT32_out1 == 1'b0 ? s_9 :
              InA21);



  // <S1>/Switch46
  assign s_10 = signal1_10;

  // <S1>/Switch46
  // 
  // <S1>/Switch46
  // 
  // <S1>/Switch46
  assign signal1_11 = (CT31_out1 == 1'b0 ? s_10 :
              InA20);



  // <S1>/Switch43
  assign s_11 = signal1_11;

  // <S1>/Switch43
  // 
  // <S1>/Switch43
  // 
  // <S1>/Switch43
  assign signal1_12 = (CT30_out1 == 1'b0 ? s_11 :
              InA19);



  // <S1>/Switch41
  assign s_12 = signal1_12;

  // <S1>/Switch41
  // 
  // <S1>/Switch41
  // 
  // <S1>/Switch41
  assign signal1_13 = (CT29_out1 == 1'b0 ? s_12 :
              InA18);



  // <S1>/Switch39
  assign s_13 = signal1_13;

  // <S1>/Switch39
  // 
  // <S1>/Switch39
  // 
  // <S1>/Switch39
  assign signal1_14 = (CT28_out1 == 1'b0 ? s_13 :
              InA17);



  // <S1>/Switch37
  assign s_14 = signal1_14;

  // <S1>/Switch37
  // 
  // <S1>/Switch37
  // 
  // <S1>/Switch37
  assign signal1_15 = (CT26_out1 == 1'b0 ? s_14 :
              InA16);



  // <S1>/Switch29
  assign s_15 = signal1_15;

  // <S1>/Switch29
  // 
  // <S1>/Switch29
  // 
  // <S1>/Switch29
  assign signal1_16 = (CT2_out1 == 1'b0 ? s_15 :
              InA15);



  // <S1>/Switch27
  assign s_16 = signal1_16;

  // <S1>/Switch27
  // 
  // <S1>/Switch27
  // 
  // <S1>/Switch27
  assign signal1_17 = (CT1_out1 == 1'b0 ? s_16 :
              InA14);



  // <S1>/Switch11
  assign s_17 = signal1_17;

  // <S1>/Switch11
  // 
  // <S1>/Switch11
  // 
  // <S1>/Switch11
  assign signal1_18 = (CT16_out1 == 1'b0 ? s_17 :
              InA13);



  // <S1>/Switch9
  assign s_18 = signal1_18;

  // <S1>/Switch9
  // 
  // <S1>/Switch9
  // 
  // <S1>/Switch9
  assign signal1_19 = (CT15_out1 == 1'b0 ? s_18 :
              InA12);



  // <S1>/Switch7
  assign s_19 = signal1_19;

  // <S1>/Switch7
  // 
  // <S1>/Switch7
  // 
  // <S1>/Switch7
  assign signal1_20 = (CT14_out1 == 1'b0 ? s_19 :
              InA11);



  // <S1>/Switch5
  assign s_20 = signal1_20;

  // <S1>/Switch5
  // 
  // <S1>/Switch5
  // 
  // <S1>/Switch5
  assign signal1_21 = (CT13_out1 == 1'b0 ? s_20 :
              InA10);



  // <S1>/Switch3
  assign s_21 = signal1_21;

  // <S1>/Switch3
  // 
  // <S1>/Switch3
  // 
  // <S1>/Switch3
  assign signal1_22 = (CT10_out1 == 1'b0 ? s_21 :
              InA9);



  // <S1>/Switch1
  assign s_22 = signal1_22;

  // <S1>/Switch1
  // 
  // <S1>/Switch1
  // 
  // <S1>/Switch1
  assign signal1_23 = (CT4_out1 == 1'b0 ? s_22 :
              InA8);



  // <S1>/Switch31
  assign s_23 = signal1_23;

  // <S1>/Switch31
  // 
  // <S1>/Switch31
  // 
  // <S1>/Switch31
  assign signal1_24 = (CT12_out1 == 1'b0 ? s_23 :
              InA7);



  // <S1>/Switch25
  assign s_24 = signal1_24;

  // <S1>/Switch25
  // 
  // <S1>/Switch25
  // 
  // <S1>/Switch25
  assign signal1_25 = (CT11_out1 == 1'b0 ? s_24 :
              InA6);



  // <S1>/Switch23
  assign s_25 = signal1_25;

  // <S1>/Switch23
  // 
  // <S1>/Switch23
  // 
  // <S1>/Switch23
  assign signal1_26 = (CT9_out1 == 1'b0 ? s_25 :
              InA5);



  // <S1>/Switch21
  assign s_26 = signal1_26;

  // <S1>/Switch21
  // 
  // <S1>/Switch21
  // 
  // <S1>/Switch21
  assign signal1_27 = (CT8_out1 == 1'b0 ? s_26 :
              InA4);



  // <S1>/Switch19
  assign s_27 = signal1_27;

  // <S1>/Switch19
  // 
  // <S1>/Switch19
  // 
  // <S1>/Switch19
  assign signal1_28 = (CT7_out1 == 1'b0 ? s_27 :
              InA3);



  // <S1>/Switch17
  assign s_28 = signal1_28;

  // <S1>/Switch17
  // 
  // <S1>/Switch17
  // 
  // <S1>/Switch17
  assign signal1_29 = (CT6_out1 == 1'b0 ? s_28 :
              InA2);



  // <S1>/Switch15
  assign s_29 = signal1_29;

  // <S1>/Switch15
  // 
  // <S1>/Switch15
  // 
  // <S1>/Switch15
  assign signal1_30 = (CT5_out1 == 1'b0 ? s_29 :
              InA1);



  // <S1>/Switch13
  assign s_30 = signal1_30;

  // <S1>/Switch54
  assign signal2 = (CT25_out1 == 1'b0 ? InB31 :
              InB31);



  assign s_31 = signal2;

  // <S1>/Switch52
  assign signal2_1 = (CT17_out1 == 1'b0 ? s_31 :
              InB30);



  assign s_32 = signal2_1;

  // <S1>/Switch35
  assign signal2_2 = (CT24_out1 == 1'b0 ? s_32 :
              InB29);



  assign s_33 = signal2_2;

  // <S1>/Switch64
  assign signal2_3 = (CT23_out1 == 1'b0 ? s_33 :
              InB28);



  assign s_34 = signal2_3;

  // <S1>/Switch62
  assign signal2_4 = (CT22_out1 == 1'b0 ? s_34 :
              InB27);



  assign s_35 = signal2_4;

  // <S1>/Switch60
  assign signal2_5 = (CT21_out1 == 1'b0 ? s_35 :
              InB26);



  assign s_36 = signal2_5;

  // <S1>/Switch55
  assign signal2_6 = (CT18_out1 == 1'b0 ? s_36 :
              InB25);



  assign s_37 = signal2_6;

  // <S1>/Switch33
  assign signal2_7 = (CT27_out1 == 1'b0 ? s_37 :
              InB24);



  assign s_38 = signal2_7;

  // <S1>/Switch57
  assign signal2_8 = (CT20_out1 == 1'b0 ? s_38 :
              InB23);



  assign s_39 = signal2_8;

  // <S1>/Switch50
  assign signal2_9 = (CT19_out1 == 1'b0 ? s_39 :
              InB22);



  assign s_40 = signal2_9;

  // <S1>/Switch48
  assign signal2_10 = (CT32_out1 == 1'b0 ? s_40 :
              InB21);



  assign s_41 = signal2_10;

  // <S1>/Switch46
  assign signal2_11 = (CT31_out1 == 1'b0 ? s_41 :
              InB20);



  assign s_42 = signal2_11;

  // <S1>/Switch43
  assign signal2_12 = (CT30_out1 == 1'b0 ? s_42 :
              InB19);



  assign s_43 = signal2_12;

  // <S1>/Switch41
  assign signal2_13 = (CT29_out1 == 1'b0 ? s_43 :
              InB18);



  assign s_44 = signal2_13;

  // <S1>/Switch39
  assign signal2_14 = (CT28_out1 == 1'b0 ? s_44 :
              InB17);



  assign s_45 = signal2_14;

  // <S1>/Switch37
  assign signal2_15 = (CT26_out1 == 1'b0 ? s_45 :
              InB16);



  assign s_46 = signal2_15;

  // <S1>/Switch29
  assign signal2_16 = (CT2_out1 == 1'b0 ? s_46 :
              InB15);



  assign s_47 = signal2_16;

  // <S1>/Switch27
  assign signal2_17 = (CT1_out1 == 1'b0 ? s_47 :
              InB14);



  assign s_48 = signal2_17;

  // <S1>/Switch11
  assign signal2_18 = (CT16_out1 == 1'b0 ? s_48 :
              InB13);



  assign s_49 = signal2_18;

  // <S1>/Switch9
  assign signal2_19 = (CT15_out1 == 1'b0 ? s_49 :
              InB12);



  assign s_50 = signal2_19;

  // <S1>/Switch7
  assign signal2_20 = (CT14_out1 == 1'b0 ? s_50 :
              InB11);



  assign s_51 = signal2_20;

  // <S1>/Switch5
  assign signal2_21 = (CT13_out1 == 1'b0 ? s_51 :
              InB10);



  assign s_52 = signal2_21;

  // <S1>/Switch3
  assign signal2_22 = (CT10_out1 == 1'b0 ? s_52 :
              InB9);



  assign s_53 = signal2_22;

  // <S1>/Switch1
  assign signal2_23 = (CT4_out1 == 1'b0 ? s_53 :
              InB8);



  assign s_54 = signal2_23;

  // <S1>/Switch31
  assign signal2_24 = (CT12_out1 == 1'b0 ? s_54 :
              InB7);



  assign s_55 = signal2_24;

  // <S1>/Switch25
  assign signal2_25 = (CT11_out1 == 1'b0 ? s_55 :
              InB6);



  assign s_56 = signal2_25;

  // <S1>/Switch23
  assign signal2_26 = (CT9_out1 == 1'b0 ? s_56 :
              InB5);



  assign s_57 = signal2_26;

  // <S1>/Switch21
  assign signal2_27 = (CT8_out1 == 1'b0 ? s_57 :
              InB4);



  assign s_58 = signal2_27;

  // <S1>/Switch19
  assign signal2_28 = (CT7_out1 == 1'b0 ? s_58 :
              InB3);



  assign s_59 = signal2_28;

  // <S1>/Switch17
  assign signal2_29 = (CT6_out1 == 1'b0 ? s_59 :
              InB2);



  assign s_60 = signal2_29;

  // <S1>/Switch15
  assign signal2_30 = (CT5_out1 == 1'b0 ? s_60 :
              InB1);



  assign s_61 = signal2_30;

  // <S1>/Switch13
  // 
  // <S1>/Switch13
  // 
  // <S1>/Switch13
  // 
  // <S1>/Goto
  // 
  // <S1>/From15
  assign signal1_31 = (CT3_out1 == 1'b0 ? s_30 :
              InA0);



  // <S1>/Bus Selector1
  assign signal1_32 = signal1_31;

  // <S1>/Switch13
  assign signal2_31 = (CT3_out1 == 1'b0 ? s_61 :
              InB0);



  assign signal2_32 = signal2_31;

  // <S1>/Product
  assign Product_out1 = signal1_32 * signal2_32;



  // <S1>/Bit Slice
  assign Bit_Slice_out1 = Product_out1[23:9];



  // <S1>/Data Type S9
  assign Data_Type_S9_out1 = Bit_Slice_out1;



  // <S1>/RO34
  assign RO34_relop1 = Data_Type_S9_out1 > 15'sb000011111111111;



  // <S1>/Switch297
  assign Switch297_out1 = (RO34_relop1 == 1'b0 ? Data_Type_S9_out1 :
              15'sb000011111111111);



  // <S1>/RO33
  assign RO33_relop1 = Switch297_out1 < 15'sb111100000000001;



  // <S1>/Switch298
  assign Switch298_out1 = (RO33_relop1 == 1'b0 ? Switch297_out1 :
              15'sb111100000000001);



  // <S1>/Data Type Conversion30
  // 
  // <S1>/Goto8
  // 
  // <S1>/From1
  // 
  // <S1>/Goto8
  // 
  // <S1>/From9
  // 
  // <S1>/Goto8
  // 
  // <S1>/From7
  // 
  // <S1>/Goto8
  // 
  // <S1>/From65
  // 
  // <S1>/Goto8
  // 
  // <S1>/From63
  // 
  // <S1>/Goto8
  // 
  // <S1>/From61
  // 
  // <S1>/Goto8
  // 
  // <S1>/From58
  // 
  // <S1>/Goto8
  // 
  // <S1>/From56
  // 
  // <S1>/Goto8
  // 
  // <S1>/From55
  // 
  // <S1>/Goto8
  // 
  // <S1>/From53
  // 
  // <S1>/Goto8
  // 
  // <S1>/From51
  // 
  // <S1>/Goto8
  // 
  // <S1>/From5
  // 
  // <S1>/Goto8
  // 
  // <S1>/From49
  // 
  // <S1>/Goto8
  // 
  // <S1>/From47
  // 
  // <S1>/Goto8
  // 
  // <S1>/From45
  // 
  // <S1>/Goto8
  // 
  // <S1>/From42
  // 
  // <S1>/Goto8
  // 
  // <S1>/From40
  // 
  // <S1>/Goto8
  // 
  // <S1>/From38
  // 
  // <S1>/Goto8
  // 
  // <S1>/From36
  // 
  // <S1>/Goto8
  // 
  // <S1>/From34
  // 
  // <S1>/Goto8
  // 
  // <S1>/From32
  // 
  // <S1>/Goto8
  // 
  // <S1>/From30
  // 
  // <S1>/Goto8
  // 
  // <S1>/From3
  // 
  // <S1>/Goto8
  // 
  // <S1>/From28
  // 
  // <S1>/Goto8
  // 
  // <S1>/From26
  // 
  // <S1>/Goto8
  // 
  // <S1>/From24
  // 
  // <S1>/Goto8
  // 
  // <S1>/From22
  // 
  // <S1>/Goto8
  // 
  // <S1>/From20
  // 
  // <S1>/Goto8
  // 
  // <S1>/From18
  // 
  // <S1>/Goto8
  // 
  // <S1>/From16
  // 
  // <S1>/Goto8
  // 
  // <S1>/From13
  // 
  // <S1>/Goto8
  // 
  // <S1>/From11
  assign Data_Type_Conversion30_out1 = Switch298_out1[11:0];



  // <S1>/Switch14
  assign Switch14_out1 = (CT3_out1 == 1'b0 ? Unit_Delay1_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay1
  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1 <= Switch14_out1;
      end
    end



  assign MpyOut0 = Unit_Delay1_out1;

  // <S1>/Switch16
  assign Switch16_out1 = (CT5_out1 == 1'b0 ? Unit_Delay2_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay2
  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch16_out1;
      end
    end



  assign MpyOut1 = Unit_Delay2_out1;

  // <S1>/Switch18
  assign Switch18_out1 = (CT6_out1 == 1'b0 ? Unit_Delay3_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay3
  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch18_out1;
      end
    end



  assign MpyOut2 = Unit_Delay3_out1;

  // <S1>/Switch20
  assign Switch20_out1 = (CT7_out1 == 1'b0 ? Unit_Delay5_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay5
  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch20_out1;
      end
    end



  assign MpyOut3 = Unit_Delay5_out1;

  // <S1>/Switch22
  assign Switch22_out1 = (CT8_out1 == 1'b0 ? Unit_Delay10_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay10
  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1 <= Switch22_out1;
      end
    end



  assign MpyOut4 = Unit_Delay10_out1;

  // <S1>/Switch24
  assign Switch24_out1 = (CT9_out1 == 1'b0 ? Unit_Delay11_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay11
  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch24_out1;
      end
    end



  assign MpyOut5 = Unit_Delay11_out1;

  // <S1>/Switch26
  assign Switch26_out1 = (CT11_out1 == 1'b0 ? Unit_Delay12_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay12
  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch26_out1;
      end
    end



  assign MpyOut6 = Unit_Delay12_out1;

  // <S1>/Switch32
  assign Switch32_out1 = (CT12_out1 == 1'b0 ? Unit_Delay13_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay13
  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1 <= Switch32_out1;
      end
    end



  assign MpyOut7 = Unit_Delay13_out1;

  // <S1>/Switch2
  assign Switch2_out1 = (CT4_out1 == 1'b0 ? Unit_Delay4_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay4
  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch2_out1;
      end
    end



  assign MpyOut8 = Unit_Delay4_out1;

  // <S1>/Switch4
  assign Switch4_out1 = (CT10_out1 == 1'b0 ? Unit_Delay14_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay14
  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch4_out1;
      end
    end



  assign MpyOut9 = Unit_Delay14_out1;

  // <S1>/Switch6
  assign Switch6_out1 = (CT13_out1 == 1'b0 ? Unit_Delay15_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay15
  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch6_out1;
      end
    end



  assign MpyOut10 = Unit_Delay15_out1;

  // <S1>/Switch8
  assign Switch8_out1 = (CT14_out1 == 1'b0 ? Unit_Delay16_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay16
  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay16_out1 <= Switch8_out1;
      end
    end



  assign MpyOut11 = Unit_Delay16_out1;

  // <S1>/Switch10
  assign Switch10_out1 = (CT15_out1 == 1'b0 ? Unit_Delay6_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay6
  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch10_out1;
      end
    end



  assign MpyOut12 = Unit_Delay6_out1;

  // <S1>/Switch12
  assign Switch12_out1 = (CT16_out1 == 1'b0 ? Unit_Delay7_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay7
  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1 <= Switch12_out1;
      end
    end



  assign MpyOut13 = Unit_Delay7_out1;

  // <S1>/Switch28
  assign Switch28_out1 = (CT1_out1 == 1'b0 ? Unit_Delay8_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay8
  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch28_out1;
      end
    end



  assign MpyOut14 = Unit_Delay8_out1;

  // <S1>/Switch30
  assign Switch30_out1 = (CT2_out1 == 1'b0 ? Unit_Delay9_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay9
  // 
  // <S1>/Bus Creator1
  // 
  // <S1>/Bus Creator10
  // 
  // <S1>/Bus Creator11
  // 
  // <S1>/Bus Creator12
  // 
  // <S1>/Bus Creator13
  // 
  // <S1>/Bus Creator14
  // 
  // <S1>/Bus Creator15
  // 
  // <S1>/Bus Creator16
  // 
  // <S1>/Bus Creator17
  // 
  // <S1>/Bus Creator18
  // 
  // <S1>/Bus Creator19
  // 
  // <S1>/Bus Creator2
  // 
  // <S1>/Bus Creator20
  // 
  // <S1>/Bus Creator21
  // 
  // <S1>/Bus Creator22
  // 
  // <S1>/Bus Creator23
  // 
  // <S1>/Bus Creator24
  // 
  // <S1>/Bus Creator25
  // 
  // <S1>/Bus Creator26
  // 
  // <S1>/Bus Creator27
  // 
  // <S1>/Bus Creator28
  // 
  // <S1>/Bus Creator29
  // 
  // <S1>/Bus Creator3
  // 
  // <S1>/Bus Creator30
  // 
  // <S1>/Bus Creator31
  // 
  // <S1>/Bus Creator32
  // 
  // <S1>/Bus Creator4
  // 
  // <S1>/Bus Creator5
  // 
  // <S1>/Bus Creator6
  // 
  // <S1>/Bus Creator7
  // 
  // <S1>/Bus Creator8
  // 
  // <S1>/Bus Creator9
  // 
  // <S1>/Switch1
  // 
  // <S1>/Switch11
  // 
  // <S1>/Switch13
  // 
  // <S1>/Switch15
  // 
  // <S1>/Switch17
  // 
  // <S1>/Switch19
  // 
  // <S1>/Switch21
  // 
  // <S1>/Switch23
  // 
  // <S1>/Switch25
  // 
  // <S1>/Switch27
  // 
  // <S1>/Switch29
  // 
  // <S1>/Switch3
  // 
  // <S1>/Switch31
  // 
  // <S1>/Switch33
  // 
  // <S1>/Switch35
  // 
  // <S1>/Switch37
  // 
  // <S1>/Switch39
  // 
  // <S1>/Switch41
  // 
  // <S1>/Switch43
  // 
  // <S1>/Switch46
  // 
  // <S1>/Switch48
  // 
  // <S1>/Switch5
  // 
  // <S1>/Switch50
  // 
  // <S1>/Switch52
  // 
  // <S1>/Switch54
  // 
  // <S1>/Switch55
  // 
  // <S1>/Switch57
  // 
  // <S1>/Switch60
  // 
  // <S1>/Switch62
  // 
  // <S1>/Switch64
  // 
  // <S1>/Switch7
  // 
  // <S1>/Switch9
  // 
  // <S1>/Bus Creator17
  // 
  // <S1>/Switch54
  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch30_out1;
      end
    end



  assign MpyOut15 = Unit_Delay9_out1;

  // <S1>/Switch38
  assign Switch38_out1 = (CT26_out1 == 1'b0 ? Unit_Delay17_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay17
  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch38_out1;
      end
    end



  assign MpyOut16 = Unit_Delay17_out1;

  // <S1>/Switch40
  assign Switch40_out1 = (CT28_out1 == 1'b0 ? Unit_Delay25_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay25
  always @(posedge g_clk)
    begin : Unit_Delay25_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1 <= Switch40_out1;
      end
    end



  assign MpyOut17 = Unit_Delay25_out1;

  // <S1>/Switch42
  assign Switch42_out1 = (CT29_out1 == 1'b0 ? Unit_Delay26_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay26
  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1 <= Switch42_out1;
      end
    end



  assign MpyOut18 = Unit_Delay26_out1;

  // <S1>/Switch45
  assign Switch45_out1 = (CT30_out1 == 1'b0 ? Unit_Delay28_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay28
  always @(posedge g_clk)
    begin : Unit_Delay28_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay28_out1 <= Switch45_out1;
      end
    end



  assign MpyOut19 = Unit_Delay28_out1;

  // <S1>/Switch47
  assign Switch47_out1 = (CT31_out1 == 1'b0 ? Unit_Delay18_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay18
  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch47_out1;
      end
    end



  assign MpyOut20 = Unit_Delay18_out1;

  // <S1>/Switch49
  assign Switch49_out1 = (CT32_out1 == 1'b0 ? Unit_Delay19_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay19
  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch49_out1;
      end
    end



  assign MpyOut21 = Unit_Delay19_out1;

  // <S1>/Switch51
  assign Switch51_out1 = (CT19_out1 == 1'b0 ? Unit_Delay20_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay20
  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch51_out1;
      end
    end



  assign MpyOut22 = Unit_Delay20_out1;

  // <S1>/Switch58
  assign Switch58_out1 = (CT20_out1 == 1'b0 ? Unit_Delay21_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay21
  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch58_out1;
      end
    end



  assign MpyOut23 = Unit_Delay21_out1;

  // <S1>/Switch44
  assign Switch44_out1 = (CT27_out1 == 1'b0 ? Unit_Delay27_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay27
  always @(posedge g_clk)
    begin : Unit_Delay27_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay27_out1 <= Switch44_out1;
      end
    end



  assign MpyOut24 = Unit_Delay27_out1;

  // <S1>/Switch59
  assign Switch59_out1 = (CT18_out1 == 1'b0 ? Unit_Delay22_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay22
  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch59_out1;
      end
    end



  assign MpyOut25 = Unit_Delay22_out1;

  // <S1>/Switch61
  assign Switch61_out1 = (CT21_out1 == 1'b0 ? Unit_Delay23_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay23
  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch61_out1;
      end
    end



  assign MpyOut26 = Unit_Delay23_out1;

  // <S1>/Switch63
  assign Switch63_out1 = (CT22_out1 == 1'b0 ? Unit_Delay24_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay24
  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1 <= Switch63_out1;
      end
    end



  assign MpyOut27 = Unit_Delay24_out1;

  // <S1>/Switch34
  assign Switch34_out1 = (CT23_out1 == 1'b0 ? Unit_Delay29_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay29
  always @(posedge g_clk)
    begin : Unit_Delay29_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1 <= Switch34_out1;
      end
    end



  assign MpyOut28 = Unit_Delay29_out1;

  // <S1>/Switch36
  assign Switch36_out1 = (CT24_out1 == 1'b0 ? Unit_Delay30_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay30
  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch36_out1;
      end
    end



  assign MpyOut29 = Unit_Delay30_out1;

  // <S1>/Switch53
  assign Switch53_out1 = (CT17_out1 == 1'b0 ? Unit_Delay31_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay31
  always @(posedge g_clk)
    begin : Unit_Delay31_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay31_out1 <= Switch53_out1;
      end
    end



  assign MpyOut30 = Unit_Delay31_out1;

  // <S1>/Switch56
  assign Switch56_out1 = (CT25_out1 == 1'b0 ? Unit_Delay32_out1 :
              Data_Type_Conversion30_out1);



  // <S1>/Unit Delay32
  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay32_out1 <= Switch56_out1;
      end
    end



  assign MpyOut31 = Unit_Delay32_out1;

endmodule  // MulMpy_V10

