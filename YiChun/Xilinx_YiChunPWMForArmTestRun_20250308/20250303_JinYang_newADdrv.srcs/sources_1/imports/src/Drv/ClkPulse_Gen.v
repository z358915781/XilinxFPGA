// -------------------------------------------------------------
// 
// File Name: hdlsrc\HC165\ClkPulse_Gen.v
// Created: 2021-12-11 16:40:41
// 
// Generated by MATLAB 9.2 and HDL Coder 3.10
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ClkPulse_Gen
// Source Path: HC165/ClkPulse_Gen
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ClkPulse_Gen
          (g_clk,
           Rst_n,
           Clk_1MHz,
           Pulse_1MHz,
           Clk_976Hz,
           Clk_0p95Hz,
           Pulse_0p95Hz,
           Cnt_0p95Hz);


  input   g_clk;
  input   Rst_n;
  output  Clk_1MHz;
  output  Pulse_1MHz;
  output  Clk_976Hz;
  output  Clk_0p95Hz;
  output  Pulse_0p95Hz;
  output  [15:0] Cnt_0p95Hz;  // uint16

  wire [13:0] Constant3_out1;  // ufix14
  reg [13:0] Delay_out1;  // ufix14
  wire [31:0] Add_add_temp;  // ufix32
  wire [31:0] Add_1;  // ufix32
  wire [31:0] Add_2;  // ufix32
  wire [13:0] Add_out1;  // ufix14
  wire [13:0] Constant4_out1;  // ufix14
  wire signed [31:0] Subtract_sub_temp;  // sfix32
  wire signed [31:0] Subtract_1;  // sfix32
  wire signed [31:0] Subtract_2;  // sfix32
  wire signed [14:0] Subtract_out1;  // sfix15
  wire Compare_To_Zero_out1;
  reg  Delay1_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator_out1;
  wire switch_compare_1;
  wire Constant1_out1;
  wire Constant5_out1;
  wire Switch_out1;
  reg [9:0] Delay3_out1;  // ufix10
  wire [31:0] Add2_add_temp;  // ufix32
  wire [31:0] Add2_1;  // ufix32
  wire [31:0] Add2_2;  // ufix32
  wire [9:0] Add2_out1;  // ufix10
  wire signed [20:0] Constant8_out1;  // sfix21
  wire signed [31:0] Subtract2_sub_temp;  // sfix32
  wire signed [31:0] Subtract2_1;  // sfix32
  wire signed [31:0] Subtract2_2;  // sfix32
  wire signed [20:0] Subtract2_out1;  // sfix21
  wire Compare_To_Zero1_out1;
  reg [19:0] Delay4_out1;  // ufix20
  wire [31:0] Add3_add_temp;  // ufix32
  wire [31:0] Add3_1;  // ufix32
  wire [31:0] Add3_2;  // ufix32
  wire [19:0] Add3_out1;  // ufix20
  wire [19:0] Constant2_out1;  // ufix20
  wire signed [31:0] Subtract1_sub_temp;  // sfix32
  wire signed [31:0] Subtract1_1;  // sfix32
  wire signed [31:0] Subtract1_2;  // sfix32
  wire signed [20:0] Subtract1_out1;  // sfix21
  wire Compare_To_Zero3_out1;
  reg  Delay5_out1;
  wire Logical_Operator3_out1;
  wire Logical_Operator2_out1;
  wire switch_compare_1_1;
  wire Constant6_out1;
  wire Constant7_out1;
  wire Switch1_out1;
  reg [15:0] Delay6_out1;  // uint16
  wire [31:0] Add4_add_temp;  // ufix32
  wire [31:0] Add4_1;  // ufix32
  wire [31:0] Add4_2;  // ufix32
  wire [15:0] Add4_out1;  // uint16


  assign Constant3_out1 = 14'b00001010001111;



  assign Add_1 = {18'b0, Constant3_out1};
  assign Add_2 = {18'b0, Delay_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1 = Add_add_temp[13:0];



  always @(posedge g_clk)
    begin : Delay_process
      if (Rst_n == 1'b0) begin
        Delay_out1 <= 14'b00000000000000;
      end
      else begin
        Delay_out1 <= Add_out1;
      end
    end



  assign Constant4_out1 = 14'b10000000000000;



  assign Subtract_1 = {18'b0, Delay_out1};
  assign Subtract_2 = {18'b0, Constant4_out1};
  assign Subtract_sub_temp = Subtract_1 - Subtract_2;
  assign Subtract_out1 = Subtract_sub_temp[14:0];



  assign Compare_To_Zero_out1 = Subtract_out1 > 15'sb000000000000000;



  assign Clk_1MHz = Compare_To_Zero_out1;

  always @(posedge g_clk)
    begin : Delay1_process
      if (Rst_n == 1'b0) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        Delay1_out1 <= Compare_To_Zero_out1;
      end
    end



  assign Logical_Operator1_out1 =  ~ Delay1_out1;



  assign Logical_Operator_out1 = Compare_To_Zero_out1 & Logical_Operator1_out1;



  assign Pulse_1MHz = Logical_Operator_out1;

  assign switch_compare_1 = Logical_Operator_out1 > 1'b0;



  assign Constant1_out1 = 1'b0;



  assign Constant5_out1 = 1'b1;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Constant1_out1 :
              Constant5_out1);



  assign Add2_1 = {31'b0, Switch_out1};
  assign Add2_2 = {22'b0, Delay3_out1};
  assign Add2_add_temp = Add2_1 + Add2_2;
  assign Add2_out1 = Add2_add_temp[9:0];



  always @(posedge g_clk)
    begin : Delay3_process
      if (Rst_n == 1'b0) begin
        Delay3_out1 <= 10'b0000000000;
      end
      else begin
        Delay3_out1 <= Add2_out1;
      end
    end



  assign Constant8_out1 = 21'sb000000000001000000000;



  assign Subtract2_1 = {22'b0, Delay3_out1};
  assign Subtract2_2 = {{11{Constant8_out1[20]}}, Constant8_out1};
  assign Subtract2_sub_temp = Subtract2_1 - Subtract2_2;
  assign Subtract2_out1 = Subtract2_sub_temp[20:0];



  assign Compare_To_Zero1_out1 = Subtract2_out1 > 21'sb000000000000000000000;



  assign Clk_976Hz = Compare_To_Zero1_out1;

  assign Add3_1 = {31'b0, Switch_out1};
  assign Add3_2 = {12'b0, Delay4_out1};
  assign Add3_add_temp = Add3_1 + Add3_2;
  assign Add3_out1 = Add3_add_temp[19:0];



  always @(posedge g_clk)
    begin : Delay4_process
      if (Rst_n == 1'b0) begin
        Delay4_out1 <= 20'b00000000000000000000;
      end
      else begin
        Delay4_out1 <= Add3_out1;
      end
    end



  assign Constant2_out1 = 20'b10000000000000000000;



  assign Subtract1_1 = {12'b0, Delay4_out1};
  assign Subtract1_2 = {12'b0, Constant2_out1};
  assign Subtract1_sub_temp = Subtract1_1 - Subtract1_2;
  assign Subtract1_out1 = Subtract1_sub_temp[20:0];



  assign Compare_To_Zero3_out1 = Subtract1_out1 > 21'sb000000000000000000000;



  assign Clk_0p95Hz = Compare_To_Zero3_out1;

  always @(posedge g_clk)
    begin : Delay5_process
      if (Rst_n == 1'b0) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        Delay5_out1 <= Compare_To_Zero3_out1;
      end
    end



  assign Logical_Operator3_out1 =  ~ Delay5_out1;



  assign Logical_Operator2_out1 = Compare_To_Zero3_out1 & Logical_Operator3_out1;



  assign Pulse_0p95Hz = Logical_Operator2_out1;

  assign switch_compare_1_1 = Logical_Operator2_out1 > 1'b0;



  assign Constant6_out1 = 1'b0;



  assign Constant7_out1 = 1'b1;



  assign Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant6_out1 :
              Constant7_out1);



  assign Add4_1 = {31'b0, Switch1_out1};
  assign Add4_2 = {16'b0, Delay6_out1};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_out1 = Add4_add_temp[15:0];



  always @(posedge g_clk)
    begin : Delay6_process
      if (Rst_n == 1'b0) begin
        Delay6_out1 <= 16'b0000000000000000;
      end
      else begin
        Delay6_out1 <= Add4_out1;
      end
    end



  assign Cnt_0p95Hz = Delay6_out1;


endmodule  // ClkPulse_Gen

