// -------------------------------------------------------------
// 
// File Name: Work_InvControlLoop3L_V30g\SvrLoop_V10\PVR_V10.v
// Created: 2019-11-15 17:01:05
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PVR_V10
// Source Path: SvrLoop_V10/PVR_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PVR_V10
          (
           g_clk,
           Rst_n,
           Um_ref_b12,
           PVR_K_i12,
           UacSoftFre_u16,
           CtlLoop_On,
           P_now_i16,
           Um_Pvr_b12
          );



  input   g_clk;
  input   Rst_n;
  input   signed [11:0] Um_ref_b12;  // sfix12
  input   signed [11:0] PVR_K_i12;  // sfix12
  input   [15:0] UacSoftFre_u16;  // uint16
  input   CtlLoop_On;
  input   signed [15:0] P_now_i16;  // int16
  output  signed [12:0] Um_Pvr_b12;  // sfix13

  wire signed [11:0] signal1;  // sfix12
  reg [1:0] Unit_Delay6_out1;  // ufix2
  wire [1:0] Add3_out1;  // ufix2
  wire CT9_out1;
  wire CT49_out1;
  wire CT50_out1;
  wire CT65_out1;
  wire CT10_out1;
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire CT29_out1;
  wire CT81_out1;
  wire [15:0] Switch130_out1;  // uint16
  wire [15:0] Add14_out1;  // uint16
  reg [15:0] Unit_Delay61_out1;  // uint16
  wire Relational_Operator1_relop1;
  reg  Unit_Delay36_out1;
  wire Switch214_out1;
  wire Switch213_out1;
  wire Or6_out1;
  wire Switch9_out1;
  reg  Unit_Delay37_out1;
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [15:0] signal2_6;  // int16
  wire signed [27:0] Product6_mul_temp;  // sfix28
  wire signed [47:0] Product6_out1;  // sfix48
  wire [16:0] Bit_Slice6_out1;  // ufix17
  wire signed [15:0] Data_Type_S10_out1;  // int16
  wire RO28_relop1;
  wire signed [15:0] Constant35_out1_dtc;  // int16
  wire signed [15:0] Switch104_out1;  // int16
  wire RO27_relop1;
  wire signed [15:0] Constant4_out1_dtc;  // int16
  wire signed [15:0] Switch131_out1;  // int16
  wire signed [11:0] Data_Type_Conversion24_out1;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  wire CT11_out1;
  wire CT66_out1;
  wire CT52_out1;
  wire signed [11:0] signal3;  // sfix12
  wire RO22_relop1;
  wire signed [11:0] Switch95_out1;  // sfix12
  reg signed [11:0] Unit_Delay46_out1;  // sfix12
  wire signed [11:0] Switch93_out1;  // sfix12
  wire signed [11:0] Switch102_out1;  // sfix12
  reg signed [11:0] Unit_Delay29_out1;  // sfix12
  wire signed [11:0] Switch112_out1;  // sfix12
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  wire signed [11:0] signal3_1;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal3_2;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal3_3;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  reg signed [11:0] Unit_Delay45_out1;  // sfix12
  wire signed [11:0] signal3_4;  // sfix12
  wire signed [11:0] signal3_5;  // sfix12
  wire RO21_relop1;
  wire signed [11:0] Switch94_out1;  // sfix12
  wire signed [11:0] Switch96_out1;  // sfix12
  wire signed [11:0] Add2_out1;  // sfix12
  wire signed [11:0] Switch101_out1;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [12:0] Add_b12_1;  // sfix13
  wire signed [12:0] Add_b12_2;  // sfix13
  wire signed [12:0] Add_b12_out1;  // sfix13
  wire RO2_relop1;
  wire signed [12:0] Constant3_out1_dtc;  // sfix13
  wire signed [12:0] Switch4_out1;  // sfix13
  wire RO1_relop1;
  wire signed [12:0] Constant1_out1_dtc;  // sfix13
  wire signed [12:0] Switch5_out1;  // sfix13


  assign signal1 = Um_ref_b12;

  assign Add3_out1 = 2'b01 + Unit_Delay6_out1;



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 2'b00;
      end
      else begin
        Unit_Delay6_out1 <= Add3_out1;
      end
    end



  assign CT9_out1 = Unit_Delay6_out1 == 2'b00;



  assign CT49_out1 = Unit_Delay6_out1 == 2'b00;



  assign CT50_out1 = Unit_Delay6_out1 == 2'b01;



  assign CT65_out1 = Unit_Delay6_out1 == 2'b10;



  assign CT10_out1 = Unit_Delay6_out1 == 2'b11;



  assign signal2 = (CT10_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000000);



  assign s = signal2;

  assign signal2_1 = (CT65_out1 == 1'b0 ? s :
              12'sb000000000000);



  assign s_1 = signal2_1;

  assign signal2_2 = (CT50_out1 == 1'b0 ? s_1 :
              12'sb000000000000);



  assign s_2 = signal2_2;

  assign signal2_3 = (CT49_out1 == 1'b0 ? s_2 :
              12'sb000000000000);



  assign signal2_4 = signal2_3;

  assign signal2_5 = signal2_4;

  assign CT29_out1 = Unit_Delay6_out1 == 2'b00;



  assign CT81_out1 = UacSoftFre_u16 >= 16'b1111111111111010;



  assign Switch130_out1 = (CT81_out1 == 1'b0 ? UacSoftFre_u16 :
              16'b1111111111111010);



  always @(posedge g_clk)
    begin : Unit_Delay61_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1 <= Add14_out1;
      end
    end



  assign Add14_out1 = Switch130_out1 + Unit_Delay61_out1;



  assign Relational_Operator1_relop1 = Add14_out1 < Unit_Delay61_out1;



  assign Switch214_out1 = (Relational_Operator1_relop1 == 1'b0 ? Unit_Delay36_out1 :
              1'b1);



  assign Switch213_out1 = (CT29_out1 == 1'b0 ? Switch214_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay36_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1 <= 1'b0;
      end
      else begin
        Unit_Delay36_out1 <= Switch213_out1;
      end
    end



  assign Or6_out1 = Relational_Operator1_relop1 | Unit_Delay36_out1;



  always @(posedge g_clk)
    begin : Unit_Delay37_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1 <= 1'b0;
      end
      else begin
        Unit_Delay37_out1 <= Switch9_out1;
      end
    end



  assign Switch9_out1 = (CT29_out1 == 1'b0 ? Unit_Delay37_out1 :
              Or6_out1);



  assign signal1_1 = (CT10_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000000);



  assign s_3 = signal1_1;

  assign signal1_2 = (CT65_out1 == 1'b0 ? s_3 :
              12'sb000000000000);



  assign s_4 = signal1_2;

  assign signal1_3 = (CT50_out1 == 1'b0 ? s_4 :
              12'sb000000000000);



  assign s_5 = signal1_3;

  assign signal1_4 = PVR_K_i12;

  assign signal2_6 = P_now_i16;

  assign Product6_mul_temp = signal1_4 * signal2_6;
  assign Product6_out1 = {{20{Product6_mul_temp[27]}}, Product6_mul_temp};



  assign Bit_Slice6_out1 = Product6_out1[27:11];



  assign Data_Type_S10_out1 = $signed(Bit_Slice6_out1[15:0]);



  assign RO28_relop1 = Data_Type_S10_out1 > 16'sb0000000100101100;



  assign Constant35_out1_dtc = 16'sb0000000100101100;



  assign Switch104_out1 = (RO28_relop1 == 1'b0 ? Data_Type_S10_out1 :
              Constant35_out1_dtc);



  assign RO27_relop1 = Switch104_out1 < 16'sb1111111011010100;



  assign Constant4_out1_dtc = 16'sb1111111011010100;



  assign Switch131_out1 = (RO27_relop1 == 1'b0 ? Switch104_out1 :
              Constant4_out1_dtc);



  assign Data_Type_Conversion24_out1 = Switch131_out1[11:0];



  assign signal1_5 = (CT49_out1 == 1'b0 ? s_5 :
              Data_Type_Conversion24_out1);



  assign signal1_6 = signal1_5;

  assign signal1_7 = signal1_6;

  assign CT11_out1 = Unit_Delay6_out1 == 2'b11;



  assign CT66_out1 = Unit_Delay6_out1 == 2'b10;



  assign CT52_out1 = Unit_Delay6_out1 == 2'b01;



  assign RO22_relop1 = signal1_7 < signal3;



  assign Switch95_out1 = (RO22_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign Switch102_out1 = (CT52_out1 == 1'b0 ? Unit_Delay46_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay46_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1 <= Switch102_out1;
      end
    end



  assign Switch112_out1 = (CT66_out1 == 1'b0 ? Unit_Delay29_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay29_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1 <= Switch112_out1;
      end
    end



  assign Switch10_out1 = (CT11_out1 == 1'b0 ? Unit_Delay8_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch10_out1;
      end
    end



  assign signal3_1 = (CT10_out1 == 1'b0 ? Unit_Delay8_out1 :
              Unit_Delay8_out1);



  assign s_6 = signal3_1;

  assign signal3_2 = (CT65_out1 == 1'b0 ? s_6 :
              Unit_Delay29_out1);



  assign s_7 = signal3_2;

  assign signal3_3 = (CT50_out1 == 1'b0 ? s_7 :
              Unit_Delay46_out1);



  assign s_8 = signal3_3;

  assign signal3_4 = (CT49_out1 == 1'b0 ? s_8 :
              Unit_Delay45_out1);



  assign signal3_5 = signal3_4;

  assign signal3 = signal3_5;

  assign RO21_relop1 = signal1_7 > signal3;



  assign Switch94_out1 = (RO21_relop1 == 1'b0 ? Switch95_out1 :
              12'sb000000000001);



  assign Switch96_out1 = (Switch9_out1 == 1'b0 ? 12'sb000000000000 :
              Switch94_out1);



  assign Add2_out1 = Switch96_out1 + signal3;



  assign Switch93_out1 = (CtlLoop_On == 1'b0 ? signal2_5 :
              Add2_out1);



  assign Switch101_out1 = (CT9_out1 == 1'b0 ? Unit_Delay45_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay45_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1 <= Switch101_out1;
      end
    end



  assign signal2_7 = Unit_Delay45_out1;

  assign Add_b12_1 = {signal1[11], signal1};
  assign Add_b12_2 = {signal2_7[11], signal2_7};
  assign Add_b12_out1 = Add_b12_1 + Add_b12_2;



  assign RO2_relop1 = Add_b12_out1 > 13'sb0011111111111;



  assign Constant3_out1_dtc = 13'sb0011111111111;



  assign Switch4_out1 = (RO2_relop1 == 1'b0 ? Add_b12_out1 :
              Constant3_out1_dtc);



  assign RO1_relop1 = Switch4_out1 < 13'sb0000000000000;



  assign Constant1_out1_dtc = 13'sb0000000000000;



  assign Switch5_out1 = (RO1_relop1 == 1'b0 ? Switch4_out1 :
              Constant1_out1_dtc);



  assign Um_Pvr_b12 = Switch5_out1;


endmodule  // PVR_V10

