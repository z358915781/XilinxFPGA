// -------------------------------------------------------------
// 
// File Name: Work_RelayPulseCtrl_V10\RelayPulseCtrl_V10\RelayPulseCtrl_CH4_V10.v
// Created: 2020-06-05 17:04:53
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RelayPulseCtrl_CH4_V10
// Source Path: RelayPulseCtrl_V10/RelayPulseCtrl_CH4_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RelayPulseCtrl_CH4_V10
          (
           g_clk,
           Rst_n,
           Drv_On1,
           Drv_LevelTime1,
           Drv_On2,
           Drv_LevelTime2,
           Drv_On3,
           Drv_LevelTime3,
           Drv_On4,
           Drv_LevelTime4,
           Pulse4096Hz,
           Drv_OnPulse1,
           Drv_OnPulse2,
           Drv_OnPulse3,
           Drv_OnPulse4
          );



  input   g_clk;
  input   Rst_n;
  input   Drv_On1;
  input   [15:0] Drv_LevelTime1;  // uint16
  input   Drv_On2;
  input   [15:0] Drv_LevelTime2;  // uint16
  input   Drv_On3;
  input   [15:0] Drv_LevelTime3;  // uint16
  input   Drv_On4;
  input   [15:0] Drv_LevelTime4;  // uint16
  input   Pulse4096Hz;
  output  Drv_OnPulse1;
  output  Drv_OnPulse2;
  output  Drv_OnPulse3;
  output  Drv_OnPulse4;

  wire [1:0] Constant6_out1;  // ufix2
  wire [1:0] Constant5_out1;  // ufix2
  wire [1:0] Constant7_out1;  // ufix2
  wire [2:0] Constant7_out1_dtc;  // ufix3
  reg [2:0] Delay1_out1;  // ufix3
  wire CTC_8_out1;
  wire LO3_out1;
  wire [1:0] SW12_out1;  // ufix2
  wire [3:0] Add1_add_temp;  // ufix4
  wire [3:0] Add1_1;  // ufix4
  wire [3:0] Add1_2;  // ufix4
  wire [2:0] Add1_out1;  // ufix3
  wire [2:0] SW13_out1;  // ufix3
  wire CTC_4_out1;
  wire CTC_0_out1;
  wire CTC_1_out1;
  wire CTC_2_out1;
  wire CTC_3_out1;
  wire signal1_signal_1;
  wire s;
  wire signal1_signal_1_1;
  wire s_1;
  wire signal1_signal_1_2;
  wire s_2;
  wire signal1_signal_1_3;
  wire signal1_signal_1_4;
  wire signal1_signal_1_5;
  wire [15:0] Constant4_out1;  // uint16
  wire [15:0] Constant3_out1;  // uint16
  wire [15:0] SW7_out1;  // uint16
  wire CTC_7_out1;
  wire signal1_signal_1_6;
  wire [15:0] Constant2_out1;  // uint16
  wire [15:0] signal2_signal_2;  // uint16
  wire [15:0] s_3;  // uint16
  wire [15:0] signal2_signal_2_1;  // uint16
  wire [15:0] s_4;  // uint16
  wire [15:0] signal2_signal_2_2;  // uint16
  wire [15:0] s_5;  // uint16
  wire [15:0] signal2_signal_2_3;  // uint16
  wire [15:0] signal2_signal_2_4;  // uint16
  wire [15:0] signal2_signal_2_5;  // uint16
  wire CTC_6_out1;
  wire CTC_5_out1;
  reg [15:0] signal2;  // uint16
  wire [15:0] s_6;  // uint16
  wire [15:0] SW1_out1;  // uint16
  wire [15:0] signal2_1;  // uint16
  wire [15:0] s_7;  // uint16
  wire [15:0] signal2_2;  // uint16
  wire [15:0] signal2_3;  // uint16
  wire [15:0] s_8;  // uint16
  reg [15:0] signal2_4;  // uint16
  wire [15:0] s_9;  // uint16
  wire [15:0] signal2_5;  // uint16
  wire [15:0] s_10;  // uint16
  wire [15:0] signal2_6;  // uint16
  wire [15:0] signal2_7;  // uint16
  wire [15:0] s_11;  // uint16
  reg [15:0] signal2_8;  // uint16
  wire [15:0] s_12;  // uint16
  wire [15:0] signal2_9;  // uint16
  wire [15:0] s_13;  // uint16
  wire [15:0] signal2_10;  // uint16
  wire [15:0] signal2_11;  // uint16
  wire [15:0] s_14;  // uint16
  reg [15:0] signal2_12;  // uint16
  wire [15:0] signal2_13;  // uint16
  wire [15:0] signal2_14;  // uint16
  wire [15:0] s_15;  // uint16
  wire RO2_relop1;
  wire [15:0] Add2_out1;  // uint16
  wire [15:0] SW2_out1;  // uint16
  wire [15:0] s_16;  // uint16
  wire [15:0] signal2_15;  // uint16
  wire [15:0] s_17;  // uint16
  wire [15:0] s_18;  // uint16
  wire [15:0] signal2_signal_3;  // uint16
  wire [15:0] s_19;  // uint16
  wire [15:0] signal2_signal_3_1;  // uint16
  wire [15:0] s_20;  // uint16
  wire [15:0] signal2_signal_3_2;  // uint16
  wire [15:0] s_21;  // uint16
  wire [15:0] signal2_signal_3_3;  // uint16
  wire [15:0] signal2_signal_3_4;  // uint16
  wire [15:0] signal2_signal_3_5;  // uint16
  wire LO2_out1;
  wire LO1_out1;
  reg  signal1;
  wire s_22;
  wire signal1_1;
  wire s_23;
  wire signal1_2;
  wire signal1_3;
  reg  signal1_4;
  wire s_24;
  wire signal1_5;
  wire s_25;
  wire signal1_6;
  wire signal1_7;
  reg  signal1_8;
  wire s_26;
  wire signal1_9;
  wire s_27;
  wire signal1_10;
  wire signal1_11;
  reg  signal1_12;
  wire s_28;
  wire signal1_13;
  wire s_29;
  wire signal1_14;
  wire signal1_15;


  assign Constant6_out1 = 2'b00;



  assign Constant5_out1 = 2'b01;



  assign Constant7_out1 = 2'b00;



  assign Constant7_out1_dtc = {1'b0, Constant7_out1};



  assign CTC_8_out1 = Delay1_out1 < 3'b100;



  assign LO3_out1 = Pulse4096Hz | CTC_8_out1;



  assign SW12_out1 = (LO3_out1 == 1'b0 ? Constant6_out1 :
              Constant5_out1);



  assign Add1_1 = {2'b0, SW12_out1};
  assign Add1_2 = {1'b0, Delay1_out1};
  assign Add1_add_temp = Add1_1 + Add1_2;
  assign Add1_out1 = Add1_add_temp[2:0];



  assign SW13_out1 = (Pulse4096Hz == 1'b0 ? Add1_out1 :
              Constant7_out1_dtc);



  always @(posedge g_clk)
    begin : Delay1_process
      if (Rst_n == 1'b0) begin
        Delay1_out1 <= 3'b000;
      end
      else begin
        Delay1_out1 <= SW13_out1;
      end
    end



  assign CTC_4_out1 = Delay1_out1 == 3'b000;



  assign CTC_0_out1 = Delay1_out1 == 3'b000;



  assign CTC_1_out1 = Delay1_out1 == 3'b001;



  assign CTC_2_out1 = Delay1_out1 == 3'b010;



  assign CTC_3_out1 = Delay1_out1 == 3'b011;



  assign signal1_signal_1 = (CTC_3_out1 == 1'b0 ? Drv_On4 :
              Drv_On4);



  assign s = signal1_signal_1;

  assign signal1_signal_1_1 = (CTC_2_out1 == 1'b0 ? s :
              Drv_On3);



  assign s_1 = signal1_signal_1_1;

  assign signal1_signal_1_2 = (CTC_1_out1 == 1'b0 ? s_1 :
              Drv_On2);



  assign s_2 = signal1_signal_1_2;

  assign signal1_signal_1_3 = (CTC_0_out1 == 1'b0 ? s_2 :
              Drv_On1);



  assign signal1_signal_1_4 = signal1_signal_1_3;

  assign signal1_signal_1_5 = signal1_signal_1_4;

  assign Constant4_out1 = 16'b0000000000000000;



  assign Constant3_out1 = 16'b0000000000000001;



  assign SW7_out1 = (signal1_signal_1_5 == 1'b0 ? Constant4_out1 :
              Constant3_out1);



  assign CTC_7_out1 = Delay1_out1 == 3'b011;



  assign signal1_signal_1_6 = signal1_signal_1_3;

  assign Constant2_out1 = 16'b0000000000000000;



  assign signal2_signal_2 = (CTC_3_out1 == 1'b0 ? Drv_LevelTime4 :
              Drv_LevelTime4);



  assign s_3 = signal2_signal_2;

  assign signal2_signal_2_1 = (CTC_2_out1 == 1'b0 ? s_3 :
              Drv_LevelTime3);



  assign s_4 = signal2_signal_2_1;

  assign signal2_signal_2_2 = (CTC_1_out1 == 1'b0 ? s_4 :
              Drv_LevelTime2);



  assign s_5 = signal2_signal_2_2;

  assign signal2_signal_2_3 = (CTC_0_out1 == 1'b0 ? s_5 :
              Drv_LevelTime1);



  assign signal2_signal_2_4 = signal2_signal_2_3;

  assign signal2_signal_2_5 = signal2_signal_2_4;

  assign CTC_6_out1 = Delay1_out1 == 3'b010;



  assign CTC_5_out1 = Delay1_out1 == 3'b001;



  assign s_6 = signal2;

  assign signal2_1 = (CTC_4_out1 == 1'b0 ? s_6 :
              SW1_out1);



  assign s_7 = signal2_1;

  always @(posedge g_clk)
    begin : Delay3_2_process
      if (Rst_n == 1'b0) begin
        signal2 <= 16'b0000000000000000;
      end
      else begin
        signal2 <= s_7;
      end
    end



  assign signal2_2 = signal2;

  assign signal2_3 = signal2_2;

  assign s_8 = signal2_3;

  assign s_9 = signal2_4;

  assign signal2_5 = (CTC_5_out1 == 1'b0 ? s_9 :
              SW1_out1);



  assign s_10 = signal2_5;

  always @(posedge g_clk)
    begin : Delay4_2_process
      if (Rst_n == 1'b0) begin
        signal2_4 <= 16'b0000000000000000;
      end
      else begin
        signal2_4 <= s_10;
      end
    end



  assign signal2_6 = signal2_4;

  assign signal2_7 = signal2_6;

  assign s_11 = signal2_7;

  assign s_12 = signal2_8;

  assign signal2_9 = (CTC_6_out1 == 1'b0 ? s_12 :
              SW1_out1);



  assign s_13 = signal2_9;

  always @(posedge g_clk)
    begin : Delay5_2_process
      if (Rst_n == 1'b0) begin
        signal2_8 <= 16'b0000000000000000;
      end
      else begin
        signal2_8 <= s_13;
      end
    end



  assign signal2_10 = signal2_8;

  assign signal2_11 = signal2_10;

  assign s_14 = signal2_11;

  assign signal2_13 = signal2_12;

  assign signal2_14 = signal2_13;

  assign s_15 = signal2_14;

  assign SW2_out1 = (RO2_relop1 == 1'b0 ? Add2_out1 :
              signal2_signal_2_5);



  assign SW1_out1 = (signal1_signal_1_6 == 1'b0 ? Constant2_out1 :
              SW2_out1);



  assign s_16 = signal2_12;

  assign signal2_15 = (CTC_7_out1 == 1'b0 ? s_16 :
              SW1_out1);



  assign s_17 = signal2_15;

  always @(posedge g_clk)
    begin : Delay6_2_process
      if (Rst_n == 1'b0) begin
        signal2_12 <= 16'b0000000000000000;
      end
      else begin
        signal2_12 <= s_17;
      end
    end



  assign s_18 = signal2_12;

  assign signal2_signal_3 = (CTC_3_out1 == 1'b0 ? s_18 :
              s_15);



  assign s_19 = signal2_signal_3;

  assign signal2_signal_3_1 = (CTC_2_out1 == 1'b0 ? s_19 :
              s_14);



  assign s_20 = signal2_signal_3_1;

  assign signal2_signal_3_2 = (CTC_1_out1 == 1'b0 ? s_20 :
              s_11);



  assign s_21 = signal2_signal_3_2;

  assign signal2_signal_3_3 = (CTC_0_out1 == 1'b0 ? s_21 :
              s_8);



  assign signal2_signal_3_4 = signal2_signal_3_3;

  assign signal2_signal_3_5 = signal2_signal_3_4;

  assign Add2_out1 = SW7_out1 + signal2_signal_3_5;



  assign RO2_relop1 = Add2_out1 >= signal2_signal_2_5;



  assign LO2_out1 =  ~ RO2_relop1;



  assign LO1_out1 = LO2_out1 & signal1_signal_1_6;



  assign s_22 = signal1;

  assign signal1_1 = (CTC_4_out1 == 1'b0 ? s_22 :
              LO1_out1);



  assign s_23 = signal1_1;

  always @(posedge g_clk)
    begin : Delay3_1_process
      if (Rst_n == 1'b0) begin
        signal1 <= 1'b0;
      end
      else begin
        signal1 <= s_23;
      end
    end



  assign signal1_2 = signal1;

  assign signal1_3 = signal1_2;

  assign Drv_OnPulse1 = signal1_3;

  assign s_24 = signal1_4;

  assign signal1_5 = (CTC_5_out1 == 1'b0 ? s_24 :
              LO1_out1);



  assign s_25 = signal1_5;

  always @(posedge g_clk)
    begin : Delay4_1_process
      if (Rst_n == 1'b0) begin
        signal1_4 <= 1'b0;
      end
      else begin
        signal1_4 <= s_25;
      end
    end



  assign signal1_6 = signal1_4;

  assign signal1_7 = signal1_6;

  assign Drv_OnPulse2 = signal1_7;

  assign s_26 = signal1_8;

  assign signal1_9 = (CTC_6_out1 == 1'b0 ? s_26 :
              LO1_out1);



  assign s_27 = signal1_9;

  always @(posedge g_clk)
    begin : Delay5_1_process
      if (Rst_n == 1'b0) begin
        signal1_8 <= 1'b0;
      end
      else begin
        signal1_8 <= s_27;
      end
    end



  assign signal1_10 = signal1_8;

  assign signal1_11 = signal1_10;

  assign Drv_OnPulse3 = signal1_11;

  assign s_28 = signal1_12;

  assign signal1_13 = (CTC_7_out1 == 1'b0 ? s_28 :
              LO1_out1);



  assign s_29 = signal1_13;

  always @(posedge g_clk)
    begin : Delay6_1_process
      if (Rst_n == 1'b0) begin
        signal1_12 <= 1'b0;
      end
      else begin
        signal1_12 <= s_29;
      end
    end



  assign signal1_14 = signal1_12;

  assign signal1_15 = signal1_14;

  assign Drv_OnPulse4 = signal1_15;



endmodule  // RelayPulseCtrl_CH4_V10

