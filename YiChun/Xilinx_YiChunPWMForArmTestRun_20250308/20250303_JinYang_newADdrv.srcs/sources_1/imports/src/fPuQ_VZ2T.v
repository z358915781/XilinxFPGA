// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\fPuQ_VZ3T\fPuQ_VZ2T.v
// Created: 2024-09-18 18:56:56
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0005
// Target subsystem base rate: 0.0005
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: fPuQ_VZ2T
// Source Path: fPuQ_VZ3T/fPuQ_VZ2T
// Hierarchy Level: 0
// Model version: 15.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module fPuQ_VZ2T
          (g_clk,
           Rst_n,
           PluseW,
           Work,
           W0_s16,
           W_s18,
           PrefIn_s16,
           QrefIn_s16,
           PacdisLmt_s16,
           PacChgLmt_s16,
           Fdb1_s16,
           Kf1_s16,
           PDisLmt1_s16,
           PChgLmt1_s16,
           Fdb2_s16,
           Kf2_s16,
           PDisLmt2_s16,
           PChgLmt2_s16,
           Kinr_s16,
           Inrdb_s16,
           PDisLmtInr_s16,
           PChgLmtInr_s16,
           InrfdwSel,
           Kv_s16,
           Qlmt_s16,
           Um_ref_b12,
           Udb_s12,
           UrmsMax_b12,
           UrmsMin_b12,
           P_ref_s16,
           Q_ref_s16,
           dP1_s16,
           dP2_s16,
           dPinr_s16,
           dQ_s16);


  input   g_clk;
  input   Rst_n;
  input   PluseW;
  input   Work;
  input   signed [15:0] W0_s16;  // int16
  input   signed [17:0] W_s18;  // sfix18
  input   signed [15:0] PrefIn_s16;  // int16
  input   signed [15:0] QrefIn_s16;  // int16
  input   signed [15:0] PacdisLmt_s16;  // int16
  input   signed [15:0] PacChgLmt_s16;  // int16
  input   signed [15:0] Fdb1_s16;  // int16
  input   signed [15:0] Kf1_s16;  // int16
  input   signed [15:0] PDisLmt1_s16;  // int16
  input   signed [15:0] PChgLmt1_s16;  // int16
  input   signed [15:0] Fdb2_s16;  // int16
  input   signed [15:0] Kf2_s16;  // int16
  input   signed [15:0] PDisLmt2_s16;  // int16
  input   signed [15:0] PChgLmt2_s16;  // int16
  input   signed [15:0] Kinr_s16;  // int16
  input   signed [15:0] Inrdb_s16;  // int16
  input   signed [15:0] PDisLmtInr_s16;  // int16
  input   signed [15:0] PChgLmtInr_s16;  // int16
  input   InrfdwSel;
  input   signed [15:0] Kv_s16;  // int16
  input   signed [15:0] Qlmt_s16;  // int16
  input   signed [11:0] Um_ref_b12;  // sfix12
  input   signed [11:0] Udb_s12;  // sfix12
  input   signed [11:0] UrmsMax_b12;  // sfix12
  input   signed [11:0] UrmsMin_b12;  // sfix12
  output  signed [15:0] P_ref_s16;  // int16
  output  signed [15:0] Q_ref_s16;  // int16
  output  signed [15:0] dP1_s16;  // int16
  output  signed [15:0] dP2_s16;  // int16
  output  signed [15:0] dPinr_s16;  // int16
  output  signed [15:0] dQ_s16;  // int16


  reg [6:0] Unit_Delay2_out1;  // ufix7
  wire [6:0] Addu7_2_out1;  // ufix7
  wire CT2_out1;
  wire CT1_out1;
  wire CT3_out1;
  wire CT4_out1;
  wire switch_compare_1;
  wire signed [15:0] Switch12_out1;  // int16
  wire signed [15:0] signal1;  // int16
  reg signed [15:0] signal1_1;  // int16
  wire switch_compare_1_1;
  wire signed [15:0] Switch11_out1;  // int16
  wire signed [15:0] signal1_2;  // int16
  wire switch_compare_1_2;
  wire signed [15:0] Switch8_out1;  // int16
  wire signed [15:0] signal1_3;  // int16
  wire switch_compare_1_3;
  wire signed [15:0] Switch7_out1;  // int16
  wire signed [12:0] Add16_3_add_temp;  // sfix13
  wire signed [12:0] Add16_3_1;  // sfix13
  wire signed [12:0] Add16_3_2;  // sfix13
  wire signed [15:0] Add16_3_out1;  // int16
  wire signed [12:0] Add16_10_sub_temp;  // sfix13
  wire signed [12:0] Add16_10_1;  // sfix13
  wire signed [12:0] Add16_10_2;  // sfix13
  wire signed [15:0] Add16_10_out1;  // int16
  wire signed [15:0] op21_1_1;  // sfix16
  wire op21_relop1;
  wire switch_compare_1_4;
  wire signed [15:0] op20_1_1;  // sfix16
  wire op20_relop1;
  wire switch_compare_1_5;
  wire signed [15:0] Add16_12_1;  // sfix16
  wire signed [15:0] Add16_12_out1;  // int16
  wire signed [15:0] Switch22_out1;  // int16
  wire signed [15:0] Add16_11_1;  // sfix16
  wire signed [15:0] Add16_11_out1;  // int16
  wire signed [15:0] Switch21_out1;  // int16
  wire signed [15:0] signal2;  // int16
  reg signed [15:0] signal2_1;  // int16
  wire switch_compare_1_6;
  wire signed [17:0] alpha20ms_not_ascii;  // sfix18
  reg signed [17:0] Dly_4_out1;  // sfix18
  wire signed [17:0] SW_5_out1;  // sfix18
  wire signed [18:0] Subs19_1_1;  // sfix19
  wire signed [18:0] Subs19_1_2;  // sfix19
  wire signed [18:0] Subs19_1_out1;  // sfix19
  reg signed [18:0] Dly_1_out1;  // sfix19
  wire signed [18:0] SW_1_out1;  // sfix19
  wire RO61_relop1;
  wire signed [18:0] C16_8_out1_dtc;  // sfix19
  wire signed [18:0] Switch41_out1;  // sfix19
  wire signed [15:0] Unary_Minus1_out1;  // int16
  wire signed [18:0] RO11_1_1;  // sfix19
  wire RO11_relop1;
  wire signed [18:0] Unary_Minus1_out1_dtc;  // sfix19
  wire signed [18:0] Switch1_out1;  // sfix19
  wire signed [15:0] S16_6_out1;  // int16
  wire op5_relop1;
  wire [15:0] Bit_Slice4_out1;  // uint16
  wire signed [15:0] S16_5_out1;  // int16
  wire op7_relop1;
  wire op6_relop1;
  wire op9_out1;
  wire op8_relop1;
  wire op10_out1;
  wire op11_out1;
  wire switch_compare_1_7;
  wire signed [15:0] C16_5_out1_dtc;  // int16
  wire signed [15:0] Switch4_out1;  // int16
  wire signed [15:0] Switch6_out1;  // int16
  wire signed [16:0] Unary_Minus2_in0;  // sfix17
  wire signed [15:0] Unary_Minus2_out1;  // int16
  wire op15_relop1;
  wire switch_compare_1_8;
  wire op14_relop1;
  wire switch_compare_1_9;
  wire signed [15:0] Add16_14_out1;  // int16
  wire signed [15:0] Switch10_out1;  // int16
  wire signed [15:0] Add16_13_out1;  // int16
  wire signed [15:0] Switch9_out1;  // int16
  wire signed [15:0] signal2_2;  // int16
  wire signed [15:0] Add16_8_out1;  // int16
  wire signed [15:0] Add16_9_out1;  // int16
  wire op4_relop1;
  wire switch_compare_1_10;
  wire signed [15:0] C16_2_out1_dtc;  // int16
  wire op3_relop1;
  wire switch_compare_1_11;
  wire signed [15:0] Add16_7_out1;  // int16
  wire signed [15:0] Switch2_out1;  // int16
  wire signed [15:0] Add16_6_out1;  // int16
  wire signed [15:0] Switch1_out1_1;  // int16
  wire signed [15:0] signal2_3;  // int16
  wire signed [15:0] Add16_4_out1;  // int16
  wire signed [15:0] Add16_5_out1;  // int16
  wire op2_relop1;
  wire switch_compare_1_12;
  wire op1_relop1;
  wire switch_compare_1_13;
  wire signed [15:0] Add16_2_out1;  // int16
  wire signed [15:0] Switch5_out1;  // int16
  wire signed [15:0] Add16_1_out1;  // int16
  wire signed [15:0] Switch3_out1;  // int16
  wire signed [15:0] signal1_4;  // int16
  wire signed [15:0] signal1_5;  // int16
  wire signed [15:0] signal2_4;  // int16
  wire signed [15:0] signal2_5;  // int16
  wire signed [31:0] Mpyb32_1_out1;  // int32
  reg signed [31:0] s1z1_out1;  // int32
  wire signed [31:0] Switch15_out1;  // int32
  wire [24:0] Bit_Slice2_out1;  // ufix25
  wire signed [24:0] S22_3_out1;  // sfix25
  wire signed [24:0] RO64_1_1;  // sfix25
  wire RO64_relop1;
  wire signed [24:0] PDisLmt1_s16_dtc;  // sfix25
  wire signed [24:0] Switch41_out1_1;  // sfix25
  wire signed [24:0] RO14_1_1;  // sfix25
  wire RO14_relop1;
  wire signed [24:0] PChgLmt1_s16_dtc;  // sfix25
  wire signed [24:0] Switch1_out1_2;  // sfix25
  wire signed [15:0] S16_1_out1;  // int16
  wire signed [16:0] Add20_3_stage2_1;  // sfix17
  wire signed [16:0] Add20_3_stage2_2;  // sfix17
  wire signed [16:0] Add20_3_op_stage1;  // sfix17
  reg signed [31:0] s1z1_out1_1;  // int32
  wire signed [31:0] Switch15_out1_1;  // int32
  wire [24:0] Bit_Slice1_out1;  // ufix25
  wire signed [24:0] S22_1_out1;  // sfix25
  wire signed [24:0] RO65_1_1;  // sfix25
  wire RO65_relop1;
  wire signed [24:0] PDisLmt2_s16_dtc;  // sfix25
  wire signed [24:0] Switch41_out1_2;  // sfix25
  wire signed [24:0] RO15_1_1;  // sfix25
  wire RO15_relop1;
  wire signed [24:0] PChgLmt2_s16_dtc;  // sfix25
  wire signed [24:0] Switch1_out1_3;  // sfix25
  wire signed [15:0] S16_2_out1;  // int16
  wire signed [17:0] Add20_3_stage3_1;  // sfix18
  wire signed [17:0] Add20_3_stage3_2;  // sfix18
  wire signed [17:0] Add20_3_op_stage2;  // sfix18
  reg signed [31:0] s1z1_out1_2;  // int32
  wire signed [31:0] Switch15_out1_2;  // int32
  wire [21:0] Bit_Slice3_out1;  // ufix22
  wire signed [21:0] S22_2_out1;  // sfix22
  wire signed [21:0] RO66_1_1;  // sfix22
  wire RO66_relop1;
  wire signed [21:0] PDisLmtInr_s16_dtc;  // sfix22
  wire signed [21:0] Switch41_out1_3;  // sfix22
  wire signed [21:0] RO16_1_1;  // sfix22
  wire RO16_relop1;
  wire signed [21:0] PChgLmtInr_s16_dtc;  // sfix22
  wire signed [21:0] Switch1_out1_4;  // sfix22
  wire signed [15:0] S16_3_out1;  // int16
  wire signed [17:0] Add20_3_stage4_add_temp;  // sfix18
  wire signed [17:0] Add20_3_stage4_1;  // sfix18
  wire signed [19:0] Add20_3_out1;  // sfix20
  wire signed [19:0] RO63_1_1;  // sfix20
  wire RO63_relop1;
  wire signed [19:0] PacdisLmt_s16_dtc;  // sfix20
  wire signed [19:0] Switch41_out1_4;  // sfix20
  wire signed [19:0] RO13_1_1;  // sfix20
  wire RO13_relop1;
  wire signed [19:0] PacChgLmt_s16_dtc;  // sfix20
  wire signed [19:0] Switch1_out1_5;  // sfix20
  wire signed [15:0] S16_4_out1;  // int16
  reg signed [31:0] s1z1_out1_3;  // int32
  wire signed [31:0] Switch15_out1_3;  // int32
  wire [21:0] Bit_Slice5_out1;  // ufix22
  wire signed [21:0] S22_4_out1;  // sfix22
  wire signed [16:0] Add20_2_add_temp;  // sfix17
  wire signed [16:0] Add20_2_1;  // sfix17
  wire signed [16:0] Add20_2_2;  // sfix17
  wire signed [19:0] Add20_2_out1;  // sfix20
  wire signed [21:0] RO6_1_1;  // sfix22
  wire RO6_relop1;
  wire signed [21:0] Add20_2_out1_dtc;  // sfix22
  wire signed [21:0] Switch41_out1_5;  // sfix22
  wire signed [20:0] Unary_Minus1_in0;  // sfix21
  wire signed [19:0] Unary_Minus1_out1_1;  // sfix20
  wire signed [21:0] RO1_1_1;  // sfix22
  wire RO1_relop1;
  wire signed [21:0] Unary_Minus1_out1_dtc_1;  // sfix22
  wire signed [21:0] Switch1_out1_6;  // sfix22
  wire signed [15:0] S16_7_out1;  // int16
  wire signed [16:0] Add17_1_1;  // sfix17
  wire signed [16:0] Add17_1_2;  // sfix17
  wire signed [16:0] Add17_1_out1;  // sfix17
  wire signed [16:0] RO62_1_1;  // sfix17
  wire RO62_relop1;
  wire signed [16:0] Qlmt_s16_dtc;  // sfix17
  wire signed [16:0] Switch41_out1_6;  // sfix17
  wire signed [16:0] Unary_Minus12_in0;  // sfix17
  wire signed [15:0] Unary_Minus1_out1_2;  // int16
  wire signed [16:0] RO12_1_1;  // sfix17
  wire RO12_relop1;
  wire signed [16:0] Unary_Minus1_out1_dtc_2;  // sfix17
  wire signed [16:0] Switch1_out1_7;  // sfix17
  wire signed [15:0] S16_8_out1;  // int16

  // 默认：1
  // dw*dw/dt >0
  // dw*dw/dt >0
  // Q=(U-UDead)*K
  // dP=(dw-dwDead)*K
  // P=(w-wDead)*K
  // 钰海1
  // 一般放开限制到2倍
  // =0.02*2*343.6
  // P=-T/50*df/dt*Pn
  // T=4s~14s
  // 3259
  // 超频且频率变化为正时需阻
  // Pluse=4096  1ms_10s
  // Pluse=50  1ms_1000s
  // 3.5*512
  // 扣除死区方式
  // 扣除死区方式
  // 扣除死区方式
  // 钰海2段
  // 722@760
  // P=(w-wDead)*K
  // 扣除死区方式
  // 3.5*512
  // 3.5*512


  assign Addu7_2_out1 = Unit_Delay2_out1 + 7'b0000001;


  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay2_out1 <= Addu7_2_out1;
      end
    end


  assign CT2_out1 = Unit_Delay2_out1 == 7'b0000001;


  assign CT1_out1 = Unit_Delay2_out1 == 7'b0000010;


  assign CT3_out1 = Unit_Delay2_out1 == 7'b0000011;


  assign CT4_out1 = Unit_Delay2_out1 == 7'b0000100;


  assign switch_compare_1 = Work > 1'b0;



  assign Switch12_out1 = (switch_compare_1 == 1'b0 ? 16'sb0000000000000000 :
              Kv_s16);


  always @(posedge g_clk)
    begin : Unit_Delay3_1_process
      if (Rst_n == 1'b0) begin
        signal1_1 <= 16'sb0000000000000000;
      end
      else begin
        signal1_1 <= signal1;
      end
    end


  assign signal1 = (CT4_out1 == 1'b0 ? signal1_1 :
              Switch12_out1);


  assign switch_compare_1_1 = Work > 1'b0;



  assign Switch11_out1 = (switch_compare_1_1 == 1'b0 ? 16'sb0000000000000000 :
              Kinr_s16);


  assign signal1_2 = (CT3_out1 == 1'b0 ? signal1 :
              Switch11_out1);


  assign switch_compare_1_2 = Work > 1'b0;



  assign Switch8_out1 = (switch_compare_1_2 == 1'b0 ? 16'sb0000000000000000 :
              Kf2_s16);


  assign signal1_3 = (CT1_out1 == 1'b0 ? signal1_2 :
              Switch8_out1);


  assign switch_compare_1_3 = Work > 1'b0;



  assign Switch7_out1 = (switch_compare_1_3 == 1'b0 ? 16'sb0000000000000000 :
              Kf1_s16);


  assign Add16_3_1 = {Um_ref_b12[11], Um_ref_b12};
  assign Add16_3_2 = {Udb_s12[11], Udb_s12};
  assign Add16_3_add_temp = Add16_3_1 + Add16_3_2;
  assign Add16_3_out1 = {{3{Add16_3_add_temp[12]}}, Add16_3_add_temp};


  assign Add16_10_1 = {Um_ref_b12[11], Um_ref_b12};
  assign Add16_10_2 = {Udb_s12[11], Udb_s12};
  assign Add16_10_sub_temp = Add16_10_1 - Add16_10_2;
  assign Add16_10_out1 = {{3{Add16_10_sub_temp[12]}}, Add16_10_sub_temp};


  assign op21_1_1 = {{4{UrmsMin_b12[11]}}, UrmsMin_b12};
  assign op21_relop1 = op21_1_1 < Add16_10_out1;


  assign switch_compare_1_4 = op21_relop1 > 1'b0;



  assign op20_1_1 = {{4{UrmsMax_b12[11]}}, UrmsMax_b12};
  assign op20_relop1 = op20_1_1 > Add16_3_out1;


  assign switch_compare_1_5 = op20_relop1 > 1'b0;



  assign Add16_12_1 = {{4{UrmsMin_b12[11]}}, UrmsMin_b12};
  assign Add16_12_out1 = Add16_10_out1 - Add16_12_1;


  assign Switch22_out1 = (switch_compare_1_4 == 1'b0 ? 16'sb0000000000000000 :
              Add16_12_out1);


  assign Add16_11_1 = {{4{UrmsMax_b12[11]}}, UrmsMax_b12};
  assign Add16_11_out1 = Add16_3_out1 - Add16_11_1;


  assign Switch21_out1 = (switch_compare_1_5 == 1'b0 ? Switch22_out1 :
              Add16_11_out1);


  always @(posedge g_clk)
    begin : Unit_Delay3_2_process
      if (Rst_n == 1'b0) begin
        signal2_1 <= 16'sb0000000000000000;
      end
      else begin
        signal2_1 <= signal2;
      end
    end



  assign signal2 = (CT4_out1 == 1'b0 ? signal2_1 :
              Switch21_out1);



  assign switch_compare_1_6 = InrfdwSel > 1'b0;



  assign alpha20ms_not_ascii = W_s18;
  assign SW_5_out1 = (PluseW == 1'b0 ? Dly_4_out1 :
              alpha20ms_not_ascii);


  always @(posedge g_clk)
    begin : Dly_4_process
      if (Rst_n == 1'b0) begin
        Dly_4_out1 <= 18'sb000000000000000000;
      end
      else begin
        Dly_4_out1 <= SW_5_out1;
      end
    end


  assign Subs19_1_1 = {alpha20ms_not_ascii[17], alpha20ms_not_ascii};
  assign Subs19_1_2 = {Dly_4_out1[17], Dly_4_out1};
  assign Subs19_1_out1 = Subs19_1_1 - Subs19_1_2;


  assign SW_1_out1 = (PluseW == 1'b0 ? Dly_1_out1 :
              Subs19_1_out1);


  always @(posedge g_clk)
    begin : Dly_1_process
      if (Rst_n == 1'b0) begin
        Dly_1_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Dly_1_out1 <= SW_1_out1;
      end
    end


  assign RO61_relop1 = Dly_1_out1 > 19'sb0000111010100110000;


  assign C16_8_out1_dtc = 19'sb0000111010100110000;


  assign Switch41_out1 = (RO61_relop1 == 1'b0 ? Dly_1_out1 :
              C16_8_out1_dtc);


  assign Unary_Minus1_out1 = 16'sb1000101011010000;


  assign RO11_1_1 = {{3{Unary_Minus1_out1[15]}}, Unary_Minus1_out1};
  assign RO11_relop1 = Switch41_out1 < RO11_1_1;


  assign Unary_Minus1_out1_dtc = {{3{Unary_Minus1_out1[15]}}, Unary_Minus1_out1};



  assign Switch1_out1 = (RO11_relop1 == 1'b0 ? Switch41_out1 :
              Unary_Minus1_out1_dtc);


  assign S16_6_out1 = Switch1_out1[15:0];


  assign op5_relop1 = S16_6_out1 > 16'sb0000000000000000;


  assign Bit_Slice4_out1 = W_s18[17:2];


  assign S16_5_out1 = Bit_Slice4_out1;


  assign op7_relop1 = S16_6_out1 < 16'sb0000000000000000;


  assign op6_relop1 = S16_5_out1 > W0_s16;


  assign op9_out1 = op5_relop1 & op6_relop1;


  assign op8_relop1 = S16_5_out1 < W0_s16;


  assign op10_out1 = op7_relop1 & op8_relop1;


  assign op11_out1 = op9_out1 | op10_out1;


  assign switch_compare_1_7 = op11_out1 > 1'b0;



  assign C16_5_out1_dtc = 16'sb0000000000000000;


  assign Switch4_out1 = (switch_compare_1_7 == 1'b0 ? C16_5_out1_dtc :
              S16_6_out1);


  assign Switch6_out1 = (switch_compare_1_6 == 1'b0 ? S16_6_out1 :
              Switch4_out1);


  assign Unary_Minus2_in0 =  - ({Inrdb_s16[15], Inrdb_s16});
  assign Unary_Minus2_out1 = Unary_Minus2_in0[15:0];


  assign op15_relop1 = Switch6_out1 < Unary_Minus2_out1;


  assign switch_compare_1_8 = op15_relop1 > 1'b0;



  assign op14_relop1 = Switch6_out1 > Inrdb_s16;


  assign switch_compare_1_9 = op14_relop1 > 1'b0;



  assign Add16_14_out1 = Unary_Minus2_out1 - Switch6_out1;


  assign Switch10_out1 = (switch_compare_1_8 == 1'b0 ? 16'sb0000000000000000 :
              Add16_14_out1);


  assign Add16_13_out1 = Inrdb_s16 - Switch6_out1;


  assign Switch9_out1 = (switch_compare_1_9 == 1'b0 ? Switch10_out1 :
              Add16_13_out1);


  assign signal2_2 = (CT3_out1 == 1'b0 ? signal2 :
              Switch9_out1);



  assign Add16_8_out1 = W0_s16 + Fdb2_s16;


  assign Add16_9_out1 = W0_s16 - Fdb2_s16;


  assign op4_relop1 = S16_5_out1 < Add16_9_out1;


  assign switch_compare_1_10 = op4_relop1 > 1'b0;



  assign C16_2_out1_dtc = 16'sb0000000000000000;


  assign op3_relop1 = S16_5_out1 > Add16_8_out1;


  assign switch_compare_1_11 = op3_relop1 > 1'b0;



  assign Add16_7_out1 = Add16_9_out1 - S16_5_out1;


  assign Switch2_out1 = (switch_compare_1_10 == 1'b0 ? C16_2_out1_dtc :
              Add16_7_out1);


  assign Add16_6_out1 = Add16_8_out1 - S16_5_out1;


  assign Switch1_out1_1 = (switch_compare_1_11 == 1'b0 ? Switch2_out1 :
              Add16_6_out1);


  assign signal2_3 = (CT1_out1 == 1'b0 ? signal2_2 :
              Switch1_out1_1);



  assign Add16_4_out1 = W0_s16 + Fdb1_s16;


  assign Add16_5_out1 = W0_s16 - Fdb1_s16;


  assign op2_relop1 = S16_5_out1 < Add16_5_out1;


  assign switch_compare_1_12 = op2_relop1 > 1'b0;



  assign op1_relop1 = S16_5_out1 > Add16_4_out1;


  assign switch_compare_1_13 = op1_relop1 > 1'b0;



  assign Add16_2_out1 = Add16_5_out1 - S16_5_out1;


  assign Switch5_out1 = (switch_compare_1_12 == 1'b0 ? 16'sb0000000000000000 :
              Add16_2_out1);


  assign Add16_1_out1 = Add16_4_out1 - S16_5_out1;


  assign Switch3_out1 = (switch_compare_1_13 == 1'b0 ? Switch5_out1 :
              Add16_1_out1);


  assign signal1_4 = (CT2_out1 == 1'b0 ? signal1_3 :
              Switch7_out1);


  assign signal1_5 = signal1_4;
  assign signal2_4 = (CT2_out1 == 1'b0 ? signal2_3 :
              Switch3_out1);



  assign signal2_5 = signal2_4;

  assign Mpyb32_1_out1 = signal1_5 * signal2_5;


  assign Switch15_out1 = (CT2_out1 == 1'b0 ? s1z1_out1 :
              Mpyb32_1_out1);


  always @(posedge g_clk)
    begin : s1z12_process
      if (Rst_n == 1'b0) begin
        s1z1_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z1_out1 <= Switch15_out1;
      end
    end


  assign Bit_Slice2_out1 = s1z1_out1[31:7];


  assign S22_3_out1 = Bit_Slice2_out1;


  assign RO64_1_1 = {{9{PDisLmt1_s16[15]}}, PDisLmt1_s16};
  assign RO64_relop1 = S22_3_out1 > RO64_1_1;


  assign PDisLmt1_s16_dtc = {{9{PDisLmt1_s16[15]}}, PDisLmt1_s16};



  assign Switch41_out1_1 = (RO64_relop1 == 1'b0 ? S22_3_out1 :
              PDisLmt1_s16_dtc);


  assign RO14_1_1 = {{9{PChgLmt1_s16[15]}}, PChgLmt1_s16};
  assign RO14_relop1 = Switch41_out1_1 < RO14_1_1;


  assign PChgLmt1_s16_dtc = {{9{PChgLmt1_s16[15]}}, PChgLmt1_s16};



  assign Switch1_out1_2 = (RO14_relop1 == 1'b0 ? Switch41_out1_1 :
              PChgLmt1_s16_dtc);


  assign S16_1_out1 = Switch1_out1_2[15:0];


  assign Add20_3_stage2_1 = {PrefIn_s16[15], PrefIn_s16};
  assign Add20_3_stage2_2 = {S16_1_out1[15], S16_1_out1};
  assign Add20_3_op_stage1 = Add20_3_stage2_1 + Add20_3_stage2_2;



  assign Switch15_out1_1 = (CT1_out1 == 1'b0 ? s1z1_out1_1 :
              Mpyb32_1_out1);


  always @(posedge g_clk)
    begin : s1z1_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z1_out1_1 <= Switch15_out1_1;
      end
    end


  assign Bit_Slice1_out1 = s1z1_out1_1[31:7];


  assign S22_1_out1 = Bit_Slice1_out1;


  assign RO65_1_1 = {{9{PDisLmt2_s16[15]}}, PDisLmt2_s16};
  assign RO65_relop1 = S22_1_out1 > RO65_1_1;


  assign PDisLmt2_s16_dtc = {{9{PDisLmt2_s16[15]}}, PDisLmt2_s16};



  assign Switch41_out1_2 = (RO65_relop1 == 1'b0 ? S22_1_out1 :
              PDisLmt2_s16_dtc);


  assign RO15_1_1 = {{9{PChgLmt2_s16[15]}}, PChgLmt2_s16};
  assign RO15_relop1 = Switch41_out1_2 < RO15_1_1;


  assign PChgLmt2_s16_dtc = {{9{PChgLmt2_s16[15]}}, PChgLmt2_s16};



  assign Switch1_out1_3 = (RO15_relop1 == 1'b0 ? Switch41_out1_2 :
              PChgLmt2_s16_dtc);


  assign S16_2_out1 = Switch1_out1_3[15:0];


  assign Add20_3_stage3_1 = {Add20_3_op_stage1[16], Add20_3_op_stage1};
  assign Add20_3_stage3_2 = {{2{S16_2_out1[15]}}, S16_2_out1};
  assign Add20_3_op_stage2 = Add20_3_stage3_1 + Add20_3_stage3_2;



  assign Switch15_out1_2 = (CT3_out1 == 1'b0 ? s1z1_out1_2 :
              Mpyb32_1_out1);


  always @(posedge g_clk)
    begin : s1z11_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z1_out1_2 <= Switch15_out1_2;
      end
    end


  assign Bit_Slice3_out1 = s1z1_out1_2[31:10];


  assign S22_2_out1 = Bit_Slice3_out1;


  assign RO66_1_1 = {{6{PDisLmtInr_s16[15]}}, PDisLmtInr_s16};
  assign RO66_relop1 = S22_2_out1 > RO66_1_1;


  assign PDisLmtInr_s16_dtc = {{6{PDisLmtInr_s16[15]}}, PDisLmtInr_s16};



  assign Switch41_out1_3 = (RO66_relop1 == 1'b0 ? S22_2_out1 :
              PDisLmtInr_s16_dtc);


  assign RO16_1_1 = {{6{PChgLmtInr_s16[15]}}, PChgLmtInr_s16};
  assign RO16_relop1 = Switch41_out1_3 < RO16_1_1;


  assign PChgLmtInr_s16_dtc = {{6{PChgLmtInr_s16[15]}}, PChgLmtInr_s16};



  assign Switch1_out1_4 = (RO16_relop1 == 1'b0 ? Switch41_out1_3 :
              PChgLmtInr_s16_dtc);


  assign S16_3_out1 = Switch1_out1_4[15:0];


  assign Add20_3_stage4_1 = {{2{S16_3_out1[15]}}, S16_3_out1};
  assign Add20_3_stage4_add_temp = Add20_3_op_stage2 + Add20_3_stage4_1;
  assign Add20_3_out1 = {{2{Add20_3_stage4_add_temp[17]}}, Add20_3_stage4_add_temp};


  assign RO63_1_1 = {{4{PacdisLmt_s16[15]}}, PacdisLmt_s16};
  assign RO63_relop1 = Add20_3_out1 > RO63_1_1;


  assign PacdisLmt_s16_dtc = {{4{PacdisLmt_s16[15]}}, PacdisLmt_s16};



  assign Switch41_out1_4 = (RO63_relop1 == 1'b0 ? Add20_3_out1 :
              PacdisLmt_s16_dtc);


  assign RO13_1_1 = {{4{PacChgLmt_s16[15]}}, PacChgLmt_s16};
  assign RO13_relop1 = Switch41_out1_4 < RO13_1_1;


  assign PacChgLmt_s16_dtc = {{4{PacChgLmt_s16[15]}}, PacChgLmt_s16};



  assign Switch1_out1_5 = (RO13_relop1 == 1'b0 ? Switch41_out1_4 :
              PacChgLmt_s16_dtc);


  assign S16_4_out1 = Switch1_out1_5[15:0];


  assign P_ref_s16 = S16_4_out1;

  assign Switch15_out1_3 = (CT4_out1 == 1'b0 ? s1z1_out1_3 :
              Mpyb32_1_out1);


  always @(posedge g_clk)
    begin : s1z13_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        s1z1_out1_3 <= Switch15_out1_3;
      end
    end


  assign Bit_Slice5_out1 = s1z1_out1_3[31:10];


  assign S22_4_out1 = Bit_Slice5_out1;


  assign Add20_2_1 = {Qlmt_s16[15], Qlmt_s16};
  assign Add20_2_2 = {Qlmt_s16[15], Qlmt_s16};
  assign Add20_2_add_temp = Add20_2_1 + Add20_2_2;
  assign Add20_2_out1 = {{3{Add20_2_add_temp[16]}}, Add20_2_add_temp};


  assign RO6_1_1 = {{2{Add20_2_out1[19]}}, Add20_2_out1};
  assign RO6_relop1 = S22_4_out1 > RO6_1_1;


  assign Add20_2_out1_dtc = {{2{Add20_2_out1[19]}}, Add20_2_out1};



  assign Switch41_out1_5 = (RO6_relop1 == 1'b0 ? S22_4_out1 :
              Add20_2_out1_dtc);


  assign Unary_Minus1_in0 =  - ({Add20_2_out1[19], Add20_2_out1});
  assign Unary_Minus1_out1_1 = Unary_Minus1_in0[19:0];


  assign RO1_1_1 = {{2{Unary_Minus1_out1_1[19]}}, Unary_Minus1_out1_1};
  assign RO1_relop1 = Switch41_out1_5 < RO1_1_1;


  assign Unary_Minus1_out1_dtc_1 = {{2{Unary_Minus1_out1_1[19]}}, Unary_Minus1_out1_1};



  assign Switch1_out1_6 = (RO1_relop1 == 1'b0 ? Switch41_out1_5 :
              Unary_Minus1_out1_dtc_1);


  assign S16_7_out1 = Switch1_out1_6[15:0];


  assign Add17_1_1 = {QrefIn_s16[15], QrefIn_s16};
  assign Add17_1_2 = {S16_7_out1[15], S16_7_out1};
  assign Add17_1_out1 = Add17_1_1 + Add17_1_2;


  assign RO62_1_1 = {Qlmt_s16[15], Qlmt_s16};
  assign RO62_relop1 = Add17_1_out1 > RO62_1_1;


  assign Qlmt_s16_dtc = {Qlmt_s16[15], Qlmt_s16};



  assign Switch41_out1_6 = (RO62_relop1 == 1'b0 ? Add17_1_out1 :
              Qlmt_s16_dtc);


  assign Unary_Minus12_in0 =  - ({Qlmt_s16[15], Qlmt_s16});
  assign Unary_Minus1_out1_2 = Unary_Minus12_in0[15:0];


  assign RO12_1_1 = {Unary_Minus1_out1_2[15], Unary_Minus1_out1_2};
  assign RO12_relop1 = Switch41_out1_6 < RO12_1_1;


  assign Unary_Minus1_out1_dtc_2 = {Unary_Minus1_out1_2[15], Unary_Minus1_out1_2};



  assign Switch1_out1_7 = (RO12_relop1 == 1'b0 ? Switch41_out1_6 :
              Unary_Minus1_out1_dtc_2);


  assign S16_8_out1 = Switch1_out1_7[15:0];


  assign Q_ref_s16 = S16_8_out1;

  assign dP1_s16 = S16_1_out1;

  assign dP2_s16 = S16_2_out1;

  assign dPinr_s16 = S16_3_out1;

  assign dQ_s16 = S16_7_out1;

endmodule  // fPuQ_VZ2T

