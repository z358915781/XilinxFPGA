// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\NegPro_V1\NegPro_V2.v
// Created: 2024-08-16 16:06:32
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.2207e-05
// Target subsystem base rate: 1.2207e-05
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: NegPro_V2
// Source Path: NegPro_V1/NegPro_V2
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module NegPro_V2
          (g_clk,
           Rst_n,
           UproK_s12,
           IproK_s12,
           Up_s12,
           Un_s12,
           Idp_s12,
           Iqp_s12,
           Idn_s12,
           Iqn_s12,
           Pulse_4096Hz,
           Time_b16,
           UnFault,
           InFault1,
           Ip_s12,
           In_s12);


  input   g_clk;
  input   Rst_n;
  input   signed [11:0] UproK_s12;  // sfix12
  input   signed [11:0] IproK_s12;  // sfix12
  input   signed [11:0] Up_s12;  // sfix12
  input   signed [11:0] Un_s12;  // sfix12
  input   signed [11:0] Idp_s12;  // sfix12
  input   signed [11:0] Iqp_s12;  // sfix12
  input   signed [11:0] Idn_s12;  // sfix12
  input   signed [11:0] Iqn_s12;  // sfix12
  input   Pulse_4096Hz;
  input   signed [15:0] Time_b16;  // int16
  output  UnFault;
  output  InFault1;
  output  signed [11:0] Ip_s12;  // sfix12
  output  signed [11:0] In_s12;  // sfix12


  reg [6:0] Unit_Delay2_out1;  // ufix7
  wire [6:0] Addu7_2_out1;  // ufix7
  wire CT2_out1;
  wire CT1_out1;
  wire CT3_out1;
  wire CT4_out1;
  wire CT5_out1;
  wire CT6_out1;
  wire signed [11:0] signal1;  // sfix12
  reg signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire Compare_To_Constant4_out1;
  wire Comparet2_out1;
  wire [11:0] Switch159_out1;  // ufix12
  reg [11:0] Unit_Delay75_out1;  // ufix12
  wire [11:0] bit_shift_out1;  // ufix12
  wire signed [11:0] signal2;  // sfix12
  reg signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  reg signed [23:0] s1z1_out1;  // sfix24
  wire signed [23:0] Mpyb24_1_out1;  // sfix24
  wire signed [23:0] Switch15_out1;  // sfix24
  reg signed [23:0] s1z1_out1_1;  // sfix24
  wire signed [23:0] Switch15_out1_1;  // sfix24
  wire signed [24:0] Add_u25_1_add_temp;  // sfix25
  wire signed [24:0] Add_u25_1_1;  // sfix25
  wire signed [24:0] Add_u25_1_2;  // sfix25
  wire [24:0] Add_u25_1_out1;  // ufix25
  wire RO63_relop1;
  wire [24:0] Switch41_out1;  // ufix25
  wire [23:0] S24_4_out1;  // ufix24
  wire [11:0] Switch158_out1;  // ufix12
  reg [11:0] Unit_Delay73_out1;  // ufix12
  wire [11:0] Switch161_out1;  // ufix12
  wire [11:0] Bitwise_Operator6_out1;  // ufix12
  wire [23:0] Product7_out1;  // ufix24
  wire RO311_relop1;
  wire signed [11:0] S12_1_out1;  // sfix12
  reg signed [11:0] Unit_Delay38_out1;  // sfix12
  wire signed [11:0] Switch87_out1;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  reg signed [23:0] s1z1_out1_2;  // sfix24
  wire signed [23:0] Switch15_out1_2;  // sfix24
  wire [13:0] Bit_Slice2_out1;  // ufix14
  wire signed [13:0] S14_1_out1;  // sfix14
  wire RO6_relop1;
  wire signed [13:0] Constant7_out1_dtc;  // sfix14
  wire signed [13:0] Switch41_out1_1;  // sfix14
  wire signed [11:0] U_3_out1;  // sfix12
  wire signed [13:0] RO1_1_1;  // sfix14
  wire RO1_relop1;
  wire signed [13:0] U_3_out1_dtc;  // sfix14
  wire signed [13:0] Switch1_out1;  // sfix14
  wire signed [13:0] Ro3_1_1;  // sfix14
  wire Ro3_relop1;
  wire signed [15:0] Switch58_out1;  // int16
  wire signed [15:0] Switch4_out1;  // int16
  wire CT10_out1;
  wire signed [15:0] Add3_out1;  // int16
  wire signed [15:0] Switch28_out1;  // int16
  wire Dy2_relop1;
  wire signed [15:0] Switch27_out1;  // int16
  reg signed [15:0] Unit_Delay23_out1;  // int16
  wire Switch30_out1;
  reg  Unit_Delay1_out1;
  wire Switch29_out1;
  wire Compare_To_Constant4_out1_1;
  wire Comparet2_out1_1;
  wire [11:0] Switch159_out1_1;  // ufix12
  reg [11:0] Unit_Delay75_out1_1;  // ufix12
  wire [11:0] bit_shift_out1_1;  // ufix12
  reg signed [23:0] s1z1_out1_3;  // sfix24
  wire signed [23:0] Switch15_out1_3;  // sfix24
  reg signed [23:0] s1z1_out1_4;  // sfix24
  wire signed [23:0] Switch15_out1_4;  // sfix24
  wire signed [24:0] Add_u25_2_add_temp;  // sfix25
  wire signed [24:0] Add_u25_2_1;  // sfix25
  wire signed [24:0] Add_u25_2_2;  // sfix25
  wire [24:0] Add_u25_2_out1;  // ufix25
  wire RO62_relop1;
  wire [24:0] Switch41_out1_2;  // ufix25
  wire [23:0] S24_5_out1;  // ufix24
  wire [11:0] Switch158_out1_1;  // ufix12
  reg [11:0] Unit_Delay73_out1_1;  // ufix12
  wire [11:0] Switch161_out1_1;  // ufix12
  wire [11:0] Bitwise_Operator6_out1_1;  // ufix12
  wire [23:0] Product7_out1_1;  // ufix24
  wire RO31_relop1;
  wire signed [11:0] S12_1_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay38_out1_1;  // sfix12
  wire signed [11:0] Switch87_out1_1;  // sfix12
  reg signed [23:0] s1z1_out1_5;  // sfix24
  wire signed [23:0] Switch15_out1_5;  // sfix24
  wire [13:0] Bit_Slice1_out1;  // ufix14
  wire signed [13:0] S14_2_out1;  // sfix14
  wire RO61_relop1;
  wire signed [13:0] Constant10_out1_dtc;  // sfix14
  wire signed [13:0] Switch41_out1_3;  // sfix14
  wire signed [11:0] U_3_out1_1;  // sfix12
  wire signed [13:0] RO11_1_1;  // sfix14
  wire RO11_relop1;
  wire signed [13:0] U_3_out1_dtc_1;  // sfix14
  wire signed [13:0] Switch1_out1_1;  // sfix14
  wire signed [13:0] Ro4_1_1;  // sfix14
  wire Ro4_relop1;
  wire signed [15:0] Switch7_out1;  // int16
  wire signed [15:0] Switch6_out1;  // int16
  wire CT7_out1;
  wire signed [15:0] Add1_out1;  // int16
  wire signed [15:0] Switch2_out1;  // int16
  wire Dy1_relop1;
  wire signed [15:0] Switch1_out1_2;  // int16
  reg signed [15:0] Unit_Delay4_out1;  // int16
  wire Switch5_out1;
  reg  Unit_Delay3_out1;
  wire Switch3_out1;

  // 3.5*512
  // SQRT(Data)
  // SQRT(Data)


  assign Addu7_2_out1 = Unit_Delay2_out1 + 7'b0000001;



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay2_out1 <= Addu7_2_out1;
      end
    end



  assign CT2_out1 = Unit_Delay2_out1 == 7'b0000001;



  assign CT1_out1 = Unit_Delay2_out1 == 7'b0000010;



  assign CT3_out1 = Unit_Delay2_out1 == 7'b0000011;



  assign CT4_out1 = Unit_Delay2_out1 == 7'b0000100;



  assign CT5_out1 = Unit_Delay2_out1 == 7'b0000101;



  assign CT6_out1 = Unit_Delay2_out1 == 7'b0000110;



  always @(posedge g_clk)
    begin : s1z2_1_process
      if (Rst_n == 1'b0) begin
        signal1_1 <= 12'sb000000000000;
      end
      else begin
        signal1_1 <= signal1;
      end
    end



  assign signal1 = (CT6_out1 == 1'b0 ? signal1_1 :
              Iqn_s12);



  assign signal1_2 = (CT5_out1 == 1'b0 ? signal1 :
              Idn_s12);



  assign signal1_3 = (CT4_out1 == 1'b0 ? signal1_2 :
              Iqp_s12);



  assign signal1_4 = (CT3_out1 == 1'b0 ? signal1_3 :
              Idp_s12);



  assign Compare_To_Constant4_out1 = Unit_Delay2_out1 == 7'b0001010;



  assign Comparet2_out1 = Unit_Delay2_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay751_process
      if (Rst_n == 1'b0) begin
        Unit_Delay75_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay75_out1 <= Switch159_out1;
      end
    end



  assign bit_shift_out1 = Unit_Delay75_out1 >> 8'd1;



  assign Switch159_out1 = (Comparet2_out1 == 1'b0 ? bit_shift_out1 :
              12'b010000000000);



  always @(posedge g_clk)
    begin : s1z2_2_process
      if (Rst_n == 1'b0) begin
        signal2_1 <= 12'sb000000000000;
      end
      else begin
        signal2_1 <= signal2;
      end
    end



  assign signal2 = (CT6_out1 == 1'b0 ? signal2_1 :
              Iqn_s12);



  assign signal2_2 = (CT5_out1 == 1'b0 ? signal2 :
              Idn_s12);



  assign signal2_3 = (CT4_out1 == 1'b0 ? signal2_2 :
              Iqp_s12);



  assign signal2_4 = (CT3_out1 == 1'b0 ? signal2_3 :
              Idp_s12);



  assign signal2_5 = (CT1_out1 == 1'b0 ? signal2_4 :
              IproK_s12);



  assign signal2_6 = (CT2_out1 == 1'b0 ? signal2_5 :
              UproK_s12);



  assign signal2_7 = signal2_6;

  assign Switch15_out1 = (CT4_out1 == 1'b0 ? s1z1_out1 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z13_process
      if (Rst_n == 1'b0) begin
        s1z1_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1 <= Switch15_out1;
      end
    end



  assign Switch15_out1_1 = (CT3_out1 == 1'b0 ? s1z1_out1_1 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z12_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1_1 <= Switch15_out1_1;
      end
    end



  assign Add_u25_1_1 = {s1z1_out1_1[23], s1z1_out1_1};
  assign Add_u25_1_2 = {s1z1_out1[23], s1z1_out1};
  assign Add_u25_1_add_temp = Add_u25_1_1 + Add_u25_1_2;
  assign Add_u25_1_out1 = Add_u25_1_add_temp;



  assign RO63_relop1 = Add_u25_1_out1 > 25'b0111111111111111111111111;



  assign Switch41_out1 = (RO63_relop1 == 1'b0 ? Add_u25_1_out1 :
              25'b0111111111111111111111111);



  assign S24_4_out1 = Switch41_out1[23:0];



  always @(posedge g_clk)
    begin : Unit_Delay731_process
      if (Rst_n == 1'b0) begin
        Unit_Delay73_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay73_out1 <= Switch158_out1;
      end
    end



  assign Switch161_out1 = (Comparet2_out1 == 1'b0 ? Unit_Delay73_out1 :
              12'b000000000000);



  assign Bitwise_Operator6_out1 = Switch159_out1 | Switch161_out1;



  assign Product7_out1 = Bitwise_Operator6_out1 * Bitwise_Operator6_out1;



  assign RO311_relop1 = Product7_out1 < S24_4_out1;



  assign Switch158_out1 = (RO311_relop1 == 1'b0 ? Switch161_out1 :
              Bitwise_Operator6_out1);



  assign S12_1_out1 = Switch158_out1;



  assign Switch87_out1 = (Compare_To_Constant4_out1 == 1'b0 ? Unit_Delay38_out1 :
              S12_1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay381_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay38_out1 <= Switch87_out1;
      end
    end



  assign signal1_5 = (CT1_out1 == 1'b0 ? signal1_4 :
              Unit_Delay38_out1);



  assign signal1_6 = (CT2_out1 == 1'b0 ? signal1_5 :
              Up_s12);



  assign signal1_7 = signal1_6;

  assign Mpyb24_1_out1 = signal1_7 * signal2_7;



  assign Switch15_out1_2 = (CT2_out1 == 1'b0 ? s1z1_out1_2 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z11_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1_2 <= Switch15_out1_2;
      end
    end



  assign Bit_Slice2_out1 = s1z1_out1_2[23:10];



  assign S14_1_out1 = Bit_Slice2_out1;



  assign RO6_relop1 = S14_1_out1 > 14'sb00011111111111;



  assign Constant7_out1_dtc = 14'sb00011111111111;



  assign Switch41_out1_1 = (RO6_relop1 == 1'b0 ? S14_1_out1 :
              Constant7_out1_dtc);



  assign U_3_out1 = 12'sb100000000001;



  assign RO1_1_1 = {{2{U_3_out1[11]}}, U_3_out1};
  assign RO1_relop1 = Switch41_out1_1 < RO1_1_1;



  assign U_3_out1_dtc = {{2{U_3_out1[11]}}, U_3_out1};



  assign Switch1_out1 = (RO1_relop1 == 1'b0 ? Switch41_out1_1 :
              U_3_out1_dtc);



  assign Ro3_1_1 = {{2{Un_s12[11]}}, Un_s12};
  assign Ro3_relop1 = Ro3_1_1 >= Switch1_out1;



  assign Switch58_out1 = (Ro3_relop1 == 1'b0 ? 16'sb1111111111111111 :
              16'sb0000000000000001);



  assign Switch4_out1 = (Pulse_4096Hz == 1'b0 ? 16'sb0000000000000000 :
              Switch58_out1);



  assign Switch28_out1 = (CT10_out1 == 1'b0 ? Add3_out1 :
              16'sb0000000000000000);



  assign Dy2_relop1 = Switch28_out1 >= Time_b16;



  assign Switch27_out1 = (Dy2_relop1 == 1'b0 ? Switch28_out1 :
              Time_b16);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch27_out1;
      end
    end



  assign Add3_out1 = Switch4_out1 + Unit_Delay23_out1;



  assign CT10_out1 = Add3_out1 <= 16'sb0000000000000000;



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch30_out1;
      end
    end



  assign Switch29_out1 = (Dy2_relop1 == 1'b0 ? Unit_Delay1_out1 :
              1'b1);



  assign Switch30_out1 = (CT10_out1 == 1'b0 ? Switch29_out1 :
              1'b0);



  assign UnFault = Switch30_out1;

  assign Compare_To_Constant4_out1_1 = Unit_Delay2_out1 == 7'b0001010;



  assign Comparet2_out1_1 = Unit_Delay2_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay75_process
      if (Rst_n == 1'b0) begin
        Unit_Delay75_out1_1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay75_out1_1 <= Switch159_out1_1;
      end
    end



  assign bit_shift_out1_1 = Unit_Delay75_out1_1 >> 8'd1;



  assign Switch159_out1_1 = (Comparet2_out1_1 == 1'b0 ? bit_shift_out1_1 :
              12'b010000000000);



  assign Switch15_out1_3 = (CT5_out1 == 1'b0 ? s1z1_out1_3 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z14_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_3 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1_3 <= Switch15_out1_3;
      end
    end



  assign Switch15_out1_4 = (CT6_out1 == 1'b0 ? s1z1_out1_4 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z15_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1_4 <= Switch15_out1_4;
      end
    end



  assign Add_u25_2_1 = {s1z1_out1_3[23], s1z1_out1_3};
  assign Add_u25_2_2 = {s1z1_out1_4[23], s1z1_out1_4};
  assign Add_u25_2_add_temp = Add_u25_2_1 + Add_u25_2_2;
  assign Add_u25_2_out1 = Add_u25_2_add_temp;



  assign RO62_relop1 = Add_u25_2_out1 > 25'b0111111111111111111111111;



  assign Switch41_out1_2 = (RO62_relop1 == 1'b0 ? Add_u25_2_out1 :
              25'b0111111111111111111111111);



  assign S24_5_out1 = Switch41_out1_2[23:0];



  always @(posedge g_clk)
    begin : Unit_Delay73_process
      if (Rst_n == 1'b0) begin
        Unit_Delay73_out1_1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay73_out1_1 <= Switch158_out1_1;
      end
    end



  assign Switch161_out1_1 = (Comparet2_out1_1 == 1'b0 ? Unit_Delay73_out1_1 :
              12'b000000000000);



  assign Bitwise_Operator6_out1_1 = Switch159_out1_1 | Switch161_out1_1;



  assign Product7_out1_1 = Bitwise_Operator6_out1_1 * Bitwise_Operator6_out1_1;



  assign RO31_relop1 = Product7_out1_1 < S24_5_out1;



  assign Switch158_out1_1 = (RO31_relop1 == 1'b0 ? Switch161_out1_1 :
              Bitwise_Operator6_out1_1);



  assign S12_1_out1_1 = Switch158_out1_1;



  assign Switch87_out1_1 = (Compare_To_Constant4_out1_1 == 1'b0 ? Unit_Delay38_out1_1 :
              S12_1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay38_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay38_out1_1 <= Switch87_out1_1;
      end
    end



  assign Switch15_out1_5 = (CT1_out1 == 1'b0 ? s1z1_out1_5 :
              Mpyb24_1_out1);



  always @(posedge g_clk)
    begin : s1z1_process
      if (Rst_n == 1'b0) begin
        s1z1_out1_5 <= 24'sb000000000000000000000000;
      end
      else begin
        s1z1_out1_5 <= Switch15_out1_5;
      end
    end



  assign Bit_Slice1_out1 = s1z1_out1_5[23:10];



  assign S14_2_out1 = Bit_Slice1_out1;



  assign RO61_relop1 = S14_2_out1 > 14'sb00011111111111;



  assign Constant10_out1_dtc = 14'sb00011111111111;



  assign Switch41_out1_3 = (RO61_relop1 == 1'b0 ? S14_2_out1 :
              Constant10_out1_dtc);



  assign U_3_out1_1 = 12'sb100000000001;



  assign RO11_1_1 = {{2{U_3_out1_1[11]}}, U_3_out1_1};
  assign RO11_relop1 = Switch41_out1_3 < RO11_1_1;



  assign U_3_out1_dtc_1 = {{2{U_3_out1_1[11]}}, U_3_out1_1};



  assign Switch1_out1_1 = (RO11_relop1 == 1'b0 ? Switch41_out1_3 :
              U_3_out1_dtc_1);



  assign Ro4_1_1 = {{2{Unit_Delay38_out1_1[11]}}, Unit_Delay38_out1_1};
  assign Ro4_relop1 = Ro4_1_1 >= Switch1_out1_1;



  assign Switch7_out1 = (Ro4_relop1 == 1'b0 ? 16'sb1111111111111111 :
              16'sb0000000000000001);



  assign Switch6_out1 = (Pulse_4096Hz == 1'b0 ? 16'sb0000000000000000 :
              Switch7_out1);



  assign Switch2_out1 = (CT7_out1 == 1'b0 ? Add1_out1 :
              16'sb0000000000000000);



  assign Dy1_relop1 = Switch2_out1 >= Time_b16;



  assign Switch1_out1_2 = (Dy1_relop1 == 1'b0 ? Switch2_out1 :
              Time_b16);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch1_out1_2;
      end
    end



  assign Add1_out1 = Switch6_out1 + Unit_Delay4_out1;



  assign CT7_out1 = Add1_out1 <= 16'sb0000000000000000;



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 1'b0;
      end
      else begin
        Unit_Delay3_out1 <= Switch5_out1;
      end
    end



  assign Switch3_out1 = (Dy1_relop1 == 1'b0 ? Unit_Delay3_out1 :
              1'b1);



  assign Switch5_out1 = (CT7_out1 == 1'b0 ? Switch3_out1 :
              1'b0);



  assign InFault1 = Switch5_out1;

  assign Ip_s12 = Unit_Delay38_out1;

  assign In_s12 = Unit_Delay38_out1_1;

endmodule  // NegPro_V2

