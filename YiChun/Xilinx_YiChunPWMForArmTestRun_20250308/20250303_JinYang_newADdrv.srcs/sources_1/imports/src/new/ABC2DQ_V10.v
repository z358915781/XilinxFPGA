// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\VABC2DQ_V10\ABC2DQ_V10.v
// Created: 2025-02-06 12:07:58
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ABC2DQ_V10
// Source Path: VABC2DQ_V10/ABC2DQ_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ABC2DQ_V10
          (
           g_clk,
           Rst_n,
           Uuv_b12,
           Uvw_b12,
           Uwu_b12,
           Ia_b12,
           Ib_b12,
           Ic_b12,
           Ia_CT_b12,
           Ib_CT_b12,
           Ic_CT_b12,
           Mdp_b12,
           Mqp_b12,
           Mdn_b12,
           Mqn_b12,
           Sinwt_b12,
           Coswt_b12,
           nSinwt_b12,
           nCoswt_b12,
           Pulse50x256Hz,
           DY11_En,
           Udp_b12,
           Uqp_b12,
           Udn_b12,
           Uqn_b12,
           Idp_b12,
           Iqp_b12,
           Idn_b12,
           Iqn_b12,
           Ma_b12,
           Mb_b12,
           Mc_b12,
           Idp_C_b12,
           Iqp_C_b12,
           Idn_C_b12,
           Iqn_C_b12
          );



  input   g_clk;
  input   Rst_n;
  input   signed [11:0] Uuv_b12;  // sfix12
  input   signed [11:0] Uvw_b12;  // sfix12
  input   signed [11:0] Uwu_b12;  // sfix12
  input   signed [11:0] Ia_b12;  // sfix12
  input   signed [11:0] Ib_b12;  // sfix12
  input   signed [11:0] Ic_b12;  // sfix12
  input   signed [11:0] Ia_CT_b12;  // sfix12
  input   signed [11:0] Ib_CT_b12;  // sfix12
  input   signed [11:0] Ic_CT_b12;  // sfix12
  input   signed [11:0] Mdp_b12;  // sfix12
  input   signed [11:0] Mqp_b12;  // sfix12
  input   signed [11:0] Mdn_b12;  // sfix12
  input   signed [11:0] Mqn_b12;  // sfix12
  input   signed [11:0] Sinwt_b12;  // sfix12
  input   signed [11:0] Coswt_b12;  // sfix12
  input   signed [11:0] nSinwt_b12;  // sfix12
  input   signed [11:0] nCoswt_b12;  // sfix12
  input   Pulse50x256Hz;
  input   DY11_En;
  output  signed [11:0] Udp_b12;  // sfix12
  output  signed [11:0] Uqp_b12;  // sfix12
  output  signed [11:0] Udn_b12;  // sfix12
  output  signed [11:0] Uqn_b12;  // sfix12
  output  signed [11:0] Idp_b12;  // sfix12
  output  signed [11:0] Iqp_b12;  // sfix12
  output  signed [11:0] Idn_b12;  // sfix12
  output  signed [11:0] Iqn_b12;  // sfix12
  output  signed [11:0] Ma_b12;  // sfix12
  output  signed [11:0] Mb_b12;  // sfix12
  output  signed [11:0] Mc_b12;  // sfix12
  output  signed [11:0] Idp_C_b12;  // sfix12
  output  signed [11:0] Iqp_C_b12;  // sfix12
  output  signed [11:0] Idn_C_b12;  // sfix12
  output  signed [11:0] Iqn_C_b12;  // sfix12

  reg [6:0] Unit_Delay38_out1;  // ufix7
  wire [6:0] Add12_out1;  // ufix7
  wire CT97_out1;
  wire [6:0] Switch126_out1;  // ufix7
  wire CT99_out1;
  wire CT57_out1;
  wire CT5_out1;
  wire CT1_out1;
  wire CT3_out1;
  wire CT2_out1;
  wire CT7_out1;
  wire CT4_out1;
  wire CT14_out1;
  wire CT15_out1;
  wire CT101_out1;
  wire CT103_out1;
  wire CT104_out1;
  wire CT17_out1;
  wire CT18_out1;
  wire CT19_out1;
  wire CT21_out1;
  wire CT22_out1;
  wire CT47_out1;
  wire CT48_out1;
  wire CT49_out1;
  wire CT50_out1;
  wire CT51_out1;
  wire CT52_out1;
  wire CT53_out1;
  wire CT54_out1;
  wire CT61_out1;
  wire CT62_out1;
  wire CT63_out1;
  wire CT64_out1;
  wire CT65_out1;
  wire CT66_out1;
  wire CT67_out1;
  wire CT68_out1;
  wire CT73_out1;
  wire CT74_out1;
  wire CT75_out1;
  wire CT76_out1;
  wire CT79_out1;
  wire CT80_out1;
  wire CT81_out1;
  wire CT82_out1;
  wire CT91_out1;
  wire CT92_out1;
  wire CT93_out1;
  wire CT94_out1;
  wire CT118_out1;
  wire CT119_out1;
  wire CT120_out1;
  wire CT121_out1;
  wire CT122_out1;
  wire CT123_out1;
  wire CT124_out1;
  wire CT125_out1;
  wire CT114_out1;
  wire CT6_out1;
  wire CT8_out1;
  wire CT9_out1;
  wire CT117_out1;
  wire CT111_out1;
  wire CT113_out1;
  wire CT115_out1;
  wire CT90_out1;
  wire CT30_out1;
  wire CT32_out1;
  wire CT34_out1;
  wire CT46_out1;
  wire CT40_out1;
  wire CT42_out1;
  wire CT44_out1;
  wire CT86_out1;
  wire CT88_out1;
  wire CT78_out1;
  wire CT77_out1;
  wire CT23_out1;
  wire CT20_out1;
  wire CT16_out1;
  wire CT13_out1;
  wire CT105_out1;
  wire CT102_out1;
  wire CT98_out1;
  wire signed [11:0] Switch107_out1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1;  // sfix12
  wire signed [11:0] Switch107_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_2;  // sfix12
  wire CT84_out1;
  wire CT83_out1;
  reg [1:0] Unit_Delay10_out1;  // ufix2
  wire [1:0] Add1_out1;  // ufix2
  wire CT25_out1;
  wire CT24_out1;
  reg  Unit_Delay32_out1;
  wire Switch209_out1;
  wire Switch82_out1;
  wire Or4_out1;
  wire Switch210_out1;
  reg  Unit_Delay56_out1;
  wire CT36_out1;
  wire CT38_out1;
  wire CT26_out1;
  wire CT28_out1;
  wire CT27_out1;
  wire CT37_out1;
  wire CT35_out1;
  wire [7:0] Switch50_out1;  // uint8
  wire [7:0] Add16_out1;  // uint8
  reg [7:0] Unit_Delay16_out1;  // uint8
  wire [7:0] Add19_out1;  // uint8
  reg [1:0] Unit_Delay51_out1;  // ufix2
  wire [1:0] Add2_out1;  // ufix2
  wire CT106_out1;
  wire CT131_out1;
  reg  Unit_Delay53_out1;
  wire Switch137_out1;
  wire Switch141_out1;
  wire Or1_out1;
  wire Switch138_out1;
  reg  Unit_Delay54_out1;
  wire CT107_out1;
  wire CT109_out1;
  wire CT108_out1;
  wire [7:0] Switch140_out1;  // uint8
  wire [7:0] Add3_out1;  // uint8
  reg [7:0] Unit_Delay52_out1;  // uint8
  wire [7:0] Add5_out1;  // uint8
  wire signed [11:0] Switch107_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus12_in0;  // sfix13
  wire signed [11:0] Unary_Minus12_out1;  // sfix12
  wire signed [11:0] Switch107_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_4;  // sfix12
  wire signed [12:0] Unary_Minus11_in0;  // sfix13
  wire signed [11:0] Unary_Minus11_out1;  // sfix12
  wire signed [11:0] Switch107_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_5;  // sfix12
  wire signed [12:0] Unary_Minus10_in0;  // sfix13
  wire signed [11:0] Unary_Minus10_out1;  // sfix12
  wire CT112_out1;
  wire CT110_out1;
  wire CT116_out1;
  wire CT87_out1;
  wire CT85_out1;
  wire signed [11:0] Switch107_out1_6;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_6;  // sfix12
  wire signed [11:0] Switch107_out1_7;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_7;  // sfix12
  wire signed [11:0] Switch107_out1_8;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_8;  // sfix12
  wire signed [11:0] Switch107_out1_9;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_9;  // sfix12
  wire CT43_out1;
  wire CT41_out1;
  wire CT39_out1;
  wire CT45_out1;
  wire CT33_out1;
  wire CT31_out1;
  wire CT29_out1;
  wire CT89_out1;
  wire CT12_out1;
  wire CT11_out1;
  wire CT10_out1;
  wire signed [11:0] Switch107_out1_10;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_10;  // sfix12
  wire signed [11:0] Switch107_out1_11;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_11;  // sfix12
  wire signed [11:0] Switch107_out1_12;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_12;  // sfix12
  wire signed [11:0] Switch107_out1_13;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_13;  // sfix12
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] Switch107_out1_14;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_14;  // sfix12
  wire signed [12:0] Unary_Minus16_in0;  // sfix13
  wire signed [11:0] Unary_Minus16_out1;  // sfix12
  wire signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] Switch107_out1_15;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_15;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [11:0] Switch107_out1_16;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_16;  // sfix12
  wire signed [12:0] Unary_Minus15_in0;  // sfix13
  wire signed [11:0] Unary_Minus15_out1;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal2_8;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  wire signed [11:0] signal2_9;  // sfix12
  wire signed [11:0] s_9;  // sfix12
  wire signed [11:0] signal2_10;  // sfix12
  wire signed [11:0] s_10;  // sfix12
  wire signed [11:0] signal2_11;  // sfix12
  wire signed [11:0] s_11;  // sfix12
  wire signed [11:0] signal2_12;  // sfix12
  wire signed [11:0] s_12;  // sfix12
  wire signed [11:0] signal2_13;  // sfix12
  wire signed [11:0] s_13;  // sfix12
  wire signed [12:0] Unary_Minus9_in0;  // sfix13
  wire signed [11:0] Unary_Minus9_out1;  // sfix12
  wire signed [11:0] signal2_14;  // sfix12
  wire signed [11:0] s_14;  // sfix12
  wire signed [11:0] signal2_15;  // sfix12
  wire signed [11:0] s_15;  // sfix12
  wire signed [11:0] signal2_16;  // sfix12
  wire signed [11:0] s_16;  // sfix12
  wire signed [11:0] signal2_17;  // sfix12
  wire signed [11:0] s_17;  // sfix12
  wire signed [12:0] Unary_Minus8_in0;  // sfix13
  wire signed [11:0] Unary_Minus8_out1;  // sfix12
  wire signed [11:0] signal2_18;  // sfix12
  wire signed [11:0] s_18;  // sfix12
  wire signed [11:0] signal2_19;  // sfix12
  wire signed [11:0] s_19;  // sfix12
  wire signed [11:0] signal2_20;  // sfix12
  wire signed [11:0] s_20;  // sfix12
  wire signed [12:0] Unary_Minus5_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1;  // sfix12
  wire signed [11:0] signal2_21;  // sfix12
  wire signed [11:0] s_21;  // sfix12
  wire signed [11:0] signal2_22;  // sfix12
  wire signed [11:0] s_22;  // sfix12
  wire signed [11:0] signal2_23;  // sfix12
  wire signed [11:0] s_23;  // sfix12
  wire signed [11:0] signal2_24;  // sfix12
  wire signed [11:0] s_24;  // sfix12
  wire signed [12:0] Unary_Minus6_in0;  // sfix13
  wire signed [11:0] Unary_Minus6_out1;  // sfix12
  wire signed [11:0] signal2_25;  // sfix12
  wire signed [11:0] s_25;  // sfix12
  wire signed [11:0] signal2_26;  // sfix12
  wire signed [11:0] s_26;  // sfix12
  wire signed [11:0] signal2_27;  // sfix12
  wire signed [11:0] s_27;  // sfix12
  wire signed [11:0] signal2_28;  // sfix12
  wire signed [11:0] s_28;  // sfix12
  wire signed [12:0] Unary_Minus17_in0;  // sfix13
  wire signed [11:0] Unary_Minus17_out1;  // sfix12
  wire signed [11:0] signal2_29;  // sfix12
  wire signed [11:0] s_29;  // sfix12
  wire signed [11:0] signal2_30;  // sfix12
  wire signed [11:0] s_30;  // sfix12
  wire signed [11:0] signal2_31;  // sfix12
  wire signed [11:0] s_31;  // sfix12
  wire signed [11:0] signal2_32;  // sfix12
  wire signed [11:0] s_32;  // sfix12
  wire signed [12:0] Unary_Minus4_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1;  // sfix12
  wire signed [11:0] signal2_33;  // sfix12
  wire signed [11:0] s_33;  // sfix12
  wire signed [11:0] signal2_34;  // sfix12
  wire signed [11:0] s_34;  // sfix12
  wire signed [11:0] signal2_35;  // sfix12
  wire signed [11:0] s_35;  // sfix12
  wire signed [11:0] signal2_36;  // sfix12
  wire signed [11:0] s_36;  // sfix12
  wire signed [11:0] signal2_37;  // sfix12
  wire signed [11:0] s_37;  // sfix12
  wire signed [11:0] signal2_38;  // sfix12
  wire signed [11:0] s_38;  // sfix12
  wire signed [11:0] signal2_39;  // sfix12
  wire signed [11:0] s_39;  // sfix12
  wire signed [11:0] signal2_40;  // sfix12
  wire signed [11:0] s_40;  // sfix12
  wire signed [11:0] signal2_41;  // sfix12
  wire signed [11:0] s_41;  // sfix12
  wire signed [11:0] signal2_42;  // sfix12
  wire signed [11:0] s_42;  // sfix12
  wire signed [11:0] signal2_43;  // sfix12
  wire signed [11:0] s_43;  // sfix12
  wire signed [11:0] signal2_44;  // sfix12
  wire signed [11:0] s_44;  // sfix12
  wire signed [11:0] signal2_45;  // sfix12
  wire signed [11:0] s_45;  // sfix12
  wire signed [11:0] Switch106_out1;  // sfix12
  wire signed [11:0] signal2_46;  // sfix12
  wire signed [11:0] s_46;  // sfix12
  wire signed [11:0] Switch105_out1;  // sfix12
  wire signed [11:0] signal2_47;  // sfix12
  wire signed [11:0] s_47;  // sfix12
  wire signed [11:0] Switch104_out1;  // sfix12
  wire signed [11:0] signal2_48;  // sfix12
  wire signed [11:0] s_48;  // sfix12
  wire signed [11:0] Switch103_out1;  // sfix12
  wire signed [11:0] signal2_49;  // sfix12
  wire signed [11:0] s_49;  // sfix12
  wire signed [11:0] Switch102_out1;  // sfix12
  wire signed [11:0] signal2_50;  // sfix12
  wire signed [11:0] s_50;  // sfix12
  wire signed [11:0] Switch101_out1;  // sfix12
  wire signal3;
  wire s_51;
  wire signal3_1;
  wire s_52;
  wire signal3_2;
  wire s_53;
  wire signal3_3;
  wire s_54;
  wire signal3_4;
  wire s_55;
  wire signal3_5;
  wire s_56;
  wire signal3_6;
  wire s_57;
  wire signal3_7;
  wire s_58;
  wire signal3_8;
  wire s_59;
  wire signal3_9;
  wire s_60;
  wire signal3_10;
  wire s_61;
  wire signal3_11;
  wire s_62;
  wire signal3_12;
  wire s_63;
  wire signal3_13;
  wire s_64;
  wire signal3_14;
  wire s_65;
  wire signal3_15;
  wire s_66;
  wire signal3_16;
  wire s_67;
  wire signal3_17;
  wire s_68;
  wire signal3_18;
  wire s_69;
  wire signal3_19;
  wire s_70;
  wire signal3_20;
  wire s_71;
  wire signal3_21;
  wire s_72;
  wire signal3_22;
  wire s_73;
  wire signal3_23;
  wire s_74;
  wire signal3_24;
  wire s_75;
  wire signal3_25;
  wire s_76;
  wire signal3_26;
  wire s_77;
  wire signal3_27;
  wire s_78;
  wire signal3_28;
  wire s_79;
  wire signal3_29;
  wire s_80;
  wire signal3_30;
  wire s_81;
  wire signal3_31;
  wire s_82;
  wire signal3_32;
  wire s_83;
  wire signal3_33;
  wire s_84;
  wire signal3_34;
  wire s_85;
  wire signal3_35;
  wire s_86;
  wire signal3_36;
  wire s_87;
  wire signal3_37;
  wire s_88;
  wire signal3_38;
  wire s_89;
  wire signal3_39;
  wire s_90;
  wire signal3_40;
  wire s_91;
  wire signal3_41;
  wire s_92;
  wire signal3_42;
  wire s_93;
  wire signal3_43;
  wire s_94;
  wire signal3_44;
  wire s_95;
  wire signal3_45;
  wire s_96;
  wire signal3_46;
  wire s_97;
  wire signal3_47;
  wire s_98;
  wire signal3_48;
  wire s_99;
  wire signal3_49;
  wire s_100;
  wire signal3_50;
  wire s_101;
  wire signal3_51;
  wire signal3_52;
  wire signal3_53;
  wire signed [11:0] signal2_51;  // sfix12
  wire signed [11:0] signal2_52;  // sfix12
  wire signed [11:0] signal2_53;  // sfix12
  wire signed [24:0] Constant9_out1_dtc;  // sfix25
  wire signed [24:0] Constant2_out1_dtc;  // sfix25
  wire signed [24:0] Constant1_out1_dtc;  // sfix25
  wire signed [24:0] Add_out1;  // sfix25
  reg signed [24:0] Delay16_out1;  // sfix25
  wire signed [24:0] Switch13_out1;  // sfix25
  reg signed [11:0] Unit_Delay1_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion1_out1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  reg signed [11:0] Unit_Delay2_out1;  // sfix12
  wire signed [11:0] Switch11_out1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1;  // sfix12
  wire signed [11:0] Switch12_out1;  // sfix12
  reg signed [11:0] Unit_Delay69_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion3_out1;  // sfix12
  wire signed [11:0] Switch150_out1;  // sfix12
  reg signed [11:0] Unit_Delay11_out1;  // sfix12
  wire signed [11:0] Switch29_out1;  // sfix12
  reg signed [11:0] Unit_Delay12_out1;  // sfix12
  wire signed [11:0] Switch31_out1;  // sfix12
  reg signed [11:0] Unit_Delay13_out1;  // sfix12
  wire signed [11:0] Switch33_out1;  // sfix12
  reg signed [11:0] Unit_Delay19_out1;  // sfix12
  wire signed [11:0] Switch35_out1;  // sfix12
  reg signed [11:0] Unit_Delay14_out1;  // sfix12
  wire signed [11:0] Switch37_out1;  // sfix12
  reg signed [11:0] Unit_Delay15_out1;  // sfix12
  wire signed [11:0] Switch39_out1;  // sfix12
  reg signed [11:0] Unit_Delay18_out1;  // sfix12
  wire signed [11:0] Switch43_out1;  // sfix12
  reg signed [11:0] Unit_Delay34_out1;  // sfix12
  wire signed [11:0] Switch89_out1;  // sfix12
  wire signed [24:0] Add4_out1;  // sfix25
  wire RO2_relop1;
  wire signed [24:0] Switch99_out1;  // sfix25
  wire RO1_relop1;
  wire signed [24:0] Switch100_out1;  // sfix25
  reg signed [11:0] Unit_Delay35_out1;  // sfix12
  wire signed [11:0] Switch91_out1;  // sfix12
  reg signed [11:0] Unit_Delay46_out1;  // sfix12
  wire signed [11:0] Switch116_out1;  // sfix12
  reg signed [11:0] Unit_Delay43_out1;  // sfix12
  wire signed [11:0] Switch118_out1;  // sfix12
  reg signed [11:0] Unit_Delay44_out1;  // sfix12
  wire signed [11:0] Switch120_out1;  // sfix12
  reg signed [11:0] Unit_Delay42_out1;  // sfix12
  wire signed [12:0] Unary_Minus13_in0;  // sfix13
  wire signed [11:0] Unary_Minus13_out1;  // sfix12
  reg signed [11:0] Unit_Delay40_out1;  // sfix12
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s_102;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_17;  // sfix12
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] UVctDelay_Ram1_out1;  // sfix12
  wire signed [11:0] Switch139_out1;  // sfix12
  wire signed [11:0] Switch114_out1;  // sfix12
  wire signed [11:0] signal2_54;  // sfix12
  wire signed [11:0] s_103;  // sfix12
  reg signed [11:0] Unit_Delay41_out1;  // sfix12
  wire signed [11:0] signal2_55;  // sfix12
  wire signed [11:0] signal2_56;  // sfix12
  wire signed [11:0] signal2_57;  // sfix12
  wire signed [11:0] Switch112_out1;  // sfix12
  wire signed [12:0] Unary_Minus14_in0;  // sfix13
  wire signed [11:0] Unary_Minus14_out1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1;  // sfix12
  wire signed [12:0] Unary_Minus_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1;  // sfix12
  reg signed [11:0] Unit_Delay17_out1;  // sfix12
  wire signed [12:0] Unary_Minus1_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1;  // sfix12
  reg signed [11:0] Unit_Delay9_out1;  // sfix12
  wire signed [12:0] Unary_Minus2_in0;  // sfix13
  wire signed [11:0] Unary_Minus2_out1;  // sfix12
  reg signed [11:0] Unit_Delay7_out1;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] s_104;  // sfix12
  reg signed [11:0] Unit_Delay6_out1;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] s_105;  // sfix12
  reg signed [11:0] Unit_Delay5_out1;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] s_106;  // sfix12
  reg signed [11:0] Unit_Delay4_out1;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  wire signed [11:0] signal1_8;  // sfix12
  wire signed [11:0] signal1_9;  // sfix12
  wire signed [11:0] UVctDelay_Ram_out1;  // sfix12
  wire signed [11:0] Switch215_out1;  // sfix12
  wire signed [11:0] Switch52_out1;  // sfix12
  wire signed [11:0] Switch54_out1;  // sfix12
  wire signed [11:0] Switch27_out1;  // sfix12
  wire signed [11:0] signal2_58;  // sfix12
  wire signed [11:0] s_107;  // sfix12
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] signal2_59;  // sfix12
  wire signed [11:0] s_108;  // sfix12
  wire signed [11:0] signal2_60;  // sfix12
  wire signed [11:0] s_109;  // sfix12
  wire signed [11:0] signal2_61;  // sfix12
  wire signed [11:0] signal2_62;  // sfix12
  wire signed [11:0] signal2_63;  // sfix12
  wire signed [11:0] Switch25_out1;  // sfix12
  wire signed [12:0] Unary_Minus3_in0;  // sfix13
  wire signed [11:0] Unary_Minus3_out1;  // sfix12
  reg signed [11:0] Unit_Delay31_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion2_out1;  // sfix12
  wire signed [11:0] Switch87_out1;  // sfix12
  reg signed [11:0] Unit_Delay33_out1;  // sfix12
  wire signed [11:0] Switch88_out1;  // sfix12
  wire signed [11:0] signal2_64;  // sfix12
  wire signed [11:0] s_110;  // sfix12
  wire signed [11:0] signal2_65;  // sfix12
  wire signed [11:0] s_111;  // sfix12
  wire signed [11:0] signal2_66;  // sfix12
  wire signed [11:0] s_112;  // sfix12
  wire signed [11:0] signal2_67;  // sfix12
  wire signed [11:0] s_113;  // sfix12
  wire signed [11:0] signal2_68;  // sfix12
  wire signed [11:0] s_114;  // sfix12
  wire signed [11:0] signal2_69;  // sfix12
  wire signed [11:0] s_115;  // sfix12
  wire signed [11:0] signal2_70;  // sfix12
  wire signed [11:0] s_116;  // sfix12
  wire signed [11:0] signal2_71;  // sfix12
  wire signed [11:0] s_117;  // sfix12
  wire signed [11:0] signal2_72;  // sfix12
  wire signed [11:0] s_118;  // sfix12
  wire signed [11:0] signal2_73;  // sfix12
  wire signed [11:0] s_119;  // sfix12
  wire signed [11:0] signal2_74;  // sfix12
  wire signed [11:0] s_120;  // sfix12
  wire signed [11:0] signal2_75;  // sfix12
  wire signed [11:0] s_121;  // sfix12
  wire signed [11:0] signal2_76;  // sfix12
  wire signed [11:0] s_122;  // sfix12
  wire signed [11:0] signal2_77;  // sfix12
  wire signed [11:0] s_123;  // sfix12
  wire signed [11:0] signal2_78;  // sfix12
  wire signed [11:0] s_124;  // sfix12
  wire signed [11:0] signal2_79;  // sfix12
  wire signed [11:0] s_125;  // sfix12
  wire signed [11:0] signal2_80;  // sfix12
  wire signed [11:0] signal2_81;  // sfix12
  wire signed [11:0] Switch107_out1_17;  // sfix12
  wire signed [11:0] Switch110_out1;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12
  wire signed [11:0] Switch17_out1;  // sfix12
  wire signed [11:0] Switch20_out1;  // sfix12
  wire signed [11:0] Switch23_out1;  // sfix12
  reg signed [11:0] Unit_Delay29_out1;  // sfix12
  wire signed [11:0] Switch80_out1;  // sfix12
  reg signed [11:0] Unit_Delay30_out1;  // sfix12
  wire signed [11:0] Switch81_out1;  // sfix12
  wire signed [11:0] signal1_10;  // sfix12
  wire signed [11:0] s_126;  // sfix12
  wire signed [11:0] signal1_11;  // sfix12
  wire signed [11:0] s_127;  // sfix12
  wire signed [11:0] signal1_12;  // sfix12
  wire signed [11:0] s_128;  // sfix12
  wire signed [11:0] signal1_13;  // sfix12
  wire signed [11:0] s_129;  // sfix12
  wire signed [11:0] signal1_14;  // sfix12
  wire signed [11:0] s_130;  // sfix12
  wire signed [11:0] signal1_15;  // sfix12
  wire signed [11:0] s_131;  // sfix12
  wire signed [11:0] signal1_16;  // sfix12
  wire signed [11:0] s_132;  // sfix12
  wire signed [11:0] signal1_17;  // sfix12
  wire signed [11:0] s_133;  // sfix12
  wire signed [11:0] signal1_18;  // sfix12
  wire signed [11:0] s_134;  // sfix12
  wire signed [11:0] signal1_19;  // sfix12
  wire signed [11:0] s_135;  // sfix12
  wire signed [11:0] signal1_20;  // sfix12
  wire signed [11:0] s_136;  // sfix12
  wire signed [11:0] signal1_21;  // sfix12
  wire signed [11:0] s_137;  // sfix12
  wire signed [11:0] signal1_22;  // sfix12
  wire signed [11:0] s_138;  // sfix12
  wire signed [11:0] signal1_23;  // sfix12
  wire signed [11:0] s_139;  // sfix12
  wire signed [11:0] signal1_24;  // sfix12
  wire signed [11:0] s_140;  // sfix12
  wire signed [11:0] signal1_25;  // sfix12
  wire signed [11:0] s_141;  // sfix12
  wire signed [11:0] signal1_26;  // sfix12
  wire signed [11:0] signal1_27;  // sfix12
  wire signed [12:0] Add4_add_temp;  // sfix13
  wire signed [12:0] Add4_1;  // sfix13
  wire signed [12:0] Add4_2;  // sfix13
  wire RO8_relop1;
  wire signed [24:0] Switch76_out1;  // sfix25
  wire RO7_relop1;
  wire signed [24:0] Switch79_out1;  // sfix25
  wire [23:0] Bit_Slice2_out1;  // ufix24
  reg signed [11:0] Unit_Delay45_out1;  // sfix12
  wire signed [11:0] Switch122_out1;  // sfix12
  wire signed [11:0] signal1_28;  // sfix12
  wire signed [11:0] s_142;  // sfix12
  wire signed [11:0] signal1_29;  // sfix12
  wire signed [11:0] s_143;  // sfix12
  wire signed [11:0] signal1_30;  // sfix12
  wire signed [11:0] s_144;  // sfix12
  wire signed [11:0] signal1_31;  // sfix12
  wire signed [11:0] s_145;  // sfix12
  wire signed [11:0] signal1_32;  // sfix12
  wire signed [11:0] s_146;  // sfix12
  wire signed [11:0] signal1_33;  // sfix12
  wire signed [11:0] s_147;  // sfix12
  wire signed [11:0] signal1_34;  // sfix12
  wire signed [11:0] s_148;  // sfix12
  wire signed [11:0] signal1_35;  // sfix12
  wire signed [11:0] s_149;  // sfix12
  wire signed [11:0] signal1_36;  // sfix12
  wire signed [11:0] s_150;  // sfix12
  wire signed [11:0] signal1_37;  // sfix12
  wire signed [11:0] s_151;  // sfix12
  wire signed [11:0] signal1_38;  // sfix12
  wire signed [11:0] s_152;  // sfix12
  wire signed [11:0] signal1_39;  // sfix12
  wire signed [11:0] s_153;  // sfix12
  wire signed [11:0] signal1_40;  // sfix12
  wire signed [11:0] s_154;  // sfix12
  wire signed [11:0] signal1_41;  // sfix12
  wire signed [11:0] s_155;  // sfix12
  wire signed [11:0] signal1_42;  // sfix12
  wire signed [11:0] s_156;  // sfix12
  wire signed [11:0] signal1_43;  // sfix12
  wire signed [11:0] s_157;  // sfix12
  wire signed [11:0] signal1_44;  // sfix12
  wire signed [11:0] s_158;  // sfix12
  wire signed [11:0] signal1_45;  // sfix12
  wire signed [11:0] s_159;  // sfix12
  wire signed [11:0] signal1_46;  // sfix12
  wire signed [11:0] s_160;  // sfix12
  wire signed [11:0] signal1_47;  // sfix12
  wire signed [11:0] s_161;  // sfix12
  wire signed [11:0] signal1_48;  // sfix12
  wire signed [11:0] s_162;  // sfix12
  wire signed [11:0] signal1_49;  // sfix12
  wire signed [11:0] s_163;  // sfix12
  wire signed [11:0] signal1_50;  // sfix12
  wire signed [11:0] s_164;  // sfix12
  wire signed [11:0] signal1_51;  // sfix12
  wire signed [11:0] s_165;  // sfix12
  wire signed [11:0] signal1_52;  // sfix12
  wire signed [11:0] s_166;  // sfix12
  wire signed [11:0] signal1_53;  // sfix12
  wire signed [11:0] s_167;  // sfix12
  wire signed [11:0] signal1_54;  // sfix12
  wire signed [11:0] s_168;  // sfix12
  wire signed [11:0] signal1_55;  // sfix12
  wire signed [11:0] s_169;  // sfix12
  wire signed [11:0] signal1_56;  // sfix12
  wire signed [11:0] s_170;  // sfix12
  wire signed [11:0] signal1_57;  // sfix12
  wire signed [11:0] s_171;  // sfix12
  wire signed [11:0] signal1_58;  // sfix12
  wire signed [11:0] s_172;  // sfix12
  wire signed [11:0] signal1_59;  // sfix12
  wire signed [11:0] s_173;  // sfix12
  wire signed [11:0] signal1_60;  // sfix12
  wire signed [11:0] s_174;  // sfix12
  wire signed [11:0] signal1_61;  // sfix12
  wire signed [11:0] s_175;  // sfix12
  wire signed [11:0] signal1_62;  // sfix12
  wire signed [11:0] s_176;  // sfix12
  wire signed [11:0] signal1_63;  // sfix12
  wire signed [11:0] s_177;  // sfix12
  wire signed [11:0] signal1_64;  // sfix12
  wire signed [11:0] s_178;  // sfix12
  wire signed [11:0] signal1_65;  // sfix12
  wire signed [11:0] s_179;  // sfix12
  wire signed [11:0] signal1_66;  // sfix12
  wire signed [11:0] s_180;  // sfix12
  wire signed [11:0] signal1_67;  // sfix12
  wire signed [11:0] s_181;  // sfix12
  wire signed [11:0] signal1_68;  // sfix12
  wire signed [11:0] s_182;  // sfix12
  wire signed [11:0] signal1_69;  // sfix12
  wire signed [11:0] s_183;  // sfix12
  wire signed [11:0] signal1_70;  // sfix12
  wire signed [11:0] s_184;  // sfix12
  wire signed [11:0] signal1_71;  // sfix12
  wire signed [11:0] s_185;  // sfix12
  wire signed [11:0] signal1_72;  // sfix12
  wire signed [11:0] s_186;  // sfix12
  wire signed [11:0] signal1_73;  // sfix12
  wire signed [11:0] s_187;  // sfix12
  wire signed [11:0] signal1_74;  // sfix12
  wire signed [11:0] s_188;  // sfix12
  wire signed [11:0] signal1_75;  // sfix12
  wire signed [11:0] s_189;  // sfix12
  wire signed [11:0] signal1_76;  // sfix12
  wire signed [11:0] s_190;  // sfix12
  wire signed [11:0] signal1_77;  // sfix12
  wire signed [11:0] s_191;  // sfix12
  wire signed [11:0] signal1_78;  // sfix12
  wire signed [11:0] s_192;  // sfix12
  wire signed [11:0] signal1_79;  // sfix12
  wire signed [11:0] signal1_80;  // sfix12
  wire signed [11:0] signal1_81;  // sfix12
  wire signed [23:0] Product_out1;  // sfix24
  wire signed [25:0] Add_add_temp;  // sfix26
  wire signed [25:0] Add_1;  // sfix26
  wire signed [25:0] Add_2;  // sfix26
  wire CT55_out1;
  wire signed [24:0] Switch41_out1;  // sfix25
  wire CT56_out1;
  wire signed [24:0] Switch42_out1;  // sfix25
  wire [13:0] Bit_Slice1_out1;  // ufix14
  reg signed [11:0] Unit_Delay21_out1;  // sfix12
  wire signed [11:0] Switch58_out1;  // sfix12
  wire signed [11:0] Switch107_out1_18;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_18;  // sfix12
  wire CT58_out1;
  reg signed [11:0] Unit_Delay22_out1;  // sfix12
  wire signed [11:0] Switch59_out1;  // sfix12
  wire signed [11:0] Switch107_out1_19;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_19;  // sfix12
  wire CT59_out1;
  reg signed [11:0] Unit_Delay23_out1;  // sfix12
  wire signed [11:0] Switch60_out1;  // sfix12
  wire signed [11:0] Switch107_out1_20;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_20;  // sfix12
  wire CT60_out1;
  reg signed [11:0] Unit_Delay24_out1;  // sfix12
  wire signed [11:0] Switch61_out1;  // sfix12
  wire signed [11:0] Switch107_out1_21;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_21;  // sfix12
  wire CT69_out1;
  reg signed [11:0] Unit_Delay25_out1;  // sfix12
  wire signed [11:0] Switch70_out1;  // sfix12
  wire signed [11:0] Switch107_out1_22;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_22;  // sfix12
  wire CT70_out1;
  reg signed [11:0] Unit_Delay26_out1;  // sfix12
  wire signed [11:0] Switch71_out1;  // sfix12
  wire signed [11:0] Switch107_out1_23;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_23;  // sfix12
  wire CT71_out1;
  reg signed [11:0] Unit_Delay27_out1;  // sfix12
  wire signed [11:0] Switch72_out1;  // sfix12
  wire signed [11:0] Switch107_out1_24;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_24;  // sfix12
  wire CT72_out1;
  reg signed [11:0] Unit_Delay28_out1;  // sfix12
  wire signed [11:0] Switch73_out1;  // sfix12
  wire signed [11:0] Switch107_out1_25;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_25;  // sfix12
  wire CT100_out1;
  wire signed [11:0] Switch107_out1_26;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_26;  // sfix12
  wire CT95_out1;
  reg signed [11:0] Unit_Delay36_out1;  // sfix12
  wire signed [11:0] Switch97_out1;  // sfix12
  wire signed [11:0] Switch107_out1_27;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_27;  // sfix12
  wire CT96_out1;
  reg signed [11:0] Unit_Delay37_out1;  // sfix12
  wire signed [11:0] Switch98_out1;  // sfix12
  wire signed [11:0] Switch107_out1_28;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_28;  // sfix12
  wire CT130_out1;
  wire CT126_out1;
  reg signed [11:0] Unit_Delay47_out1;  // sfix12
  wire signed [11:0] Switch133_out1;  // sfix12
  wire signed [11:0] Switch107_out1_29;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_29;  // sfix12
  wire CT127_out1;
  reg signed [11:0] Unit_Delay48_out1;  // sfix12
  wire signed [11:0] Switch134_out1;  // sfix12
  wire signed [11:0] Switch107_out1_30;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_30;  // sfix12
  wire CT128_out1;
  reg signed [11:0] Unit_Delay49_out1;  // sfix12
  wire signed [11:0] Switch135_out1;  // sfix12
  wire signed [11:0] Switch107_out1_31;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_31;  // sfix12
  wire CT129_out1;
  reg signed [11:0] Unit_Delay50_out1;  // sfix12
  wire signed [11:0] Switch136_out1;  // sfix12
  wire signed [11:0] Switch107_out1_32;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_32;  // sfix12


  assign Add12_out1 = 7'b0000001 + Unit_Delay38_out1;



  assign CT97_out1 = Add12_out1 >= 7'b0110101;



  assign Switch126_out1 = (CT97_out1 == 1'b0 ? Add12_out1 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay38_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay38_out1 <= Switch126_out1;
      end
    end



  assign CT99_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT57_out1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT5_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT1_out1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT3_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT2_out1 = Unit_Delay38_out1 == 7'b0000011;



  assign CT7_out1 = Unit_Delay38_out1 == 7'b0000100;



  assign CT4_out1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT14_out1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT15_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT101_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT103_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT104_out1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT17_out1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT18_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT19_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT21_out1 = Unit_Delay38_out1 == 7'b0001110;



  assign CT22_out1 = Unit_Delay38_out1 == 7'b0001111;



  assign CT47_out1 = Unit_Delay38_out1 == 7'b0010000;



  assign CT48_out1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT49_out1 = Unit_Delay38_out1 == 7'b0010010;



  assign CT50_out1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT51_out1 = Unit_Delay38_out1 == 7'b0010100;



  assign CT52_out1 = Unit_Delay38_out1 == 7'b0010101;



  assign CT53_out1 = Unit_Delay38_out1 == 7'b0010110;



  assign CT54_out1 = Unit_Delay38_out1 == 7'b0010111;



  assign CT61_out1 = Unit_Delay38_out1 == 7'b0011000;



  assign CT62_out1 = Unit_Delay38_out1 == 7'b0011001;



  assign CT63_out1 = Unit_Delay38_out1 == 7'b0011010;



  assign CT64_out1 = Unit_Delay38_out1 == 7'b0011011;



  assign CT65_out1 = Unit_Delay38_out1 == 7'b0011100;



  assign CT66_out1 = Unit_Delay38_out1 == 7'b0011101;



  assign CT67_out1 = Unit_Delay38_out1 == 7'b0011110;



  assign CT68_out1 = Unit_Delay38_out1 == 7'b0011111;



  assign CT73_out1 = Unit_Delay38_out1 == 7'b0100000;



  assign CT74_out1 = Unit_Delay38_out1 == 7'b0100001;



  assign CT75_out1 = Unit_Delay38_out1 == 7'b0100010;



  assign CT76_out1 = Unit_Delay38_out1 == 7'b0100011;



  assign CT79_out1 = Unit_Delay38_out1 == 7'b0100100;



  assign CT80_out1 = Unit_Delay38_out1 == 7'b0100101;



  assign CT81_out1 = Unit_Delay38_out1 == 7'b0100110;



  assign CT82_out1 = Unit_Delay38_out1 == 7'b0100111;



  assign CT91_out1 = Unit_Delay38_out1 == 7'b0101001;



  assign CT92_out1 = Unit_Delay38_out1 == 7'b0101010;



  assign CT93_out1 = Unit_Delay38_out1 == 7'b0101011;



  assign CT94_out1 = Unit_Delay38_out1 == 7'b0101100;



  assign CT118_out1 = Unit_Delay38_out1 == 7'b0101101;



  assign CT119_out1 = Unit_Delay38_out1 == 7'b0101110;



  assign CT120_out1 = Unit_Delay38_out1 == 7'b0101111;



  assign CT121_out1 = Unit_Delay38_out1 == 7'b0110000;



  assign CT122_out1 = Unit_Delay38_out1 == 7'b0110001;



  assign CT123_out1 = Unit_Delay38_out1 == 7'b0110010;



  assign CT124_out1 = Unit_Delay38_out1 == 7'b0110011;



  assign CT125_out1 = Unit_Delay38_out1 == 7'b0110100;



  assign CT114_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT6_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT8_out1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT9_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT117_out1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT111_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT113_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT115_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT90_out1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT30_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT32_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT34_out1 = Unit_Delay38_out1 == 7'b0001110;



  assign CT46_out1 = Unit_Delay38_out1 == 7'b0010000;



  assign CT40_out1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT42_out1 = Unit_Delay38_out1 == 7'b0010010;



  assign CT44_out1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT86_out1 = Unit_Delay38_out1 == 7'b0100110;



  assign CT88_out1 = Unit_Delay38_out1 == 7'b0101000;



  assign CT78_out1 = Unit_Delay38_out1 == 7'b0100011;



  assign CT77_out1 = Unit_Delay38_out1 == 7'b0100001;



  assign CT23_out1 = Unit_Delay38_out1 == 7'b0001111;



  assign CT20_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT16_out1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT13_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT105_out1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT102_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT98_out1 = Unit_Delay38_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay3928_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1 <= Switch107_out1;
      end
    end



  assign Switch107_out1 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1 :
              Ic_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3927_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_1 <= Switch107_out1_1;
      end
    end



  assign Switch107_out1_1 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_1 :
              Ib_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3926_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_2 <= Switch107_out1_2;
      end
    end



  assign Switch107_out1_2 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_2 :
              Ia_b12);



  assign CT84_out1 = Unit_Delay38_out1 == 7'b0100111;



  assign CT83_out1 = Unit_Delay38_out1 == 7'b0100101;



  assign Add1_out1 = 2'b01 + Unit_Delay10_out1;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 2'b00;
      end
      else begin
        Unit_Delay10_out1 <= Add1_out1;
      end
    end



  assign CT25_out1 = Unit_Delay10_out1 == 2'b10;



  assign CT24_out1 = Unit_Delay10_out1 == 2'b00;



  assign Switch209_out1 = (Pulse50x256Hz == 1'b0 ? Unit_Delay32_out1 :
              1'b1);



  assign Switch82_out1 = (CT24_out1 == 1'b0 ? Switch209_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 1'b0;
      end
      else begin
        Unit_Delay32_out1 <= Switch82_out1;
      end
    end



  assign Or4_out1 = Pulse50x256Hz | Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay56_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1 <= Switch210_out1;
      end
    end



  assign Switch210_out1 = (CT24_out1 == 1'b0 ? Unit_Delay56_out1 :
              Or4_out1);



  assign CT36_out1 = Unit_Delay10_out1 == 2'b00;



  assign CT38_out1 = Unit_Delay10_out1 == 2'b01;



  assign CT26_out1 = Unit_Delay10_out1 == 2'b10;



  assign CT28_out1 = Unit_Delay10_out1 == 2'b11;



  assign CT27_out1 = Unit_Delay10_out1 == 2'b11;



  assign CT37_out1 = Unit_Delay10_out1 == 2'b01;



  assign CT35_out1 = Unit_Delay10_out1 == 2'b00;



  assign Switch50_out1 = (Switch210_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay16_out1 <= Add16_out1;
      end
    end



  assign Add16_out1 = Switch50_out1 + Unit_Delay16_out1;



  assign Add19_out1 = Add16_out1 + 8'b00000001;



  assign Add2_out1 = 2'b01 + Unit_Delay51_out1;



  always @(posedge g_clk)
    begin : Unit_Delay51_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1 <= 2'b00;
      end
      else begin
        Unit_Delay51_out1 <= Add2_out1;
      end
    end



  assign CT106_out1 = Unit_Delay51_out1 == 2'b00;



  assign CT131_out1 = Unit_Delay51_out1 == 2'b00;



  assign Switch137_out1 = (Pulse50x256Hz == 1'b0 ? Unit_Delay53_out1 :
              1'b1);



  assign Switch141_out1 = (CT131_out1 == 1'b0 ? Switch137_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay53_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1 <= Switch141_out1;
      end
    end



  assign Or1_out1 = Pulse50x256Hz | Unit_Delay53_out1;



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch138_out1;
      end
    end



  assign Switch138_out1 = (CT131_out1 == 1'b0 ? Unit_Delay54_out1 :
              Or1_out1);



  assign CT107_out1 = Unit_Delay51_out1 == 2'b00;



  assign CT109_out1 = Unit_Delay51_out1 == 2'b01;



  assign CT108_out1 = Unit_Delay51_out1 == 2'b01;



  assign Switch140_out1 = (Switch138_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  always @(posedge g_clk)
    begin : Unit_Delay52_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay52_out1 <= Add3_out1;
      end
    end



  assign Add3_out1 = Switch140_out1 + Unit_Delay52_out1;



  assign Add5_out1 = Add3_out1 + 8'b00000001;



  always @(posedge g_clk)
    begin : Unit_Delay3931_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_3 <= Switch107_out1_3;
      end
    end



  assign Switch107_out1_3 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_3 :
              Ic_CT_b12);



  assign Unary_Minus12_in0 =  - ({Switch107_out1_3[11], Switch107_out1_3});
  assign Unary_Minus12_out1 = Unary_Minus12_in0[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3930_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_4 <= Switch107_out1_4;
      end
    end



  assign Switch107_out1_4 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_4 :
              Ib_CT_b12);



  assign Unary_Minus11_in0 =  - ({Switch107_out1_4[11], Switch107_out1_4});
  assign Unary_Minus11_out1 = Unary_Minus11_in0[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3929_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_5 <= Switch107_out1_5;
      end
    end



  assign Switch107_out1_5 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_5 :
              Ia_CT_b12);



  assign Unary_Minus10_in0 =  - ({Switch107_out1_5[11], Switch107_out1_5});
  assign Unary_Minus10_out1 = Unary_Minus10_in0[11:0];



  assign CT112_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT110_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT116_out1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT87_out1 = Unit_Delay38_out1 == 7'b0101000;



  assign CT85_out1 = Unit_Delay38_out1 == 7'b0100110;



  always @(posedge g_clk)
    begin : Unit_Delay394_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_6 <= Switch107_out1_6;
      end
    end



  assign Switch107_out1_6 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_6 :
              Mqn_b12);



  always @(posedge g_clk)
    begin : Unit_Delay393_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_7 <= Switch107_out1_7;
      end
    end



  assign Switch107_out1_7 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_7 :
              Mdn_b12);



  always @(posedge g_clk)
    begin : Unit_Delay392_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_8 <= Switch107_out1_8;
      end
    end



  assign Switch107_out1_8 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_8 :
              Mqp_b12);



  always @(posedge g_clk)
    begin : Unit_Delay391_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_9 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_9 <= Switch107_out1_9;
      end
    end



  assign Switch107_out1_9 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_9 :
              Mdp_b12);



  assign CT43_out1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT41_out1 = Unit_Delay38_out1 == 7'b0010010;



  assign CT39_out1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT45_out1 = Unit_Delay38_out1 == 7'b0010000;



  assign CT33_out1 = Unit_Delay38_out1 == 7'b0001110;



  assign CT31_out1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT29_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT89_out1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT12_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT11_out1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT10_out1 = Unit_Delay38_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay3922_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_10 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_10 <= Switch107_out1_10;
      end
    end



  assign Switch107_out1_10 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_10 :
              Uwu_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3911_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_11 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_11 <= Switch107_out1_11;
      end
    end



  assign Switch107_out1_11 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_11 :
              Uvw_b12);



  always @(posedge g_clk)
    begin : Unit_Delay39_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_12 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_12 <= Switch107_out1_12;
      end
    end



  assign Switch107_out1_12 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_12 :
              Uuv_b12);



  always @(posedge g_clk)
    begin : Unit_Delay398_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_13 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_13 <= Switch107_out1_13;
      end
    end



  assign Switch107_out1_13 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_13 :
              nCoswt_b12);



  assign signal2 = (CT125_out1 == 1'b0 ? Switch107_out1_13 :
              Switch107_out1_13);



  assign s = signal2;

  always @(posedge g_clk)
    begin : Unit_Delay397_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_14 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_14 <= Switch107_out1_14;
      end
    end



  assign Switch107_out1_14 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_14 :
              nSinwt_b12);



  assign Unary_Minus16_in0 =  - ({Switch107_out1_14[11], Switch107_out1_14});
  assign Unary_Minus16_out1 = Unary_Minus16_in0[11:0];



  assign signal2_1 = (CT124_out1 == 1'b0 ? s :
              Unary_Minus16_out1);



  assign s_1 = signal2_1;

  assign signal2_2 = (CT123_out1 == 1'b0 ? s_1 :
              Switch107_out1_14);



  assign s_2 = signal2_2;

  assign signal2_3 = (CT122_out1 == 1'b0 ? s_2 :
              Switch107_out1_13);



  assign s_3 = signal2_3;

  always @(posedge g_clk)
    begin : Unit_Delay396_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_15 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_15 <= Switch107_out1_15;
      end
    end



  assign Switch107_out1_15 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_15 :
              Coswt_b12);



  assign signal2_4 = (CT121_out1 == 1'b0 ? s_3 :
              Switch107_out1_15);



  assign s_4 = signal2_4;

  always @(posedge g_clk)
    begin : Unit_Delay395_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_16 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_16 <= Switch107_out1_16;
      end
    end



  assign Switch107_out1_16 = (CT98_out1 == 1'b0 ? Unit_Delay39_out1_16 :
              Sinwt_b12);



  assign Unary_Minus15_in0 =  - ({Switch107_out1_16[11], Switch107_out1_16});
  assign Unary_Minus15_out1 = Unary_Minus15_in0[11:0];



  assign signal2_5 = (CT120_out1 == 1'b0 ? s_4 :
              Unary_Minus15_out1);



  assign s_5 = signal2_5;

  assign signal2_6 = (CT119_out1 == 1'b0 ? s_5 :
              Switch107_out1_16);



  assign s_6 = signal2_6;

  assign signal2_7 = (CT118_out1 == 1'b0 ? s_6 :
              Switch107_out1_15);



  assign s_7 = signal2_7;

  assign signal2_8 = (CT94_out1 == 1'b0 ? s_7 :
              12'sb100100010010);



  assign s_8 = signal2_8;

  assign signal2_9 = (CT93_out1 == 1'b0 ? s_8 :
              12'sb110000000000);



  assign s_9 = signal2_9;

  assign signal2_10 = (CT92_out1 == 1'b0 ? s_9 :
              12'sb011011101110);



  assign s_10 = signal2_10;

  assign signal2_11 = (CT91_out1 == 1'b0 ? s_10 :
              12'sb110000000000);



  assign s_11 = signal2_11;

  assign signal2_12 = (CT82_out1 == 1'b0 ? s_11 :
              Switch107_out1_13);



  assign s_12 = signal2_12;

  assign signal2_13 = (CT81_out1 == 1'b0 ? s_12 :
              Switch107_out1_14);



  assign s_13 = signal2_13;

  assign Unary_Minus9_in0 =  - ({Switch107_out1_14[11], Switch107_out1_14});
  assign Unary_Minus9_out1 = Unary_Minus9_in0[11:0];



  assign signal2_14 = (CT80_out1 == 1'b0 ? s_13 :
              Unary_Minus9_out1);



  assign s_14 = signal2_14;

  assign signal2_15 = (CT79_out1 == 1'b0 ? s_14 :
              Switch107_out1_13);



  assign s_15 = signal2_15;

  assign signal2_16 = (CT76_out1 == 1'b0 ? s_15 :
              Switch107_out1_15);



  assign s_16 = signal2_16;

  assign signal2_17 = (CT75_out1 == 1'b0 ? s_16 :
              Switch107_out1_16);



  assign s_17 = signal2_17;

  assign Unary_Minus8_in0 =  - ({Switch107_out1_16[11], Switch107_out1_16});
  assign Unary_Minus8_out1 = Unary_Minus8_in0[11:0];



  assign signal2_18 = (CT74_out1 == 1'b0 ? s_17 :
              Unary_Minus8_out1);



  assign s_18 = signal2_18;

  assign signal2_19 = (CT73_out1 == 1'b0 ? s_18 :
              Switch107_out1_15);



  assign s_19 = signal2_19;

  assign signal2_20 = (CT68_out1 == 1'b0 ? s_19 :
              Switch107_out1_13);



  assign s_20 = signal2_20;

  assign Unary_Minus5_in0 =  - ({Switch107_out1_14[11], Switch107_out1_14});
  assign Unary_Minus5_out1 = Unary_Minus5_in0[11:0];



  assign signal2_21 = (CT67_out1 == 1'b0 ? s_20 :
              Unary_Minus5_out1);



  assign s_21 = signal2_21;

  assign signal2_22 = (CT66_out1 == 1'b0 ? s_21 :
              Switch107_out1_14);



  assign s_22 = signal2_22;

  assign signal2_23 = (CT65_out1 == 1'b0 ? s_22 :
              Switch107_out1_13);



  assign s_23 = signal2_23;

  assign signal2_24 = (CT64_out1 == 1'b0 ? s_23 :
              Switch107_out1_15);



  assign s_24 = signal2_24;

  assign Unary_Minus6_in0 =  - ({Switch107_out1_16[11], Switch107_out1_16});
  assign Unary_Minus6_out1 = Unary_Minus6_in0[11:0];



  assign signal2_25 = (CT63_out1 == 1'b0 ? s_24 :
              Unary_Minus6_out1);



  assign s_25 = signal2_25;

  assign signal2_26 = (CT62_out1 == 1'b0 ? s_25 :
              Switch107_out1_16);



  assign s_26 = signal2_26;

  assign signal2_27 = (CT61_out1 == 1'b0 ? s_26 :
              Switch107_out1_15);



  assign s_27 = signal2_27;

  assign signal2_28 = (CT54_out1 == 1'b0 ? s_27 :
              Switch107_out1_13);



  assign s_28 = signal2_28;

  assign Unary_Minus17_in0 =  - ({Switch107_out1_14[11], Switch107_out1_14});
  assign Unary_Minus17_out1 = Unary_Minus17_in0[11:0];



  assign signal2_29 = (CT53_out1 == 1'b0 ? s_28 :
              Unary_Minus17_out1);



  assign s_29 = signal2_29;

  assign signal2_30 = (CT52_out1 == 1'b0 ? s_29 :
              Switch107_out1_14);



  assign s_30 = signal2_30;

  assign signal2_31 = (CT51_out1 == 1'b0 ? s_30 :
              Switch107_out1_13);



  assign s_31 = signal2_31;

  assign signal2_32 = (CT50_out1 == 1'b0 ? s_31 :
              Switch107_out1_15);



  assign s_32 = signal2_32;

  assign Unary_Minus4_in0 =  - ({Switch107_out1_16[11], Switch107_out1_16});
  assign Unary_Minus4_out1 = Unary_Minus4_in0[11:0];



  assign signal2_33 = (CT49_out1 == 1'b0 ? s_32 :
              Unary_Minus4_out1);



  assign s_33 = signal2_33;

  assign signal2_34 = (CT48_out1 == 1'b0 ? s_33 :
              Switch107_out1_16);



  assign s_34 = signal2_34;

  assign signal2_35 = (CT47_out1 == 1'b0 ? s_34 :
              Switch107_out1_15);



  assign s_35 = signal2_35;

  assign signal2_36 = (CT22_out1 == 1'b0 ? s_35 :
              12'sb101101100010);



  assign s_36 = signal2_36;

  assign signal2_37 = (CT21_out1 == 1'b0 ? s_36 :
              12'sb010010011110);



  assign s_37 = signal2_37;

  assign signal2_38 = (CT19_out1 == 1'b0 ? s_37 :
              12'sb110101010101);



  assign s_38 = signal2_38;

  assign signal2_39 = (CT18_out1 == 1'b0 ? s_38 :
              12'sb110101010101);



  assign s_39 = signal2_39;

  assign signal2_40 = (CT17_out1 == 1'b0 ? s_39 :
              12'sb010101010101);



  assign s_40 = signal2_40;

  assign signal2_41 = (CT104_out1 == 1'b0 ? s_40 :
              12'sb101101100010);



  assign s_41 = signal2_41;

  assign signal2_42 = (CT103_out1 == 1'b0 ? s_41 :
              12'sb010010011110);



  assign s_42 = signal2_42;

  assign signal2_43 = (CT101_out1 == 1'b0 ? s_42 :
              12'sb110101010101);



  assign s_43 = signal2_43;

  assign signal2_44 = (CT15_out1 == 1'b0 ? s_43 :
              12'sb110101010101);



  assign s_44 = signal2_44;

  assign signal2_45 = (CT14_out1 == 1'b0 ? s_44 :
              12'sb010101010101);



  assign s_45 = signal2_45;

  assign Switch106_out1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb000000000000);



  assign signal2_46 = (CT4_out1 == 1'b0 ? s_45 :
              Switch106_out1);



  assign s_46 = signal2_46;

  assign Switch105_out1 = (DY11_En == 1'b0 ? 12'sb001100010100 :
              12'sb001010101011);



  assign signal2_47 = (CT7_out1 == 1'b0 ? s_46 :
              Switch105_out1);



  assign s_47 = signal2_47;

  assign Switch104_out1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb110101010101);



  assign signal2_48 = (CT2_out1 == 1'b0 ? s_47 :
              Switch104_out1);



  assign s_48 = signal2_48;

  assign Switch103_out1 = (DY11_En == 1'b0 ? 12'sb110101010101 :
              12'sb110011101100);



  assign signal2_49 = (CT3_out1 == 1'b0 ? s_48 :
              Switch103_out1);



  assign s_49 = signal2_49;

  assign Switch102_out1 = (DY11_En == 1'b0 ? 12'sb000000000000 :
              12'sb000110001010);



  assign signal2_50 = (CT1_out1 == 1'b0 ? s_49 :
              Switch102_out1);



  assign s_50 = signal2_50;

  assign Switch101_out1 = (DY11_En == 1'b0 ? 12'sb001010101011 :
              12'sb000110001010);



  assign signal3 = (CT125_out1 == 1'b0 ? 1'b0 :
              1'b0);



  assign s_51 = signal3;

  assign signal3_1 = (CT124_out1 == 1'b0 ? s_51 :
              1'b1);



  assign s_52 = signal3_1;

  assign signal3_2 = (CT123_out1 == 1'b0 ? s_52 :
              1'b0);



  assign s_53 = signal3_2;

  assign signal3_3 = (CT122_out1 == 1'b0 ? s_53 :
              1'b1);



  assign s_54 = signal3_3;

  assign signal3_4 = (CT121_out1 == 1'b0 ? s_54 :
              1'b0);



  assign s_55 = signal3_4;

  assign signal3_5 = (CT120_out1 == 1'b0 ? s_55 :
              1'b1);



  assign s_56 = signal3_5;

  assign signal3_6 = (CT119_out1 == 1'b0 ? s_56 :
              1'b0);



  assign s_57 = signal3_6;

  assign signal3_7 = (CT118_out1 == 1'b0 ? s_57 :
              1'b1);



  assign s_58 = signal3_7;

  assign signal3_8 = (CT94_out1 == 1'b0 ? s_58 :
              1'b0);



  assign s_59 = signal3_8;

  assign signal3_9 = (CT93_out1 == 1'b0 ? s_59 :
              1'b1);



  assign s_60 = signal3_9;

  assign signal3_10 = (CT92_out1 == 1'b0 ? s_60 :
              1'b0);



  assign s_61 = signal3_10;

  assign signal3_11 = (CT91_out1 == 1'b0 ? s_61 :
              1'b1);



  assign s_62 = signal3_11;

  assign signal3_12 = (CT82_out1 == 1'b0 ? s_62 :
              1'b0);



  assign s_63 = signal3_12;

  assign signal3_13 = (CT81_out1 == 1'b0 ? s_63 :
              1'b1);



  assign s_64 = signal3_13;

  assign signal3_14 = (CT80_out1 == 1'b0 ? s_64 :
              1'b0);



  assign s_65 = signal3_14;

  assign signal3_15 = (CT79_out1 == 1'b0 ? s_65 :
              1'b1);



  assign s_66 = signal3_15;

  assign signal3_16 = (CT76_out1 == 1'b0 ? s_66 :
              1'b0);



  assign s_67 = signal3_16;

  assign signal3_17 = (CT75_out1 == 1'b0 ? s_67 :
              1'b1);



  assign s_68 = signal3_17;

  assign signal3_18 = (CT74_out1 == 1'b0 ? s_68 :
              1'b0);



  assign s_69 = signal3_18;

  assign signal3_19 = (CT73_out1 == 1'b0 ? s_69 :
              1'b1);



  assign s_70 = signal3_19;

  assign signal3_20 = (CT68_out1 == 1'b0 ? s_70 :
              1'b0);



  assign s_71 = signal3_20;

  assign signal3_21 = (CT67_out1 == 1'b0 ? s_71 :
              1'b1);



  assign s_72 = signal3_21;

  assign signal3_22 = (CT66_out1 == 1'b0 ? s_72 :
              1'b0);



  assign s_73 = signal3_22;

  assign signal3_23 = (CT65_out1 == 1'b0 ? s_73 :
              1'b1);



  assign s_74 = signal3_23;

  assign signal3_24 = (CT64_out1 == 1'b0 ? s_74 :
              1'b0);



  assign s_75 = signal3_24;

  assign signal3_25 = (CT63_out1 == 1'b0 ? s_75 :
              1'b1);



  assign s_76 = signal3_25;

  assign signal3_26 = (CT62_out1 == 1'b0 ? s_76 :
              1'b0);



  assign s_77 = signal3_26;

  assign signal3_27 = (CT61_out1 == 1'b0 ? s_77 :
              1'b1);



  assign s_78 = signal3_27;

  assign signal3_28 = (CT54_out1 == 1'b0 ? s_78 :
              1'b0);



  assign s_79 = signal3_28;

  assign signal3_29 = (CT53_out1 == 1'b0 ? s_79 :
              1'b1);



  assign s_80 = signal3_29;

  assign signal3_30 = (CT52_out1 == 1'b0 ? s_80 :
              1'b0);



  assign s_81 = signal3_30;

  assign signal3_31 = (CT51_out1 == 1'b0 ? s_81 :
              1'b1);



  assign s_82 = signal3_31;

  assign signal3_32 = (CT50_out1 == 1'b0 ? s_82 :
              1'b0);



  assign s_83 = signal3_32;

  assign signal3_33 = (CT49_out1 == 1'b0 ? s_83 :
              1'b1);



  assign s_84 = signal3_33;

  assign signal3_34 = (CT48_out1 == 1'b0 ? s_84 :
              1'b0);



  assign s_85 = signal3_34;

  assign signal3_35 = (CT47_out1 == 1'b0 ? s_85 :
              1'b1);



  assign s_86 = signal3_35;

  assign signal3_36 = (CT22_out1 == 1'b0 ? s_86 :
              1'b0);



  assign s_87 = signal3_36;

  assign signal3_37 = (CT21_out1 == 1'b0 ? s_87 :
              1'b1);



  assign s_88 = signal3_37;

  assign signal3_38 = (CT19_out1 == 1'b0 ? s_88 :
              1'b0);



  assign s_89 = signal3_38;

  assign signal3_39 = (CT18_out1 == 1'b0 ? s_89 :
              1'b0);



  assign s_90 = signal3_39;

  assign signal3_40 = (CT17_out1 == 1'b0 ? s_90 :
              1'b1);



  assign s_91 = signal3_40;

  assign signal3_41 = (CT104_out1 == 1'b0 ? s_91 :
              1'b0);



  assign s_92 = signal3_41;

  assign signal3_42 = (CT103_out1 == 1'b0 ? s_92 :
              1'b1);



  assign s_93 = signal3_42;

  assign signal3_43 = (CT101_out1 == 1'b0 ? s_93 :
              1'b0);



  assign s_94 = signal3_43;

  assign signal3_44 = (CT15_out1 == 1'b0 ? s_94 :
              1'b0);



  assign s_95 = signal3_44;

  assign signal3_45 = (CT14_out1 == 1'b0 ? s_95 :
              1'b1);



  assign s_96 = signal3_45;

  assign signal3_46 = (CT4_out1 == 1'b0 ? s_96 :
              1'b0);



  assign s_97 = signal3_46;

  assign signal3_47 = (CT7_out1 == 1'b0 ? s_97 :
              1'b0);



  assign s_98 = signal3_47;

  assign signal3_48 = (CT2_out1 == 1'b0 ? s_98 :
              1'b1);



  assign s_99 = signal3_48;

  assign signal3_49 = (CT3_out1 == 1'b0 ? s_99 :
              1'b0);



  assign s_100 = signal3_49;

  assign signal3_50 = (CT1_out1 == 1'b0 ? s_100 :
              1'b0);



  assign s_101 = signal3_50;

  assign signal3_51 = (CT5_out1 == 1'b0 ? s_101 :
              1'b1);



  assign signal3_52 = signal3_51;

  assign signal3_53 = signal3_52;

  assign signal2_51 = (CT5_out1 == 1'b0 ? s_50 :
              Switch101_out1);



  assign signal2_52 = signal2_51;

  assign signal2_53 = signal2_52;

  assign Constant9_out1_dtc = 25'sb0000000000000000000000000;



  assign Constant2_out1_dtc = 25'sb0001111111111111111111111;



  assign Constant1_out1_dtc = 25'sb1110000000000000000000001;



  always @(posedge g_clk)
    begin : Delay16_process
      if (Rst_n == 1'b0) begin
        Delay16_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        Delay16_out1 <= Add_out1;
      end
    end



  assign Switch13_out1 = (signal3_53 == 1'b0 ? Delay16_out1 :
              Constant9_out1_dtc);



  assign Switch10_out1 = (CT10_out1 == 1'b0 ? Unit_Delay1_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1 <= Switch10_out1;
      end
    end



  assign Switch11_out1 = (CT11_out1 == 1'b0 ? Unit_Delay2_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch11_out1;
      end
    end



  assign Switch12_out1 = (CT12_out1 == 1'b0 ? Unit_Delay3_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch12_out1;
      end
    end



  assign Switch150_out1 = (CT89_out1 == 1'b0 ? Unit_Delay69_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay69_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay69_out1 <= Switch150_out1;
      end
    end



  assign Switch29_out1 = (CT29_out1 == 1'b0 ? Unit_Delay11_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch29_out1;
      end
    end



  assign Switch31_out1 = (CT31_out1 == 1'b0 ? Unit_Delay12_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch31_out1;
      end
    end



  assign Switch33_out1 = (CT33_out1 == 1'b0 ? Unit_Delay13_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1 <= Switch33_out1;
      end
    end



  assign Switch35_out1 = (CT45_out1 == 1'b0 ? Unit_Delay19_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch35_out1;
      end
    end



  assign Switch37_out1 = (CT39_out1 == 1'b0 ? Unit_Delay14_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch37_out1;
      end
    end



  assign Switch39_out1 = (CT41_out1 == 1'b0 ? Unit_Delay15_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch39_out1;
      end
    end



  assign Switch43_out1 = (CT43_out1 == 1'b0 ? Unit_Delay18_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch43_out1;
      end
    end



  assign Switch89_out1 = (CT85_out1 == 1'b0 ? Unit_Delay34_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay34_out1 <= Switch89_out1;
      end
    end



  assign RO2_relop1 = Add4_out1 > 25'sb0000000000000011111111111;



  assign Switch99_out1 = (RO2_relop1 == 1'b0 ? Add4_out1 :
              25'sb0000000000000011111111111);



  assign RO1_relop1 = Switch99_out1 < 25'sb1111111111111100000000001;



  assign Switch100_out1 = (RO1_relop1 == 1'b0 ? Switch99_out1 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion1_out1 = Switch100_out1[11:0];



  assign Switch91_out1 = (CT87_out1 == 1'b0 ? Unit_Delay35_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay35_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay35_out1 <= Switch91_out1;
      end
    end



  assign Switch116_out1 = (CT116_out1 == 1'b0 ? Unit_Delay46_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay46_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1 <= Switch116_out1;
      end
    end



  assign Switch118_out1 = (CT110_out1 == 1'b0 ? Unit_Delay43_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay43_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay43_out1 <= Switch118_out1;
      end
    end



  assign Switch120_out1 = (CT112_out1 == 1'b0 ? Unit_Delay44_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay44_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay44_out1 <= Switch120_out1;
      end
    end



  assign Unary_Minus13_in0 =  - ({Unit_Delay42_out1[11], Unit_Delay42_out1});
  assign Unary_Minus13_out1 = Unary_Minus13_in0[11:0];



  assign signal1 = (CT109_out1 == 1'b0 ? Unit_Delay40_out1 :
              Unit_Delay40_out1);



  assign s_102 = signal1;

  assign signal1_1 = (CT107_out1 == 1'b0 ? s_102 :
              Unit_Delay39_out1_17);



  assign signal1_2 = signal1_1;

  assign signal1_3 = signal1_2;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram1   (.g_clk(g_clk),
                                                        .wr_din(signal1_3),
                                                        .wr_addr(Add3_out1),
                                                        .wr_en(Switch138_out1),
                                                        .rd_addr(Add5_out1),
                                                        .rd_dout(UVctDelay_Ram1_out1)
                                                        );

  assign Switch114_out1 = (CT108_out1 == 1'b0 ? Unit_Delay42_out1 :
              Switch139_out1);



  always @(posedge g_clk)
    begin : Unit_Delay42_process
      if (Rst_n == 1'b0) begin
        Unit_Delay42_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay42_out1 <= Switch114_out1;
      end
    end



  assign signal2_54 = (CT109_out1 == 1'b0 ? Unit_Delay42_out1 :
              Unit_Delay42_out1);



  assign s_103 = signal2_54;

  assign signal2_55 = (CT107_out1 == 1'b0 ? s_103 :
              Unit_Delay41_out1);



  assign signal2_56 = signal2_55;

  assign signal2_57 = signal2_56;

  assign Switch139_out1 = (Switch138_out1 == 1'b0 ? signal2_57 :
              UVctDelay_Ram1_out1);



  assign Switch112_out1 = (CT106_out1 == 1'b0 ? Unit_Delay41_out1 :
              Switch139_out1);



  always @(posedge g_clk)
    begin : Unit_Delay41_process
      if (Rst_n == 1'b0) begin
        Unit_Delay41_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay41_out1 <= Switch112_out1;
      end
    end



  assign Unary_Minus14_in0 =  - ({Unit_Delay41_out1[11], Unit_Delay41_out1});
  assign Unary_Minus14_out1 = Unary_Minus14_in0[11:0];



  assign Unary_Minus_in0 =  - ({Unit_Delay20_out1[11], Unit_Delay20_out1});
  assign Unary_Minus_out1 = Unary_Minus_in0[11:0];



  assign Unary_Minus1_in0 =  - ({Unit_Delay17_out1[11], Unit_Delay17_out1});
  assign Unary_Minus1_out1 = Unary_Minus1_in0[11:0];



  assign Unary_Minus2_in0 =  - ({Unit_Delay9_out1[11], Unit_Delay9_out1});
  assign Unary_Minus2_out1 = Unary_Minus2_in0[11:0];



  assign signal1_4 = (CT28_out1 == 1'b0 ? Unit_Delay7_out1 :
              Unit_Delay7_out1);



  assign s_104 = signal1_4;

  assign signal1_5 = (CT26_out1 == 1'b0 ? s_104 :
              Unit_Delay6_out1);



  assign s_105 = signal1_5;

  assign signal1_6 = (CT38_out1 == 1'b0 ? s_105 :
              Unit_Delay5_out1);



  assign s_106 = signal1_6;

  assign signal1_7 = (CT36_out1 == 1'b0 ? s_106 :
              Unit_Delay4_out1);



  assign signal1_8 = signal1_7;

  assign signal1_9 = signal1_8;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram   (.g_clk(g_clk),
                                                       .wr_din(signal1_9),
                                                       .wr_addr(Add16_out1),
                                                       .wr_en(Switch210_out1),
                                                       .rd_addr(Add19_out1),
                                                       .rd_dout(UVctDelay_Ram_out1)
                                                       );

  assign Switch52_out1 = (CT35_out1 == 1'b0 ? Unit_Delay17_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch52_out1;
      end
    end



  assign Switch54_out1 = (CT37_out1 == 1'b0 ? Unit_Delay20_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch54_out1;
      end
    end



  assign Switch27_out1 = (CT27_out1 == 1'b0 ? Unit_Delay9_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch27_out1;
      end
    end



  assign signal2_58 = (CT28_out1 == 1'b0 ? Unit_Delay9_out1 :
              Unit_Delay9_out1);



  assign s_107 = signal2_58;

  assign signal2_59 = (CT26_out1 == 1'b0 ? s_107 :
              Unit_Delay8_out1);



  assign s_108 = signal2_59;

  assign signal2_60 = (CT38_out1 == 1'b0 ? s_108 :
              Unit_Delay20_out1);



  assign s_109 = signal2_60;

  assign signal2_61 = (CT36_out1 == 1'b0 ? s_109 :
              Unit_Delay17_out1);



  assign signal2_62 = signal2_61;

  assign signal2_63 = signal2_62;

  assign Switch215_out1 = (Switch210_out1 == 1'b0 ? signal2_63 :
              UVctDelay_Ram_out1);



  assign Switch25_out1 = (CT25_out1 == 1'b0 ? Unit_Delay8_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch25_out1;
      end
    end



  assign Unary_Minus3_in0 =  - ({Unit_Delay8_out1[11], Unit_Delay8_out1});
  assign Unary_Minus3_out1 = Unary_Minus3_in0[11:0];



  assign Switch87_out1 = (CT83_out1 == 1'b0 ? Unit_Delay31_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay31_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay31_out1 <= Switch87_out1;
      end
    end



  assign Switch88_out1 = (CT84_out1 == 1'b0 ? Unit_Delay33_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch88_out1;
      end
    end



  assign signal2_64 = (CT88_out1 == 1'b0 ? Unit_Delay33_out1 :
              Unit_Delay33_out1);



  assign s_110 = signal2_64;

  assign signal2_65 = (CT86_out1 == 1'b0 ? s_110 :
              Unit_Delay31_out1);



  assign s_111 = signal2_65;

  assign signal2_66 = (CT44_out1 == 1'b0 ? s_111 :
              Unary_Minus3_out1);



  assign s_112 = signal2_66;

  assign signal2_67 = (CT42_out1 == 1'b0 ? s_112 :
              Unit_Delay9_out1);



  assign s_113 = signal2_67;

  assign signal2_68 = (CT40_out1 == 1'b0 ? s_113 :
              Unit_Delay8_out1);



  assign s_114 = signal2_68;

  assign signal2_69 = (CT46_out1 == 1'b0 ? s_114 :
              Unary_Minus2_out1);



  assign s_115 = signal2_69;

  assign signal2_70 = (CT34_out1 == 1'b0 ? s_115 :
              Unary_Minus1_out1);



  assign s_116 = signal2_70;

  assign signal2_71 = (CT32_out1 == 1'b0 ? s_116 :
              Unit_Delay20_out1);



  assign s_117 = signal2_71;

  assign signal2_72 = (CT30_out1 == 1'b0 ? s_117 :
              Unit_Delay17_out1);



  assign s_118 = signal2_72;

  assign signal2_73 = (CT90_out1 == 1'b0 ? s_118 :
              Unary_Minus_out1);



  assign s_119 = signal2_73;

  assign signal2_74 = (CT115_out1 == 1'b0 ? s_119 :
              Unary_Minus14_out1);



  assign s_120 = signal2_74;

  assign signal2_75 = (CT113_out1 == 1'b0 ? s_120 :
              Unit_Delay42_out1);



  assign s_121 = signal2_75;

  assign signal2_76 = (CT111_out1 == 1'b0 ? s_121 :
              Unit_Delay41_out1);



  assign s_122 = signal2_76;

  assign signal2_77 = (CT117_out1 == 1'b0 ? s_122 :
              Unary_Minus13_out1);



  assign s_123 = signal2_77;

  assign signal2_78 = (CT9_out1 == 1'b0 ? s_123 :
              Unary_Minus12_out1);



  assign s_124 = signal2_78;

  assign signal2_79 = (CT8_out1 == 1'b0 ? s_124 :
              Unary_Minus11_out1);



  assign s_125 = signal2_79;

  assign signal2_80 = (CT6_out1 == 1'b0 ? s_125 :
              Unary_Minus10_out1);



  assign signal2_81 = signal2_80;

  assign Switch107_out1_17 = (CT102_out1 == 1'b0 ? Unit_Delay39_out1_17 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3932_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_17 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_17 <= Switch107_out1_17;
      end
    end



  assign Switch110_out1 = (CT105_out1 == 1'b0 ? Unit_Delay40_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay40_process
      if (Rst_n == 1'b0) begin
        Unit_Delay40_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay40_out1 <= Switch110_out1;
      end
    end



  assign Switch14_out1 = (CT13_out1 == 1'b0 ? Unit_Delay4_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch14_out1;
      end
    end



  assign Switch17_out1 = (CT16_out1 == 1'b0 ? Unit_Delay5_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch17_out1;
      end
    end



  assign Switch20_out1 = (CT20_out1 == 1'b0 ? Unit_Delay6_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch20_out1;
      end
    end



  assign Switch23_out1 = (CT23_out1 == 1'b0 ? Unit_Delay7_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1 <= Switch23_out1;
      end
    end



  assign Switch80_out1 = (CT77_out1 == 1'b0 ? Unit_Delay29_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay29_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1 <= Switch80_out1;
      end
    end



  assign Switch81_out1 = (CT78_out1 == 1'b0 ? Unit_Delay30_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch81_out1;
      end
    end



  assign signal1_10 = (CT88_out1 == 1'b0 ? Unit_Delay30_out1 :
              Unit_Delay30_out1);



  assign s_126 = signal1_10;

  assign signal1_11 = (CT86_out1 == 1'b0 ? s_126 :
              Unit_Delay29_out1);



  assign s_127 = signal1_11;

  assign signal1_12 = (CT44_out1 == 1'b0 ? s_127 :
              Unit_Delay7_out1);



  assign s_128 = signal1_12;

  assign signal1_13 = (CT42_out1 == 1'b0 ? s_128 :
              Unit_Delay6_out1);



  assign s_129 = signal1_13;

  assign signal1_14 = (CT40_out1 == 1'b0 ? s_129 :
              Unit_Delay7_out1);



  assign s_130 = signal1_14;

  assign signal1_15 = (CT46_out1 == 1'b0 ? s_130 :
              Unit_Delay6_out1);



  assign s_131 = signal1_15;

  assign signal1_16 = (CT34_out1 == 1'b0 ? s_131 :
              Unit_Delay5_out1);



  assign s_132 = signal1_16;

  assign signal1_17 = (CT32_out1 == 1'b0 ? s_132 :
              Unit_Delay4_out1);



  assign s_133 = signal1_17;

  assign signal1_18 = (CT30_out1 == 1'b0 ? s_133 :
              Unit_Delay5_out1);



  assign s_134 = signal1_18;

  assign signal1_19 = (CT90_out1 == 1'b0 ? s_134 :
              Unit_Delay4_out1);



  assign s_135 = signal1_19;

  assign signal1_20 = (CT115_out1 == 1'b0 ? s_135 :
              Unit_Delay40_out1);



  assign s_136 = signal1_20;

  assign signal1_21 = (CT113_out1 == 1'b0 ? s_136 :
              Unit_Delay39_out1_17);



  assign s_137 = signal1_21;

  assign signal1_22 = (CT111_out1 == 1'b0 ? s_137 :
              Unit_Delay40_out1);



  assign s_138 = signal1_22;

  assign signal1_23 = (CT117_out1 == 1'b0 ? s_138 :
              Unit_Delay39_out1_17);



  assign s_139 = signal1_23;

  assign signal1_24 = (CT9_out1 == 1'b0 ? s_139 :
              Switch107_out1);



  assign s_140 = signal1_24;

  assign signal1_25 = (CT8_out1 == 1'b0 ? s_140 :
              Switch107_out1_1);



  assign s_141 = signal1_25;

  assign signal1_26 = (CT6_out1 == 1'b0 ? s_141 :
              Switch107_out1_2);



  assign signal1_27 = signal1_26;

  assign Add4_1 = {signal1_27[11], signal1_27};
  assign Add4_2 = {signal2_81[11], signal2_81};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_out1 = {{12{Add4_add_temp[12]}}, Add4_add_temp};



  assign RO8_relop1 = Add4_out1 > 25'sb0000000000000111111111111;



  assign Switch76_out1 = (RO8_relop1 == 1'b0 ? Add4_out1 :
              25'sb0000000000000111111111111);



  assign RO7_relop1 = Switch76_out1 < 25'sb1111111111111000000000001;



  assign Switch79_out1 = (RO7_relop1 == 1'b0 ? Switch76_out1 :
              25'sb1111111111111000000000001);



  assign Bit_Slice2_out1 = Switch79_out1[24:1];



  assign Data_Type_Conversion3_out1 = $signed(Bit_Slice2_out1[11:0]);



  assign Switch122_out1 = (CT114_out1 == 1'b0 ? Unit_Delay45_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay45_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1 <= Switch122_out1;
      end
    end



  assign signal1_28 = (CT125_out1 == 1'b0 ? Unit_Delay45_out1 :
              Unit_Delay45_out1);



  assign s_142 = signal1_28;

  assign signal1_29 = (CT124_out1 == 1'b0 ? s_142 :
              Unit_Delay44_out1);



  assign s_143 = signal1_29;

  assign signal1_30 = (CT123_out1 == 1'b0 ? s_143 :
              Unit_Delay45_out1);



  assign s_144 = signal1_30;

  assign signal1_31 = (CT122_out1 == 1'b0 ? s_144 :
              Unit_Delay44_out1);



  assign s_145 = signal1_31;

  assign signal1_32 = (CT121_out1 == 1'b0 ? s_145 :
              Unit_Delay43_out1);



  assign s_146 = signal1_32;

  assign signal1_33 = (CT120_out1 == 1'b0 ? s_146 :
              Unit_Delay46_out1);



  assign s_147 = signal1_33;

  assign signal1_34 = (CT119_out1 == 1'b0 ? s_147 :
              Unit_Delay43_out1);



  assign s_148 = signal1_34;

  assign signal1_35 = (CT118_out1 == 1'b0 ? s_148 :
              Unit_Delay46_out1);



  assign s_149 = signal1_35;

  assign signal1_36 = (CT94_out1 == 1'b0 ? s_149 :
              Unit_Delay35_out1);



  assign s_150 = signal1_36;

  assign signal1_37 = (CT93_out1 == 1'b0 ? s_150 :
              Unit_Delay34_out1);



  assign s_151 = signal1_37;

  assign signal1_38 = (CT92_out1 == 1'b0 ? s_151 :
              Unit_Delay35_out1);



  assign s_152 = signal1_38;

  assign signal1_39 = (CT91_out1 == 1'b0 ? s_152 :
              Unit_Delay34_out1);



  assign s_153 = signal1_39;

  assign signal1_40 = (CT82_out1 == 1'b0 ? s_153 :
              Switch107_out1_6);



  assign s_154 = signal1_40;

  assign signal1_41 = (CT81_out1 == 1'b0 ? s_154 :
              Switch107_out1_7);



  assign s_155 = signal1_41;

  assign signal1_42 = (CT80_out1 == 1'b0 ? s_155 :
              Switch107_out1_6);



  assign s_156 = signal1_42;

  assign signal1_43 = (CT79_out1 == 1'b0 ? s_156 :
              Switch107_out1_7);



  assign s_157 = signal1_43;

  assign signal1_44 = (CT76_out1 == 1'b0 ? s_157 :
              Switch107_out1_8);



  assign s_158 = signal1_44;

  assign signal1_45 = (CT75_out1 == 1'b0 ? s_158 :
              Switch107_out1_9);



  assign s_159 = signal1_45;

  assign signal1_46 = (CT74_out1 == 1'b0 ? s_159 :
              Switch107_out1_8);



  assign s_160 = signal1_46;

  assign signal1_47 = (CT73_out1 == 1'b0 ? s_160 :
              Switch107_out1_9);



  assign s_161 = signal1_47;

  assign signal1_48 = (CT68_out1 == 1'b0 ? s_161 :
              Unit_Delay18_out1);



  assign s_162 = signal1_48;

  assign signal1_49 = (CT67_out1 == 1'b0 ? s_162 :
              Unit_Delay15_out1);



  assign s_163 = signal1_49;

  assign signal1_50 = (CT66_out1 == 1'b0 ? s_163 :
              Unit_Delay18_out1);



  assign s_164 = signal1_50;

  assign signal1_51 = (CT65_out1 == 1'b0 ? s_164 :
              Unit_Delay15_out1);



  assign s_165 = signal1_51;

  assign signal1_52 = (CT64_out1 == 1'b0 ? s_165 :
              Unit_Delay14_out1);



  assign s_166 = signal1_52;

  assign signal1_53 = (CT63_out1 == 1'b0 ? s_166 :
              Unit_Delay19_out1);



  assign s_167 = signal1_53;

  assign signal1_54 = (CT62_out1 == 1'b0 ? s_167 :
              Unit_Delay14_out1);



  assign s_168 = signal1_54;

  assign signal1_55 = (CT61_out1 == 1'b0 ? s_168 :
              Unit_Delay19_out1);



  assign s_169 = signal1_55;

  assign signal1_56 = (CT54_out1 == 1'b0 ? s_169 :
              Unit_Delay13_out1);



  assign s_170 = signal1_56;

  assign signal1_57 = (CT53_out1 == 1'b0 ? s_170 :
              Unit_Delay12_out1);



  assign s_171 = signal1_57;

  assign signal1_58 = (CT52_out1 == 1'b0 ? s_171 :
              Unit_Delay13_out1);



  assign s_172 = signal1_58;

  assign signal1_59 = (CT51_out1 == 1'b0 ? s_172 :
              Unit_Delay12_out1);



  assign s_173 = signal1_59;

  assign signal1_60 = (CT50_out1 == 1'b0 ? s_173 :
              Unit_Delay11_out1);



  assign s_174 = signal1_60;

  assign signal1_61 = (CT49_out1 == 1'b0 ? s_174 :
              Unit_Delay69_out1);



  assign s_175 = signal1_61;

  assign signal1_62 = (CT48_out1 == 1'b0 ? s_175 :
              Unit_Delay11_out1);



  assign s_176 = signal1_62;

  assign signal1_63 = (CT47_out1 == 1'b0 ? s_176 :
              Unit_Delay69_out1);



  assign s_177 = signal1_63;

  assign signal1_64 = (CT22_out1 == 1'b0 ? s_177 :
              Switch107_out1);



  assign s_178 = signal1_64;

  assign signal1_65 = (CT21_out1 == 1'b0 ? s_178 :
              Switch107_out1_1);



  assign s_179 = signal1_65;

  assign signal1_66 = (CT19_out1 == 1'b0 ? s_179 :
              Switch107_out1);



  assign s_180 = signal1_66;

  assign signal1_67 = (CT18_out1 == 1'b0 ? s_180 :
              Switch107_out1_1);



  assign s_181 = signal1_67;

  assign signal1_68 = (CT17_out1 == 1'b0 ? s_181 :
              Switch107_out1_2);



  assign s_182 = signal1_68;

  assign signal1_69 = (CT104_out1 == 1'b0 ? s_182 :
              Unit_Delay3_out1);



  assign s_183 = signal1_69;

  assign signal1_70 = (CT103_out1 == 1'b0 ? s_183 :
              Unit_Delay2_out1);



  assign s_184 = signal1_70;

  assign signal1_71 = (CT101_out1 == 1'b0 ? s_184 :
              Unit_Delay3_out1);



  assign s_185 = signal1_71;

  assign signal1_72 = (CT15_out1 == 1'b0 ? s_185 :
              Unit_Delay2_out1);



  assign s_186 = signal1_72;

  assign signal1_73 = (CT14_out1 == 1'b0 ? s_186 :
              Unit_Delay1_out1);



  assign s_187 = signal1_73;

  assign signal1_74 = (CT4_out1 == 1'b0 ? s_187 :
              Switch107_out1_10);



  assign s_188 = signal1_74;

  assign signal1_75 = (CT7_out1 == 1'b0 ? s_188 :
              Switch107_out1_11);



  assign s_189 = signal1_75;

  assign signal1_76 = (CT2_out1 == 1'b0 ? s_189 :
              Switch107_out1_12);



  assign s_190 = signal1_76;

  assign signal1_77 = (CT3_out1 == 1'b0 ? s_190 :
              Switch107_out1_10);



  assign s_191 = signal1_77;

  assign signal1_78 = (CT1_out1 == 1'b0 ? s_191 :
              Switch107_out1_11);



  assign s_192 = signal1_78;

  assign signal1_79 = (CT5_out1 == 1'b0 ? s_192 :
              Switch107_out1_12);



  assign signal1_80 = signal1_79;

  assign signal1_81 = signal1_80;

  assign Product_out1 = signal1_81 * signal2_53;



  assign Add_1 = {{2{Product_out1[23]}}, Product_out1};
  assign Add_2 = {Switch13_out1[24], Switch13_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1 = Add_add_temp[24:0];



  assign CT55_out1 = Add_out1 > 25'sb0001111111111111111111111;



  assign Switch41_out1 = (CT55_out1 == 1'b0 ? Add_out1 :
              Constant2_out1_dtc);



  assign CT56_out1 = Switch41_out1 < 25'sb1110000000000000000000001;



  assign Switch42_out1 = (CT56_out1 == 1'b0 ? Switch41_out1 :
              Constant1_out1_dtc);



  assign Bit_Slice1_out1 = Switch42_out1[24:11];



  assign Data_Type_Conversion2_out1 = $signed(Bit_Slice1_out1[11:0]);



  assign Switch58_out1 = (CT57_out1 == 1'b0 ? Unit_Delay21_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch58_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3917_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_18 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_18 <= Switch107_out1_18;
      end
    end



  assign Switch107_out1_18 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_18 :
              Unit_Delay21_out1);



  assign Udp_b12 = Switch107_out1_18;

  assign CT58_out1 = Unit_Delay38_out1 == 7'b0010011;



  assign Switch59_out1 = (CT58_out1 == 1'b0 ? Unit_Delay22_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch59_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3918_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_19 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_19 <= Switch107_out1_19;
      end
    end



  assign Switch107_out1_19 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_19 :
              Unit_Delay22_out1);



  assign Uqp_b12 = Switch107_out1_19;

  assign CT59_out1 = Unit_Delay38_out1 == 7'b0010101;



  assign Switch60_out1 = (CT59_out1 == 1'b0 ? Unit_Delay23_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch60_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3919_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_20 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_20 <= Switch107_out1_20;
      end
    end



  assign Switch107_out1_20 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_20 :
              Unit_Delay23_out1);



  assign Udn_b12 = Switch107_out1_20;

  assign CT60_out1 = Unit_Delay38_out1 == 7'b0010111;



  assign Switch61_out1 = (CT60_out1 == 1'b0 ? Unit_Delay24_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1 <= Switch61_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3920_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_21 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_21 <= Switch107_out1_21;
      end
    end



  assign Switch107_out1_21 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_21 :
              Unit_Delay24_out1);



  assign Uqn_b12 = Switch107_out1_21;

  assign CT69_out1 = Unit_Delay38_out1 == 7'b0011001;



  assign Switch70_out1 = (CT69_out1 == 1'b0 ? Unit_Delay25_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay25_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1 <= Switch70_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3921_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_22 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_22 <= Switch107_out1_22;
      end
    end



  assign Switch107_out1_22 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_22 :
              Unit_Delay25_out1);



  assign Idp_b12 = Switch107_out1_22;

  assign CT70_out1 = Unit_Delay38_out1 == 7'b0011011;



  assign Switch71_out1 = (CT70_out1 == 1'b0 ? Unit_Delay26_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1 <= Switch71_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3923_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_23 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_23 <= Switch107_out1_23;
      end
    end



  assign Switch107_out1_23 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_23 :
              Unit_Delay26_out1);



  assign Iqp_b12 = Switch107_out1_23;

  assign CT71_out1 = Unit_Delay38_out1 == 7'b0011101;



  assign Switch72_out1 = (CT71_out1 == 1'b0 ? Unit_Delay27_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay27_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay27_out1 <= Switch72_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3924_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_24 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_24 <= Switch107_out1_24;
      end
    end



  assign Switch107_out1_24 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_24 :
              Unit_Delay27_out1);



  assign Idn_b12 = Switch107_out1_24;

  assign CT72_out1 = Unit_Delay38_out1 == 7'b0011111;



  assign Switch73_out1 = (CT72_out1 == 1'b0 ? Unit_Delay28_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay28_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay28_out1 <= Switch73_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3925_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_25 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_25 <= Switch107_out1_25;
      end
    end



  assign Switch107_out1_25 = (CT99_out1 == 1'b0 ? Unit_Delay39_out1_25 :
              Unit_Delay28_out1);



  assign Iqn_b12 = Switch107_out1_25;

  assign CT100_out1 = Unit_Delay38_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay399_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_26 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_26 <= Switch107_out1_26;
      end
    end



  assign Switch107_out1_26 = (CT100_out1 == 1'b0 ? Unit_Delay39_out1_26 :
              Unit_Delay34_out1);



  assign Ma_b12 = Switch107_out1_26;

  assign CT95_out1 = Unit_Delay38_out1 == 7'b0101010;



  assign Switch97_out1 = (CT95_out1 == 1'b0 ? Unit_Delay36_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay36_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay36_out1 <= Switch97_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3910_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_27 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_27 <= Switch107_out1_27;
      end
    end



  assign Switch107_out1_27 = (CT100_out1 == 1'b0 ? Unit_Delay39_out1_27 :
              Unit_Delay36_out1);



  assign Mb_b12 = Switch107_out1_27;

  assign CT96_out1 = Unit_Delay38_out1 == 7'b0101100;



  assign Switch98_out1 = (CT96_out1 == 1'b0 ? Unit_Delay37_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay37_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay37_out1 <= Switch98_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3912_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_28 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_28 <= Switch107_out1_28;
      end
    end



  assign Switch107_out1_28 = (CT100_out1 == 1'b0 ? Unit_Delay39_out1_28 :
              Unit_Delay37_out1);



  assign Mc_b12 = Switch107_out1_28;

  assign CT130_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT126_out1 = Unit_Delay38_out1 == 7'b0101110;



  assign Switch133_out1 = (CT126_out1 == 1'b0 ? Unit_Delay47_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay47_process
      if (Rst_n == 1'b0) begin
        Unit_Delay47_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay47_out1 <= Switch133_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3913_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_29 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_29 <= Switch107_out1_29;
      end
    end



  assign Switch107_out1_29 = (CT130_out1 == 1'b0 ? Unit_Delay39_out1_29 :
              Unit_Delay47_out1);



  assign Idp_C_b12 = Switch107_out1_29;

  assign CT127_out1 = Unit_Delay38_out1 == 7'b0110000;



  assign Switch134_out1 = (CT127_out1 == 1'b0 ? Unit_Delay48_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay48_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay48_out1 <= Switch134_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3914_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_30 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_30 <= Switch107_out1_30;
      end
    end



  assign Switch107_out1_30 = (CT130_out1 == 1'b0 ? Unit_Delay39_out1_30 :
              Unit_Delay48_out1);



  assign Iqp_C_b12 = Switch107_out1_30;

  assign CT128_out1 = Unit_Delay38_out1 == 7'b0110010;



  assign Switch135_out1 = (CT128_out1 == 1'b0 ? Unit_Delay49_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay49_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay49_out1 <= Switch135_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3916_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_31 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_31 <= Switch107_out1_31;
      end
    end



  assign Switch107_out1_31 = (CT130_out1 == 1'b0 ? Unit_Delay39_out1_31 :
              Unit_Delay49_out1);



  assign Idn_C_b12 = Switch107_out1_31;

  assign CT129_out1 = Unit_Delay38_out1 == 7'b0110100;



  assign Switch136_out1 = (CT129_out1 == 1'b0 ? Unit_Delay50_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay50_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay50_out1 <= Switch136_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3915_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_32 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_32 <= Switch107_out1_32;
      end
    end



  assign Switch107_out1_32 = (CT130_out1 == 1'b0 ? Unit_Delay39_out1_32 :
              Unit_Delay50_out1);



  assign Iqn_C_b12 = Switch107_out1_32;

endmodule  // ABC2DQ_V10

