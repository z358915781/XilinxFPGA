// -------------------------------------------------------------
// 
// File Name: Work_AD7607Drv_V10c\AD7607Drv_V11\AD7607Drv_V11.v
// Created: 2020-12-31 09:16:05
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: AD7607Drv_V11
// Source Path: AD7607Drv_V11/AD7607Drv_V11
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module AD7607Drv_V11
          (
           g_clk,
           Rst_n,
           AD_Start,
           AD_BUSY0,
           AD_BUSY1,
           AD_DB,
           Pulse50x32Hz,
           AD_Rst,
           AD_CONVST,
           AD_CS0,
           AD_CS1,
           AD_RD,
           AD_OS,
           AD0_CH0,
           AD0_CH1,
           AD0_CH2,
           AD0_CH3,
           AD0_CH4,
           AD0_CH5,
           AD0_CH6,
           AD0_CH7,
           AD1_CH0,
           AD1_CH1,
           AD1_CH2,
           AD1_CH3,
           AD1_CH4,
           AD1_CH5,
           AD1_CH6,
           AD1_CH7,
           AD_Err,
           ADErrCNT
          );



  input   g_clk;
  input   Rst_n;
  input   AD_Start;
  input   AD_BUSY0;
  input   AD_BUSY1;
  input   signed [13:0] AD_DB;  // sfix14
  input   Pulse50x32Hz;
  output  AD_Rst;
  output  AD_CONVST;
  output  AD_CS0;
  output  AD_CS1;
  output  AD_RD;
  output  [2:0] AD_OS;  // ufix3
  output  signed [13:0] AD0_CH0;  // sfix14
  output  signed [13:0] AD0_CH1;  // sfix14
  output  signed [13:0] AD0_CH2;  // sfix14
  output  signed [13:0] AD0_CH3;  // sfix14
  output  signed [13:0] AD0_CH4;  // sfix14
  output  signed [13:0] AD0_CH5;  // sfix14
  output  signed [13:0] AD0_CH6;  // sfix14
  output  signed [13:0] AD0_CH7;  // sfix14
  output  signed [13:0] AD1_CH0;  // sfix14
  output  signed [13:0] AD1_CH1;  // sfix14
  output  signed [13:0] AD1_CH2;  // sfix14
  output  signed [13:0] AD1_CH3;  // sfix14
  output  signed [13:0] AD1_CH4;  // sfix14
  output  signed [13:0] AD1_CH5;  // sfix14
  output  signed [13:0] AD1_CH6;  // sfix14
  output  signed [13:0] AD1_CH7;  // sfix14
  output  AD_Err;
  output  signed [9:0] ADErrCNT;  // sfix10

  reg  Unit_Delay3_out1;
  reg  Unit_Delay1_out1;
  wire [1:0] Bit_Concat_out1;  // ufix2
  wire CT4_out1;
  wire CT5_out1;
  wire LO1_out1;
  reg  Unit_Delay34_out1;
  wire Logical_Operator16_out1;
  reg [9:0] Unit_Delay2_out1;  // ufix10
  wire CT2_out1;
  wire [9:0] Add1_out1;  // ufix10
  wire CT_out1;
  wire [9:0] Switch3_out1;  // ufix10
  wire Logical_Operator17_out1;
  wire Logical_Operator11_out1;
  reg [7:0] Unit_Delay9_out1;  // uint8
  wire [7:0] Add3_out1;  // uint8
  wire CT11_out1;
  wire Logical_Operator6_out1;
  wire [7:0] Switch10_out1;  // uint8
  reg signed [3:0] Unit_Delay6_out1;  // sfix4
  wire CT10_out1;
  reg signed [3:0] Unit_Delay7_out1;  // sfix4
  wire CT9_out1;
  wire Logical_Operator_out1;
  wire Logical_Operator1_out1;
  reg  Unit_Delay5_out1;
  wire Switch7_out1;
  wire Switch6_out1;
  wire signed [3:0] Switch5_out1;  // sfix4
  wire signed [3:0] Add2_out1;  // sfix4
  wire CT6_out1;
  wire signed [3:0] Switch8_out1;  // sfix4
  wire CT7_out1;
  wire Logical_Operator3_out1;
  wire signed [3:0] Switch9_out1;  // sfix4
  reg signed [3:0] Unit_Delay8_out1;  // sfix4
  wire CT8_out1;
  wire Logical_Operator5_out1;
  wire [7:0] Switch12_out1;  // uint8
  wire CT34_out1;
  wire or_out1;
  wire [9:0] Switch4_out1;  // ufix10
  wire CT1_out1;
  wire CT3_out1;
  wire CT36_out1;
  wire Logical_Operator2_out1;
  wire LO_out1;
  wire [1:0] Bit_Slice1_out1;  // ufix2
  wire CT48_out1;
  wire Logical_Operator13_out1;
  wire CT49_out1;
  wire Logical_Operator14_out1;
  wire [2:0] Bit_Slice_out1;  // ufix3
  wire CT12_out1;
  wire CT13_out1;
  wire CT32_out1;
  wire CT33_out1;
  wire Logical_Operator8_out1;
  wire CT14_out1;
  wire Logical_Operator12_out1;
  wire Logical_Operator15_out1;
  wire [2:0] Constant1_out1;  // ufix3
  wire Bit_Slice4_out1;  // ufix1
  wire [2:0] Bit_Slice2_out1;  // ufix3
  wire [3:0] Bit_Concat1_out1;  // ufix4
  wire CT15_out1;
  wire CT35_out1;
  wire Logical_Operator4_out1;
  wire [3:0] Bit_Slice3_out1;  // ufix4
  wire [3:0] y;  // ufix4
  wire CT16_out1;
  wire And_out1;
  reg signed [13:0] Unit_Delay25_out1;  // sfix14
  reg signed [13:0] Unit_Delay4_out1;  // sfix14
  wire signed [13:0] Switch1_out1;  // sfix14
  wire [3:0] y_1;  // ufix4
  wire CT17_out1;
  wire And1_out1;
  reg signed [13:0] Unit_Delay10_out1;  // sfix14
  wire signed [13:0] Switch2_out1;  // sfix14
  wire [3:0] y_2;  // ufix4
  wire CT18_out1;
  wire And2_out1;
  reg signed [13:0] Unit_Delay12_out1;  // sfix14
  wire signed [13:0] Switch11_out1;  // sfix14
  wire [3:0] y_3;  // ufix4
  wire CT19_out1;
  wire And3_out1;
  reg signed [13:0] Unit_Delay11_out1;  // sfix14
  wire signed [13:0] Switch13_out1;  // sfix14
  wire [3:0] y_4;  // ufix4
  wire CT20_out1;
  wire And4_out1;
  reg signed [13:0] Unit_Delay16_out1;  // sfix14
  wire signed [13:0] Switch14_out1;  // sfix14
  wire [3:0] y_5;  // ufix4
  wire CT21_out1;
  wire And5_out1;
  reg signed [13:0] Unit_Delay13_out1;  // sfix14
  wire signed [13:0] Switch17_out1;  // sfix14
  wire [3:0] y_6;  // ufix4
  wire CT22_out1;
  wire And6_out1;
  reg signed [13:0] Unit_Delay15_out1;  // sfix14
  wire signed [13:0] Switch15_out1;  // sfix14
  wire [3:0] y_7;  // ufix4
  wire CT23_out1;
  wire And7_out1;
  reg signed [13:0] Unit_Delay14_out1;  // sfix14
  wire signed [13:0] Switch16_out1;  // sfix14
  wire [3:0] y_8;  // ufix4
  wire CT24_out1;
  wire And8_out1;
  reg signed [13:0] Unit_Delay24_out1;  // sfix14
  wire signed [13:0] Switch18_out1;  // sfix14
  wire [3:0] y_9;  // ufix4
  wire CT25_out1;
  wire And9_out1;
  reg signed [13:0] Unit_Delay17_out1;  // sfix14
  wire signed [13:0] Switch25_out1;  // sfix14
  wire [3:0] y_10;  // ufix4
  wire CT26_out1;
  wire And10_out1;
  reg signed [13:0] Unit_Delay19_out1;  // sfix14
  wire signed [13:0] Switch19_out1;  // sfix14
  wire [3:0] y_11;  // ufix4
  wire CT27_out1;
  wire And11_out1;
  reg signed [13:0] Unit_Delay18_out1;  // sfix14
  wire signed [13:0] Switch20_out1;  // sfix14
  wire [3:0] y_12;  // ufix4
  wire CT28_out1;
  wire And12_out1;
  reg signed [13:0] Unit_Delay23_out1;  // sfix14
  wire signed [13:0] Switch21_out1;  // sfix14
  wire [3:0] y_13;  // ufix4
  wire CT29_out1;
  wire And13_out1;
  reg signed [13:0] Unit_Delay20_out1;  // sfix14
  wire signed [13:0] Switch24_out1;  // sfix14
  wire [3:0] y_14;  // ufix4
  wire CT30_out1;
  wire And14_out1;
  reg signed [13:0] Unit_Delay22_out1;  // sfix14
  wire signed [13:0] Switch22_out1;  // sfix14
  wire [3:0] y_15;  // ufix4
  wire CT31_out1;
  wire And15_out1;
  reg signed [13:0] Unit_Delay21_out1;  // sfix14
  wire signed [13:0] Switch23_out1;  // sfix14
  wire [9:0] Switch39_out1;  // ufix10
  wire [24:0] Add5_out1;  // ufix25
  reg [24:0] Unit_Delay37_out1;  // ufix25
  wire [31:0] Add5_add_temp;  // ufix32
  wire Relational_Operator2_relop1;
  wire Logical_Operator10_out1;
  reg  Unit_Delay38_out1;
  wire CT44_out1;
  wire Logical_Operator9_out1;
  wire CT43_out1;
  wire signed [9:0] Switch34_out1;  // sfix10
  wire signed [9:0] Switch35_out1;  // sfix10
  wire signed [9:0] Switch36_out1;  // sfix10
  wire CT46_out1;
  wire signed [9:0] Switch37_out1;  // sfix10
  wire signed [9:0] Switch38_out1;  // sfix10
  reg signed [9:0] Unit_Delay36_out1;  // sfix10
  wire signed [31:0] Add4_add_temp;  // sfix32
  wire signed [31:0] Add4_1;  // sfix32
  wire signed [31:0] Add4_2;  // sfix32
  wire signed [9:0] Add4_out1;  // sfix10
  wire CT45_out1;

  // 0x02-
  // 0x03-
  // 0x04-
  // 0x05-00
  // 0x12-
  // 0x13-
  // 0x14-
  // BCD15-01
  // BCD25-02
  // BCD35-03
  // BCD45-04
  // BCD55-05
  // BCD65-06
  // BCD75-07
  // BCD105-08
  // BCD115-09
  // BCD125-10
  // BCD135-11
  // BCD145-12
  // BCD155-13
  // BCD165-14
  // BCD175-15


  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 1'b0;
      end
      else begin
        Unit_Delay3_out1 <= AD_BUSY0;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= AD_BUSY1;
      end
    end



  assign Bit_Concat_out1 = {Unit_Delay3_out1, Unit_Delay1_out1};



  assign CT4_out1 = Bit_Concat_out1 == 2'b11;



  assign CT5_out1 = Bit_Concat_out1 == 2'b00;



  assign LO1_out1 =  ~ AD_Start;



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 1'b0;
      end
      else begin
        Unit_Delay34_out1 <= 1'b1;
      end
    end



  assign Logical_Operator16_out1 =  ~ Unit_Delay34_out1;



  assign CT2_out1 = Unit_Delay2_out1 <= 10'b0111000010;



  assign Add1_out1 = 10'b0000000001 + Unit_Delay2_out1;



  assign CT_out1 = Add1_out1 >= 10'b1111101000;



  assign Switch3_out1 = (CT_out1 == 1'b0 ? Add1_out1 :
              10'b0000000000);



  assign Logical_Operator11_out1 = Logical_Operator16_out1 | Logical_Operator17_out1;



  assign Add3_out1 = 8'b00000001 + Unit_Delay9_out1;



  assign CT11_out1 = Add3_out1 >= 8'b10000100;



  assign Logical_Operator6_out1 = CT11_out1 | Logical_Operator11_out1;



  assign Switch10_out1 = (Logical_Operator6_out1 == 1'b0 ? Add3_out1 :
              8'b10000100);



  assign CT10_out1 = Unit_Delay6_out1 == 4'sb0000;



  assign CT9_out1 = Unit_Delay7_out1 == 4'sb0001;



  assign Logical_Operator17_out1 = LO1_out1 | Logical_Operator_out1;



  assign Logical_Operator1_out1 = CT5_out1 | Logical_Operator17_out1;



  assign Switch7_out1 = (Logical_Operator1_out1 == 1'b0 ? Unit_Delay5_out1 :
              1'b0);



  assign Switch6_out1 = (CT4_out1 == 1'b0 ? Switch7_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 1'b0;
      end
      else begin
        Unit_Delay5_out1 <= Switch6_out1;
      end
    end



  assign Switch5_out1 = (Unit_Delay5_out1 == 1'b0 ? 4'sb1111 :
              4'sb0001);



  assign Add2_out1 = Switch5_out1 + Unit_Delay6_out1;



  assign CT6_out1 = Add2_out1 >= 4'sb0011;



  assign Switch8_out1 = (CT6_out1 == 1'b0 ? Add2_out1 :
              4'sb0011);



  assign CT7_out1 = Switch8_out1 <= 4'sb0000;



  assign Logical_Operator3_out1 = CT7_out1 | Logical_Operator17_out1;



  assign Switch9_out1 = (Logical_Operator3_out1 == 1'b0 ? Switch8_out1 :
              4'sb0000);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 4'sb0000;
      end
      else begin
        Unit_Delay6_out1 <= Switch9_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 4'sb0000;
      end
      else begin
        Unit_Delay7_out1 <= Unit_Delay6_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 4'sb0000;
      end
      else begin
        Unit_Delay8_out1 <= Unit_Delay7_out1;
      end
    end



  assign CT8_out1 = Unit_Delay8_out1 == 4'sb0010;



  assign Logical_Operator5_out1 = CT10_out1 & (CT8_out1 & CT9_out1);



  assign Switch12_out1 = (Logical_Operator5_out1 == 1'b0 ? Switch10_out1 :
              8'b00000000);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch12_out1;
      end
    end



  assign CT34_out1 = Unit_Delay9_out1 == 8'b10000010;



  assign or_out1 = CT34_out1 | LO1_out1;



  assign Switch4_out1 = (or_out1 == 1'b0 ? Switch3_out1 :
              10'b0000000000);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 10'b0000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch4_out1;
      end
    end



  assign CT1_out1 = Unit_Delay2_out1 >= 10'b0110011000;



  assign Logical_Operator_out1 = CT1_out1 & CT2_out1;



  assign AD_Rst = Logical_Operator_out1;

  assign CT3_out1 = Unit_Delay2_out1 == 10'b0000000001;



  assign CT36_out1 = Unit_Delay2_out1 == 10'b0000000010;



  assign Logical_Operator2_out1 = CT3_out1 | CT36_out1;



  assign LO_out1 =  ~ Logical_Operator2_out1;



  assign AD_CONVST = LO_out1;

  assign Bit_Slice1_out1 = Unit_Delay9_out1[7:6];



  assign CT48_out1 = Bit_Slice1_out1 == 2'b00;



  assign Logical_Operator13_out1 =  ~ CT48_out1;



  assign AD_CS0 = Logical_Operator13_out1;

  assign CT49_out1 = Bit_Slice1_out1 == 2'b01;



  assign Logical_Operator14_out1 =  ~ CT49_out1;



  assign AD_CS1 = Logical_Operator14_out1;

  assign Bit_Slice_out1 = Unit_Delay9_out1[2:0];



  assign CT12_out1 = Bit_Slice_out1 == 3'b010;



  assign CT13_out1 = Bit_Slice_out1 == 3'b011;



  assign CT32_out1 = Bit_Slice_out1 == 3'b100;



  assign CT33_out1 = Bit_Slice_out1 == 3'b101;



  assign Logical_Operator8_out1 = CT33_out1 | (CT32_out1 | (CT12_out1 | CT13_out1));



  assign CT14_out1 = Bit_Slice1_out1 < 2'b10;



  assign Logical_Operator12_out1 = Logical_Operator8_out1 & CT14_out1;



  assign Logical_Operator15_out1 =  ~ Logical_Operator12_out1;



  assign AD_RD = Logical_Operator15_out1;

  assign Constant1_out1 = 3'b000;



  assign AD_OS = Constant1_out1;

  assign Bit_Slice4_out1 = Unit_Delay9_out1[7];



  assign Bit_Slice2_out1 = Unit_Delay9_out1[2:0];



  assign Bit_Concat1_out1 = {Bit_Slice4_out1, Bit_Slice2_out1};



  assign CT15_out1 = Bit_Concat1_out1 == 4'b0100;



  assign CT35_out1 = Bit_Concat1_out1 == 4'b0101;



  assign Logical_Operator4_out1 = CT15_out1 | CT35_out1;



  assign Bit_Slice3_out1 = Unit_Delay9_out1[6:3];



  assign y = Bit_Slice3_out1;

  assign CT16_out1 = y == 4'b0000;



  assign And_out1 = Logical_Operator4_out1 & CT16_out1;



  always @(posedge g_clk)
    begin : Unit_Delay25_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay25_out1 <= AD_DB;
      end
    end



  assign Switch1_out1 = (And_out1 == 1'b0 ? Unit_Delay4_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch1_out1;
      end
    end



  assign AD0_CH0 = Unit_Delay4_out1;

  assign y_1 = Bit_Slice3_out1;

  assign CT17_out1 = y_1 == 4'b0001;



  assign And1_out1 = Logical_Operator4_out1 & CT17_out1;



  assign Switch2_out1 = (And1_out1 == 1'b0 ? Unit_Delay10_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay10_out1 <= Switch2_out1;
      end
    end



  assign AD0_CH1 = Unit_Delay10_out1;

  assign y_2 = Bit_Slice3_out1;

  assign CT18_out1 = y_2 == 4'b0010;



  assign And2_out1 = Logical_Operator4_out1 & CT18_out1;



  assign Switch11_out1 = (And2_out1 == 1'b0 ? Unit_Delay12_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch11_out1;
      end
    end



  assign AD0_CH2 = Unit_Delay12_out1;

  assign y_3 = Bit_Slice3_out1;

  assign CT19_out1 = y_3 == 4'b0011;



  assign And3_out1 = Logical_Operator4_out1 & CT19_out1;



  assign Switch13_out1 = (And3_out1 == 1'b0 ? Unit_Delay11_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch13_out1;
      end
    end



  assign AD0_CH3 = Unit_Delay11_out1;

  assign y_4 = Bit_Slice3_out1;

  assign CT20_out1 = y_4 == 4'b0100;



  assign And4_out1 = Logical_Operator4_out1 & CT20_out1;



  assign Switch14_out1 = (And4_out1 == 1'b0 ? Unit_Delay16_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay16_out1 <= Switch14_out1;
      end
    end



  assign AD0_CH4 = Unit_Delay16_out1;

  assign y_5 = Bit_Slice3_out1;

  assign CT21_out1 = y_5 == 4'b0101;



  assign And5_out1 = Logical_Operator4_out1 & CT21_out1;



  assign Switch17_out1 = (And5_out1 == 1'b0 ? Unit_Delay13_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay13_out1 <= Switch17_out1;
      end
    end



  assign AD0_CH5 = Unit_Delay13_out1;

  assign y_6 = Bit_Slice3_out1;

  assign CT22_out1 = y_6 == 4'b0110;



  assign And6_out1 = Logical_Operator4_out1 & CT22_out1;



  assign Switch15_out1 = (And6_out1 == 1'b0 ? Unit_Delay15_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch15_out1;
      end
    end



  assign AD0_CH6 = Unit_Delay15_out1;

  assign y_7 = Bit_Slice3_out1;

  assign CT23_out1 = y_7 == 4'b0111;



  assign And7_out1 = Logical_Operator4_out1 & CT23_out1;



  assign Switch16_out1 = (And7_out1 == 1'b0 ? Unit_Delay14_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch16_out1;
      end
    end



  assign AD0_CH7 = Unit_Delay14_out1;

  assign y_8 = Bit_Slice3_out1;

  assign CT24_out1 = y_8 == 4'b1000;



  assign And8_out1 = Logical_Operator4_out1 & CT24_out1;



  assign Switch18_out1 = (And8_out1 == 1'b0 ? Unit_Delay24_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay24_out1 <= Switch18_out1;
      end
    end



  assign AD1_CH0 = Unit_Delay24_out1;

  assign y_9 = Bit_Slice3_out1;

  assign CT25_out1 = y_9 == 4'b1001;



  assign And9_out1 = Logical_Operator4_out1 & CT25_out1;



  assign Switch25_out1 = (And9_out1 == 1'b0 ? Unit_Delay17_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch25_out1;
      end
    end



  assign AD1_CH1 = Unit_Delay17_out1;

  assign y_10 = Bit_Slice3_out1;

  assign CT26_out1 = y_10 == 4'b1010;



  assign And10_out1 = Logical_Operator4_out1 & CT26_out1;



  assign Switch19_out1 = (And10_out1 == 1'b0 ? Unit_Delay19_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch19_out1;
      end
    end



  assign AD1_CH2 = Unit_Delay19_out1;

  assign y_11 = Bit_Slice3_out1;

  assign CT27_out1 = y_11 == 4'b1011;



  assign And11_out1 = Logical_Operator4_out1 & CT27_out1;



  assign Switch20_out1 = (And11_out1 == 1'b0 ? Unit_Delay18_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch20_out1;
      end
    end



  assign AD1_CH3 = Unit_Delay18_out1;

  assign y_12 = Bit_Slice3_out1;

  assign CT28_out1 = y_12 == 4'b1100;



  assign And12_out1 = Logical_Operator4_out1 & CT28_out1;



  assign Switch21_out1 = (And12_out1 == 1'b0 ? Unit_Delay23_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch21_out1;
      end
    end



  assign AD1_CH4 = Unit_Delay23_out1;

  assign y_13 = Bit_Slice3_out1;

  assign CT29_out1 = y_13 == 4'b1101;



  assign And13_out1 = Logical_Operator4_out1 & CT29_out1;



  assign Switch24_out1 = (And13_out1 == 1'b0 ? Unit_Delay20_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch24_out1;
      end
    end



  assign AD1_CH5 = Unit_Delay20_out1;

  assign y_14 = Bit_Slice3_out1;

  assign CT30_out1 = y_14 == 4'b1110;



  assign And14_out1 = Logical_Operator4_out1 & CT30_out1;



  assign Switch22_out1 = (And14_out1 == 1'b0 ? Unit_Delay22_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch22_out1;
      end
    end



  assign AD1_CH6 = Unit_Delay22_out1;

  assign y_15 = Bit_Slice3_out1;

  assign CT31_out1 = y_15 == 4'b1111;



  assign And15_out1 = Logical_Operator4_out1 & CT31_out1;



  assign Switch23_out1 = (And15_out1 == 1'b0 ? Unit_Delay21_out1 :
              Unit_Delay25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 14'sb00000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch23_out1;
      end
    end



  assign AD1_CH7 = Unit_Delay21_out1;

  assign Switch39_out1 = (Pulse50x32Hz == 1'b0 ? 10'b0000000000 :
              10'b0001000110);



  always @(posedge g_clk)
    begin : Unit_Delay37_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1 <= 25'b0000000000000000000000000;
      end
      else begin
        Unit_Delay37_out1 <= Add5_out1;
      end
    end



  assign Add5_add_temp = ({22'b0, Switch39_out1}) + ({7'b0, Unit_Delay37_out1});
  assign Add5_out1 = Add5_add_temp[24:0];



  assign Relational_Operator2_relop1 = Add5_out1 < Unit_Delay37_out1;



  assign Logical_Operator10_out1 = Pulse50x32Hz & Relational_Operator2_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay38_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1 <= 1'b0;
      end
      else begin
        Unit_Delay38_out1 <= Logical_Operator10_out1;
      end
    end



  assign CT44_out1 = Unit_Delay2_out1 == 10'b0110011000;



  assign Logical_Operator9_out1 = Unit_Delay38_out1 & CT44_out1;



  assign CT43_out1 = Unit_Delay2_out1 == 10'b0110011000;



  assign Switch34_out1 = (CT43_out1 == 1'b0 ? 10'sb0000000000 :
              10'sb0000000001);



  assign Switch35_out1 = (Unit_Delay38_out1 == 1'b0 ? Switch34_out1 :
              10'sb1111111111);



  assign Switch36_out1 = (Logical_Operator9_out1 == 1'b0 ? Switch35_out1 :
              10'sb0000000000);



  assign Switch38_out1 = (CT46_out1 == 1'b0 ? Switch37_out1 :
              10'sb0000000101);



  always @(posedge g_clk)
    begin : Unit_Delay36_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1 <= 10'sb0000000000;
      end
      else begin
        Unit_Delay36_out1 <= Switch38_out1;
      end
    end



  assign Add4_1 = {{22{Switch36_out1[9]}}, Switch36_out1};
  assign Add4_2 = {{22{Unit_Delay36_out1[9]}}, Unit_Delay36_out1};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_out1 = Add4_add_temp[9:0];



  assign CT45_out1 = Add4_out1 <= 10'sb0000000000;



  assign Switch37_out1 = (CT45_out1 == 1'b0 ? Add4_out1 :
              10'sb0000000000);



  assign CT46_out1 = Switch37_out1 >= 10'sb0000000101;



  assign AD_Err = CT46_out1;

  assign ADErrCNT = Switch38_out1;

endmodule  // AD7607Drv_V11

