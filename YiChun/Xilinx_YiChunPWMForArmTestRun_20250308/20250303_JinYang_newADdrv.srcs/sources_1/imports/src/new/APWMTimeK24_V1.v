// -------------------------------------------------------------
// 
// File Name: D:\APWMTimeK24_V2\APWMTimeK24_V1.v
// Created: 2024-10-24 00:10:38
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: APWMTimeK24_V1
// Source Path: APWMTimeK24_V2/APWMTimeK24_V1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module APWMTimeK24_V1
          (
           g_clk,
           Rst_n,
           PWM1_in,
           PWM2_in,
           PWM3_in,
           PWM4_in,
           block_b8,
           M_b12,
           DeadTime_b8,
           CtlLoop_On,
           Dly_b8,
           Load,
           DisSen,
           PWM1_out,
           PWM2_out,
           PWM3_out,
           PWM4_out,
           PWM5_out,
           PWM6_out
          );



  input   g_clk;
  input   Rst_n;
  input   PWM1_in;
  input   PWM2_in;
  input   PWM3_in;
  input   PWM4_in;
  input   signed [7:0] block_b8;  // int8
  input   signed [11:0] M_b12;  // sfix12
  input   [7:0] DeadTime_b8;  // uint8
  input   CtlLoop_On;
  input   signed [7:0] Dly_b8;  // int8
  input   Load;
  input   DisSen;
  output  PWM1_out;
  output  PWM2_out;
  output  PWM3_out;
  output  PWM4_out;
  output  PWM5_out;
  output  PWM6_out;

  wire signed [11:0] Switch37_out1;  // sfix12
  reg signed [11:0] Unit_Delay16_out1;  // sfix12
  wire RO2_relop1;
  wire [7:0] D1_out1;  // uint8
  wire Dy7_relop1;
  wire [7:0] Add4_out1;  // uint8
  wire [7:0] Switch33_out1;  // uint8
  reg [7:0] Unit_Delay5_out1;  // uint8
  wire [7:0] Switch32_out1;  // uint8
  wire Logical_Operator6_out1;
  wire signed [9:0] Switch1_out1;  // sfix10
  wire signed [8:0] Add9_add_temp;  // sfix9
  wire signed [8:0] Add9_1;  // sfix9
  wire signed [8:0] Add9_2;  // sfix9
  wire signed [9:0] Add9_out1;  // sfix10
  wire Dy1_relop1;
  wire signed [9:0] Switch3_out1;  // sfix10
  wire signed [9:0] Switch2_out1;  // sfix10
  reg signed [9:0] Unit_Delay2_out1;  // sfix10
  wire signed [9:0] Add1_out1;  // sfix10
  wire CT5_out1;
  wire Switch5_out1;
  reg  Unit_Delay1_out1;
  wire Switch4_out1;
  wire [7:0] Constant42_out1_dtc;  // uint8
  wire Dy11_relop1;
  wire signed [7:0] Switch39_out1;  // int8
  reg [7:0] Unit_Delay17_out1;  // uint8
  wire signed [9:0] Add11_add_temp;  // sfix10
  wire signed [9:0] Add11_1;  // sfix10
  wire signed [9:0] Add11_2;  // sfix10
  wire [7:0] Add11_out1;  // uint8
  wire [7:0] Switch40_out1;  // uint8
  wire signed [8:0] Dy11_1_1;  // sfix9
  wire signed [8:0] Dy11_1_2;  // sfix9
  wire Logical_Operator1_out1;
  wire Logical_Operator4_out1;
  wire Logical_Operator3_out1;
  wire signed [7:0] Switch11_out1;  // int8
  wire Dy6_relop1;
  wire signed [7:0] Switch15_out1;  // int8
  wire signed [7:0] Switch14_out1;  // int8
  reg signed [7:0] Unit_Delay7_out1;  // int8
  wire signed [7:0] Add7_out1;  // int8
  wire CT1_out1;
  wire Switch34_out1;
  reg  Unit_Delay8_out1;
  wire Switch17_out1;
  wire Not1_out1;
  wire [7:0] D2_out1;  // uint8
  wire Dy3_relop1;
  wire [7:0] Add3_out1;  // uint8
  wire [7:0] Switch36_out1;  // uint8
  reg [7:0] Unit_Delay6_out1;  // uint8
  wire [7:0] Switch35_out1;  // uint8
  wire Logical_Operator5_out1;
  wire signed [9:0] Switch22_out1;  // sfix10
  wire Dy9_relop1;
  wire signed [9:0] Switch24_out1;  // sfix10
  wire signed [9:0] Switch23_out1;  // sfix10
  reg signed [9:0] Unit_Delay12_out1;  // sfix10
  wire signed [9:0] Add12_out1;  // sfix10
  wire CT3_out1;
  wire Switch26_out1;
  reg  Unit_Delay11_out1;
  wire Switch25_out1;
  wire [7:0] Constant36_out1_dtc;  // uint8
  wire Dy4_relop1;
  wire signed [7:0] Switch12_out1;  // int8
  reg [7:0] Unit_Delay15_out1;  // uint8
  wire signed [9:0] Add5_add_temp;  // sfix10
  wire signed [9:0] Add5_1;  // sfix10
  wire signed [9:0] Add5_2;  // sfix10
  wire [7:0] Add5_out1;  // uint8
  wire [7:0] Switch13_out1;  // uint8
  wire signed [8:0] Dy4_1_1;  // sfix9
  wire signed [8:0] Dy4_1_2;  // sfix9
  wire Logical_Operator9_out1;
  wire Logical_Operator10_out1;
  wire Logical_Operator7_out1;
  wire signed [7:0] Switch27_out1;  // int8
  wire Dy10_relop1;
  wire signed [7:0] Switch29_out1;  // int8
  wire signed [7:0] Switch28_out1;  // int8
  reg signed [7:0] Unit_Delay14_out1;  // int8
  wire signed [7:0] Add10_out1;  // int8
  wire CT4_out1;
  wire Switch31_out1;
  reg  Unit_Delay13_out1;
  wire Switch30_out1;
  wire Logical_Operator8_out1;
  wire Switch38_out1;
  wire Switch42_out1;
  wire signed [7:0] Switch16_out1;  // int8
  wire Dy8_relop1;
  wire signed [7:0] Switch19_out1;  // int8
  wire signed [7:0] Switch18_out1;  // int8
  reg signed [7:0] Unit_Delay9_out1;  // int8
  wire signed [7:0] Add8_out1;  // int8
  wire CT2_out1;
  wire Switch21_out1;
  reg  Unit_Delay10_out1;
  wire Switch20_out1;
  wire Logical_Operator12_out1;
  wire Switch41_out1;
  wire Switch43_out1;
  wire signed [7:0] Switch6_out1;  // int8
  wire Dy2_relop1;
  wire signed [7:0] Switch8_out1;  // int8
  wire signed [7:0] Switch7_out1;  // int8
  reg signed [7:0] Unit_Delay4_out1;  // int8
  wire signed [7:0] Add2_out1;  // int8
  wire CT6_out1;
  wire Switch10_out1;
  reg  Unit_Delay3_out1;
  wire Switch9_out1;

  // A1延时使能和提前关断
  // 
  // 1875
  // 1835
  // 
  // PWM6_in
  // 
  // PWM5_in
  // 
  // 慢动作
  // 
  // 快动作


  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay16_out1 <= Switch37_out1;
      end
    end



  assign Switch37_out1 = (Load == 1'b0 ? Unit_Delay16_out1 :
              M_b12);



  assign RO2_relop1 = Switch37_out1 > 12'sb000000000000;



  assign D1_out1 = {7'b0, RO2_relop1};



  assign Switch33_out1 = (Dy7_relop1 == 1'b0 ? Add4_out1 :
              DeadTime_b8);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch33_out1;
      end
    end



  assign Switch32_out1 = (RO2_relop1 == 1'b0 ? 8'b00000000 :
              Unit_Delay5_out1);



  assign Add4_out1 = D1_out1 + Switch32_out1;



  assign Dy7_relop1 = Add4_out1 > DeadTime_b8;



  assign Logical_Operator6_out1 = CtlLoop_On & Dy7_relop1;



  assign Switch1_out1 = (Logical_Operator6_out1 == 1'b0 ? 10'sb1111111111 :
              10'sb0000000001);



  assign Add9_1 = {block_b8[7], block_b8};
  assign Add9_2 = {Dly_b8[7], Dly_b8};
  assign Add9_add_temp = Add9_1 + Add9_2;
  assign Add9_out1 = {Add9_add_temp[8], Add9_add_temp};



  assign Switch2_out1 = (Dy1_relop1 == 1'b0 ? Switch3_out1 :
              Add9_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 10'sb0000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch2_out1;
      end
    end



  assign Add1_out1 = Switch1_out1 + Unit_Delay2_out1;



  assign CT5_out1 = Add1_out1 <= 10'sb0000000000;



  assign Switch3_out1 = (CT5_out1 == 1'b0 ? Add1_out1 :
              10'sb0000000000);



  assign Dy1_relop1 = Switch3_out1 > Add9_out1;



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch5_out1;
      end
    end



  assign Switch4_out1 = (CT5_out1 == 1'b0 ? Unit_Delay1_out1 :
              1'b0);



  assign Switch5_out1 = (Dy1_relop1 == 1'b0 ? Switch4_out1 :
              1'b1);



  assign Constant42_out1_dtc = 8'b00000000;



  assign Switch39_out1 = (Dy11_relop1 == 1'b0 ? 8'sb00000000 :
              8'sb00000001);



  assign Add11_1 = {2'b0, Unit_Delay17_out1};
  assign Add11_2 = {{2{Switch39_out1[7]}}, Switch39_out1};
  assign Add11_add_temp = Add11_1 + Add11_2;
  assign Add11_out1 = Add11_add_temp[7:0];



  assign Switch40_out1 = (Switch5_out1 == 1'b0 ? Constant42_out1_dtc :
              Add11_out1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch40_out1;
      end
    end



  assign Dy11_1_1 = {1'b0, Unit_Delay17_out1};
  assign Dy11_1_2 = {Dly_b8[7], Dly_b8};
  assign Dy11_relop1 = Dy11_1_1 < Dy11_1_2;



  assign Logical_Operator1_out1 =  ~ Dy11_relop1;



  assign Logical_Operator4_out1 = Switch5_out1 & Logical_Operator1_out1;



  assign Logical_Operator3_out1 = PWM1_in & (Logical_Operator4_out1 & Logical_Operator6_out1);



  assign Switch11_out1 = (Logical_Operator3_out1 == 1'b0 ? 8'sb11111111 :
              8'sb00000001);



  assign Switch14_out1 = (Dy6_relop1 == 1'b0 ? Switch15_out1 :
              block_b8);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 8'sb00000000;
      end
      else begin
        Unit_Delay7_out1 <= Switch14_out1;
      end
    end



  assign Add7_out1 = Switch11_out1 + Unit_Delay7_out1;



  assign CT1_out1 = Add7_out1 <= 8'sb00000000;



  assign Switch15_out1 = (CT1_out1 == 1'b0 ? Add7_out1 :
              8'sb00000000);



  assign Dy6_relop1 = Switch15_out1 > block_b8;



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 1'b0;
      end
      else begin
        Unit_Delay8_out1 <= Switch34_out1;
      end
    end



  assign Switch17_out1 = (CT1_out1 == 1'b0 ? Unit_Delay8_out1 :
              1'b0);



  assign Switch34_out1 = (Dy6_relop1 == 1'b0 ? Switch17_out1 :
              1'b1);



  assign PWM1_out = Switch34_out1;

  assign PWM2_out = Switch5_out1;

  assign Not1_out1 =  ~ RO2_relop1;



  assign D2_out1 = {7'b0, Not1_out1};



  assign Switch36_out1 = (Dy3_relop1 == 1'b0 ? Add3_out1 :
              DeadTime_b8);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch36_out1;
      end
    end



  assign Switch35_out1 = (Not1_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay6_out1);



  assign Add3_out1 = D2_out1 + Switch35_out1;



  assign Dy3_relop1 = Add3_out1 > DeadTime_b8;



  assign Logical_Operator5_out1 = CtlLoop_On & Dy3_relop1;



  assign Switch22_out1 = (Logical_Operator5_out1 == 1'b0 ? 10'sb1111111111 :
              10'sb0000000001);



  assign Switch23_out1 = (Dy9_relop1 == 1'b0 ? Switch24_out1 :
              Add9_out1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 10'sb0000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch23_out1;
      end
    end



  assign Add12_out1 = Switch22_out1 + Unit_Delay12_out1;



  assign CT3_out1 = Add12_out1 <= 10'sb0000000000;



  assign Switch24_out1 = (CT3_out1 == 1'b0 ? Add12_out1 :
              10'sb0000000000);



  assign Dy9_relop1 = Switch24_out1 > Add9_out1;



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 1'b0;
      end
      else begin
        Unit_Delay11_out1 <= Switch26_out1;
      end
    end



  assign Switch25_out1 = (CT3_out1 == 1'b0 ? Unit_Delay11_out1 :
              1'b0);



  assign Switch26_out1 = (Dy9_relop1 == 1'b0 ? Switch25_out1 :
              1'b1);



  assign PWM3_out = Switch26_out1;

  assign Constant36_out1_dtc = 8'b00000000;



  assign Switch12_out1 = (Dy4_relop1 == 1'b0 ? 8'sb00000000 :
              8'sb00000001);



  assign Add5_1 = {2'b0, Unit_Delay15_out1};
  assign Add5_2 = {{2{Switch12_out1[7]}}, Switch12_out1};
  assign Add5_add_temp = Add5_1 + Add5_2;
  assign Add5_out1 = Add5_add_temp[7:0];



  assign Switch13_out1 = (Switch26_out1 == 1'b0 ? Constant36_out1_dtc :
              Add5_out1);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch13_out1;
      end
    end



  assign Dy4_1_1 = {1'b0, Unit_Delay15_out1};
  assign Dy4_1_2 = {Dly_b8[7], Dly_b8};
  assign Dy4_relop1 = Dy4_1_1 < Dy4_1_2;



  assign Logical_Operator9_out1 =  ~ Dy4_relop1;



  assign Logical_Operator10_out1 = Switch26_out1 & Logical_Operator9_out1;



  assign Logical_Operator7_out1 = PWM4_in & (Logical_Operator10_out1 & Logical_Operator5_out1);



  assign Switch27_out1 = (Logical_Operator7_out1 == 1'b0 ? 8'sb11111111 :
              8'sb00000001);



  assign Switch28_out1 = (Dy10_relop1 == 1'b0 ? Switch29_out1 :
              block_b8);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 8'sb00000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch28_out1;
      end
    end



  assign Add10_out1 = Switch27_out1 + Unit_Delay14_out1;



  assign CT4_out1 = Add10_out1 <= 8'sb00000000;



  assign Switch29_out1 = (CT4_out1 == 1'b0 ? Add10_out1 :
              8'sb00000000);



  assign Dy10_relop1 = Switch29_out1 > block_b8;



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 1'b0;
      end
      else begin
        Unit_Delay13_out1 <= Switch31_out1;
      end
    end



  assign Switch30_out1 = (CT4_out1 == 1'b0 ? Unit_Delay13_out1 :
              1'b0);



  assign Switch31_out1 = (Dy10_relop1 == 1'b0 ? Switch30_out1 :
              1'b1);



  assign PWM4_out = Switch31_out1;

  assign Logical_Operator8_out1 = PWM3_in & Logical_Operator6_out1;



  assign Switch38_out1 = (RO2_relop1 == 1'b0 ? Logical_Operator5_out1 :
              Logical_Operator8_out1);



  assign Switch42_out1 = (DisSen == 1'b0 ? Switch38_out1 :
              Logical_Operator8_out1);



  assign Switch16_out1 = (Switch42_out1 == 1'b0 ? 8'sb11111111 :
              8'sb00000001);



  assign Switch18_out1 = (Dy8_relop1 == 1'b0 ? Switch19_out1 :
              block_b8);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 8'sb00000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch18_out1;
      end
    end



  assign Add8_out1 = Switch16_out1 + Unit_Delay9_out1;



  assign CT2_out1 = Add8_out1 <= 8'sb00000000;



  assign Switch19_out1 = (CT2_out1 == 1'b0 ? Add8_out1 :
              8'sb00000000);



  assign Dy8_relop1 = Switch19_out1 > block_b8;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 1'b0;
      end
      else begin
        Unit_Delay10_out1 <= Switch21_out1;
      end
    end



  assign Switch20_out1 = (CT2_out1 == 1'b0 ? Unit_Delay10_out1 :
              1'b0);



  assign Switch21_out1 = (Dy8_relop1 == 1'b0 ? Switch20_out1 :
              1'b1);



  assign PWM5_out = Switch21_out1;

  assign Logical_Operator12_out1 = PWM2_in & Logical_Operator5_out1;



  assign Switch41_out1 = (RO2_relop1 == 1'b0 ? Logical_Operator12_out1 :
              Logical_Operator6_out1);



  assign Switch43_out1 = (DisSen == 1'b0 ? Switch41_out1 :
              Logical_Operator12_out1);



  assign Switch6_out1 = (Switch43_out1 == 1'b0 ? 8'sb11111111 :
              8'sb00000001);



  assign Switch7_out1 = (Dy2_relop1 == 1'b0 ? Switch8_out1 :
              block_b8);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 8'sb00000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch7_out1;
      end
    end



  assign Add2_out1 = Switch6_out1 + Unit_Delay4_out1;



  assign CT6_out1 = Add2_out1 <= 8'sb00000000;



  assign Switch8_out1 = (CT6_out1 == 1'b0 ? Add2_out1 :
              8'sb00000000);



  assign Dy2_relop1 = Switch8_out1 > block_b8;



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 1'b0;
      end
      else begin
        Unit_Delay3_out1 <= Switch10_out1;
      end
    end



  assign Switch9_out1 = (CT6_out1 == 1'b0 ? Unit_Delay3_out1 :
              1'b0);



  assign Switch10_out1 = (Dy2_relop1 == 1'b0 ? Switch9_out1 :
              1'b1);



  assign PWM6_out = Switch10_out1;



endmodule  // APWMTimeK24_V1

