// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\AnalogMonitorWarn_V10\AnalogMonitorWarn_V10.v
// Created: 2025-02-10 21:10:58
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: AnalogMonitorWarn_V10
// Source Path: AnalogMonitorWarn_V10/AnalogMonitorWarn_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module AnalogMonitorWarn_V10
          (
           g_clk,
           Rst_n,
           Pulse_4096Hz,
           Monitor_Reset,
           In0,
           Reference0,
           Delay0,
           In1,
           Reference1,
           Delay1,
           In2,
           Reference2,
           Delay2,
           In3,
           Reference3,
           Delay3,
           In4,
           Reference4,
           Delay4,
           In5,
           Reference5,
           Delay5,
           In6,
           Reference6,
           Delay6,
           In7,
           Reference7,
           Delay7,
           In8,
           Reference8,
           Delay8,
           In9,
           Reference9,
           Delay9,
           In10,
           Reference10,
           Delay10,
           In11,
           Reference11,
           Delay11,
           In12,
           Reference12,
           Delay12,
           In13,
           Reference13,
           Delay13,
           In14,
           Reference14,
           Delay14,
           In15,
           Reference15,
           Delay15,
           In16,
           Reference16,
           Delay16,
           In17,
           Reference17,
           Delay17,
           In18,
           In19,
           In20,
           In21,
           In22,
           In23,
           Reference18,
           Delay18,
           Reference19,
           Delay19,
           Reference20,
           Delay20,
           Reference21,
           Delay21,
           Reference22,
           Delay22,
           Reference23,
           Delay23,
           Warn0,
           Warn1,
           Warn2,
           Warn3,
           Warn4,
           Warn5,
           Warn6,
           Warn7,
           Warn8,
           Warn9,
           Warn10,
           Warn11,
           Warn12,
           Warn13,
           Warn14,
           Warn15,
           Warn16,
           Warn17,
           Warn18,
           Warn19,
           Warn20,
           Warn21,
           Warn22,
           Warn23,
           MonitorOut0,
           MonitorOut1,
           MonitorOut2,
           MonitorOut3,
           MonitorOut4,
           MonitorOut5,
           MonitorOut6,
           MonitorOut7,
           MonitorOut8,
           MonitorOut9,
           MonitorOut10,
           MonitorOut11,
           MonitorOut12,
           MonitorOut13,
           MonitorOut14,
           MonitorOut15,
           MonitorOut16,
           MonitorOut17,
           MonitorOut18,
           MonitorOut19,
           MonitorOut20,
           MonitorOut21,
           MonitorOut22,
           MonitorOut23,
           Warn_Out0,
           Warn_Out1,
           Warn_Out2,
           Warn_Out3,
           Warn_Out4,
           Warn_Out5,
           Warn_Out6,
           Warn_Out7,
           Warn_Out8,
           Warn_Out9,
           Warn_Out10,
           Warn_Out11,
           Warn_Out12,
           Warn_Out13,
           Warn_Out14,
           Warn_Out15,
           Warn_Out16,
           Warn_Out17,
           Warn_Out18,
           Warn_Out19,
           Warn_Out20,
           Warn_Out021,
           Warn_Out22,
           Warn_Out23
          );



  input   g_clk;
  input   Rst_n;
  input   Pulse_4096Hz;
  input   Monitor_Reset;
  input   signed [11:0] In0;  // sfix12
  input   signed [11:0] Reference0;  // sfix12
  input   signed [15:0] Delay0;  // int16
  input   signed [11:0] In1;  // sfix12
  input   signed [11:0] Reference1;  // sfix12
  input   signed [15:0] Delay1;  // int16
  input   signed [11:0] In2;  // sfix12
  input   signed [11:0] Reference2;  // sfix12
  input   signed [15:0] Delay2;  // int16
  input   signed [11:0] In3;  // sfix12
  input   signed [11:0] Reference3;  // sfix12
  input   signed [15:0] Delay3;  // int16
  input   signed [11:0] In4;  // sfix12
  input   signed [11:0] Reference4;  // sfix12
  input   signed [15:0] Delay4;  // int16
  input   signed [11:0] In5;  // sfix12
  input   signed [11:0] Reference5;  // sfix12
  input   signed [15:0] Delay5;  // int16
  input   signed [11:0] In6;  // sfix12
  input   signed [11:0] Reference6;  // sfix12
  input   signed [15:0] Delay6;  // int16
  input   signed [11:0] In7;  // sfix12
  input   signed [11:0] Reference7;  // sfix12
  input   signed [15:0] Delay7;  // int16
  input   signed [11:0] In8;  // sfix12
  input   signed [11:0] Reference8;  // sfix12
  input   signed [15:0] Delay8;  // int16
  input   signed [11:0] In9;  // sfix12
  input   signed [11:0] Reference9;  // sfix12
  input   signed [15:0] Delay9;  // int16
  input   signed [11:0] In10;  // sfix12
  input   signed [11:0] Reference10;  // sfix12
  input   signed [15:0] Delay10;  // int16
  input   signed [11:0] In11;  // sfix12
  input   signed [11:0] Reference11;  // sfix12
  input   signed [15:0] Delay11;  // int16
  input   signed [11:0] In12;  // sfix12
  input   signed [11:0] Reference12;  // sfix12
  input   signed [15:0] Delay12;  // int16
  input   signed [11:0] In13;  // sfix12
  input   signed [11:0] Reference13;  // sfix12
  input   signed [15:0] Delay13;  // int16
  input   signed [11:0] In14;  // sfix12
  input   signed [11:0] Reference14;  // sfix12
  input   signed [15:0] Delay14;  // int16
  input   signed [11:0] In15;  // sfix12
  input   signed [11:0] Reference15;  // sfix12
  input   signed [15:0] Delay15;  // int16
  input   signed [11:0] In16;  // sfix12
  input   signed [11:0] Reference16;  // sfix12
  input   signed [15:0] Delay16;  // int16
  input   signed [11:0] In17;  // sfix12
  input   signed [11:0] Reference17;  // sfix12
  input   signed [15:0] Delay17;  // int16
  input   signed [11:0] In18;  // sfix12
  input   signed [11:0] In19;  // sfix12
  input   signed [11:0] In20;  // sfix12
  input   signed [11:0] In21;  // sfix12
  input   signed [11:0] In22;  // sfix12
  input   signed [11:0] In23;  // sfix12
  input   signed [11:0] Reference18;  // sfix12
  input   signed [15:0] Delay18;  // int16
  input   signed [11:0] Reference19;  // sfix12
  input   signed [15:0] Delay19;  // int16
  input   signed [11:0] Reference20;  // sfix12
  input   signed [15:0] Delay20;  // int16
  input   signed [11:0] Reference21;  // sfix12
  input   signed [15:0] Delay21;  // int16
  input   signed [11:0] Reference22;  // sfix12
  input   signed [15:0] Delay22;  // int16
  input   signed [11:0] Reference23;  // sfix12
  input   signed [15:0] Delay23;  // int16
  input   signed [15:0] Warn0;  // int16
  input   signed [15:0] Warn1;  // int16
  input   signed [15:0] Warn2;  // int16
  input   signed [15:0] Warn3;  // int16
  input   signed [15:0] Warn4;  // int16
  input   signed [15:0] Warn5;  // int16
  input   signed [15:0] Warn6;  // int16
  input   signed [15:0] Warn7;  // int16
  input   signed [15:0] Warn8;  // int16
  input   signed [15:0] Warn9;  // int16
  input   signed [15:0] Warn10;  // int16
  input   signed [15:0] Warn11;  // int16
  input   signed [15:0] Warn12;  // int16
  input   signed [15:0] Warn13;  // int16
  input   signed [15:0] Warn14;  // int16
  input   signed [15:0] Warn15;  // int16
  input   signed [15:0] Warn16;  // int16
  input   signed [15:0] Warn17;  // int16
  input   signed [15:0] Warn18;  // int16
  input   signed [15:0] Warn19;  // int16
  input   signed [15:0] Warn20;  // int16
  input   signed [15:0] Warn21;  // int16
  input   signed [15:0] Warn22;  // int16
  input   signed [15:0] Warn23;  // int16
  output  MonitorOut0;
  output  MonitorOut1;
  output  MonitorOut2;
  output  MonitorOut3;
  output  MonitorOut4;
  output  MonitorOut5;
  output  MonitorOut6;
  output  MonitorOut7;
  output  MonitorOut8;
  output  MonitorOut9;
  output  MonitorOut10;
  output  MonitorOut11;
  output  MonitorOut12;
  output  MonitorOut13;
  output  MonitorOut14;
  output  MonitorOut15;
  output  MonitorOut16;
  output  MonitorOut17;
  output  MonitorOut18;
  output  MonitorOut19;
  output  MonitorOut20;
  output  MonitorOut21;
  output  MonitorOut22;
  output  MonitorOut23;
  output  Warn_Out0;
  output  Warn_Out1;
  output  Warn_Out2;
  output  Warn_Out3;
  output  Warn_Out4;
  output  Warn_Out5;
  output  Warn_Out6;
  output  Warn_Out7;
  output  Warn_Out8;
  output  Warn_Out9;
  output  Warn_Out10;
  output  Warn_Out11;
  output  Warn_Out12;
  output  Warn_Out13;
  output  Warn_Out14;
  output  Warn_Out15;
  output  Warn_Out16;
  output  Warn_Out17;
  output  Warn_Out18;
  output  Warn_Out19;
  output  Warn_Out20;
  output  Warn_Out021;
  output  Warn_Out22;
  output  Warn_Out23;

  reg [5:0] Unit_Delay43_out1;  // ufix6
  wire [5:0] Add1_out1;  // ufix6
  wire CT1_out1;
  reg  Unit_Delay4_out1;
  wire Switch4_out1;
  wire Switch1_out1;
  wire Or2_out1;
  wire Switch5_out1;
  reg  Unit_Delay6_out1;
  wire CT207_out1;
  reg  Unit_Delay121_out1;
  wire Switch308_out1;
  wire Switch307_out1;
  wire Or1_out1;
  wire Switch309_out1;
  reg  Unit_Delay122_out1;
  reg signed [11:0] Case2_out1;  // sfix12
  wire signed [11:0] Out0;  // sfix12
  reg signed [11:0] Case1_out1;  // sfix12
  wire signed [11:0] Out0_1;  // sfix12
  wire Dy1_relop1;
  wire signed [15:0] Switch11_out1;  // int16
  wire signed [15:0] Switch3_out1;  // int16
  reg signed [15:0] Case3_out1;  // int16
  wire signed [15:0] Out0_2;  // int16
  wire Constant3_out1;
  wire CT10_out1;
  wire signed [15:0] Switch2_out1;  // int16
  wire signed [15:0] Switch28_out1;  // int16
  wire Dy2_relop1;
  wire signed [15:0] Switch27_out1;  // int16
  wire signed [15:0] Simple_Dual_Port_RAM_out1;  // int16
  wire signed [15:0] Add3_out1;  // int16
  wire Constant4_out1;
  wire Data_Type_Conversion_out1;
  wire Simple_Dual_Port_RAM1_out1;
  wire Switch29_out1;
  wire Switch30_out1;
  reg  Case6_out24;
  reg  Unit_Delay65_out1;
  wire Data_Type_S72_out1;
  reg  Case6_out23;
  reg  Unit_Delay54_out1;
  wire Data_Type_S71_out1;
  reg  Case6_out22;
  reg  Unit_Delay64_out1;
  wire Data_Type_S70_out1;
  reg  Case6_out21;
  reg  Unit_Delay53_out1;
  wire Data_Type_S69_out1;
  reg  Case6_out20;
  reg  Unit_Delay59_out1;
  wire Data_Type_S68_out1;
  reg  Case6_out19;
  reg  Unit_Delay62_out1;
  wire Data_Type_S67_out1;
  reg  Case6_out18;
  reg  Unit_Delay58_out1;
  wire Data_Type_S66_out1;
  reg  Case6_out17;
  reg  Unit_Delay61_out1;
  wire Data_Type_S65_out1;
  reg  Case6_out16;
  reg  Unit_Delay55_out1;
  wire Data_Type_S64_out1;
  reg  Case6_out15;
  reg  Unit_Delay57_out1;
  wire Data_Type_S63_out1;
  reg  Case6_out14;
  reg  Unit_Delay52_out1;
  wire Data_Type_S62_out1;
  reg  Case6_out13;
  reg  Unit_Delay56_out1;
  wire Data_Type_S61_out1;
  reg  Case6_out12;
  reg  Unit_Delay99_out1;
  wire Data_Type_S60_out1;
  reg  Case6_out11;
  reg  Unit_Delay51_out1;
  wire Data_Type_S59_out1;
  reg  Case6_out10;
  reg  Unit_Delay98_out1;
  wire Data_Type_S58_out1;
  reg  Case6_out9;
  reg  Unit_Delay50_out1;
  wire Data_Type_S57_out1;
  reg  Case6_out8;
  reg  Unit_Delay95_out1;
  wire Data_Type_S56_out1;
  reg  Case6_out7;
  reg  Unit_Delay97_out1;
  wire Data_Type_S55_out1;
  reg  Case6_out6;
  reg  Unit_Delay84_out1;
  wire Data_Type_S54_out1;
  reg  Case6_out5;
  reg  Unit_Delay96_out1;
  wire Data_Type_S53_out1;
  reg  Case6_out4;
  reg  Unit_Delay60_out1;
  wire Data_Type_S52_out1;
  reg  Case6_out3;
  reg  Unit_Delay72_out1;
  wire Data_Type_S51_out1;
  reg  Case6_out2;
  reg  Unit_Delay48_out1;
  wire Data_Type_S50_out1;
  wire Data_Type_S49_out1;
  reg  Case6_out1;
  reg  Unit_Delay63_out1;
  reg signed [15:0] Case4_out1;  // int16
  wire signed [15:0] Out0_3;  // int16
  wire Dy15_relop1;
  wire Constant13_out1;
  wire Data_Type_Conversion1_out1;
  wire Simple_Dual_Port_RAM2_out1;
  wire Switch6_out1;
  wire Switch7_out1;
  reg  Case5_out24;
  reg  Unit_Delay19_out1;
  wire Data_Type_S24_out1;
  reg  Case5_out23;
  reg  Unit_Delay8_out1;
  wire Data_Type_S23_out1;
  reg  Case5_out22;
  reg  Unit_Delay18_out1;
  wire Data_Type_S22_out1;
  reg  Case5_out21;
  reg  Unit_Delay7_out1;
  wire Data_Type_S21_out1;
  reg  Case5_out20;
  reg  Unit_Delay13_out1;
  wire Data_Type_S20_out1;
  reg  Case5_out19;
  reg  Unit_Delay16_out1;
  wire Data_Type_S19_out1;
  reg  Case5_out18;
  reg  Unit_Delay12_out1;
  wire Data_Type_S18_out1;
  reg  Case5_out17;
  reg  Unit_Delay15_out1;
  wire Data_Type_S17_out1;
  reg  Case5_out16;
  reg  Unit_Delay9_out1;
  wire Data_Type_S16_out1;
  reg  Case5_out15;
  reg  Unit_Delay11_out1;
  wire Data_Type_S15_out1;
  reg  Case5_out14;
  reg  Unit_Delay5_out1;
  wire Data_Type_S14_out1;
  reg  Case5_out13;
  reg  Unit_Delay10_out1;
  wire Data_Type_S13_out1;
  reg  Case5_out12;
  reg  Unit_Delay26_out1;
  wire Data_Type_S12_out1;
  reg  Case5_out11;
  reg  Unit_Delay3_out1;
  wire Data_Type_S11_out1;
  reg  Case5_out9;
  reg  Unit_Delay2_out1;
  wire Data_Type_S9_out1;
  reg  Case5_out8;
  reg  Unit_Delay22_out1;
  wire Data_Type_S8_out1;
  reg  Case5_out7;
  reg  Unit_Delay24_out1;
  wire Data_Type_S7_out1;
  reg  Case5_out6;
  reg  Unit_Delay21_out1;
  wire Data_Type_S6_out1;
  reg  Case5_out5;
  reg  Unit_Delay23_out1;
  wire Data_Type_S5_out1;
  reg  Case5_out4;
  reg  Unit_Delay14_out1;
  wire Data_Type_S4_out1;
  reg  Case5_out3;
  reg  Unit_Delay20_out1;
  wire Data_Type_S3_out1;
  reg  Case5_out2;
  reg  Unit_Delay1_out1;
  wire Data_Type_S2_out1;
  wire Data_Type_S1_out1;
  reg  Case5_out1;
  reg  Case5_out10;
  reg  Unit_Delay17_out1;

  // 0=-1


  assign Add1_out1 = 6'b000001 + Unit_Delay43_out1;



  always @(posedge g_clk)
    begin : Unit_Delay43_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1 <= 6'b000000;
      end
      else begin
        Unit_Delay43_out1 <= Add1_out1;
      end
    end



  assign CT1_out1 = Unit_Delay43_out1 == 6'b000000;



  assign Switch4_out1 = (Monitor_Reset == 1'b0 ? Unit_Delay4_out1 :
              1'b1);



  assign Switch1_out1 = (CT1_out1 == 1'b0 ? Switch4_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 1'b0;
      end
      else begin
        Unit_Delay4_out1 <= Switch1_out1;
      end
    end



  assign Or2_out1 = Monitor_Reset | Unit_Delay4_out1;



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 1'b0;
      end
      else begin
        Unit_Delay6_out1 <= Switch5_out1;
      end
    end



  assign Switch5_out1 = (CT1_out1 == 1'b0 ? Unit_Delay6_out1 :
              Or2_out1);



  assign CT207_out1 = Unit_Delay43_out1 == 6'b000000;



  assign Switch308_out1 = (Pulse_4096Hz == 1'b0 ? Unit_Delay121_out1 :
              1'b1);



  assign Switch307_out1 = (CT207_out1 == 1'b0 ? Switch308_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay121_process
      if (Rst_n == 1'b0) begin
        Unit_Delay121_out1 <= 1'b0;
      end
      else begin
        Unit_Delay121_out1 <= Switch307_out1;
      end
    end



  assign Or1_out1 = Pulse_4096Hz | Unit_Delay121_out1;



  always @(posedge g_clk)
    begin : Unit_Delay122_process
      if (Rst_n == 1'b0) begin
        Unit_Delay122_out1 <= 1'b0;
      end
      else begin
        Unit_Delay122_out1 <= Switch309_out1;
      end
    end



  assign Switch309_out1 = (CT207_out1 == 1'b0 ? Unit_Delay122_out1 :
              Or1_out1);



  always @(Unit_Delay43_out1, In0, In1, In2, In3, In4, In5, In6, In7, In8, In9, In10,
       In11, In12, In13, In14, In15, In16, In17, In18, In19, In20, In21, In22,
       In23) begin
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case2_out1 = In0;
        end
      6'b000001 :
        begin
          Case2_out1 = In1;
        end
      6'b000010 :
        begin
          Case2_out1 = In2;
        end
      6'b000011 :
        begin
          Case2_out1 = In3;
        end
      6'b000100 :
        begin
          Case2_out1 = In4;
        end
      6'b000101 :
        begin
          Case2_out1 = In5;
        end
      6'b000110 :
        begin
          Case2_out1 = In6;
        end
      6'b000111 :
        begin
          Case2_out1 = In7;
        end
      6'b001000 :
        begin
          Case2_out1 = In8;
        end
      6'b001001 :
        begin
          Case2_out1 = In9;
        end
      6'b001010 :
        begin
          Case2_out1 = In10;
        end
      6'b001011 :
        begin
          Case2_out1 = In11;
        end
      6'b001100 :
        begin
          Case2_out1 = In12;
        end
      6'b001101 :
        begin
          Case2_out1 = In13;
        end
      6'b001110 :
        begin
          Case2_out1 = In14;
        end
      6'b001111 :
        begin
          Case2_out1 = In15;
        end
      6'b010000 :
        begin
          Case2_out1 = In16;
        end
      6'b010001 :
        begin
          Case2_out1 = In17;
        end
      6'b010010 :
        begin
          Case2_out1 = In18;
        end
      6'b010011 :
        begin
          Case2_out1 = In19;
        end
      6'b010100 :
        begin
          Case2_out1 = In20;
        end
      6'b010101 :
        begin
          Case2_out1 = In21;
        end
      6'b010110 :
        begin
          Case2_out1 = In22;
        end
      6'b010111 :
        begin
          Case2_out1 = In23;
        end
      default :
        begin
          Case2_out1 = 12'sb000000000000;
        end
    endcase
  end



  assign Out0 = Case2_out1;

  always @(Unit_Delay43_out1, Reference0, Reference1, Reference2, Reference3, Reference4,
       Reference5, Reference6, Reference7, Reference8, Reference9, Reference10,
       Reference11, Reference12, Reference13, Reference14, Reference15,
       Reference16, Reference17, Reference18, Reference19, Reference20,
       Reference21, Reference22, Reference23) begin
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case1_out1 = Reference0;
        end
      6'b000001 :
        begin
          Case1_out1 = Reference1;
        end
      6'b000010 :
        begin
          Case1_out1 = Reference2;
        end
      6'b000011 :
        begin
          Case1_out1 = Reference3;
        end
      6'b000100 :
        begin
          Case1_out1 = Reference4;
        end
      6'b000101 :
        begin
          Case1_out1 = Reference5;
        end
      6'b000110 :
        begin
          Case1_out1 = Reference6;
        end
      6'b000111 :
        begin
          Case1_out1 = Reference7;
        end
      6'b001000 :
        begin
          Case1_out1 = Reference8;
        end
      6'b001001 :
        begin
          Case1_out1 = Reference9;
        end
      6'b001010 :
        begin
          Case1_out1 = Reference10;
        end
      6'b001011 :
        begin
          Case1_out1 = Reference11;
        end
      6'b001100 :
        begin
          Case1_out1 = Reference12;
        end
      6'b001101 :
        begin
          Case1_out1 = Reference13;
        end
      6'b001110 :
        begin
          Case1_out1 = Reference14;
        end
      6'b001111 :
        begin
          Case1_out1 = Reference15;
        end
      6'b010000 :
        begin
          Case1_out1 = Reference16;
        end
      6'b010001 :
        begin
          Case1_out1 = Reference17;
        end
      6'b010010 :
        begin
          Case1_out1 = Reference18;
        end
      6'b010011 :
        begin
          Case1_out1 = Reference19;
        end
      6'b010100 :
        begin
          Case1_out1 = Reference20;
        end
      6'b010101 :
        begin
          Case1_out1 = Reference21;
        end
      6'b010110 :
        begin
          Case1_out1 = Reference22;
        end
      6'b010111 :
        begin
          Case1_out1 = Reference23;
        end
      default :
        begin
          Case1_out1 = 12'sb000000000000;
        end
    endcase
  end



  assign Out0_1 = Case1_out1;

  assign Dy1_relop1 = Out0 > Out0_1;



  assign Switch11_out1 = (Dy1_relop1 == 1'b0 ? 16'sb1111111111111111 :
              16'sb0000000000000001);



  assign Switch3_out1 = (Switch309_out1 == 1'b0 ? 16'sb0000000000000000 :
              Switch11_out1);



  always @(Unit_Delay43_out1, Delay0, Delay1, Delay2, Delay3, Delay4, Delay5, Delay6,
       Delay7, Delay8, Delay9, Delay10, Delay11, Delay12, Delay13, Delay14,
       Delay15, Delay16, Delay17, Delay18, Delay19, Delay20, Delay21, Delay22,
       Delay23) begin
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case3_out1 = Delay0;
        end
      6'b000001 :
        begin
          Case3_out1 = Delay1;
        end
      6'b000010 :
        begin
          Case3_out1 = Delay2;
        end
      6'b000011 :
        begin
          Case3_out1 = Delay3;
        end
      6'b000100 :
        begin
          Case3_out1 = Delay4;
        end
      6'b000101 :
        begin
          Case3_out1 = Delay5;
        end
      6'b000110 :
        begin
          Case3_out1 = Delay6;
        end
      6'b000111 :
        begin
          Case3_out1 = Delay7;
        end
      6'b001000 :
        begin
          Case3_out1 = Delay8;
        end
      6'b001001 :
        begin
          Case3_out1 = Delay9;
        end
      6'b001010 :
        begin
          Case3_out1 = Delay10;
        end
      6'b001011 :
        begin
          Case3_out1 = Delay11;
        end
      6'b001100 :
        begin
          Case3_out1 = Delay12;
        end
      6'b001101 :
        begin
          Case3_out1 = Delay13;
        end
      6'b001110 :
        begin
          Case3_out1 = Delay14;
        end
      6'b001111 :
        begin
          Case3_out1 = Delay15;
        end
      6'b010000 :
        begin
          Case3_out1 = Delay16;
        end
      6'b010001 :
        begin
          Case3_out1 = Delay17;
        end
      6'b010010 :
        begin
          Case3_out1 = Delay18;
        end
      6'b010011 :
        begin
          Case3_out1 = Delay19;
        end
      6'b010100 :
        begin
          Case3_out1 = Delay20;
        end
      6'b010101 :
        begin
          Case3_out1 = Delay21;
        end
      6'b010110 :
        begin
          Case3_out1 = Delay22;
        end
      6'b010111 :
        begin
          Case3_out1 = Delay23;
        end
      default :
        begin
          Case3_out1 = 16'sd0;
        end
    endcase
  end



  assign Out0_2 = Case3_out1;

  assign Constant3_out1 = 1'b1;



  assign Switch28_out1 = (CT10_out1 == 1'b0 ? Switch2_out1 :
              16'sb0000000000000000);



  assign Dy2_relop1 = Switch28_out1 >= Out0_2;



  assign Switch27_out1 = (Dy2_relop1 == 1'b0 ? Switch28_out1 :
              Out0_2);



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(6),
                                        .DataWidth(16)
                                        )
                                    u_Simple_Dual_Port_RAM   (.g_clk(g_clk),
                                                              .wr_din(Switch27_out1),
                                                              .wr_addr(Unit_Delay43_out1),
                                                              .wr_en(Constant3_out1),
                                                              .rd_addr(Add1_out1),
                                                              .rd_dout(Simple_Dual_Port_RAM_out1)
                                                              );

  assign Add3_out1 = Switch3_out1 + Simple_Dual_Port_RAM_out1;



  assign Switch2_out1 = (Switch5_out1 == 1'b0 ? Add3_out1 :
              16'sb1111111111111111);



  assign CT10_out1 = Switch2_out1 <= 16'sb0000000000000000;



  assign Constant4_out1 = 1'b1;



  SimpDualPortRAM_Wrapper_singlebit   #  (.AddrWidth(6),
                                          .DataWidth(1)
                                          )
                                      u_Simple_Dual_Port_RAM1   (.g_clk(g_clk),
                                                                 .wr_din(Data_Type_Conversion_out1),
                                                                 .wr_addr(Unit_Delay43_out1),
                                                                 .wr_en(Constant4_out1),
                                                                 .rd_addr(Add1_out1),
                                                                 .rd_dout(Simple_Dual_Port_RAM1_out1)
                                                                 );

  assign Switch29_out1 = (Dy2_relop1 == 1'b0 ? Simple_Dual_Port_RAM1_out1 :
              1'b1);



  assign Switch30_out1 = (CT10_out1 == 1'b0 ? Switch29_out1 :
              1'b0);



  assign Data_Type_Conversion_out1 = (Switch30_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay65_process
      if (Rst_n == 1'b0) begin
        Unit_Delay65_out1 <= 1'b0;
      end
      else begin
        Unit_Delay65_out1 <= Case6_out24;
      end
    end



  assign Data_Type_S72_out1 = (Unit_Delay65_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Case6_out23;
      end
    end



  assign Data_Type_S71_out1 = (Unit_Delay54_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay64_process
      if (Rst_n == 1'b0) begin
        Unit_Delay64_out1 <= 1'b0;
      end
      else begin
        Unit_Delay64_out1 <= Case6_out22;
      end
    end



  assign Data_Type_S70_out1 = (Unit_Delay64_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay53_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1 <= Case6_out21;
      end
    end



  assign Data_Type_S69_out1 = (Unit_Delay53_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay59_process
      if (Rst_n == 1'b0) begin
        Unit_Delay59_out1 <= 1'b0;
      end
      else begin
        Unit_Delay59_out1 <= Case6_out20;
      end
    end



  assign Data_Type_S68_out1 = (Unit_Delay59_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay62_process
      if (Rst_n == 1'b0) begin
        Unit_Delay62_out1 <= 1'b0;
      end
      else begin
        Unit_Delay62_out1 <= Case6_out19;
      end
    end



  assign Data_Type_S67_out1 = (Unit_Delay62_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay58_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1 <= 1'b0;
      end
      else begin
        Unit_Delay58_out1 <= Case6_out18;
      end
    end



  assign Data_Type_S66_out1 = (Unit_Delay58_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay61_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1 <= 1'b0;
      end
      else begin
        Unit_Delay61_out1 <= Case6_out17;
      end
    end



  assign Data_Type_S65_out1 = (Unit_Delay61_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Case6_out16;
      end
    end



  assign Data_Type_S64_out1 = (Unit_Delay55_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Case6_out15;
      end
    end



  assign Data_Type_S63_out1 = (Unit_Delay57_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay52_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1 <= 1'b0;
      end
      else begin
        Unit_Delay52_out1 <= Case6_out14;
      end
    end



  assign Data_Type_S62_out1 = (Unit_Delay52_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay56_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1 <= Case6_out13;
      end
    end



  assign Data_Type_S61_out1 = (Unit_Delay56_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay99_process
      if (Rst_n == 1'b0) begin
        Unit_Delay99_out1 <= 1'b0;
      end
      else begin
        Unit_Delay99_out1 <= Case6_out12;
      end
    end



  assign Data_Type_S60_out1 = (Unit_Delay99_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay51_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1 <= 1'b0;
      end
      else begin
        Unit_Delay51_out1 <= Case6_out11;
      end
    end



  assign Data_Type_S59_out1 = (Unit_Delay51_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay98_process
      if (Rst_n == 1'b0) begin
        Unit_Delay98_out1 <= 1'b0;
      end
      else begin
        Unit_Delay98_out1 <= Case6_out10;
      end
    end



  assign Data_Type_S58_out1 = (Unit_Delay98_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay50_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1 <= 1'b0;
      end
      else begin
        Unit_Delay50_out1 <= Case6_out9;
      end
    end



  assign Data_Type_S57_out1 = (Unit_Delay50_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay95_process
      if (Rst_n == 1'b0) begin
        Unit_Delay95_out1 <= 1'b0;
      end
      else begin
        Unit_Delay95_out1 <= Case6_out8;
      end
    end



  assign Data_Type_S56_out1 = (Unit_Delay95_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay97_process
      if (Rst_n == 1'b0) begin
        Unit_Delay97_out1 <= 1'b0;
      end
      else begin
        Unit_Delay97_out1 <= Case6_out7;
      end
    end



  assign Data_Type_S55_out1 = (Unit_Delay97_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay84_process
      if (Rst_n == 1'b0) begin
        Unit_Delay84_out1 <= 1'b0;
      end
      else begin
        Unit_Delay84_out1 <= Case6_out6;
      end
    end



  assign Data_Type_S54_out1 = (Unit_Delay84_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay96_process
      if (Rst_n == 1'b0) begin
        Unit_Delay96_out1 <= 1'b0;
      end
      else begin
        Unit_Delay96_out1 <= Case6_out5;
      end
    end



  assign Data_Type_S53_out1 = (Unit_Delay96_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay60_process
      if (Rst_n == 1'b0) begin
        Unit_Delay60_out1 <= 1'b0;
      end
      else begin
        Unit_Delay60_out1 <= Case6_out4;
      end
    end



  assign Data_Type_S52_out1 = (Unit_Delay60_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay72_process
      if (Rst_n == 1'b0) begin
        Unit_Delay72_out1 <= 1'b0;
      end
      else begin
        Unit_Delay72_out1 <= Case6_out3;
      end
    end



  assign Data_Type_S51_out1 = (Unit_Delay72_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay48_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1 <= 1'b0;
      end
      else begin
        Unit_Delay48_out1 <= Case6_out2;
      end
    end



  assign Data_Type_S50_out1 = (Unit_Delay48_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(Unit_Delay43_out1, Data_Type_Conversion_out1, Data_Type_S49_out1,
       Data_Type_S50_out1, Data_Type_S51_out1, Data_Type_S52_out1,
       Data_Type_S53_out1, Data_Type_S54_out1, Data_Type_S55_out1,
       Data_Type_S56_out1, Data_Type_S57_out1, Data_Type_S58_out1,
       Data_Type_S59_out1, Data_Type_S60_out1, Data_Type_S61_out1,
       Data_Type_S62_out1, Data_Type_S63_out1, Data_Type_S64_out1,
       Data_Type_S65_out1, Data_Type_S66_out1, Data_Type_S67_out1,
       Data_Type_S68_out1, Data_Type_S69_out1, Data_Type_S70_out1,
       Data_Type_S71_out1, Data_Type_S72_out1) begin
    Case6_out1 = Data_Type_S49_out1;
    Case6_out2 = Data_Type_S50_out1;
    Case6_out3 = Data_Type_S51_out1;
    Case6_out4 = Data_Type_S52_out1;
    Case6_out5 = Data_Type_S53_out1;
    Case6_out6 = Data_Type_S54_out1;
    Case6_out7 = Data_Type_S55_out1;
    Case6_out8 = Data_Type_S56_out1;
    Case6_out9 = Data_Type_S57_out1;
    Case6_out10 = Data_Type_S58_out1;
    Case6_out11 = Data_Type_S59_out1;
    Case6_out12 = Data_Type_S60_out1;
    Case6_out13 = Data_Type_S61_out1;
    Case6_out14 = Data_Type_S62_out1;
    Case6_out15 = Data_Type_S63_out1;
    Case6_out16 = Data_Type_S64_out1;
    Case6_out17 = Data_Type_S65_out1;
    Case6_out18 = Data_Type_S66_out1;
    Case6_out19 = Data_Type_S67_out1;
    Case6_out20 = Data_Type_S68_out1;
    Case6_out21 = Data_Type_S69_out1;
    Case6_out22 = Data_Type_S70_out1;
    Case6_out23 = Data_Type_S71_out1;
    Case6_out24 = Data_Type_S72_out1;
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case6_out1 = Data_Type_Conversion_out1;
        end
      6'b000001 :
        begin
          Case6_out2 = Data_Type_Conversion_out1;
        end
      6'b000010 :
        begin
          Case6_out3 = Data_Type_Conversion_out1;
        end
      6'b000011 :
        begin
          Case6_out4 = Data_Type_Conversion_out1;
        end
      6'b000100 :
        begin
          Case6_out5 = Data_Type_Conversion_out1;
        end
      6'b000101 :
        begin
          Case6_out6 = Data_Type_Conversion_out1;
        end
      6'b000110 :
        begin
          Case6_out7 = Data_Type_Conversion_out1;
        end
      6'b000111 :
        begin
          Case6_out8 = Data_Type_Conversion_out1;
        end
      6'b001000 :
        begin
          Case6_out9 = Data_Type_Conversion_out1;
        end
      6'b001001 :
        begin
          Case6_out10 = Data_Type_Conversion_out1;
        end
      6'b001010 :
        begin
          Case6_out11 = Data_Type_Conversion_out1;
        end
      6'b001011 :
        begin
          Case6_out12 = Data_Type_Conversion_out1;
        end
      6'b001100 :
        begin
          Case6_out13 = Data_Type_Conversion_out1;
        end
      6'b001101 :
        begin
          Case6_out14 = Data_Type_Conversion_out1;
        end
      6'b001110 :
        begin
          Case6_out15 = Data_Type_Conversion_out1;
        end
      6'b001111 :
        begin
          Case6_out16 = Data_Type_Conversion_out1;
        end
      6'b010000 :
        begin
          Case6_out17 = Data_Type_Conversion_out1;
        end
      6'b010001 :
        begin
          Case6_out18 = Data_Type_Conversion_out1;
        end
      6'b010010 :
        begin
          Case6_out19 = Data_Type_Conversion_out1;
        end
      6'b010011 :
        begin
          Case6_out20 = Data_Type_Conversion_out1;
        end
      6'b010100 :
        begin
          Case6_out21 = Data_Type_Conversion_out1;
        end
      6'b010101 :
        begin
          Case6_out22 = Data_Type_Conversion_out1;
        end
      6'b010110 :
        begin
          Case6_out23 = Data_Type_Conversion_out1;
        end
      6'b010111 :
        begin
          Case6_out24 = Data_Type_Conversion_out1;
        end
    endcase
  end



  always @(posedge g_clk)
    begin : Unit_Delay63_process
      if (Rst_n == 1'b0) begin
        Unit_Delay63_out1 <= 1'b0;
      end
      else begin
        Unit_Delay63_out1 <= Case6_out1;
      end
    end



  assign Data_Type_S49_out1 = (Unit_Delay63_out1 != 1'b0 ? 1'b1 :
              1'b0);



  assign MonitorOut0 = Data_Type_S49_out1;

  assign MonitorOut1 = Data_Type_S50_out1;

  assign MonitorOut2 = Data_Type_S51_out1;

  assign MonitorOut3 = Data_Type_S52_out1;

  assign MonitorOut4 = Data_Type_S53_out1;

  assign MonitorOut5 = Data_Type_S54_out1;

  assign MonitorOut6 = Data_Type_S55_out1;

  assign MonitorOut7 = Data_Type_S56_out1;

  assign MonitorOut8 = Data_Type_S57_out1;

  assign MonitorOut9 = Data_Type_S58_out1;

  assign MonitorOut10 = Data_Type_S59_out1;

  assign MonitorOut11 = Data_Type_S60_out1;

  assign MonitorOut12 = Data_Type_S61_out1;

  assign MonitorOut13 = Data_Type_S62_out1;

  assign MonitorOut14 = Data_Type_S63_out1;

  assign MonitorOut15 = Data_Type_S64_out1;

  assign MonitorOut16 = Data_Type_S65_out1;

  assign MonitorOut17 = Data_Type_S66_out1;

  assign MonitorOut18 = Data_Type_S67_out1;

  assign MonitorOut19 = Data_Type_S68_out1;

  assign MonitorOut20 = Data_Type_S69_out1;

  assign MonitorOut21 = Data_Type_S70_out1;

  assign MonitorOut22 = Data_Type_S71_out1;

  assign MonitorOut23 = Data_Type_S72_out1;

  always @(Unit_Delay43_out1, Warn0, Warn1, Warn2, Warn3, Warn4, Warn5, Warn6, Warn7,
       Warn8, Warn9, Warn10, Warn11, Warn12, Warn13, Warn14, Warn15, Warn16,
       Warn17, Warn18, Warn19, Warn20, Warn21, Warn22, Warn23) begin
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case4_out1 = Warn0;
        end
      6'b000001 :
        begin
          Case4_out1 = Warn1;
        end
      6'b000010 :
        begin
          Case4_out1 = Warn2;
        end
      6'b000011 :
        begin
          Case4_out1 = Warn3;
        end
      6'b000100 :
        begin
          Case4_out1 = Warn4;
        end
      6'b000101 :
        begin
          Case4_out1 = Warn5;
        end
      6'b000110 :
        begin
          Case4_out1 = Warn6;
        end
      6'b000111 :
        begin
          Case4_out1 = Warn7;
        end
      6'b001000 :
        begin
          Case4_out1 = Warn8;
        end
      6'b001001 :
        begin
          Case4_out1 = Warn9;
        end
      6'b001010 :
        begin
          Case4_out1 = Warn10;
        end
      6'b001011 :
        begin
          Case4_out1 = Warn11;
        end
      6'b001100 :
        begin
          Case4_out1 = Warn12;
        end
      6'b001101 :
        begin
          Case4_out1 = Warn13;
        end
      6'b001110 :
        begin
          Case4_out1 = Warn14;
        end
      6'b001111 :
        begin
          Case4_out1 = Warn15;
        end
      6'b010000 :
        begin
          Case4_out1 = Warn16;
        end
      6'b010001 :
        begin
          Case4_out1 = Warn17;
        end
      6'b010010 :
        begin
          Case4_out1 = Warn18;
        end
      6'b010011 :
        begin
          Case4_out1 = Warn19;
        end
      6'b010100 :
        begin
          Case4_out1 = Warn20;
        end
      6'b010101 :
        begin
          Case4_out1 = Warn21;
        end
      6'b010110 :
        begin
          Case4_out1 = Warn22;
        end
      6'b010111 :
        begin
          Case4_out1 = Warn23;
        end
      default :
        begin
          Case4_out1 = 16'sd0;
        end
    endcase
  end



  assign Out0_3 = Case4_out1;

  assign Dy15_relop1 = Switch28_out1 >= Out0_3;



  assign Constant13_out1 = 1'b1;



  SimpDualPortRAM_Wrapper_singlebit   #  (.AddrWidth(6),
                                          .DataWidth(1)
                                          )
                                      u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                                 .wr_din(Data_Type_Conversion1_out1),
                                                                 .wr_addr(Unit_Delay43_out1),
                                                                 .wr_en(Constant13_out1),
                                                                 .rd_addr(Add1_out1),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1)
                                                                 );

  assign Switch6_out1 = (Dy15_relop1 == 1'b0 ? Simple_Dual_Port_RAM2_out1 :
              1'b1);



  assign Switch7_out1 = (CT10_out1 == 1'b0 ? Switch6_out1 :
              1'b0);



  assign Data_Type_Conversion1_out1 = (Switch7_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 1'b0;
      end
      else begin
        Unit_Delay19_out1 <= Case5_out24;
      end
    end



  assign Data_Type_S24_out1 = (Unit_Delay19_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 1'b0;
      end
      else begin
        Unit_Delay8_out1 <= Case5_out23;
      end
    end



  assign Data_Type_S23_out1 = (Unit_Delay8_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 1'b0;
      end
      else begin
        Unit_Delay18_out1 <= Case5_out22;
      end
    end



  assign Data_Type_S22_out1 = (Unit_Delay18_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1 <= Case5_out21;
      end
    end



  assign Data_Type_S21_out1 = (Unit_Delay7_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 1'b0;
      end
      else begin
        Unit_Delay13_out1 <= Case5_out20;
      end
    end



  assign Data_Type_S20_out1 = (Unit_Delay13_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 1'b0;
      end
      else begin
        Unit_Delay16_out1 <= Case5_out19;
      end
    end



  assign Data_Type_S19_out1 = (Unit_Delay16_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 1'b0;
      end
      else begin
        Unit_Delay12_out1 <= Case5_out18;
      end
    end



  assign Data_Type_S18_out1 = (Unit_Delay12_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 1'b0;
      end
      else begin
        Unit_Delay15_out1 <= Case5_out17;
      end
    end



  assign Data_Type_S17_out1 = (Unit_Delay15_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 1'b0;
      end
      else begin
        Unit_Delay9_out1 <= Case5_out16;
      end
    end



  assign Data_Type_S16_out1 = (Unit_Delay9_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 1'b0;
      end
      else begin
        Unit_Delay11_out1 <= Case5_out15;
      end
    end



  assign Data_Type_S15_out1 = (Unit_Delay11_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 1'b0;
      end
      else begin
        Unit_Delay5_out1 <= Case5_out14;
      end
    end



  assign Data_Type_S14_out1 = (Unit_Delay5_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 1'b0;
      end
      else begin
        Unit_Delay10_out1 <= Case5_out13;
      end
    end



  assign Data_Type_S13_out1 = (Unit_Delay10_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 1'b0;
      end
      else begin
        Unit_Delay26_out1 <= Case5_out12;
      end
    end



  assign Data_Type_S12_out1 = (Unit_Delay26_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 1'b0;
      end
      else begin
        Unit_Delay3_out1 <= Case5_out11;
      end
    end



  assign Data_Type_S11_out1 = (Unit_Delay3_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= Case5_out9;
      end
    end



  assign Data_Type_S9_out1 = (Unit_Delay2_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 1'b0;
      end
      else begin
        Unit_Delay22_out1 <= Case5_out8;
      end
    end



  assign Data_Type_S8_out1 = (Unit_Delay22_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 1'b0;
      end
      else begin
        Unit_Delay24_out1 <= Case5_out7;
      end
    end



  assign Data_Type_S7_out1 = (Unit_Delay24_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 1'b0;
      end
      else begin
        Unit_Delay21_out1 <= Case5_out6;
      end
    end



  assign Data_Type_S6_out1 = (Unit_Delay21_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 1'b0;
      end
      else begin
        Unit_Delay23_out1 <= Case5_out5;
      end
    end



  assign Data_Type_S5_out1 = (Unit_Delay23_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 1'b0;
      end
      else begin
        Unit_Delay14_out1 <= Case5_out4;
      end
    end



  assign Data_Type_S4_out1 = (Unit_Delay14_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 1'b0;
      end
      else begin
        Unit_Delay20_out1 <= Case5_out3;
      end
    end



  assign Data_Type_S3_out1 = (Unit_Delay20_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Case5_out2;
      end
    end



  assign Data_Type_S2_out1 = (Unit_Delay1_out1 != 1'b0 ? 1'b1 :
              1'b0);



  always @(Unit_Delay43_out1, Data_Type_Conversion1_out1, Data_Type_S1_out1,
       Data_Type_S2_out1, Data_Type_S3_out1, Data_Type_S4_out1,
       Data_Type_S5_out1, Data_Type_S6_out1, Data_Type_S7_out1,
       Data_Type_S8_out1, Data_Type_S9_out1, Data_Type_S58_out1,
       Data_Type_S11_out1, Data_Type_S12_out1, Data_Type_S13_out1,
       Data_Type_S14_out1, Data_Type_S15_out1, Data_Type_S16_out1,
       Data_Type_S17_out1, Data_Type_S18_out1, Data_Type_S19_out1,
       Data_Type_S20_out1, Data_Type_S21_out1, Data_Type_S22_out1,
       Data_Type_S23_out1, Data_Type_S24_out1) begin
    Case5_out1 = Data_Type_S1_out1;
    Case5_out2 = Data_Type_S2_out1;
    Case5_out3 = Data_Type_S3_out1;
    Case5_out4 = Data_Type_S4_out1;
    Case5_out5 = Data_Type_S5_out1;
    Case5_out6 = Data_Type_S6_out1;
    Case5_out7 = Data_Type_S7_out1;
    Case5_out8 = Data_Type_S8_out1;
    Case5_out9 = Data_Type_S9_out1;
    Case5_out10 = Data_Type_S58_out1;
    Case5_out11 = Data_Type_S11_out1;
    Case5_out12 = Data_Type_S12_out1;
    Case5_out13 = Data_Type_S13_out1;
    Case5_out14 = Data_Type_S14_out1;
    Case5_out15 = Data_Type_S15_out1;
    Case5_out16 = Data_Type_S16_out1;
    Case5_out17 = Data_Type_S17_out1;
    Case5_out18 = Data_Type_S18_out1;
    Case5_out19 = Data_Type_S19_out1;
    Case5_out20 = Data_Type_S20_out1;
    Case5_out21 = Data_Type_S21_out1;
    Case5_out22 = Data_Type_S22_out1;
    Case5_out23 = Data_Type_S23_out1;
    Case5_out24 = Data_Type_S24_out1;
    case ( Unit_Delay43_out1)
      6'b000000 :
        begin
          Case5_out1 = Data_Type_Conversion1_out1;
        end
      6'b000001 :
        begin
          Case5_out2 = Data_Type_Conversion1_out1;
        end
      6'b000010 :
        begin
          Case5_out3 = Data_Type_Conversion1_out1;
        end
      6'b000011 :
        begin
          Case5_out4 = Data_Type_Conversion1_out1;
        end
      6'b000100 :
        begin
          Case5_out5 = Data_Type_Conversion1_out1;
        end
      6'b000101 :
        begin
          Case5_out6 = Data_Type_Conversion1_out1;
        end
      6'b000110 :
        begin
          Case5_out7 = Data_Type_Conversion1_out1;
        end
      6'b000111 :
        begin
          Case5_out8 = Data_Type_Conversion1_out1;
        end
      6'b001000 :
        begin
          Case5_out9 = Data_Type_Conversion1_out1;
        end
      6'b001001 :
        begin
          Case5_out10 = Data_Type_Conversion1_out1;
        end
      6'b001010 :
        begin
          Case5_out11 = Data_Type_Conversion1_out1;
        end
      6'b001011 :
        begin
          Case5_out12 = Data_Type_Conversion1_out1;
        end
      6'b001100 :
        begin
          Case5_out13 = Data_Type_Conversion1_out1;
        end
      6'b001101 :
        begin
          Case5_out14 = Data_Type_Conversion1_out1;
        end
      6'b001110 :
        begin
          Case5_out15 = Data_Type_Conversion1_out1;
        end
      6'b001111 :
        begin
          Case5_out16 = Data_Type_Conversion1_out1;
        end
      6'b010000 :
        begin
          Case5_out17 = Data_Type_Conversion1_out1;
        end
      6'b010001 :
        begin
          Case5_out18 = Data_Type_Conversion1_out1;
        end
      6'b010010 :
        begin
          Case5_out19 = Data_Type_Conversion1_out1;
        end
      6'b010011 :
        begin
          Case5_out20 = Data_Type_Conversion1_out1;
        end
      6'b010100 :
        begin
          Case5_out21 = Data_Type_Conversion1_out1;
        end
      6'b010101 :
        begin
          Case5_out22 = Data_Type_Conversion1_out1;
        end
      6'b010110 :
        begin
          Case5_out23 = Data_Type_Conversion1_out1;
        end
      6'b010111 :
        begin
          Case5_out24 = Data_Type_Conversion1_out1;
        end
    endcase
  end



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 1'b0;
      end
      else begin
        Unit_Delay17_out1 <= Case5_out1;
      end
    end



  assign Data_Type_S1_out1 = (Unit_Delay17_out1 != 1'b0 ? 1'b1 :
              1'b0);



  assign Warn_Out0 = Data_Type_S1_out1;

  assign Warn_Out1 = Data_Type_S2_out1;

  assign Warn_Out2 = Data_Type_S3_out1;

  assign Warn_Out3 = Data_Type_S4_out1;

  assign Warn_Out4 = Data_Type_S5_out1;

  assign Warn_Out5 = Data_Type_S6_out1;

  assign Warn_Out6 = Data_Type_S7_out1;

  assign Warn_Out7 = Data_Type_S8_out1;

  assign Warn_Out8 = Data_Type_S9_out1;

  assign Warn_Out9 = Data_Type_S58_out1;

  assign Warn_Out10 = Data_Type_S11_out1;

  assign Warn_Out11 = Data_Type_S12_out1;

  assign Warn_Out12 = Data_Type_S13_out1;

  assign Warn_Out13 = Data_Type_S14_out1;

  assign Warn_Out14 = Data_Type_S15_out1;

  assign Warn_Out15 = Data_Type_S16_out1;

  assign Warn_Out16 = Data_Type_S17_out1;

  assign Warn_Out17 = Data_Type_S18_out1;

  assign Warn_Out18 = Data_Type_S19_out1;

  assign Warn_Out19 = Data_Type_S20_out1;

  assign Warn_Out20 = Data_Type_S21_out1;

  assign Warn_Out021 = Data_Type_S22_out1;

  assign Warn_Out22 = Data_Type_S23_out1;

  assign Warn_Out23 = Data_Type_S24_out1;

endmodule  // AnalogMonitorWarn_V10

