// -------------------------------------------------------------
// 
// File Name: D:\URef_V1\URef_V1.v
// Created: 2023-01-04 15:46:13
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: URef_V1
// Source Path: URef_V1/URef_V1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module URef_V1
          (
           g_clk,
           Rst_n,
           In_b16,  
		   In_K_b12,
           Ubtr_Ref_b12,
           Udc_Ref_b12,
           Mpy_out_b12,
           Ubtr_Ref2_b12,
           Udc_Ref2_b12
          );


  input   signed [11:0]  In_K_b12;
  input   g_clk;
  input   Rst_n;
  input   signed [15:0] In_b16;  // int16
  
  input   signed [11:0] Ubtr_Ref_b12;  // sfix12
  input   signed [11:0] Udc_Ref_b12;  // sfix12
  output  signed [11:0] Mpy_out_b12;  // sfix12
  output  signed [11:0] Ubtr_Ref2_b12;  // sfix12
  output  signed [11:0] Udc_Ref2_b12;  // sfix12
	
  wire signed [11:0] K_b12;  // sfix12
  wire signed [11:0] Mpy_lmt_ub12;  // sfix12
  //config 
  assign K_b12 = In_K_b12;//12'd100;
  assign Mpy_lmt_ub12 = 12'd2000;
  
  reg [1:0] Unit_Delay123_out1;  // ufix2
  wire [1:0] Add2_out1;  // ufix2
  wire CT86_out1;
  wire [1:0] Switch264_out1;  // ufix2
  wire CT32_out1;
  wire signed [27:0] Product6_out1;  // sfix28
  wire [12:0] Bit_Slice3_out1;  // ufix13
  wire signed [12:0] Data_Type_S5_out1;  // sfix13
  wire signed [12:0] RO11_1_1;  // sfix13
  wire RO11_relop1;
  wire signed [12:0] From8_out1_dtc;  // sfix13
  wire signed [12:0] Switch29_out1;  // sfix13
  wire signed [12:0] Unary_Minus5_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1;  // sfix12
  wire signed [12:0] RO10_1_1;  // sfix13
  wire RO10_relop1;
  wire signed [12:0] From5_out1_dtc;  // sfix13
  wire signed [12:0] Switch30_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion6_out1;  // sfix12
  wire signed [11:0] Switch78_out1;  // sfix12
  reg signed [11:0] Unit_Delay32_out1;  // sfix12
  wire CT2_out1;
  wire signed [12:0] Unary_Minus1_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1;  // sfix12
  wire signed [12:0] Add1_1;  // sfix13
  wire signed [12:0] Add1_2;  // sfix13
  wire signed [12:0] Add1_out1;  // sfix13
  wire RO3_relop1;
  wire signed [12:0] Switch19_out1;  // sfix13
  wire RO2_relop1;
  wire signed [12:0] Switch20_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion2_out1;  // sfix12
  wire signed [11:0] Switch3_out1;  // sfix12
  reg signed [11:0] Unit_Delay1_out1;  // sfix12
  wire CT4_out1;
  wire signed [12:0] Add3_1;  // sfix13
  wire signed [12:0] Add3_2;  // sfix13
  wire signed [12:0] Add3_out1;  // sfix13
  wire RO4_relop1;
  wire signed [12:0] Switch4_out1;  // sfix13
  wire RO1_relop1;
  wire signed [12:0] Switch5_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion1_out1;  // sfix12
  wire signed [11:0] Switch7_out1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1;  // sfix12


  assign Add2_out1 = 2'b01 + Unit_Delay123_out1;



  assign CT86_out1 = Add2_out1 == 2'b11;



  assign Switch264_out1 = (CT86_out1 == 1'b0 ? Add2_out1 :
              2'b00);



  always @(posedge g_clk)
    begin : Unit_Delay123_process
      if (Rst_n == 1'b0) begin
        Unit_Delay123_out1 <= 2'b00;
      end
      else begin
        Unit_Delay123_out1 <= Switch264_out1;
      end
    end



  assign CT32_out1 = Unit_Delay123_out1 == 2'b00;



  assign Product6_out1 = In_b16 * K_b12;



  assign Bit_Slice3_out1 = Product6_out1[27:15];



  assign Data_Type_S5_out1 = Bit_Slice3_out1;



  assign RO11_1_1 = {Mpy_lmt_ub12[11], Mpy_lmt_ub12};
  assign RO11_relop1 = Data_Type_S5_out1 > RO11_1_1;



  assign From8_out1_dtc = {Mpy_lmt_ub12[11], Mpy_lmt_ub12};



  assign Switch29_out1 = (RO11_relop1 == 1'b0 ? Data_Type_S5_out1 :
              From8_out1_dtc);



  assign Unary_Minus5_in0 =  - ({Mpy_lmt_ub12[11], Mpy_lmt_ub12});
  assign Unary_Minus5_out1 = Unary_Minus5_in0[11:0];



  assign RO10_1_1 = {Unary_Minus5_out1[11], Unary_Minus5_out1};
  assign RO10_relop1 = Switch29_out1 < RO10_1_1;



  assign From5_out1_dtc = {Unary_Minus5_out1[11], Unary_Minus5_out1};



  assign Switch30_out1 = (RO10_relop1 == 1'b0 ? Switch29_out1 :
              From5_out1_dtc);



  assign Data_Type_Conversion6_out1 = Switch30_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay32_out1 <= Switch78_out1;
      end
    end



  assign Switch78_out1 = (CT32_out1 == 1'b0 ? Unit_Delay32_out1 :
              Data_Type_Conversion6_out1);



  assign Mpy_out_b12 = Switch78_out1;

  assign CT2_out1 = Unit_Delay123_out1 == 2'b00;



  assign Unary_Minus1_in0 =  - ({Switch78_out1[11], Switch78_out1});
  assign Unary_Minus1_out1 = Unary_Minus1_in0[11:0];



  assign Add1_1 = {Ubtr_Ref_b12[11], Ubtr_Ref_b12};
  assign Add1_2 = {Unary_Minus1_out1[11], Unary_Minus1_out1};
  assign Add1_out1 = Add1_1 + Add1_2;



  assign RO3_relop1 = Add1_out1 > 13'sb0011111111111;



  assign Switch19_out1 = (RO3_relop1 == 1'b0 ? Add1_out1 :
              13'sb0011111111111);



  assign RO2_relop1 = Switch19_out1 < 13'sb1100000000000;



  assign Switch20_out1 = (RO2_relop1 == 1'b0 ? Switch19_out1 :
              13'sb1100000000000);



  assign Data_Type_Conversion2_out1 = Switch20_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1 <= Switch3_out1;
      end
    end



  assign Switch3_out1 = (CT2_out1 == 1'b0 ? Unit_Delay1_out1 :
              Data_Type_Conversion2_out1);



  assign Ubtr_Ref2_b12 = Switch3_out1;

  assign CT4_out1 = Unit_Delay123_out1 == 2'b00;



  assign Add3_1 = {Udc_Ref_b12[11], Udc_Ref_b12};
  assign Add3_2 = {Switch78_out1[11], Switch78_out1};
  assign Add3_out1 = Add3_1 + Add3_2;



  assign RO4_relop1 = Add3_out1 > 13'sb0011111111111;



  assign Switch4_out1 = (RO4_relop1 == 1'b0 ? Add3_out1 :
              13'sb0011111111111);



  assign RO1_relop1 = Switch4_out1 < 13'sb1100000000000;



  assign Switch5_out1 = (RO1_relop1 == 1'b0 ? Switch4_out1 :
              13'sb1100000000000);



  assign Data_Type_Conversion1_out1 = Switch5_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch7_out1;
      end
    end



  assign Switch7_out1 = (CT4_out1 == 1'b0 ? Unit_Delay3_out1 :
              Data_Type_Conversion1_out1);



  assign Udc_Ref2_b12 = Switch7_out1;

endmodule  // URef_V1

