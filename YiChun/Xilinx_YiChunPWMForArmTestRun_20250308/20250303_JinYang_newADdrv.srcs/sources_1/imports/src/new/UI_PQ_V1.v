// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\UI_PQ_V1\UI_PQ_V1.v
// Created: 2025-02-06 11:00:40
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: UI_PQ_V1
// Source Path: UI_PQ_V1/UI_PQ_V1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module UI_PQ_V1
          (
           g_clk,
           Rst_n,
           Udp_b12,
           Uqp_b12,
           Udn_b12,
           Uqn_b12,
           Idp_b12,
           Iqp_b12,
           Idn_b12,
           Iqn_b12,
           P_b24,
           Q_b24
          );



  input   g_clk;
  input   Rst_n;
  input   signed [11:0] Udp_b12;  // sfix12
  input   signed [11:0] Uqp_b12;  // sfix12
  input   signed [11:0] Udn_b12;  // sfix12
  input   signed [11:0] Uqn_b12;  // sfix12
  input   signed [11:0] Idp_b12;  // sfix12
  input   signed [11:0] Iqp_b12;  // sfix12
  input   signed [11:0] Idn_b12;  // sfix12
  input   signed [11:0] Iqn_b12;  // sfix12
  output  signed [23:0] P_b24;  // sfix24
  output  signed [23:0] Q_b24;  // sfix24

  wire [6:0] Switch139_out1;  // ufix7
  reg [6:0] Unit_Delay58_out1;  // ufix7
  wire [6:0] Add12_out1;  // ufix7
  wire CT73_out1;
  wire CT1_out1;
  wire CT149_out1;
  wire CT79_out1;
  wire CT2_out1;
  wire CT146_out1;
  wire CT148_out1;
  wire CT150_out1;
  wire CT152_out1;
  wire CT154_out1;
  wire CT156_out1;
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s;  // sfix12
  reg signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s_9;  // sfix12
  reg signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_10;  // sfix12
  wire signed [11:0] s_11;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_12;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] s_13;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] s_14;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] s_15;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] s_16;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [11:0] s_17;  // sfix12
  wire signed [11:0] signal1_8;  // sfix12
  wire signed [11:0] signal1_9;  // sfix12
  wire signed [11:0] signal2_8;  // sfix12
  wire signed [11:0] signal2_9;  // sfix12
  wire signed [23:0] Product6_mul_temp;  // sfix24
  wire signed [47:0] Product6_out1;  // sfix48
  wire RO2_relop1;
  wire signed [47:0] Constant1_out1_dtc;  // sfix48
  wire signed [47:0] Switch13_out1;  // sfix48
  wire RO1_relop1;
  wire signed [47:0] Constant3_out1_dtc;  // sfix48
  wire signed [47:0] Switch14_out1;  // sfix48
  wire signed [23:0] Data_Type_Conversion1_out1;  // sfix24
  reg signed [23:0] Unit_Delay126_out1;  // sfix24
  wire signed [23:0] Switch263_out1;  // sfix24
  wire CT80_out1;
  reg signed [23:0] Unit_Delay115_out1;  // sfix24
  wire signed [23:0] Switch127_out1;  // sfix24
  wire CT3_out1;
  reg signed [23:0] Unit_Delay124_out1;  // sfix24
  wire signed [23:0] Switch252_out1;  // sfix24
  wire CT147_out1;
  reg signed [23:0] Unit_Delay125_out1;  // sfix24
  wire signed [23:0] Switch261_out1;  // sfix24
  wire signed [25:0] Add4_add_temp;  // sfix26
  wire signed [25:0] Add4_add_temp_1;  // sfix26
  wire signed [25:0] Add4_add_temp_2;  // sfix26
  wire signed [25:0] Add4_1;  // sfix26
  wire signed [25:0] Add4_2;  // sfix26
  wire signed [25:0] Add4_3;  // sfix26
  wire signed [25:0] Add4_4;  // sfix26
  wire signed [24:0] Add4_out1;  // sfix25
  wire RO6_relop1;
  wire signed [24:0] Switch2_out1;  // sfix25
  wire RO5_relop1;
  wire signed [24:0] Switch3_out1;  // sfix25
  wire signed [23:0] Data_Type_Conversion2_out1;  // sfix24
  reg signed [23:0] Unit_Delay1_out1;  // sfix24
  wire signed [23:0] Switch1_out1;  // sfix24
  wire CT5_out1;
  wire CT151_out1;
  reg signed [23:0] Unit_Delay127_out1;  // sfix24
  wire signed [23:0] Switch267_out1;  // sfix24
  wire CT153_out1;
  reg signed [23:0] Unit_Delay128_out1;  // sfix24
  wire signed [23:0] Switch269_out1;  // sfix24
  wire signed [24:0] Unary_Minus2_in0;  // sfix25
  wire signed [23:0] Unary_Minus2_out1;  // sfix24
  wire CT155_out1;
  reg signed [23:0] Unit_Delay129_out1;  // sfix24
  wire signed [23:0] Switch271_out1;  // sfix24
  wire signed [24:0] Unary_Minus1_in0;  // sfix25
  wire signed [23:0] Unary_Minus1_out1;  // sfix24
  wire CT157_out1;
  reg signed [23:0] Unit_Delay130_out1;  // sfix24
  wire signed [23:0] Switch273_out1;  // sfix24
  wire signed [25:0] Add1_add_temp;  // sfix26
  wire signed [25:0] Add1_add_temp_1;  // sfix26
  wire signed [25:0] Add1_add_temp_2;  // sfix26
  wire signed [25:0] Add1_1;  // sfix26
  wire signed [25:0] Add1_2;  // sfix26
  wire signed [25:0] Add1_3;  // sfix26
  wire signed [25:0] Add1_4;  // sfix26
  wire signed [24:0] Add1_out1;  // sfix25
  wire RO8_relop1;
  wire signed [24:0] Switch5_out1;  // sfix25
  wire RO7_relop1;
  wire signed [24:0] Switch6_out1;  // sfix25
  wire signed [23:0] Data_Type_Conversion3_out1;  // sfix24
  reg signed [23:0] Unit_Delay3_out1;  // sfix24
  wire signed [23:0] Switch4_out1;  // sfix24


  always @(posedge g_clk)
    begin : Unit_Delay58_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay58_out1 <= Switch139_out1;
      end
    end



  assign Add12_out1 = 7'b0000001 + Unit_Delay58_out1;



  assign CT73_out1 = Add12_out1 >= 7'b0101100;



  assign Switch139_out1 = (CT73_out1 == 1'b0 ? Add12_out1 :
              7'b0000000);



  assign CT1_out1 = Switch139_out1 == 7'b0011000;



  assign CT149_out1 = Switch139_out1 == 7'b0010001;



  assign CT79_out1 = Switch139_out1 == 7'b0001011;



  assign CT2_out1 = Switch139_out1 == 7'b0001101;



  assign CT146_out1 = Switch139_out1 == 7'b0001110;



  assign CT148_out1 = Switch139_out1 == 7'b0010001;



  assign CT150_out1 = Switch139_out1 == 7'b0010010;



  assign CT152_out1 = Switch139_out1 == 7'b0010011;



  assign CT154_out1 = Switch139_out1 == 7'b0010100;



  assign CT156_out1 = Switch139_out1 == 7'b0010101;



  assign s = signal1;

  always @(posedge g_clk)
    begin : Unit_Delay2_1_process
      if (Rst_n == 1'b0) begin
        signal1_1 <= 12'sb000000000000;
      end
      else begin
        signal1_1 <= s;
      end
    end



  assign s_1 = signal1_1;

  assign signal1 = (CT156_out1 == 1'b0 ? s_1 :
              Udn_b12);



  assign s_2 = signal1;

  assign signal1_2 = (CT154_out1 == 1'b0 ? s_2 :
              Uqn_b12);



  assign s_3 = signal1_2;

  assign signal1_3 = (CT152_out1 == 1'b0 ? s_3 :
              Udp_b12);



  assign s_4 = signal1_3;

  assign signal1_4 = (CT150_out1 == 1'b0 ? s_4 :
              Uqp_b12);



  assign s_5 = signal1_4;

  assign signal1_5 = (CT148_out1 == 1'b0 ? s_5 :
              Uqn_b12);



  assign s_6 = signal1_5;

  assign signal1_6 = (CT146_out1 == 1'b0 ? s_6 :
              Udn_b12);



  assign s_7 = signal1_6;

  assign signal1_7 = (CT2_out1 == 1'b0 ? s_7 :
              Uqp_b12);



  assign s_8 = signal1_7;

  assign s_9 = signal2;

  always @(posedge g_clk)
    begin : Unit_Delay2_2_process
      if (Rst_n == 1'b0) begin
        signal2_1 <= 12'sb000000000000;
      end
      else begin
        signal2_1 <= s_9;
      end
    end



  assign s_10 = signal2_1;

  assign signal2 = (CT156_out1 == 1'b0 ? s_10 :
              Iqn_b12);



  assign s_11 = signal2;

  assign signal2_2 = (CT154_out1 == 1'b0 ? s_11 :
              Idn_b12);



  assign s_12 = signal2_2;

  assign signal2_3 = (CT152_out1 == 1'b0 ? s_12 :
              Iqp_b12);



  assign s_13 = signal2_3;

  assign signal2_4 = (CT150_out1 == 1'b0 ? s_13 :
              Idp_b12);



  assign s_14 = signal2_4;

  assign signal2_5 = (CT148_out1 == 1'b0 ? s_14 :
              Iqn_b12);



  assign s_15 = signal2_5;

  assign signal2_6 = (CT146_out1 == 1'b0 ? s_15 :
              Idn_b12);



  assign s_16 = signal2_6;

  assign signal2_7 = (CT2_out1 == 1'b0 ? s_16 :
              Iqp_b12);



  assign s_17 = signal2_7;

  assign signal1_8 = (CT79_out1 == 1'b0 ? s_8 :
              Udp_b12);



  assign signal1_9 = signal1_8;

  assign signal2_8 = (CT79_out1 == 1'b0 ? s_17 :
              Idp_b12);



  assign signal2_9 = signal2_8;

  assign Product6_mul_temp = signal1_9 * signal2_9;
  assign Product6_out1 = {{24{Product6_mul_temp[23]}}, Product6_mul_temp};



  assign RO2_relop1 = Product6_out1 > 48'sh0000003FFFFF;



  assign Constant1_out1_dtc = 48'sh0000003FFFFF;



  assign Switch13_out1 = (RO2_relop1 == 1'b0 ? Product6_out1 :
              Constant1_out1_dtc);



  assign RO1_relop1 = Switch13_out1 < 48'shFFFFFFC00001;



  assign Constant3_out1_dtc = 48'shFFFFFFC00001;



  assign Switch14_out1 = (RO1_relop1 == 1'b0 ? Switch13_out1 :
              Constant3_out1_dtc);



  assign Data_Type_Conversion1_out1 = Switch14_out1[23:0];



  assign Switch263_out1 = (CT149_out1 == 1'b0 ? Unit_Delay126_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay126_process
      if (Rst_n == 1'b0) begin
        Unit_Delay126_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay126_out1 <= Switch263_out1;
      end
    end



  assign CT80_out1 = Switch139_out1 == 7'b0001011;



  assign Switch127_out1 = (CT80_out1 == 1'b0 ? Unit_Delay115_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay115_process
      if (Rst_n == 1'b0) begin
        Unit_Delay115_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay115_out1 <= Switch127_out1;
      end
    end



  assign CT3_out1 = Switch139_out1 == 7'b0001101;



  assign Switch252_out1 = (CT3_out1 == 1'b0 ? Unit_Delay124_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay124_process
      if (Rst_n == 1'b0) begin
        Unit_Delay124_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay124_out1 <= Switch252_out1;
      end
    end



  assign CT147_out1 = Switch139_out1 == 7'b0001110;



  assign Switch261_out1 = (CT147_out1 == 1'b0 ? Unit_Delay125_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay125_process
      if (Rst_n == 1'b0) begin
        Unit_Delay125_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay125_out1 <= Switch261_out1;
      end
    end



  assign Add4_1 = {{2{Unit_Delay126_out1[23]}}, Unit_Delay126_out1};
  assign Add4_2 = {{2{Unit_Delay115_out1[23]}}, Unit_Delay115_out1};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_3 = {{2{Unit_Delay124_out1[23]}}, Unit_Delay124_out1};
  assign Add4_add_temp_1 = Add4_add_temp + Add4_3;
  assign Add4_4 = {{2{Unit_Delay125_out1[23]}}, Unit_Delay125_out1};
  assign Add4_add_temp_2 = Add4_add_temp_1 + Add4_4;
  assign Add4_out1 = Add4_add_temp_2[24:0];



  assign RO6_relop1 = Add4_out1 > 25'sb0001111111111111111111111;



  assign Switch2_out1 = (RO6_relop1 == 1'b0 ? Add4_out1 :
              25'sb0001111111111111111111111);



  assign RO5_relop1 = Switch2_out1 < 25'sb1110000000000000000000001;



  assign Switch3_out1 = (RO5_relop1 == 1'b0 ? Switch2_out1 :
              25'sb1110000000000000000000001);



  assign Data_Type_Conversion2_out1 = Switch3_out1[23:0];



  assign Switch1_out1 = (CT1_out1 == 1'b0 ? Unit_Delay1_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay1_out1 <= Switch1_out1;
      end
    end



  assign P_b24 = Unit_Delay1_out1;

  assign CT5_out1 = Switch139_out1 == 7'b0011000;



  assign CT151_out1 = Switch139_out1 == 7'b0010010;



  assign Switch267_out1 = (CT151_out1 == 1'b0 ? Unit_Delay127_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay127_process
      if (Rst_n == 1'b0) begin
        Unit_Delay127_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay127_out1 <= Switch267_out1;
      end
    end



  assign CT153_out1 = Switch139_out1 == 7'b0010011;



  assign Switch269_out1 = (CT153_out1 == 1'b0 ? Unit_Delay128_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay128_process
      if (Rst_n == 1'b0) begin
        Unit_Delay128_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay128_out1 <= Switch269_out1;
      end
    end



  assign Unary_Minus2_in0 =  - ({Unit_Delay128_out1[23], Unit_Delay128_out1});
  assign Unary_Minus2_out1 = Unary_Minus2_in0[23:0];



  assign CT155_out1 = Switch139_out1 == 7'b0010100;



  assign Switch271_out1 = (CT155_out1 == 1'b0 ? Unit_Delay129_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay129_process
      if (Rst_n == 1'b0) begin
        Unit_Delay129_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay129_out1 <= Switch271_out1;
      end
    end



  assign Unary_Minus1_in0 =  - ({Unit_Delay129_out1[23], Unit_Delay129_out1});
  assign Unary_Minus1_out1 = Unary_Minus1_in0[23:0];



  assign CT157_out1 = Switch139_out1 == 7'b0010101;



  assign Switch273_out1 = (CT157_out1 == 1'b0 ? Unit_Delay130_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay130_process
      if (Rst_n == 1'b0) begin
        Unit_Delay130_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay130_out1 <= Switch273_out1;
      end
    end



  assign Add1_1 = {{2{Unit_Delay127_out1[23]}}, Unit_Delay127_out1};
  assign Add1_2 = {{2{Unary_Minus2_out1[23]}}, Unary_Minus2_out1};
  assign Add1_add_temp = Add1_1 + Add1_2;
  assign Add1_3 = {{2{Unary_Minus1_out1[23]}}, Unary_Minus1_out1};
  assign Add1_add_temp_1 = Add1_add_temp + Add1_3;
  assign Add1_4 = {{2{Unit_Delay130_out1[23]}}, Unit_Delay130_out1};
  assign Add1_add_temp_2 = Add1_add_temp_1 + Add1_4;
  assign Add1_out1 = Add1_add_temp_2[24:0];



  assign RO8_relop1 = Add1_out1 > 25'sb0001111111111111111111111;



  assign Switch5_out1 = (RO8_relop1 == 1'b0 ? Add1_out1 :
              25'sb0001111111111111111111111);



  assign RO7_relop1 = Switch5_out1 < 25'sb1110000000000000000000001;



  assign Switch6_out1 = (RO7_relop1 == 1'b0 ? Switch5_out1 :
              25'sb1110000000000000000000001);



  assign Data_Type_Conversion3_out1 = Switch6_out1[23:0];



  assign Switch4_out1 = (CT5_out1 == 1'b0 ? Unit_Delay3_out1 :
              Data_Type_Conversion3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch4_out1;
      end
    end



  assign Q_b24 = Unit_Delay3_out1;

endmodule  // UI_PQ_V1

