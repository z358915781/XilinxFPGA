// -------------------------------------------------------------
// 
// File Name: Work_RMSP64Ch8_V10\RMSP64Ch8_V10\RMSP64Ch8_V10.v
// Created: 2017-05-23 10:54:11
// 
// Generated by MATLAB 8.6 and HDL Coder 3.7
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RMSP64Ch8_V10
// Source Path: RMSP64Ch8_V10/RMSP64Ch8_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RMSP64Ch8_V10
          (
           g_clk,
           Rst_n,
           Pulse,
           RMS_In0,
           RMS_In1,
           RMS_In2,
           RMS_In3,
           RMS_In4,
           RMS_In5,
           RMS_In6,
           RMS_In7,
           RMS_Out0,
           RMS_Out1,
           RMS_Out2,
           RMS_Out3,
           RMS_Out4,
           RMS_Out5,
           RMS_Out6,
           RMS_Out7
          );


  input   g_clk;
  input   Rst_n;
  input   Pulse;
  input   signed [11:0] RMS_In0;  // sfix12
  input   signed [11:0] RMS_In1;  // sfix12
  input   signed [11:0] RMS_In2;  // sfix12
  input   signed [11:0] RMS_In3;  // sfix12
  input   signed [11:0] RMS_In4;  // sfix12
  input   signed [11:0] RMS_In5;  // sfix12
  input   signed [11:0] RMS_In6;  // sfix12
  input   signed [11:0] RMS_In7;  // sfix12
  output  signed [11:0] RMS_Out0;  // sfix12
  output  signed [11:0] RMS_Out1;  // sfix12
  output  signed [11:0] RMS_Out2;  // sfix12
  output  signed [11:0] RMS_Out3;  // sfix12
  output  signed [11:0] RMS_Out4;  // sfix12
  output  signed [11:0] RMS_Out5;  // sfix12
  output  signed [11:0] RMS_Out6;  // sfix12
  output  signed [11:0] RMS_Out7;  // sfix12


  reg [6:0] Unit_Delay10_out1;  // ufix7
  wire [6:0] Add3_out1;  // ufix7
  wire Cmp17_out1;
  wire Cmp1_out1;
  wire Cmp2_out1;
  wire Cmp3_out1;
  wire Cmp4_out1;
  wire Cmp21_out1;
  wire Cmp22_out1;
  wire Cmp23_out1;
  wire Cmp24_out1;
  wire Or1_out1;
  wire [11:0] Switch163_out1;  // ufix12
  reg [11:0] Unit_Delay78_out1;  // ufix12
  wire [11:0] bit_shift_out1;  // ufix12
  wire Cmp20_out1;
  reg [2:0] Unit_Delay7_out1;  // ufix3
  wire [2:0] Add1_out1;  // ufix3
  wire CT22_out1;
  wire CT12_out1;
  reg  Unit_Delay54_out1;
  wire Switch20_out1;
  wire Switch17_out1;
  wire Or3_out1;
  wire Switch208_out1;
  reg  Unit_Delay55_out1;
  wire CT70_out1;
  wire Or2_out1;
  wire [8:0] Switch83_out1;  // ufix9
  reg [8:0] Unit_Delay32_out1;  // ufix9
  wire [8:0] Add11_out1;  // ufix9
  wire Ro10_relop1;
  reg  Unit_Delay57_out1;
  wire Switch49_out1;
  wire Switch105_out1;
  reg  Unit_Delay1_out1;
  wire CT55_out1;
  wire CT57_out1;
  wire CT59_out1;
  wire CT61_out1;
  wire CT17_out1;
  wire CT19_out1;
  wire CT21_out1;
  wire CT23_out1;
  wire CT15_out1;
  wire CT90_out1;
  wire CT2_out1;
  wire CT4_out1;
  wire CT6_out1;
  wire CT8_out1;
  wire CT10_out1;
  wire CT11_out1;
  wire CT14_out1;
  wire signed [11:0] Switch24_out1;  // sfix12
  wire signed [11:0] Switch22_out1;  // sfix12
  wire signed [11:0] Switch19_out1;  // sfix12
  wire signed [11:0] Switch16_out1;  // sfix12
  wire signed [11:0] Switch8_out1;  // sfix12
  wire signed [11:0] Switch6_out1;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire signed [11:0] Switch151_out1;  // sfix12
  wire signed [23:0] Product_out1;  // sfix24
  wire RO8_relop1;
  wire signed [23:0] Switch76_out1;  // sfix24
  wire RO7_relop1;
  wire signed [23:0] Switch2_out1;  // sfix24
  reg signed [23:0] Unit_Delay14_out1;  // sfix24
  wire signed [23:0] Switch23_out1;  // sfix24
  wire signed [23:0] signal1;  // sfix24
  wire signed [23:0] s;  // sfix24
  wire CT13_out1;
  reg signed [23:0] Unit_Delay13_out1;  // sfix24
  wire signed [23:0] Switch21_out1;  // sfix24
  wire signed [23:0] signal1_1;  // sfix24
  wire signed [23:0] s_1;  // sfix24
  wire CT9_out1;
  reg signed [23:0] Unit_Delay12_out1;  // sfix24
  wire signed [23:0] Switch18_out1;  // sfix24
  wire signed [23:0] signal1_2;  // sfix24
  wire signed [23:0] s_2;  // sfix24
  wire CT7_out1;
  reg signed [23:0] Unit_Delay11_out1;  // sfix24
  wire signed [23:0] Switch15_out1;  // sfix24
  wire signed [23:0] signal1_3;  // sfix24
  wire signed [23:0] s_3;  // sfix24
  wire CT5_out1;
  reg signed [23:0] Unit_Delay4_out1;  // sfix24
  wire signed [23:0] Switch7_out1;  // sfix24
  wire signed [23:0] signal1_4;  // sfix24
  wire signed [23:0] s_4;  // sfix24
  wire CT3_out1;
  reg signed [23:0] Unit_Delay3_out1;  // sfix24
  wire signed [23:0] Switch5_out1;  // sfix24
  wire signed [23:0] signal1_5;  // sfix24
  wire signed [23:0] s_5;  // sfix24
  wire CT1_out1;
  reg signed [23:0] Unit_Delay2_out1;  // sfix24
  wire signed [23:0] Switch3_out1;  // sfix24
  wire signed [23:0] signal1_6;  // sfix24
  wire signed [23:0] s_6;  // sfix24
  wire CT89_out1;
  reg signed [23:0] Unit_Delay69_out1;  // sfix24
  wire signed [23:0] Switch150_out1;  // sfix24
  wire switch_compare_1;
  wire signed [23:0] signal1_7;  // sfix24
  wire signed [23:0] signal1_8;  // sfix24
  wire signed [23:0] signal1_9;  // sfix24
  wire signed [23:0] Switch84_out1;  // sfix24
  wire signed [23:0] Switch97_out1;  // sfix24
  wire [8:0] Add12_out1;  // ufix9
  wire signed [23:0] Simple_Dual_Port_RAM2_out1;  // sfix24
  wire switch_compare_1_1;
  wire signed [23:0] Switch98_out1;  // sfix24
  wire signed [30:0] Add2_stage2_1;  // sfix31
  wire signed [30:0] Add2_stage2_2;  // sfix31
  wire signed [30:0] Add2_op_stage2;  // sfix31
  wire CT20_out1;
  wire CT18_out1;
  wire CT16_out1;
  wire CT60_out1;
  wire CT58_out1;
  wire CT56_out1;
  wire CT51_out1;
  reg signed [29:0] Unit_Delay30_out1;  // sfix30
  wire signed [29:0] Switch79_out1;  // sfix30
  wire signed [29:0] Switch80_out1;  // sfix30
  reg signed [29:0] Unit_Delay33_out1;  // sfix30
  wire signed [29:0] Switch87_out1;  // sfix30
  reg signed [29:0] Unit_Delay34_out1;  // sfix30
  wire signed [29:0] Switch89_out1;  // sfix30
  reg signed [29:0] Unit_Delay35_out1;  // sfix30
  wire signed [29:0] Switch91_out1;  // sfix30
  reg signed [29:0] Unit_Delay15_out1;  // sfix30
  wire signed [29:0] Switch25_out1;  // sfix30
  reg signed [29:0] Unit_Delay16_out1;  // sfix30
  wire signed [29:0] Switch27_out1;  // sfix30
  reg signed [29:0] Unit_Delay17_out1;  // sfix30
  wire signed [29:0] Switch29_out1;  // sfix30
  reg signed [29:0] Unit_Delay18_out1;  // sfix30
  wire signed [29:0] signal2;  // sfix30
  wire signed [29:0] s_7;  // sfix30
  wire signed [29:0] signal2_1;  // sfix30
  wire signed [29:0] s_8;  // sfix30
  wire signed [29:0] signal2_2;  // sfix30
  wire signed [29:0] s_9;  // sfix30
  wire signed [29:0] signal2_3;  // sfix30
  wire signed [29:0] s_10;  // sfix30
  wire signed [29:0] signal2_4;  // sfix30
  wire signed [29:0] s_11;  // sfix30
  wire signed [29:0] signal2_5;  // sfix30
  wire signed [29:0] s_12;  // sfix30
  wire signed [29:0] signal2_6;  // sfix30
  wire signed [29:0] s_13;  // sfix30
  wire signed [29:0] signal2_7;  // sfix30
  wire signed [29:0] signal2_8;  // sfix30
  wire signed [29:0] signal2_9;  // sfix30
  wire signed [30:0] Add2_stage3_add_temp;  // sfix31
  wire signed [30:0] Add2_stage3_1;  // sfix31
  wire signed [29:0] Add2_out1;  // sfix30
  wire signed [29:0] Switch31_out1;  // sfix30
  wire Cmp19_out1;
  wire [23:0] Bit_Slice8_out1;  // ufix24
  wire Cmp18_out1;
  wire [23:0] Bit_Slice7_out1;  // ufix24
  wire Cmp16_out1;
  wire [23:0] Bit_Slice5_out1;  // ufix24
  wire Cmp8_out1;
  wire [23:0] Bit_Slice4_out1;  // ufix24
  wire Cmp7_out1;
  wire [23:0] Bit_Slice3_out1;  // ufix24
  wire Cmp6_out1;
  wire [23:0] Bit_Slice2_out1;  // ufix24
  wire Cmp5_out1;
  wire [23:0] Bit_Slice1_out1;  // ufix24
  wire [23:0] Bit_Slice6_out1;  // ufix24
  wire [23:0] Switch1_out1;  // ufix24
  reg [23:0] Unit_Delay26_out1;  // ufix24
  wire [23:0] Switch40_out1;  // ufix24
  wire [23:0] Switch39_out1;  // ufix24
  wire [23:0] Switch38_out1;  // ufix24
  wire [23:0] Switch37_out1;  // ufix24
  wire [23:0] Switch11_out1;  // ufix24
  wire [23:0] Switch10_out1;  // ufix24
  wire [23:0] Switch9_out1;  // ufix24
  wire [11:0] Switch162_out1;  // ufix12
  reg [11:0] Unit_Delay76_out1;  // ufix12
  wire [11:0] Switch165_out1;  // ufix12
  wire [11:0] Bitwise_Operator7_out1;  // ufix12
  wire [23:0] Product8_out1;  // ufix24
  wire RO32_relop1;
  wire signed [11:0] Data_Type_Conversion27_out1;  // sfix12
  reg signed [11:0] Unit_Delay77_out1;  // sfix12
  wire signed [11:0] Switch164_out1;  // sfix12
  wire Cmp9_out1;
  reg signed [11:0] Unit_Delay6_out1;  // sfix12
  wire signed [11:0] Switch12_out1;  // sfix12
  wire Cmp10_out1;
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] Switch13_out1;  // sfix12
  wire Cmp11_out1;
  reg signed [11:0] Unit_Delay9_out1;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12
  wire Cmp12_out1;
  reg signed [11:0] Unit_Delay19_out1;  // sfix12
  wire signed [11:0] Switch33_out1;  // sfix12
  wire Cmp13_out1;
  reg signed [11:0] Unit_Delay20_out1;  // sfix12
  wire signed [11:0] Switch34_out1;  // sfix12
  wire Cmp14_out1;
  reg signed [11:0] Unit_Delay21_out1;  // sfix12
  wire signed [11:0] Switch35_out1;  // sfix12
  wire Cmp15_out1;
  reg signed [11:0] Unit_Delay22_out1;  // sfix12
  wire signed [11:0] Switch36_out1;  // sfix12


  assign Add3_out1 = 7'b0000001 + Unit_Delay10_out1;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay10_out1 <= Add3_out1;
      end
    end



  assign Cmp17_out1 = Unit_Delay10_out1 == 7'b0001010;



  assign Cmp1_out1 = Unit_Delay10_out1 == 7'b0000000;



  assign Cmp2_out1 = Unit_Delay10_out1 == 7'b0001011;



  assign Cmp3_out1 = Unit_Delay10_out1 == 7'b0010110;



  assign Cmp4_out1 = Unit_Delay10_out1 == 7'b0100001;



  assign Cmp21_out1 = Unit_Delay10_out1 == 7'b0101100;



  assign Cmp22_out1 = Unit_Delay10_out1 == 7'b0110111;



  assign Cmp23_out1 = Unit_Delay10_out1 == 7'b1000010;



  assign Cmp24_out1 = Unit_Delay10_out1 == 7'b1001101;



  assign Or1_out1 = Cmp24_out1 | (Cmp23_out1 | (Cmp22_out1 | (Cmp21_out1 | (Cmp4_out1 | (Cmp3_out1 | (Cmp1_out1 | Cmp2_out1))))));



  always @(posedge g_clk)
    begin : Unit_Delay78_process
      if (Rst_n == 1'b0) begin
        Unit_Delay78_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay78_out1 <= Switch163_out1;
      end
    end



  assign bit_shift_out1 = Unit_Delay78_out1 >> 8'd1;



  assign Switch163_out1 = (Or1_out1 == 1'b0 ? bit_shift_out1 :
              12'b010000000000);



  assign Cmp20_out1 = Unit_Delay10_out1 == 7'b1001101;



  assign Add1_out1 = 3'b001 + Unit_Delay7_out1;



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 3'b000;
      end
      else begin
        Unit_Delay7_out1 <= Add1_out1;
      end
    end



  assign CT22_out1 = Unit_Delay7_out1 == 3'b111;



  assign CT12_out1 = Unit_Delay7_out1 == 3'b000;



  assign Switch20_out1 = (Pulse == 1'b0 ? Unit_Delay54_out1 :
              1'b1);



  assign Switch17_out1 = (CT12_out1 == 1'b0 ? Switch20_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch17_out1;
      end
    end



  assign Or3_out1 = Pulse | Unit_Delay54_out1;



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Switch208_out1;
      end
    end



  assign Switch208_out1 = (CT12_out1 == 1'b0 ? Unit_Delay55_out1 :
              Or3_out1);



  assign CT70_out1 = Unit_Delay7_out1 == 3'b000;



  assign Or2_out1 = Switch208_out1 & CT70_out1;



  assign Switch83_out1 = (Switch208_out1 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  assign Add11_out1 = Switch83_out1 + Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 9'b000000000;
      end
      else begin
        Unit_Delay32_out1 <= Add11_out1;
      end
    end



  assign Ro10_relop1 = Unit_Delay32_out1 > Add11_out1;



  assign Switch49_out1 = (Ro10_relop1 == 1'b0 ? Unit_Delay57_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Switch49_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch105_out1;
      end
    end



  assign Switch105_out1 = (Or2_out1 == 1'b0 ? Unit_Delay1_out1 :
              Unit_Delay57_out1);



  assign CT55_out1 = Unit_Delay7_out1 == 3'b000;



  assign CT57_out1 = Unit_Delay7_out1 == 3'b001;



  assign CT59_out1 = Unit_Delay7_out1 == 3'b010;



  assign CT61_out1 = Unit_Delay7_out1 == 3'b011;



  assign CT17_out1 = Unit_Delay7_out1 == 3'b100;



  assign CT19_out1 = Unit_Delay7_out1 == 3'b101;



  assign CT21_out1 = Unit_Delay7_out1 == 3'b110;



  assign CT23_out1 = Unit_Delay7_out1 == 3'b111;



  assign CT15_out1 = Unit_Delay7_out1 == 3'b111;



  assign CT90_out1 = Unit_Delay7_out1 == 3'b000;



  assign CT2_out1 = Unit_Delay7_out1 == 3'b001;



  assign CT4_out1 = Unit_Delay7_out1 == 3'b010;



  assign CT6_out1 = Unit_Delay7_out1 == 3'b011;



  assign CT8_out1 = Unit_Delay7_out1 == 3'b100;



  assign CT10_out1 = Unit_Delay7_out1 == 3'b101;



  assign CT11_out1 = Unit_Delay7_out1 == 3'b110;



  assign CT14_out1 = Unit_Delay7_out1 == 3'b111;



  assign Switch24_out1 = (CT14_out1 == 1'b0 ? RMS_In7 :
              RMS_In7);



  assign Switch22_out1 = (CT11_out1 == 1'b0 ? Switch24_out1 :
              RMS_In6);



  assign Switch19_out1 = (CT10_out1 == 1'b0 ? Switch22_out1 :
              RMS_In5);



  assign Switch16_out1 = (CT8_out1 == 1'b0 ? Switch19_out1 :
              RMS_In4);



  assign Switch8_out1 = (CT6_out1 == 1'b0 ? Switch16_out1 :
              RMS_In3);



  assign Switch6_out1 = (CT4_out1 == 1'b0 ? Switch8_out1 :
              RMS_In2);



  assign Switch4_out1 = (CT2_out1 == 1'b0 ? Switch6_out1 :
              RMS_In1);



  assign Switch151_out1 = (CT90_out1 == 1'b0 ? Switch4_out1 :
              RMS_In0);



  assign Product_out1 = Switch151_out1 * Switch151_out1;



  assign RO8_relop1 = 1'b0;



  assign Switch76_out1 = (RO8_relop1 == 1'b0 ? Product_out1 :
              24'sb011111111111111111111111);



  assign RO7_relop1 = Switch76_out1 < 24'sb100000000000000000000001;



  assign Switch2_out1 = (RO7_relop1 == 1'b0 ? Switch76_out1 :
              24'sb100000000000000000000001);



  assign Switch23_out1 = (CT15_out1 == 1'b0 ? Unit_Delay14_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch23_out1;
      end
    end



  assign signal1 = (CT23_out1 == 1'b0 ? Unit_Delay14_out1 :
              Unit_Delay14_out1);



  assign s = signal1;

  assign CT13_out1 = Unit_Delay7_out1 == 3'b110;



  assign Switch21_out1 = (CT13_out1 == 1'b0 ? Unit_Delay13_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay13_out1 <= Switch21_out1;
      end
    end



  assign signal1_1 = (CT21_out1 == 1'b0 ? s :
              Unit_Delay13_out1);



  assign s_1 = signal1_1;

  assign CT9_out1 = Unit_Delay7_out1 == 3'b101;



  assign Switch18_out1 = (CT9_out1 == 1'b0 ? Unit_Delay12_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch18_out1;
      end
    end



  assign signal1_2 = (CT19_out1 == 1'b0 ? s_1 :
              Unit_Delay12_out1);



  assign s_2 = signal1_2;

  assign CT7_out1 = Unit_Delay7_out1 == 3'b100;



  assign Switch15_out1 = (CT7_out1 == 1'b0 ? Unit_Delay11_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch15_out1;
      end
    end



  assign signal1_3 = (CT17_out1 == 1'b0 ? s_2 :
              Unit_Delay11_out1);



  assign s_3 = signal1_3;

  assign CT5_out1 = Unit_Delay7_out1 == 3'b011;



  assign Switch7_out1 = (CT5_out1 == 1'b0 ? Unit_Delay4_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch7_out1;
      end
    end



  assign signal1_4 = (CT61_out1 == 1'b0 ? s_3 :
              Unit_Delay4_out1);



  assign s_4 = signal1_4;

  assign CT3_out1 = Unit_Delay7_out1 == 3'b010;



  assign Switch5_out1 = (CT3_out1 == 1'b0 ? Unit_Delay3_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch5_out1;
      end
    end



  assign signal1_5 = (CT59_out1 == 1'b0 ? s_4 :
              Unit_Delay3_out1);



  assign s_5 = signal1_5;

  assign CT1_out1 = Unit_Delay7_out1 == 3'b001;



  assign Switch3_out1 = (CT1_out1 == 1'b0 ? Unit_Delay2_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch3_out1;
      end
    end



  assign signal1_6 = (CT57_out1 == 1'b0 ? s_5 :
              Unit_Delay2_out1);



  assign s_6 = signal1_6;

  assign CT89_out1 = Unit_Delay7_out1 == 3'b000;



  assign Switch150_out1 = (CT89_out1 == 1'b0 ? Unit_Delay69_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay69_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay69_out1 <= Switch150_out1;
      end
    end



  assign switch_compare_1 = Switch105_out1 > 1'b0;



  assign signal1_7 = (CT55_out1 == 1'b0 ? s_6 :
              Unit_Delay69_out1);



  assign signal1_8 = signal1_7;

  assign signal1_9 = signal1_8;

  assign Switch84_out1 = (switch_compare_1 == 1'b0 ? 24'sb000000000000000000000000 :
              signal1_9);



  assign Switch97_out1 = (Switch208_out1 == 1'b0 ? 24'sb000000000000000000000000 :
              Switch84_out1);



  assign Add12_out1 = Add11_out1 + 9'b000000001;



  SimpDualPortRAM_Wrapper_512x24b   u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch84_out1),  // sfix24
                                                               .wr_addr(Add11_out1),  // ufix9
                                                               .wr_en(Switch208_out1),
                                                               .rd_addr(Add12_out1),  // ufix9
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)  // sfix24
                                                               );

  assign switch_compare_1_1 = Switch105_out1 > 1'b0;



  assign Switch98_out1 = (Switch208_out1 == 1'b0 ? 24'sb000000000000000000000000 :
              Simple_Dual_Port_RAM2_out1);



  assign Add2_stage2_1 = {{7{Switch97_out1[23]}}, Switch97_out1};
  assign Add2_stage2_2 = {{7{Switch98_out1[23]}}, Switch98_out1};
  assign Add2_op_stage2 = Add2_stage2_1 - Add2_stage2_2;



  assign CT20_out1 = Unit_Delay7_out1 == 3'b110;



  assign CT18_out1 = Unit_Delay7_out1 == 3'b101;



  assign CT16_out1 = Unit_Delay7_out1 == 3'b100;



  assign CT60_out1 = Unit_Delay7_out1 == 3'b011;



  assign CT58_out1 = Unit_Delay7_out1 == 3'b010;



  assign CT56_out1 = Unit_Delay7_out1 == 3'b001;



  assign CT51_out1 = Unit_Delay7_out1 == 3'b000;



  assign Switch80_out1 = (CT51_out1 == 1'b0 ? Unit_Delay30_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch80_out1;
      end
    end



  assign Switch87_out1 = (CT56_out1 == 1'b0 ? Unit_Delay33_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch87_out1;
      end
    end



  assign Switch89_out1 = (CT58_out1 == 1'b0 ? Unit_Delay34_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay34_out1 <= Switch89_out1;
      end
    end



  assign Switch91_out1 = (CT60_out1 == 1'b0 ? Unit_Delay35_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay35_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay35_out1 <= Switch91_out1;
      end
    end



  assign Switch25_out1 = (CT16_out1 == 1'b0 ? Unit_Delay15_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch25_out1;
      end
    end



  assign Switch27_out1 = (CT18_out1 == 1'b0 ? Unit_Delay16_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay16_out1 <= Switch27_out1;
      end
    end



  assign Switch29_out1 = (CT20_out1 == 1'b0 ? Unit_Delay17_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch29_out1;
      end
    end



  assign signal2 = (CT23_out1 == 1'b0 ? Unit_Delay18_out1 :
              Unit_Delay18_out1);



  assign s_7 = signal2;

  assign signal2_1 = (CT21_out1 == 1'b0 ? s_7 :
              Unit_Delay17_out1);



  assign s_8 = signal2_1;

  assign signal2_2 = (CT19_out1 == 1'b0 ? s_8 :
              Unit_Delay16_out1);



  assign s_9 = signal2_2;

  assign signal2_3 = (CT17_out1 == 1'b0 ? s_9 :
              Unit_Delay15_out1);



  assign s_10 = signal2_3;

  assign signal2_4 = (CT61_out1 == 1'b0 ? s_10 :
              Unit_Delay35_out1);



  assign s_11 = signal2_4;

  assign signal2_5 = (CT59_out1 == 1'b0 ? s_11 :
              Unit_Delay34_out1);



  assign s_12 = signal2_5;

  assign signal2_6 = (CT57_out1 == 1'b0 ? s_12 :
              Unit_Delay33_out1);



  assign s_13 = signal2_6;

  assign signal2_7 = (CT55_out1 == 1'b0 ? s_13 :
              Unit_Delay30_out1);



  assign signal2_8 = signal2_7;

  assign signal2_9 = signal2_8;

  assign Add2_stage3_1 = {signal2_9[29], signal2_9};
  assign Add2_stage3_add_temp = Add2_op_stage2 + Add2_stage3_1;
  assign Add2_out1 = Add2_stage3_add_temp[29:0];



  assign Switch79_out1 = (switch_compare_1_1 == 1'b0 ? 30'sb000000000000000000000000000000 :
              Add2_out1);



  assign Switch31_out1 = (CT22_out1 == 1'b0 ? Unit_Delay18_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch31_out1;
      end
    end



  assign Cmp19_out1 = Unit_Delay10_out1 == 7'b1000010;



  assign Bit_Slice8_out1 = Unit_Delay18_out1[29:6];



  assign Cmp18_out1 = Unit_Delay10_out1 == 7'b0110111;



  assign Bit_Slice7_out1 = Unit_Delay17_out1[29:6];



  assign Cmp16_out1 = Unit_Delay10_out1 == 7'b0101100;



  assign Bit_Slice5_out1 = Unit_Delay16_out1[29:6];



  assign Cmp8_out1 = Unit_Delay10_out1 == 7'b0100001;



  assign Bit_Slice4_out1 = Unit_Delay15_out1[29:6];



  assign Cmp7_out1 = Unit_Delay10_out1 == 7'b0010110;



  assign Bit_Slice3_out1 = Unit_Delay35_out1[29:6];



  assign Cmp6_out1 = Unit_Delay10_out1 == 7'b0001011;



  assign Bit_Slice2_out1 = Unit_Delay34_out1[29:6];



  assign Cmp5_out1 = Unit_Delay10_out1 == 7'b0000000;



  assign Bit_Slice1_out1 = Unit_Delay33_out1[29:6];



  assign Bit_Slice6_out1 = Unit_Delay30_out1[29:6];



  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay26_out1 <= Switch1_out1;
      end
    end



  assign Switch40_out1 = (Cmp20_out1 == 1'b0 ? Unit_Delay26_out1 :
              Bit_Slice8_out1);



  assign Switch39_out1 = (Cmp19_out1 == 1'b0 ? Switch40_out1 :
              Bit_Slice7_out1);



  assign Switch38_out1 = (Cmp18_out1 == 1'b0 ? Switch39_out1 :
              Bit_Slice5_out1);



  assign Switch37_out1 = (Cmp16_out1 == 1'b0 ? Switch38_out1 :
              Bit_Slice4_out1);



  assign Switch11_out1 = (Cmp8_out1 == 1'b0 ? Switch37_out1 :
              Bit_Slice3_out1);



  assign Switch10_out1 = (Cmp7_out1 == 1'b0 ? Switch11_out1 :
              Bit_Slice2_out1);



  assign Switch9_out1 = (Cmp6_out1 == 1'b0 ? Switch10_out1 :
              Bit_Slice1_out1);



  assign Switch1_out1 = (Cmp5_out1 == 1'b0 ? Switch9_out1 :
              Bit_Slice6_out1);



  always @(posedge g_clk)
    begin : Unit_Delay76_process
      if (Rst_n == 1'b0) begin
        Unit_Delay76_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay76_out1 <= Switch162_out1;
      end
    end



  assign Switch165_out1 = (Or1_out1 == 1'b0 ? Unit_Delay76_out1 :
              12'b000000000000);



  assign Bitwise_Operator7_out1 = Switch163_out1 | Switch165_out1;



  assign Product8_out1 = Bitwise_Operator7_out1 * Bitwise_Operator7_out1;



  assign RO32_relop1 = Product8_out1 < Switch1_out1;



  assign Switch162_out1 = (RO32_relop1 == 1'b0 ? Switch165_out1 :
              Bitwise_Operator7_out1);



  assign Data_Type_Conversion27_out1 = Switch162_out1;



  assign Switch164_out1 = (Cmp17_out1 == 1'b0 ? Unit_Delay77_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay77_process
      if (Rst_n == 1'b0) begin
        Unit_Delay77_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay77_out1 <= Switch164_out1;
      end
    end



  assign RMS_Out0 = Unit_Delay77_out1;

  assign Cmp9_out1 = Unit_Delay10_out1 == 7'b0010101;



  assign Switch12_out1 = (Cmp9_out1 == 1'b0 ? Unit_Delay6_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch12_out1;
      end
    end



  assign RMS_Out1 = Unit_Delay6_out1;

  assign Cmp10_out1 = Unit_Delay10_out1 == 7'b0100000;



  assign Switch13_out1 = (Cmp10_out1 == 1'b0 ? Unit_Delay8_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch13_out1;
      end
    end



  assign RMS_Out2 = Unit_Delay8_out1;

  assign Cmp11_out1 = Unit_Delay10_out1 == 7'b0101011;



  assign Switch14_out1 = (Cmp11_out1 == 1'b0 ? Unit_Delay9_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch14_out1;
      end
    end



  assign RMS_Out3 = Unit_Delay9_out1;

  assign Cmp12_out1 = Unit_Delay10_out1 == 7'b0110110;



  assign Switch33_out1 = (Cmp12_out1 == 1'b0 ? Unit_Delay19_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch33_out1;
      end
    end



  assign RMS_Out4 = Unit_Delay19_out1;

  assign Cmp13_out1 = Unit_Delay10_out1 == 7'b1000001;



  assign Switch34_out1 = (Cmp13_out1 == 1'b0 ? Unit_Delay20_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch34_out1;
      end
    end



  assign RMS_Out5 = Unit_Delay20_out1;

  assign Cmp14_out1 = Unit_Delay10_out1 == 7'b1001100;



  assign Switch35_out1 = (Cmp14_out1 == 1'b0 ? Unit_Delay21_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch35_out1;
      end
    end



  assign RMS_Out6 = Unit_Delay21_out1;

  assign Cmp15_out1 = Unit_Delay10_out1 == 7'b1010111;



  assign Switch36_out1 = (Cmp15_out1 == 1'b0 ? Unit_Delay22_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch36_out1;
      end
    end



  assign RMS_Out7 = Unit_Delay22_out1;




endmodule  // RMSP64Ch8_V10

