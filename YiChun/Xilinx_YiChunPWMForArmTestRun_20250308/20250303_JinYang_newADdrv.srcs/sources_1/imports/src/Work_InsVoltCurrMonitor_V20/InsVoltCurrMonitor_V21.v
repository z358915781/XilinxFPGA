// -------------------------------------------------------------
// 
// File Name: D:\HS_D\WORK_NEW2\2022\VSG\InsVoltCurrMonitor_V21\InsVoltCurrMonitor_V21.v
// Created: 2022-02-17 13:50:53
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-06
// Target subsystem base rate: 1e-06
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: InsVoltCurrMonitor_V21
// Source Path: InsVoltCurrMonitor_V21/InsVoltCurrMonitor_V21
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module InsVoltCurrMonitor_V21
          (
           g_clk,
           Rst_n,
           Uuv_b12,
           Uvw_b12,
           Uwu_b12,
           Ia_b12,
           Ib_b12,
           Ic_b12,
           Iac_OB_ref,
           Iac_OB_En,
           Uac_OB_ref,
           Uac_OB_En,
           InsOV_PrtTime_b12,
           InsOV_BlockTime_b12,
           Pulse4096_Hz,
           InsOV_Block,
           InsOV_Fault,
           Uac_Ins_OV,
           uabc_abs_max,
           Iabc_abs_max
          );



  input   g_clk;
  input   Rst_n;
  input   signed [11:0] Uuv_b12;  // sfix12
  input   signed [11:0] Uvw_b12;  // sfix12
  input   signed [11:0] Uwu_b12;  // sfix12
  input   signed [11:0] Ia_b12;  // sfix12
  input   signed [11:0] Ib_b12;  // sfix12
  input   signed [11:0] Ic_b12;  // sfix12
  input   signed [11:0] Iac_OB_ref;  // sfix12
  input   Iac_OB_En;
  input   signed [11:0] Uac_OB_ref;  // sfix12
  input   Uac_OB_En;
  input   signed [11:0] InsOV_PrtTime_b12;  // sfix12
  input   signed [11:0] InsOV_BlockTime_b12;  // sfix12
  input   Pulse4096_Hz;
  output  InsOV_Block;
  output  InsOV_Fault;
  output  Uac_Ins_OV;
  output  signed [11:0] uabc_abs_max;  // sfix12
  output  signed [11:0] Iabc_abs_max;  // sfix12

  wire [2:0] Add1_out1;  // ufix3
  wire [5:0] Add1_out1_dtc;  // ufix6
  reg [5:0] Unit_Delay123_out1;  // ufix6
  wire [8:0] Add1_add_temp;  // ufix9
  wire CT86_out1;
  wire [5:0] Switch264_out1;  // ufix6
  wire CT9_out1;
  wire CT3_out1;
  wire signed [12:0] Abs3_y;  // sfix13
  wire signed [11:0] Abs3_out1;  // sfix12
  wire signed [12:0] Abs4_y;  // sfix13
  wire signed [11:0] Abs4_out1;  // sfix12
  wire RO1_relop1;
  wire signed [11:0] Switch1_out1;  // sfix12
  wire signed [12:0] Abs5_y;  // sfix13
  wire signed [11:0] Abs5_out1;  // sfix12
  wire RO4_relop1;
  wire signed [11:0] Switch2_out1;  // sfix12
  wire signed [17:0] RO8_1_cast;  // sfix18_En6
  wire RO8_relop1;
  wire CT4_out1;
  wire CT8_out1;
  wire CT1_out1;
  reg  Unit_Delay1_out1;
  wire Switch10_out1;
  wire Switch9_out1;
  wire Or1_out1;
  wire Switch11_out1;
  reg  Unit_Delay2_out1;
  wire signed [11:0] Switch4_out1;  // sfix12
  wire signed [12:0] Abs_y;  // sfix13
  wire signed [11:0] Abs_out1;  // sfix12
  wire signed [12:0] Abs1_y;  // sfix13
  wire signed [11:0] Abs1_out1;  // sfix12
  wire RO2_relop1;
  wire signed [11:0] Switch7_out1;  // sfix12
  wire signed [12:0] Abs2_y;  // sfix13
  wire signed [11:0] Abs2_out1;  // sfix12
  wire RO3_relop1;
  wire signed [11:0] Switch8_out1;  // sfix12
  wire signed [17:0] RO7_1_cast;  // sfix18_En6
  wire RO7_relop1;
  wire RO11_relop1;
  wire signed [11:0] SW15_out1;  // sfix12
  wire signed [11:0] SW12_out1;  // sfix12
  wire Or6_out1;
  reg  Unit_Delay77_out1;
  wire Switch176_out1;
  wire Switch175_out1;
  wire Or3_out1;
  reg  Delay5_out1;
  wire Or4_out1;
  reg signed [11:0] Delay1_out1;  // sfix12
  wire signed [11:0] Add2_out1;  // sfix12
  wire signed [11:0] SW4_out1;  // sfix12
  wire signed [11:0] Switch3_out1;  // sfix12
  wire RO5_relop1;
  wire Or12_out1;
  reg signed [11:0] Delay7_out1;  // sfix12
  wire signed [11:0] SW9_out1;  // sfix12
  wire RO9_relop1;
  wire signed [11:0] SW10_out1;  // sfix12
  wire RO10_relop1;
  wire signed [11:0] SW11_out1;  // sfix12
  reg signed [11:0] Delay8_out1;  // sfix12
  wire signed [11:0] signal2;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire signed [11:0] signal2_1;  // sfix12
  wire signed [11:0] s_1;  // sfix12
  wire signed [11:0] signal2_2;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [11:0] signal2_3;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] SW6_out1;  // sfix12
  wire signed [11:0] SW7_out1;  // sfix12
  reg signed [11:0] Delay3_out1;  // sfix12
  wire DTC_Bool_0_out1;
  wire Or5_out1;
  wire signed [11:0] Switch6_out1;  // sfix12
  wire signed [11:0] Switch12_out1;  // sfix12
  wire Or13_out1;
  wire Or11_out1;
  wire signed [11:0] Switch13_out1;  // sfix12
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  reg signed [11:0] Delay2_out1;  // sfix12
  wire signed [11:0] SW5_out1;  // sfix12
  wire signed [11:0] Switch5_out1;  // sfix12
  wire RO6_relop1;
  wire Or2_out1;
  wire Or7_out1;
  wire Switch177_out1;
  reg  Unit_Delay78_out1;
  wire Or8_out1;
  wire signed [11:0] Switch14_out1;  // sfix12
  wire Or9_out1;

  // 故障时重载一次计数
  // 重载后回0触发二次重载
  // 重载期间内故障次数<5
  // 
  // 单次
  // 
  // 保持0，故障消除5clk后放开
  // 
  // 0
  // 
  // 1
  // 
  // 0
  // 
  // 1
  // 
  // 信号保持一轮
  // 
  // 信号保持一轮
  // 
  // 1
  // 
  // 1


  assign Add1_out1_dtc = {3'b0, Add1_out1};



  assign Add1_add_temp = 9'b000000001 + ({3'b0, Unit_Delay123_out1});
  assign Add1_out1 = Add1_add_temp[2:0];



  assign CT86_out1 = Add1_out1 == 3'b101;



  assign Switch264_out1 = (CT86_out1 == 1'b0 ? Add1_out1_dtc :
              6'b000000);



  always @(posedge g_clk)
    begin : Unit_Delay123_process
      if (Rst_n == 1'b0) begin
        Unit_Delay123_out1 <= 6'b000000;
      end
      else begin
        Unit_Delay123_out1 <= Switch264_out1;
      end
    end



  assign CT9_out1 = Unit_Delay123_out1 == 6'b000100;



  assign CT3_out1 = Unit_Delay123_out1 == 6'b000000;



  assign Abs3_y = (Uuv_b12 < 12'sb000000000000 ?  - ({Uuv_b12[11], Uuv_b12}) :
              {Uuv_b12[11], Uuv_b12});
  assign Abs3_out1 = Abs3_y[11:0];



  assign Abs4_y = (Uvw_b12 < 12'sb000000000000 ?  - ({Uvw_b12[11], Uvw_b12}) :
              {Uvw_b12[11], Uvw_b12});
  assign Abs4_out1 = Abs4_y[11:0];



  assign RO1_relop1 = Abs3_out1 > Abs4_out1;



  assign Switch1_out1 = (RO1_relop1 == 1'b0 ? Abs4_out1 :
              Abs3_out1);



  assign Abs5_y = (Uwu_b12 < 12'sb000000000000 ?  - ({Uwu_b12[11], Uwu_b12}) :
              {Uwu_b12[11], Uwu_b12});
  assign Abs5_out1 = Abs5_y[11:0];



  assign RO4_relop1 = Switch1_out1 > Abs5_out1;



  assign Switch2_out1 = (RO4_relop1 == 1'b0 ? Abs5_out1 :
              Switch1_out1);



  assign RO8_1_cast = {Uac_OB_ref, 6'b000000};
  assign RO8_relop1 = RO8_1_cast > 18'sb000000010100000000;



  assign CT4_out1 = Unit_Delay123_out1 == 6'b000001;



  assign CT8_out1 = Unit_Delay123_out1 == 6'b000010;



  assign CT1_out1 = Unit_Delay123_out1 == 6'b000011;



  assign Switch10_out1 = (Pulse4096_Hz == 1'b0 ? Unit_Delay1_out1 :
              1'b1);



  assign Switch9_out1 = (CT3_out1 == 1'b0 ? Switch10_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch9_out1;
      end
    end



  assign Or1_out1 = Pulse4096_Hz | Unit_Delay1_out1;



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= Switch11_out1;
      end
    end



  assign Switch11_out1 = (CT3_out1 == 1'b0 ? Unit_Delay2_out1 :
              Or1_out1);



  assign Switch4_out1 = (Switch11_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign Abs_y = (Ia_b12 < 12'sb000000000000 ?  - ({Ia_b12[11], Ia_b12}) :
              {Ia_b12[11], Ia_b12});
  assign Abs_out1 = Abs_y[11:0];



  assign Abs1_y = (Ib_b12 < 12'sb000000000000 ?  - ({Ib_b12[11], Ib_b12}) :
              {Ib_b12[11], Ib_b12});
  assign Abs1_out1 = Abs1_y[11:0];



  assign RO2_relop1 = Abs_out1 > Abs1_out1;



  assign Switch7_out1 = (RO2_relop1 == 1'b0 ? Abs1_out1 :
              Abs_out1);



  assign Abs2_y = (Ic_b12 < 12'sb000000000000 ?  - ({Ic_b12[11], Ic_b12}) :
              {Ic_b12[11], Ic_b12});
  assign Abs2_out1 = Abs2_y[11:0];



  assign RO3_relop1 = Switch7_out1 > Abs2_out1;



  assign Switch8_out1 = (RO3_relop1 == 1'b0 ? Abs2_out1 :
              Switch7_out1);



  assign RO7_1_cast = {Iac_OB_ref, 6'b000000};
  assign RO7_relop1 = RO7_1_cast > 18'sb000000010100000000;



  assign SW12_out1 = (RO11_relop1 == 1'b0 ? SW15_out1 :
              12'sb000000000000);



  assign Switch176_out1 = (Or6_out1 == 1'b0 ? Unit_Delay77_out1 :
              1'b1);



  assign Switch175_out1 = (CT3_out1 == 1'b0 ? Switch176_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay77_process
      if (Rst_n == 1'b0) begin
        Unit_Delay77_out1 <= 1'b0;
      end
      else begin
        Unit_Delay77_out1 <= Switch175_out1;
      end
    end



  always @(posedge g_clk)
    begin : Delay5_process
      if (Rst_n == 1'b0) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        Delay5_out1 <= Or3_out1;
      end
    end



  assign Or4_out1 =  ~ Delay5_out1;



  assign SW4_out1 = (CT3_out1 == 1'b0 ? Delay1_out1 :
              Add2_out1);



  always @(posedge g_clk)
    begin : Delay1_process
      if (Rst_n == 1'b0) begin
        Delay1_out1 <= 12'sb000000000000;
      end
      else begin
        Delay1_out1 <= SW4_out1;
      end
    end



  assign Switch3_out1 = (RO7_relop1 == 1'b0 ? Iac_OB_ref :
              Delay1_out1);



  assign RO5_relop1 = Switch8_out1 > Switch3_out1;



  assign Or12_out1 = RO5_relop1 & Iac_OB_En;



  assign SW9_out1 = (CT1_out1 == 1'b0 ? Delay7_out1 :
              Add2_out1);



  assign RO9_relop1 = SW9_out1 >= 12'sb000000000101;



  assign SW10_out1 = (RO9_relop1 == 1'b0 ? SW9_out1 :
              12'sb000000000101);



  assign SW11_out1 = (RO10_relop1 == 1'b0 ? SW10_out1 :
              12'sb000000000001);



  always @(posedge g_clk)
    begin : Delay7_process
      if (Rst_n == 1'b0) begin
        Delay7_out1 <= 12'sb000000000000;
      end
      else begin
        Delay7_out1 <= SW11_out1;
      end
    end



  assign signal2 = (CT9_out1 == 1'b0 ? Delay8_out1 :
              Delay8_out1);



  assign s = signal2;

  assign signal2_1 = (CT1_out1 == 1'b0 ? s :
              Delay7_out1);



  assign s_1 = signal2_1;

  assign signal2_2 = (CT8_out1 == 1'b0 ? s_1 :
              Switch4_out1);



  assign s_2 = signal2_2;

  assign signal2_3 = (CT4_out1 == 1'b0 ? s_2 :
              12'sb111111101100);



  assign s_3 = signal2_3;

  assign signal2_4 = (CT3_out1 == 1'b0 ? s_3 :
              12'sb111111101100);



  assign signal2_5 = signal2_4;

  assign signal2_6 = signal2_5;

  assign SW7_out1 = (RO10_relop1 == 1'b0 ? SW6_out1 :
              12'sb000000000000);



  assign SW6_out1 = (CT8_out1 == 1'b0 ? Delay3_out1 :
              Add2_out1);



  assign RO10_relop1 = SW6_out1 <= 12'sb000000000000;



  assign Or5_out1 = RO10_relop1 & DTC_Bool_0_out1;



  assign Switch6_out1 = (Or5_out1 == 1'b0 ? SW7_out1 :
              InsOV_PrtTime_b12);



  always @(posedge g_clk)
    begin : Delay3_process
      if (Rst_n == 1'b0) begin
        Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Delay3_out1 <= Switch6_out1;
      end
    end



  assign Switch12_out1 = (DTC_Bool_0_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000001);



  assign Or13_out1 =  ~ Or3_out1;



  assign Or11_out1 = Or13_out1 & Switch11_out1;



  assign Switch13_out1 = (Or11_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign signal1 = (CT9_out1 == 1'b0 ? Switch13_out1 :
              Switch13_out1);



  assign s_4 = signal1;

  assign signal1_1 = (CT1_out1 == 1'b0 ? s_4 :
              Switch12_out1);



  assign s_5 = signal1_1;

  assign signal1_2 = (CT8_out1 == 1'b0 ? s_5 :
              Delay3_out1);



  assign s_6 = signal1_2;

  assign signal1_3 = (CT4_out1 == 1'b0 ? s_6 :
              Uac_OB_ref);



  assign s_7 = signal1_3;

  assign signal1_4 = (CT3_out1 == 1'b0 ? s_7 :
              Iac_OB_ref);



  assign signal1_5 = signal1_4;

  assign signal1_6 = signal1_5;

  assign Add2_out1 = signal1_6 + signal2_6;



  assign SW5_out1 = (CT4_out1 == 1'b0 ? Delay2_out1 :
              Add2_out1);



  always @(posedge g_clk)
    begin : Delay2_process
      if (Rst_n == 1'b0) begin
        Delay2_out1 <= 12'sb000000000000;
      end
      else begin
        Delay2_out1 <= SW5_out1;
      end
    end



  assign Switch5_out1 = (RO8_relop1 == 1'b0 ? Uac_OB_ref :
              Delay2_out1);



  assign RO6_relop1 = Switch2_out1 > Switch5_out1;



  assign Or2_out1 = RO6_relop1 & Uac_OB_En;



  assign Or3_out1 = Or2_out1 | Or12_out1;



  assign Or6_out1 = Or3_out1 & Or4_out1;



  assign Or7_out1 = Or6_out1 | Unit_Delay77_out1;



  always @(posedge g_clk)
    begin : Unit_Delay78_process
      if (Rst_n == 1'b0) begin
        Unit_Delay78_out1 <= 1'b0;
      end
      else begin
        Unit_Delay78_out1 <= Switch177_out1;
      end
    end



  assign Switch177_out1 = (CT3_out1 == 1'b0 ? Unit_Delay78_out1 :
              Or7_out1);



  assign DTC_Bool_0_out1 = (Switch177_out1 != 1'b0 ? 1'b1 :
              1'b0);



  assign Or8_out1 = RO11_relop1 & DTC_Bool_0_out1;



  assign Switch14_out1 = (Or8_out1 == 1'b0 ? SW12_out1 :
              InsOV_BlockTime_b12);



  always @(posedge g_clk)
    begin : Delay8_process
      if (Rst_n == 1'b0) begin
        Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Delay8_out1 <= Switch14_out1;
      end
    end



  assign SW15_out1 = (CT9_out1 == 1'b0 ? Delay8_out1 :
              Add2_out1);



  assign RO11_relop1 = SW15_out1 <= 12'sb000000000000;



  assign Or9_out1 =  ~ RO11_relop1;



  assign InsOV_Block = Or9_out1;

  assign InsOV_Fault = RO9_relop1;

  assign Uac_Ins_OV = RO6_relop1;

  assign uabc_abs_max = Switch2_out1;

  assign Iabc_abs_max = Switch8_out1;




endmodule  // InsVoltCurrMonitor_V21

