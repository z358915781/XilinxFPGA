// -------------------------------------------------------------
// 
// File Name: Work_InvControlLoop3L_V40a\InvControlLoop3L_V40a\InvControlLoop3L_V40a.v
// Created: 2021-10-26 09:09:29
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: InvControlLoop3L_V40a
// Source Path: InvControlLoop3L_V40a/InvControlLoop3L_V40a
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module InvControlLoop3L_V40b
          (
			 //CtlLoop_OnDly,
           g_clk,
           Rst_n,
           Udc_b12,
           Idc_b12,
           Uuv_b12,
           Uvw_b12,
           Uwu_b12,
           Ia_b12,
           Ib_b12,
           Ic_b12,
           Uab_RMS,
           Ubc_RMS,
           Uca_RMS,
			  
           Ia_CT,
           Ib_CT,
           Ic_CT,
           UdcPos_b12,
           UdcNeg_b12,
           Udc_Ref_b12,
           Um_ref_b12,
           Unm_ref_b12,
           P_ref_b16,
           Q_ref_b16,
           ILimit_b12,
           C_co_b12,
           R_co_b12,
           Rco_Kp_b12,
           Rco_Ki_b12,
           Udc_Kp_b16,
           Udc_Ki_b16,
           Pdc2ac_co_b16,
           ACDischgPLimit_b16,
           ACChargePLimit_b16,
           Idc_Kp_b16,
           Idc_Ki_b16,
           PdcChgLimit_b16,
           PdcDischgLimit_b16,
           IdcChgLimit_b12,
           IdcDischgLimit_b12,
           L_co_b13,
           Uin_co_b13,
           InLoopKp_b16,
           InLoopKi_b16,
           UacSoftFre_b16,
           IacSoftFre_b16,
           UdcSoftFre_b16,
           Sinwt_b12,
           Coswt_b12,
           nSinwt_b12,
           nCoswt_b12,
           PLL_Kp_b12,
           PLL_Ki_b12,
           CarryNum_b12,
           DC_Kp_b12,
           DC_Ki_b12,
           DC_Cmp_a_b16,
           DC_Cmp_b_b16,
           DCCmp_UpLmt_b16,
           DCCmp_LowLmt_b16,
           w_co_b12,
           Jco_Kp_b12,
           Jco_Ki_b12,
           UqpAdd_UpLimit_b12,
           UqpAdd_LowLimit_b12,
           DeadTime_b8,
           BlockTime_b8,
           DeadTmCp_b12,
           LVRT_WaveThr_b12,
           LVRT_DeltaOut_b12,
           LVRT_DeltaIn_b12,
           LVRT_En,
           LVRT_UnblcCmp_En,
           UOpenLoop_En,
           UdcLoop_En,
           ILoop_En,
           Excite_On,
           SycGen_En,
           SinGen_En,
           DY11_En,
           IDEL,
           CtlLoop_On,
           Pulse_4096Hz,
           Udq_Add_b12,
           w_Add_b16,
           UdcDelta2Uo_co_b12,
           Pm2M0m_co_b12,
           RCom_b12,
           LCom_b12,
           BlcCtl_En,
           CarryShift_b12,
           N3thRestrain_En,
           FilterFre_b16,
           Rsnc_co_b16,
           SncCmp_En,
           CarrySync,
           BelgiumVrt,
           IqRef_co_Lvrt_b12,
           Sim_On,
           w_b18,
           wt_b13,
           Pulse50x16_Hz,
           Pulse50x64_Hz1,
           Pulse50x128_Hz1,
           Pulse50x256_Hz1,
           Pulse50x512_Hz1,
           InsOV_Block,
           First_VS,
           Iq_Filtered_b12,
           Lvrting,
           UnBlc,
           P_b24,
           Q_b24,
           Pdc_b24,
           PulseCarryx32_Hz,
           PulseCarryx64_Hz,
           PulseCarryx128_Hz,
           PWMA_1,
           PWMA_2,
           PWMA_3,
           PWMA_4,
		   PWMA_5,
           PWMA_6,
           PWMB_1,
           PWMB_2,
           PWMB_3,
           PWMB_4,
		   PWMB_5,
           PWMB_6,
           PWMC_1,
           PWMC_2,
           PWMC_3,
           PWMC_4,
		   PWMC_5,
           PWMC_6,
           Udp_b12,
           Uqp_b12,
           Udn_b12,
           Uqn_b12,
           Idp_b12,
           Iqp_b12,
           Idn_b12,
           Iqn_b12,
           Udp_Flted_b12,
           Uqp_Flted_b12,
           Udn_Flted_b12,
           Uqn_Flted_b12,
           Idp_Flted_b12,
           Iqp_Flted_b12,
           Idn_Flted_b12,
           Iqn_Flted_b12,
           Udp_drop_b12,
           Uqp_drop_b12,
           Udn_drop_b12,
           Uqn_drop_b12,
           Udp_ref_in_b12,
           Uqp_ref_in_b12,
           Udn_ref_in_b12,
           Uqn_ref_in_b12,
           Idp_ref_in_b12,
           Iqp_ref_in_b12,
           Idn_ref_in_b12,
           Iqn_ref_in_b12,
           UdpVct_Flted_b12,
           UqpVct_Flted_b12,
           UdnVct_Flted_b12,
           UqnVct_Flted_b12,
           Rco_in_b12,
           Mdp_b12,
           Mqp_b12,
           Mdn_b12,
           Mqn_b12,
           Ma_b12,
           Mb_b12,
           Mc_b12,
           Idca_b12,
           Idcb_b12,
           Delta_DCa_b12,
           Delta_DCb_b12,
           PIdp_cmp_b12,
           PIqp_cmp_b12,
           PIdn_cmp_b12,
           PIqn_cmp_b12,
           UdpVct_In_b12,
           UqpVct_In_b12,
           U0_b12,
           UdcDelta_Temp_b12,
           MaIn_b12,
           MbIn_b12,
           McIn_b12,
           MsvA_b12,
           MsvB_b12,
           MsvC_b12,
           IcomOrgAll_b12,
           ChgPLimit_b16,
           DischgPLimit_b16,
           UdcPIUpLimit_Back_b16,
           Pdc2ac_ref_b16,
           PulseCarryx1_Hz,
           Zvrting,
           PulseCarryx16_Hz,
           Up_Mod_b12,
           UmRef_Soft_b12,
			  Um_ref_new_b12,
			  Um_ref_out_b12,
			  IacSoftFre2_b16,
			  PWMsync,
			  mod_sel,
			  m_sel,
			  PwmLoadPluse,
			  LoadMode,
			  Idp_ref_in_b12_LvrtLock,
			  Iqp_ref_in_b12_LvrtLock,
			  Idn_ref2,  // sfix12
			  Iqn_ref2,  // sfix12 
			  Switch66_out1_out, 
			  Switch69_out1_out,
			  Um_dq,
			  Un_dq,
			  
			work,
            Dly_u8,
            Kr_b16,
            RRLmt_b12,
            Q_b12,
            
             MaIn_b12_2,
             MbIn_b12_2,
             McIn_b12_2,
            NewUn,
			mid20_out1_out,
			mid20_out1_in,
			OneDivUpnm_b24,
			  PwmLockA, //Or1_out1_8
			  PwmLockB,
			  PwmLockC,
			  Soft_on,
			  Carryb12Out
          );
		  
		  output [11:0] Carryb12Out;
		  assign  Carryb12Out= Bit_Slice_out1;
		  
		  output  Soft_on;
		  input   PwmLockA;
		  input   PwmLockB;
		  input   PwmLockC;
		  output [23:0] OneDivUpnm_b24; 
    input signed [11:0] MaIn_b12_2;
            input signed [11:0] MbIn_b12_2;
            input signed [11:0] McIn_b12_2;
            input  NewUn;
          	output signed [11:0] mid20_out1_out;
			input  signed [11:0] mid20_out1_in;
   assign OneDivUpnm_b24 = Unit_Delay93_out1;      
  input   work;		  
  input   [15:0] Dly_u8; 
  input   [15:0] Kr_b16; 
  input   [11:0] RRLmt_b12; 
  input   [15:0] Q_b12;
  
  input [1:0]  mod_sel;
   input        m_sel;
   input [1:0]  LoadMode;
  output  PwmLoadPluse;
  output  PWMA_5;
  output  PWMA_6; 
  output  PWMB_5;
  output  PWMB_6; 
  output  PWMC_5;
  output  PWMC_6;
  //input   CtlLoop_OnDly;
  output PWMsync;
  input   g_clk;
  input   Rst_n; 
  input   [15:0] IacSoftFre2_b16;
  input   signed [11:0] Idn_ref2;
  input   signed [11:0] Iqn_ref2;
  input   signed [11:0] Idp_ref_in_b12_LvrtLock; 
  input   signed [11:0] Iqp_ref_in_b12_LvrtLock;  
  output  signed   [11:0] Switch66_out1_out; 
  output  signed   [11:0] Switch69_out1_out; 
  output  signed   [11:0] Um_dq;
  output  signed   [11:0] Un_dq;
  assign Un_dq = Switch164_out1_1;
  assign Um_dq = Switch160_out1_1;  
  input   signed [11:0] Udc_b12;  // sfix12
  input   signed [11:0] Idc_b12;  // sfix12
  input   signed [11:0] Uuv_b12;  // sfix12
  input   signed [11:0] Uvw_b12;  // sfix12
  input   signed [11:0] Uwu_b12;  // sfix12
  input   signed [11:0] Ia_b12;  // sfix12
  input   signed [11:0] Ib_b12;  // sfix12
  input   signed [11:0] Ic_b12;  // sfix12
  input   signed [11:0] Uab_RMS;  // sfix12
  input   signed [11:0] Ubc_RMS;  // sfix12
  input   signed [11:0] Uca_RMS;  // sfix12
  input   signed [11:0] Ia_CT;  // sfix12
  input   signed [11:0] Ib_CT;  // sfix12
  input   signed [11:0] Ic_CT;  // sfix12
  input   signed [11:0] UdcPos_b12;  // sfix12
  input   signed [11:0] UdcNeg_b12;  // sfix12
  input   signed [11:0] Udc_Ref_b12;  // sfix12
  input   signed [11:0] Um_ref_b12;  // sfix12
  input   signed [11:0] Unm_ref_b12;  // sfix12
  input   signed [15:0] P_ref_b16;  // int16
  input   signed [15:0] Q_ref_b16;  // int16
  input   signed [11:0] ILimit_b12;  // sfix12
  input   signed [11:0] C_co_b12;  // sfix12
  input   signed [11:0] R_co_b12;  // sfix12
  input   signed [11:0] Rco_Kp_b12;  // sfix12
  input   signed [11:0] Rco_Ki_b12;  // sfix12
  input   signed [15:0] Udc_Kp_b16;  // int16
  input   signed [15:0] Udc_Ki_b16;  // int16
  input   signed [15:0] Pdc2ac_co_b16;  // int16
  input   signed [15:0] ACDischgPLimit_b16;  // int16
  input   signed [15:0] ACChargePLimit_b16;  // int16
  input   signed [15:0] Idc_Kp_b16;  // int16
  input   signed [15:0] Idc_Ki_b16;  // int16
  input   signed [15:0] PdcChgLimit_b16;  // int16
  input   signed [15:0] PdcDischgLimit_b16;  // int16
  input   signed [11:0] IdcChgLimit_b12;  // sfix12
  input   signed [11:0] IdcDischgLimit_b12;  // sfix12
  input   signed [12:0] L_co_b13;  // sfix13
  input   signed [12:0] Uin_co_b13;  // sfix13
  input   signed [15:0] InLoopKp_b16;  // int16
  input   signed [15:0] InLoopKi_b16;  // int16
  input   [15:0] UacSoftFre_b16;  // uint16
  input   [15:0] IacSoftFre_b16;  // uint16
  input   [15:0] UdcSoftFre_b16;  // uint16
  input   signed [11:0] Sinwt_b12;  // sfix12
  input   signed [11:0] Coswt_b12;  // sfix12
  input   signed [11:0] nSinwt_b12;  // sfix12
  input   signed [11:0] nCoswt_b12;  // sfix12
  input   signed [11:0] PLL_Kp_b12;  // sfix12
  input   signed [11:0] PLL_Ki_b12;  // sfix12
  input   signed [11:0] CarryNum_b12;  // sfix12
  input   signed [11:0] DC_Kp_b12;  // sfix12
  input   signed [11:0] DC_Ki_b12;  // sfix12
  input   signed [15:0] DC_Cmp_a_b16;  // int16
  input   signed [15:0] DC_Cmp_b_b16;  // int16
  input   signed [15:0] DCCmp_UpLmt_b16;  // int16
  input   signed [15:0] DCCmp_LowLmt_b16;  // int16
  input   signed [11:0] w_co_b12;  // sfix12
  input   signed [11:0] Jco_Kp_b12;  // sfix12
  input   signed [11:0] Jco_Ki_b12;  // sfix12
  input   signed [11:0] UqpAdd_UpLimit_b12;  // sfix12
  input   signed [11:0] UqpAdd_LowLimit_b12;  // sfix12
  input   [7:0] DeadTime_b8;  // uint8
  input   signed [7:0] BlockTime_b8;  // int8
  input   signed [11:0] DeadTmCp_b12;  // sfix12
  input   signed [11:0] LVRT_WaveThr_b12;  // sfix12
  input   signed [11:0] LVRT_DeltaOut_b12;  // sfix12
  input   signed [11:0] LVRT_DeltaIn_b12;  // sfix12
  input   LVRT_En;
  input   LVRT_UnblcCmp_En;
  input   UOpenLoop_En;
  input   UdcLoop_En;
  input   ILoop_En;
  input   Excite_On;
  input   SycGen_En;
  input   SinGen_En;
  input   DY11_En;
  input   IDEL;
  input   CtlLoop_On;
  input   Pulse_4096Hz;
  input   signed [11:0] Udq_Add_b12;  // sfix12
  input   signed [15:0] w_Add_b16;  // int16
  input   signed [11:0] UdcDelta2Uo_co_b12;  // sfix12
  input   signed [11:0] Pm2M0m_co_b12;  // sfix12
  input   signed [11:0] RCom_b12;  // sfix12
  input   signed [11:0] LCom_b12;  // sfix12
  input   BlcCtl_En;
  input   [11:0] CarryShift_b12;  // ufix12
  input   N3thRestrain_En;
  input   [15:0] FilterFre_b16;  // uint16
  input   signed [15:0] Rsnc_co_b16;  // int16
  input   SncCmp_En;
  input   CarrySync;
  input   BelgiumVrt;
  input   signed [11:0] IqRef_co_Lvrt_b12;  // sfix12
  input   Sim_On;
  input   signed [17:0] w_b18;  // sfix18
  input   [12:0] wt_b13;  // ufix13
  input   Pulse50x16_Hz;
  input   Pulse50x64_Hz1;
  input   Pulse50x128_Hz1;
  input   Pulse50x256_Hz1;
  input   Pulse50x512_Hz1;
  input   InsOV_Block;
  output  First_VS;
  output  signed [11:0] Iq_Filtered_b12;  // sfix12
  output  Lvrting;
  output  UnBlc;
  output  signed [23:0] P_b24;  // sfix24
  output  signed [23:0] Q_b24;  // sfix24
  output  signed [23:0] Pdc_b24;  // sfix24
  output  PulseCarryx32_Hz;
  output  PulseCarryx64_Hz;
  output  PulseCarryx128_Hz;
  output  PWMA_1;
  output  PWMA_2;
  output  PWMA_3;
  output  PWMA_4;
  output  PWMB_1;
  output  PWMB_2;
  output  PWMB_3;
  output  PWMB_4;
  output  PWMC_1;
  output  PWMC_2;
  output  PWMC_3;
  output  PWMC_4;
  output  signed [11:0] Udp_b12;  // sfix12
  output  signed [11:0] Uqp_b12;  // sfix12
  output  signed [11:0] Udn_b12;  // sfix12
  output  signed [11:0] Uqn_b12;  // sfix12
  output  signed [11:0] Idp_b12;  // sfix12
  output  signed [11:0] Iqp_b12;  // sfix12
  output  signed [11:0] Idn_b12;  // sfix12
  output  signed [11:0] Iqn_b12;  // sfix12
  output  signed [11:0] Udp_Flted_b12;  // sfix12
  output  signed [11:0] Uqp_Flted_b12;  // sfix12
  output  signed [11:0] Udn_Flted_b12;  // sfix12
  output  signed [11:0] Uqn_Flted_b12;  // sfix12
  output  signed [11:0] Idp_Flted_b12;  // sfix12
  output  signed [11:0] Iqp_Flted_b12;  // sfix12
  output  signed [11:0] Idn_Flted_b12;  // sfix12
  output  signed [11:0] Iqn_Flted_b12;  // sfix12
  output  signed [11:0] Udp_drop_b12;  // sfix12
  output  signed [11:0] Uqp_drop_b12;  // sfix12
  output  signed [11:0] Udn_drop_b12;  // sfix12
  output  signed [11:0] Uqn_drop_b12;  // sfix12
  output  signed [11:0] Udp_ref_in_b12;  // sfix12
  output  signed [11:0] Uqp_ref_in_b12;  // sfix12
  output  signed [11:0] Udn_ref_in_b12;  // sfix12
  output  signed [11:0] Uqn_ref_in_b12;  // sfix12
  output  signed [11:0] Idp_ref_in_b12;  // sfix12
  output  signed [11:0] Iqp_ref_in_b12;  // sfix12
  output  signed [11:0] Idn_ref_in_b12;  // sfix12
  output  signed [11:0] Iqn_ref_in_b12;  // sfix12
  output  signed [11:0] UdpVct_Flted_b12;  // sfix12
  output  signed [11:0] UqpVct_Flted_b12;  // sfix12
  output  signed [11:0] UdnVct_Flted_b12;  // sfix12
  output  signed [11:0] UqnVct_Flted_b12;  // sfix12
  output  signed [11:0] Rco_in_b12;  // sfix12
  output  signed [11:0] Mdp_b12;  // sfix12
  output  signed [11:0] Mqp_b12;  // sfix12
  output  signed [11:0] Mdn_b12;  // sfix12
  output  signed [11:0] Mqn_b12;  // sfix12
  output  signed [11:0] Ma_b12;  // sfix12
  output  signed [11:0] Mb_b12;  // sfix12
  output  signed [11:0] Mc_b12;  // sfix12
  output  signed [11:0] Idca_b12;  // sfix12
  output  signed [11:0] Idcb_b12;  // sfix12
  output  signed [11:0] Delta_DCa_b12;  // sfix12
  output  signed [11:0] Delta_DCb_b12;  // sfix12
  output  signed [11:0] PIdp_cmp_b12;  // sfix12
  output  signed [11:0] PIqp_cmp_b12;  // sfix12
  output  signed [11:0] PIdn_cmp_b12;  // sfix12
  output  signed [11:0] PIqn_cmp_b12;  // sfix12
  output  signed [11:0] UdpVct_In_b12;  // sfix12
  output  signed [11:0] UqpVct_In_b12;  // sfix12
  output  signed [11:0] U0_b12;  // sfix12
  output  signed [11:0] UdcDelta_Temp_b12;  // sfix12
  output  signed [11:0] MaIn_b12;  // sfix12
  output  signed [11:0] MbIn_b12;  // sfix12
  output  signed [11:0] McIn_b12;  // sfix12
  output  signed [11:0] MsvA_b12;  // sfix12
  output  signed [11:0] MsvB_b12;  // sfix12
  output  signed [11:0] MsvC_b12;  // sfix12
  output  signed [11:0] IcomOrgAll_b12;  // sfix12
  output  signed [15:0] ChgPLimit_b16;  // int16
  output  signed [15:0] DischgPLimit_b16;  // int16
  output  signed [15:0] UdcPIUpLimit_Back_b16;  // int16
  output  signed [15:0] Pdc2ac_ref_b16;  // int16
  output  PulseCarryx1_Hz;
  output  Zvrting;
  output  PulseCarryx16_Hz;
  output  signed [11:0] Up_Mod_b12;  // sfix12
  output  signed [11:0] UmRef_Soft_b12;  // sfix12
  output  signed [11:0] Um_ref_out_b12;
  input   signed [11:0] Um_ref_new_b12;  // sfix12

  reg  Unit_Delay59_out1;
  wire Logical_Operator2_out1;
  reg  Unit_Delay1_out1;
  reg  Unit_Delay59_out1_1;
  wire Logical_Operator1_out1;
  reg  Unit_Delay59_out1_2;
  wire Logical_Operator1_out1_1;
  wire [6:0] Switch139_out1;  // ufix7
  reg [6:0] Unit_Delay58_out1;  // ufix7
  wire [6:0] Add12_out1;  // ufix7
  wire CT73_out1;
  wire Logical_Operator_out1;
  wire [6:0] Switch126_out1;  // ufix7
  wire [6:0] Switch139_out1_1;  // ufix7
  reg [6:0] Unit_Delay58_out1_1;  // ufix7
  wire [6:0] Add12_out1_1;  // ufix7
  wire CT73_out1_1;
  wire Logical_Operator_out1_1;
  wire [6:0] Switch126_out1_1;  // ufix7
  wire Logical_Operator_out1_2;
  wire CT72_out1;
  wire CT72_out1_1;
  reg  Unit_Delay24_out1;
  wire Or12_out1;
  wire [8:0] Bit_Slice5_out1;  // ufix9
  wire Cmp14_out1;
  wire Cmp12_out1;
  wire [11:0] Switch159_out1;  // ufix12
  reg [11:0] Unit_Delay75_out1;  // ufix12
  wire [11:0] bit_shift_out1;  // ufix12
  wire Cmp13_out1;
  wire CT89_out1;
  wire CT90_out1;
  wire CT92_out1;
  wire CT94_out1;
  wire CT96_out1;
  wire CT159_out1;
  wire CT161_out1;
  wire CT98_out1;
  wire CT163_out1;
  wire CT100_out1;
  wire CT165_out1;
  wire CT167_out1;
  wire CT169_out1;
  wire CT139_out1;
  wire CT82_out1;
  wire CT77_out1;
  wire CT39_out1;
  wire CT40_out1;
  wire CT97_out1;
  wire CT98_out1_1;
  wire CT99_out1;
  wire CT100_out1_1;
  wire Logical_Operator5_out1;
  wire CT64_out1;
  wire CT65_out1;
  wire CT66_out1;
  wire CT67_out1;
  wire CT111_out1;
  wire CT112_out1;
  wire Logical_Operator6_out1;
  wire CT5_out1;
  wire CT3_out1;
  wire CT43_out1;
  wire CT22_out1;
  wire CT21_out1;
  wire CT23_out1;
  wire CT35_out1;
  wire CT37_out1;
  wire CT28_out1;
  wire CT31_out1;
  wire CT33_out1;
  wire CT47_out1;
  wire CT49_out1;
  wire CT51_out1;
  reg [1:0] Unit_Delay7_out1;  // ufix2
  wire [1:0] Add1_out1;  // ufix2
  wire CT32_out1;
  wire CT12_out1;
  reg [6:0] Unit_Delay5_out1;  // ufix7
  wire [6:0] Add12_out1_2;  // ufix7
  wire CT97_out1_1;
  wire [6:0] Switch126_out1_2;  // ufix7
  wire CT16_out1;
  wire CT19_out1;
  wire CT20_out1;
  wire CT22_out1_1;
  wire CT24_out1;
  wire CT26_out1;
  wire CT44_out1;
  reg  Unit_Delay7_out1_1;  // ufix1
  wire [8:0] Add120_add_temp;  // ufix9
  wire Add1_out1_1;  // ufix1
  wire CT56_out1;
  wire CT12_out1_1;
  reg  Unit_Delay54_out1;
  wire Switch20_out1;
  wire Switch17_out1;
  wire Or3_out1;
  wire Switch208_out1;
  reg  Unit_Delay55_out1;
  wire CT70_out1;
  wire Or2_out1;
  wire [6:0] Switch83_out1;  // ufix7
  reg [6:0] Unit_Delay32_out1;  // ufix7
  wire [6:0] Add11_out1;  // ufix7
  wire Ro107_relop1;
  reg  Unit_Delay57_out1;
  wire Switch49_out1;
  wire Switch105_out1;
  reg  Unit_Delay1_out1_1;
  wire CT55_out1;
  wire CT57_out1;
  wire signed [11:0] signal1;  // sfix12
  wire signed [11:0] s;  // sfix12
  wire switch_compare_1;
  wire signed [11:0] signal1_1;  // sfix12
  wire signed [11:0] signal1_2;  // sfix12
  wire signed [11:0] signal1_3;  // sfix12
  wire signed [11:0] Switch84_out1;  // sfix12
  wire signed [11:0] Switch97_out1;  // sfix12
  wire [6:0] Add12_out1_3;  // ufix7
  wire signed [11:0] Simple_Dual_Port_RAM2_out1;  // sfix12
  wire switch_compare_1_1;
  wire signed [11:0] Switch98_out1;  // sfix12
  wire signed [18:0] Add7_stage23_1;  // sfix19
  wire signed [18:0] Add7_stage23_2;  // sfix19
  wire signed [18:0] Add7_op_stage2;  // sfix19
  wire CT51_out1_1;
  reg signed [17:0] Unit_Delay30_out1;  // sfix18
  wire signed [17:0] Switch79_out1;  // sfix18
  wire signed [17:0] Switch80_out1;  // sfix18
  wire signed [17:0] B23_out1_signal2;  // sfix18
  reg signed [17:0] Unit_Delay33_out1;  // sfix18
  wire signed [17:0] B24_out1_signal2;  // sfix18
  wire signed [17:0] B24_out1_signal2_1;  // sfix18
  wire signed [17:0] signal2;  // sfix18
  wire signed [17:0] s_1;  // sfix18
  wire signed [17:0] signal2_1;  // sfix18
  wire signed [17:0] signal2_2;  // sfix18
  wire signed [17:0] signal2_3;  // sfix18
  wire signed [18:0] Add7_stage33_add_temp;  // sfix19
  wire signed [18:0] Add7_stage33_1;  // sfix19
  wire signed [17:0] Add7_out1;  // sfix18
  wire signed [17:0] Switch87_out1;  // sfix18
  wire [11:0] Bit_Slice1_out1;  // ufix12
  wire signed [11:0] Data_Type_S12_out1;  // sfix12
  wire signed [11:0] Switch107_out1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1;  // sfix12
  wire signed [12:0] Unary_Minus42_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1;  // sfix12
  wire signed [11:0] signal1_4;  // sfix12
  wire signed [11:0] s_2;  // sfix12
  wire signed [12:0] Unary_Minus33_in0;  // sfix13
  wire signed [11:0] Unary_Minus3_out1;  // sfix12
  wire signed [11:0] signal1_5;  // sfix12
  wire signed [11:0] s_3;  // sfix12
  wire [11:0] Bit_Slice6_out1;  // ufix12
  wire signed [11:0] Data_Type_S11_out1;  // sfix12
  wire signed [11:0] Switch107_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_1;  // sfix12
  wire signed [12:0] Unary_Minus23_in0;  // sfix13
  wire signed [11:0] Unary_Minus2_out1;  // sfix12
  wire signed [11:0] signal1_6;  // sfix12
  wire signed [11:0] s_4;  // sfix12
  wire signed [12:0] Unary_Minus112_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1;  // sfix12
  wire signed [11:0] signal1_7;  // sfix12
  wire signed [11:0] signal1_8;  // sfix12
  wire signed [11:0] s_5;  // sfix12
  wire CT17_out1;
  wire RO74_relop1;
  wire signed [11:0] Switch24_out1;  // sfix12
  wire RO410_relop1;
  wire signed [11:0] Switch21_out1;  // sfix12
  wire signed [11:0] signal1_9;  // sfix12
  wire signed [11:0] signal1_10;  // sfix12
  wire signed [11:0] s_6;  // sfix12
  wire signed [11:0] signal2_4;  // sfix12
  wire signed [11:0] s_7;  // sfix12
  wire signed [11:0] signal2_5;  // sfix12
  wire signed [11:0] s_8;  // sfix12
  wire signed [11:0] signal2_6;  // sfix12
  wire signed [11:0] s_9;  // sfix12
  wire signed [11:0] signal2_7;  // sfix12
  wire signed [11:0] signal2_8;  // sfix12
  wire signed [23:0] Data_Type_Conversion4_out1;  // sfix24
  wire signed [17:0] signal2_9;  // sfix18
  wire signed [17:0] signal2_10;  // sfix18
  wire signed [23:0] Data_Type_Conversion7_out1;  // sfix24
  wire signed [11:0] signal1_11;  // sfix12
  wire signed [11:0] signal1_12;  // sfix12
  wire signed [23:0] signal2_11;  // sfix24
  wire signed [23:0] signal2_12;  // sfix24
  wire signed [35:0] Product_out1;  // sfix36
  wire RO123_relop1;
  wire signed [35:0] Constant18_out1_dtc;  // sfix36
  wire signed [35:0] Switch30_out1;  // sfix36
  wire RO84_relop1;
  wire signed [35:0] Constant17_out1_dtc;  // sfix36
  wire signed [35:0] Switch29_out1;  // sfix36
  wire signed [29:0] Data_Type_Conversion8_out1;  // sfix30
  reg signed [29:0] Unit_Delay7_out1_2;  // sfix30
  wire signed [29:0] Switch25_out1;  // sfix30
  wire signed [29:0] Switch81_out1;  // sfix30
  reg [34:0] Unit_Delay2_out1;  // ufix35
  wire signed [36:0] Add82_add_temp;  // sfix37
  wire signed [36:0] Add82_1;  // sfix37
  wire signed [36:0] Add82_2;  // sfix37
  wire [34:0] Add8_out1;  // ufix35
  wire [11:0] Bit_Slice5_out1_1;  // ufix12
  wire [6:0] Bit_Slice3_out1;  // ufix7
  reg [6:0] Unit_Delay53_out1;  // ufix7
  wire Relational_Operator3_relop1;
  reg  Unit_Delay54_out1_1;
  wire Switch20_out1_1;
  wire Switch17_out1_1;
  wire Or3_out1_1;
  wire Switch208_out1_1;
  reg  Unit_Delay55_out1_1;
  wire CT70_out1_1;
  wire Or2_out1_1;
  wire [6:0] Switch31_out1;  // ufix7
  reg [6:0] Unit_Delay13_out1;  // ufix7
  wire [6:0] Add11_out1_1;  // ufix7
  wire Ro105_relop1;
  reg  Unit_Delay57_out1_1;
  wire Switch49_out1_1;
  wire Switch105_out1_1;
  reg  Unit_Delay43_out1;
  wire switch_compare_1_2;
  wire switch_compare_1_3;
  wire CT55_out1_1;
  wire CT57_out1_1;
  wire CT31_out1_1;
  wire CT33_out1_1;
  wire CT26_out1_1;
  wire CT46_out1;
  wire CT47_out1_1;
  wire Lo_out1;
  wire CT130_out1;
  wire CT174_out1;
  wire Lo1_out1;
  wire CT43_out1_1;
  wire CT54_out1;
  wire CT68_out1;
  wire CT74_out1;
  wire CT76_out1;
  wire CT83_out1;
  wire CT85_out1;
  wire CT87_out1;
  wire CT101_out1;
  wire CT103_out1;
  wire CT39_out1_1;
  wire CT79_out1;
  wire CT121_out1;
  wire CT140_out1;
  wire CT146_out1;
  wire CT128_out1;
  wire CT148_out1;
  wire CT150_out1;
  wire CT152_out1;
  wire CT154_out1;
  wire CT156_out1;
  wire CT1_out1;
  wire CT3_out1_1;
  wire CT179_out1;
  wire CT5_out1_1;
  wire CT7_out1;
  wire CT9_out1;
  wire CT14_out1;
  wire CT60_out1;
  wire CT62_out1;
  wire CT171_out1;
  wire CT178_out1;
  wire signed [11:0] signal1_13;  // sfix12
  wire signed [11:0] s_10;  // sfix12
  wire signed [11:0] signal1_14;  // sfix12
  wire signed [11:0] s_11;  // sfix12
  wire signed [11:0] signal1_15;  // sfix12
  wire signed [11:0] s_12;  // sfix12
  wire signed [11:0] signal1_16;  // sfix12
  wire signed [11:0] s_13;  // sfix12
  wire CT23_out1_1;
  wire CT24_out1_1;
  wire signed [11:0] signal3;  // sfix12
  wire signed [11:0] signal3_1;  // sfix12
  wire signed [11:0] signal3_2;  // sfix12
  wire CT2_out1;
  wire signed [47:0] Constant1_out1_dtc;  // sfix48
  wire signed [47:0] Constant3_out1_dtc;  // sfix48
  wire signed [11:0] signal4;  // sfix12
  wire signed [11:0] signal4_1;  // sfix12
  wire signed [11:0] signal4_2;  // sfix12
  wire signed [16:0] signal4_dtc;  // sfix17
  wire signed [11:0] signal5;  // sfix12
  wire signed [11:0] signal5_1;  // sfix12
  wire signed [11:0] signal5_2;  // sfix12
  wire CT123_out1;
  reg  Unit_Delay52_out1;
  wire Switch124_out1;
  wire Switch123_out1;
  wire Or1_out1;
  wire Switch125_out1;
  reg  Unit_Delay53_out1_1;
  wire OR4_out1;
  wire switch_compare_1_4;
  wire CT4_out1;
  wire CT22_out1_2;
  wire CT111_out1_1;
  wire CT48_out1;
  wire CT106_out1;
  wire CT108_out1;
  wire CT132_out1;
  wire CT125_out1;
  wire CT134_out1;
  wire CT112_out1_1;
  wire CT113_out1;
  wire CT114_out1;
  wire CT116_out1;
  wire CT117_out1;
  wire CT182_out1;
  wire CT184_out1;
  wire CT64_out1_1;
  wire CT176_out1;
  wire CT186_out1;
  wire CT170_out1;
  wire CT59_out1;
  wire CT180_out1;
  wire CT66_out1_1;
  wire Or_out1;
  wire OR3_out1_2;
  wire OR2_out1_2;
  wire CT49_out1_1;
  wire CT50_out1;
  wire CT65_out1_1;
  reg [6:0] Unit_Delay38_out1;  // ufix7
  wire [6:0] Add12_out1_4;  // ufix7
  wire CT97_out1_2;
  wire [6:0] Switch126_out1_3;  // ufix7
  wire CT99_out1_1;
  wire CT59_out1_1;
  wire CT5_out1_2;
  wire CT1_out1_1;
  wire CT3_out1_2;
  wire CT2_out1_1;
  wire CT7_out1_1;
  wire CT4_out1_1;
  wire CT14_out1_1;
  wire CT15_out1;
  wire CT101_out1_1;
  wire CT103_out1_1;
  wire CT104_out1;
  wire CT17_out1_1;
  wire CT18_out1;
  wire CT19_out1_1;
  wire CT21_out1_1;
  wire CT22_out1_3;
  wire CT47_out1_2;
  wire CT48_out1_1;
  wire CT49_out1_2;
  wire CT50_out1_1;
  wire CT51_out1_2;
  wire CT52_out1;
  wire CT53_out1;
  wire CT54_out1_1;
  wire CT61_out1;
  wire CT62_out1_1;
  wire CT63_out1;
  wire CT64_out1_2;
  wire CT65_out1_2;
  wire CT66_out1_2;
  wire CT67_out1_1;
  wire CT68_out1_1;
  wire CT73_out1_2;
  wire CT74_out1_1;
  wire CT75_out1;
  wire CT76_out1_1;
  wire CT79_out1_1;
  wire CT80_out1;
  wire CT81_out1;
  wire CT82_out1_1;
  wire CT91_out1;
  wire CT92_out1_1;
  wire CT93_out1;
  wire CT94_out1_1;
  wire CT118_out1;
  wire CT119_out1;
  wire CT120_out1;
  wire CT121_out1_1;
  wire CT122_out1;
  wire CT123_out1_1;
  wire CT124_out1;
  wire CT125_out1_1;
  wire CT114_out1_1;
  wire CT6_out1;
  wire CT8_out1;
  wire CT9_out1_1;
  wire CT117_out1_1;
  wire CT111_out1_2;
  wire CT113_out1_1;
  wire CT115_out1;
  wire CT90_out1_1;
  wire CT30_out1;
  wire CT32_out1_1;
  wire CT34_out1;
  wire CT46_out1_1;
  wire CT40_out1_1;
  wire CT42_out1;
  wire CT44_out1_1;
  wire CT86_out1;
  wire CT88_out1;
  wire CT78_out1;
  wire CT77_out1_1;
  wire CT23_out1_2;
  wire CT20_out1_1;
  wire CT16_out1_1;
  wire CT13_out1;
  wire CT105_out1;
  wire CT102_out1;
  wire CT98_out1_2;
  wire signed [13:0] Add31_add_temp;  // sfix14
  wire signed [13:0] Add31_1;  // sfix14
  wire signed [13:0] Add31_2;  // sfix14
  wire signed [13:0] Add31_3;  // sfix14
  wire signed [13:0] Add3_out1;  // sfix14
  wire signed [25:0] Product12_out1;  // sfix26
  wire [14:0] Bit_Slice15_out1;  // ufix15
  wire signed [14:0] Data_Type_Conversion7_out1_1;  // sfix15
  wire signed [14:0] Saturation15_out1;  // sfix15
  wire signed [11:0] Data_Type_Conversion34_out1;  // sfix12
  wire signed [12:0] Add11_1;  // sfix13
  wire signed [12:0] Add11_2;  // sfix13
  wire signed [12:0] Add1_out1_2;  // sfix13
  wire signed [12:0] Saturation1_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion3_out1;  // sfix12
  wire signed [11:0] Switch107_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_2;  // sfix12
  wire signed [12:0] Add21_1;  // sfix13
  wire signed [12:0] Add21_2;  // sfix13
  wire signed [12:0] Add2_out1;  // sfix13
  wire signed [12:0] Saturation2_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion5_out1;  // sfix12
  wire signed [11:0] Switch107_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_3;  // sfix12
  wire signed [12:0] Add41_1;  // sfix13
  wire signed [12:0] Add41_2;  // sfix13
  wire signed [12:0] Add4_out1;  // sfix13
  wire signed [12:0] Saturation3_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion6_out1;  // sfix12
  wire signed [11:0] Switch107_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_4;  // sfix12
  wire CT84_out1;
  wire CT83_out1_1;
  reg [1:0] Unit_Delay10_out1;  // ufix2
  wire [1:0] Add1_out1_3;  // ufix2
  wire CT25_out1;
  wire CT24_out1_2;
  reg  Unit_Delay32_out1_1;
  wire Switch209_out1;
  wire Switch82_out1;
  wire Or4_out1_1;
  wire Switch210_out1;
  reg  Unit_Delay56_out1;
  wire CT36_out1;
  wire CT38_out1;
  wire CT26_out1_2;
  wire CT28_out1_1;
  wire CT27_out1;
  wire CT37_out1_1;
  wire CT35_out1_1;
  wire [7:0] Switch50_out1;  // uint8
  wire [7:0] Add16_out1;  // uint8
  reg [7:0] Unit_Delay16_out1;  // uint8
  wire [7:0] Add19_out1;  // uint8
  reg [1:0] Unit_Delay51_out1;  // ufix2
  wire [1:0] Add2_out1_1;  // ufix2
  wire CT106_out1_1;
  wire CT131_out1;
  reg  Unit_Delay53_out1_2;
  wire Switch137_out1;
  wire Switch141_out1;
  wire Or1_out1_1;
  wire Switch138_out1;
  reg  Unit_Delay54_out1_2;
  wire CT107_out1;
  wire CT109_out1;
  wire CT108_out1_1;
  wire [7:0] Switch140_out1;  // uint8
  wire [7:0] Add3_out1_1;  // uint8
  reg [7:0] Unit_Delay52_out1_1;  // uint8
  wire [7:0] Add5_out1;  // uint8
  wire signed [11:0] Switch107_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_5;  // sfix12
  wire signed [12:0] Unary_Minus12_in0;  // sfix13
  wire signed [11:0] Unary_Minus12_out1;  // sfix12
  wire signed [11:0] Switch107_out1_6;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_6;  // sfix12
  wire signed [12:0] Unary_Minus11_in0;  // sfix13
  wire signed [11:0] Unary_Minus11_out1;  // sfix12
  wire signed [11:0] Switch107_out1_7;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_7;  // sfix12
  wire signed [12:0] Unary_Minus10_in0;  // sfix13
  wire signed [11:0] Unary_Minus10_out1;  // sfix12
  wire CT112_out1_2;
  wire CT110_out1;
  wire CT116_out1_1;
  wire CT87_out1_1;
  wire CT85_out1_1;
  reg [6:0] Unit_Delay43_out1_1;  // ufix7
  wire [6:0] Add4_out1_1;  // ufix7
  wire CT43_out1_2;
  wire [6:0] Switch48_out1;  // ufix7
  wire CT79_out1_2;
  wire CT75_out1_1;
  wire CT65_out1_3;
  wire CT68_out1_2;
  wire CT71_out1;
  wire CT76_out1_2;
  wire CT41_out1;
  wire CT61_out1_1;
  wire CT62_out1_2;
  wire CT52_out1_1;
  wire CT47_out1_3;
  wire CT51_out1_3;
  wire CT50_out1_2;
  wire CT60_out1_1;
  wire CT55_out1_2;
  wire CT59_out1_2;
  wire CT58_out1;
  wire CT87_out1_2;
  wire CT89_out1_1;
  wire CT91_out1_1;
  wire CT93_out1_1;
  wire CT110_out1_1;
  wire CT112_out1_3;
  wire CT114_out1_2;
  wire CT116_out1_2;
  wire CT103_out1_2;
  wire CT77_out1_2;
  wire CT18_out1_1;
  wire CT28_out1_2;
  wire CT27_out1_1;
  wire CT83_out1_2;
  wire CT73_out1_3;
  wire CT82_out1_2;
  wire CT81_out1_1;
  wire CT34_out1_1;
  wire CT36_out1_1;
  wire CT101_out1_2;
  wire CT100_out1_2;
  wire CT95_out1;
  wire CT97_out1_3;
  wire CT102_out1_1;
  wire CT85_out1_2;
  wire CT104_out1_1;
  wire CT106_out1_2;
  wire signed [11:0] Switch107_out1_8;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_8;  // sfix12
  wire CT78_out1_1;
  reg [1:0] Unit_Delay7_out1_3;  // ufix2
  wire [1:0] Add1_out1_4;  // ufix2
  wire CT60_out1_2;
  wire CT12_out1_2;
  reg  Unit_Delay54_out1_3;
  wire Switch20_out1_2;
  wire Switch17_out1_2;
  wire Or3_out1_3;
  wire Switch208_out1_2;
  reg  Unit_Delay55_out1_2;
  wire CT70_out1_2;
  wire Or2_out1_3;
  wire [8:0] Switch83_out1_1;  // ufix9
  reg [8:0] Unit_Delay32_out1_2;  // ufix9
  wire [8:0] Add11_out1_2;  // ufix9
  wire Ro101_relop1;
  reg  Unit_Delay57_out1_2;
  wire Switch49_out1_2;
  wire Switch105_out1_2;
  reg  Unit_Delay1_out1_2;
  wire switch_compare_1_5;
  wire switch_compare_1_6;
  wire CT55_out1_3;
  wire CT57_out1_2;
  wire CT59_out1_3;
  wire CT61_out1_2;
  wire CT60_out1_3;
  wire CT58_out1_1;
  wire CT57_out1_3;
  wire [8:0] Add12_out1_5;  // ufix9
  wire CT58_out1_2;
  wire CT56_out1_1;
  wire CT51_out1_4;
  wire CT35_out1_2;
  wire CT31_out1_2;
  wire CT38_out1_1;
  wire CT32_out1_2;
  wire CT30_out1_1;
  wire CT15_out1_1;
  wire CT4_out1_2;
  wire CT6_out1_1;
  wire signed [12:0] Constant3_out1_dtc_1;  // sfix13
  wire signed [12:0] Constant1_out1_dtc_1;  // sfix13
  wire CT37_out1_2;
  wire CT33_out1_2;
  wire CT22_out1_4;
  wire CT24_out1_3;
  wire CT118_out1_1;
  reg [1:0] Unit_Delay6_out1;  // ufix2
  wire [1:0] Add3_out1_2;  // ufix2
  wire CT11_out1;
  wire CT49_out1_3;
  wire CT50_out1_3;
  wire CT65_out1_4;
  wire CT10_out1;
  wire signed [11:0] signal2_13;  // sfix12
  wire signed [11:0] s_14;  // sfix12
  wire signed [11:0] signal2_14;  // sfix12
  wire signed [11:0] s_15;  // sfix12
  wire signed [11:0] signal2_15;  // sfix12
  wire signed [11:0] s_16;  // sfix12
  wire OR1_out1_2;
  wire signed [11:0] signal2_16;  // sfix12
  wire signed [11:0] signal2_17;  // sfix12
  wire signed [11:0] signal2_18;  // sfix12
  wire CT29_out1;
  wire CT81_out1_2;
  wire [15:0] Switch130_out1;  // uint16
  wire [15:0] Add14_out1;  // uint16
  reg [15:0] Unit_Delay61_out1;  // uint16
  wire Relational_Operator14_relop1;
  reg  Unit_Delay36_out1;
  wire Switch214_out1;
  wire Switch213_out1;
  wire Or6_out1;
  wire Switch9_out1;
  reg  Unit_Delay37_out1;
  wire CT66_out1_3;
  wire CT52_out1_2;
  wire CT9_out1_2;
  wire CT119_out1_1;
  wire CT115_out1_1;
  wire CT77_out1_3;
  wire signed [11:0] Switch107_out1_9;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_9;  // sfix12
  wire Or5_out1;
  wire Or6_out1_1;
  wire Or4_out1_2;
  reg [1:0] Unit_Delay7_out1_4;  // ufix2
  wire [1:0] Add1_out1_5;  // ufix2
  wire CT63_out1_1;
  wire Or2_out1_4;
  wire Or3_out1_4;
  wire Or7_out1;
  wire Or1_out1_3;
  wire Logical_Operator4_out1;
  wire CT60_out1_4;
  wire CT61_out1_3;
  wire CT58_out1_3;
  wire CT12_out1_3;
  reg  Unit_Delay54_out1_4;
  wire Switch20_out1_3;
  wire Switch17_out1_3;
  wire Or3_out1_5;
  wire Switch208_out1_3;
  reg  Unit_Delay55_out1_3;
  wire CT70_out1_3;
  wire Or2_out1_5;
  wire [6:0] Switch31_out1_1;  // ufix7
  reg [6:0] Unit_Delay13_out1_1;  // ufix7
  wire [6:0] Add11_out1_3;  // ufix7
  wire Ro104_relop1;
  reg  Unit_Delay57_out1_3;
  wire Switch49_out1_3;
  wire Switch105_out1_3;
  reg  Unit_Delay43_out1_2;
  wire switch_compare_1_7;
  wire switch_compare_1_8;
  wire CT141_out1;
  wire CT59_out1_4;
  wire CT70_out1_4;
  wire CT69_out1;
  wire Constant10_out1;
  wire [6:0] Add2_out1_2;  // ufix7
  wire CT136_out1;
  wire CT29_out1_1;
  wire CT81_out1_3;
  wire [15:0] Switch130_out1_1;  // uint16
  wire [15:0] Add14_out1_1;  // uint16
  reg [15:0] Unit_Delay61_out1_1;  // uint16
  wire Relational_Operator1_relop1;
  reg  Unit_Delay36_out1_1;
  wire Switch214_out1_1;
  wire Switch213_out1_1;
  wire Or6_out1_2;
  wire Switch83_out1_2;
  reg  Unit_Delay37_out1_1;
  wire Or9_out1;
  wire CT131_out1_1;
  wire CT133_out1;
  wire CT19_out1_2;
  wire signed [12:0] Unary_Minus21_in0;  // sfix13
  wire signed [11:0] Unary_Minus2_out1_1;  // sfix12
  wire OR1_out1_4;
  wire CT142_out1;
  wire CT135_out1;
  reg  Unit_Delay119_out1;
  wire Switch238_out1;
  wire Switch237_out1;
  wire Or9_out1_1;
  wire Switch239_out1;
  reg  Unit_Delay120_out1;
  wire CT144_out1;
  wire Or7_out1_1;
  wire CT137_out1;
  wire Or10_out1;
  wire [7:0] Switch244_out1;  // uint8
  reg [7:0] Unit_Delay113_out1;  // uint8
  wire [7:0] Add17_out1;  // uint8
  wire Ro13_relop1;
  reg  Unit_Delay121_out1;
  wire Switch253_out1;
  wire Switch236_out1;
  reg  Unit_Delay118_out1;
  wire switch_compare_1_9;
  wire switch_compare_1_10;
  wire CT141_out1_1;
  wire CT143_out1;
  wire CT177_out1;
  wire signed [39:0] Constant110_out1_dtc;  // sfix40
  wire signed [39:0] Constant111_out1_dtc;  // sfix40
  wire CT15_out1_2;
  wire signed [25:0] Constant25_out1_dtc;  // sfix26
  wire signed [25:0] Constant26_out1_dtc;  // sfix26
  wire [7:0] Add23_out1;  // uint8
  wire CT136_out1_1;
  wire CT114_out1_3;
  wire CT68_out1_3;
  wire CT80_out1_1;
  wire CT69_out1_1;
  wire CT71_out1_1;
  wire Logical_Operator7_out1;
  wire CT101_out1_3;
  wire CT103_out1_3;
  wire CT42_out1_1;
  wire CT55_out1_4;
  wire CT57_out1_4;
  wire CT113_out1_2;
  wire CT32_out1_3;
  wire CT30_out1_2;
  wire CT86_out1_1;
  wire CT84_out1_1;
  wire CT8_out1_1;
  wire CT79_out1_3;
  wire CT90_out1_2;
  wire CT25_out1_1;
  wire CT26_out1_3;
  wire CT76_out1_3;
  wire CT6_out1_2;
  wire CT46_out1_2;
  wire CT48_out1_2;
  wire CT45_out1;
  wire signed [11:0] Switch107_out1_10;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_10;  // sfix12
  wire signed [12:0] Unary_Minus131_in0;  // sfix13
  wire signed [11:0] Unary_Minus13_out1;  // sfix12
  wire signed [12:0] Unary_Minus81_in0;  // sfix13
  wire signed [11:0] Unary_Minus8_out1;  // sfix12
  wire CT34_out1_2;
  wire CT27_out1_2;
  wire signed [23:0] Data_Type_Conversion22_out1;  // sfix24
  wire CT4_out1_3;
  wire signed [12:0] Unary_Minus141_in0;  // sfix13
  wire signed [11:0] Unary_Minus14_out1;  // sfix12
  wire Cmp14_out1_1;
  wire Cmp12_out1_1;
  wire [11:0] Switch159_out1_1;  // ufix12
  reg [11:0] Unit_Delay75_out1_1;  // ufix12
  wire [11:0] bit_shift_out1_1;  // ufix12
  wire Cmp13_out1_1;
  wire CT89_out1_2;
  wire CT16_out1_2;
  wire signed [12:0] Unary_Minus18_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1_1;  // sfix12
  wire Cmp17_out1;
  wire Cmp15_out1;
  wire [11:0] Switch163_out1;  // ufix12
  reg [11:0] Unit_Delay78_out1;  // ufix12
  wire [11:0] bit_shift2_out1;  // ufix12
  wire Cmp16_out1;
  wire CT91_out1_2;
  wire [8:0] Bit_Slice15_out1_1;  // ufix9
  wire signed [8:0] Data_Type_S38_out1;  // sfix9
  wire [7:0] Bit_Slice16_out1;  // uint8
  wire signed [8:0] Data_Type_S40_out1;  // sfix9
  wire Cmp3_out1;
  wire Cmp1_out1;
  wire [11:0] Switch59_out1;  // ufix12
  reg [11:0] Unit_Delay21_out1;  // ufix12
  wire [11:0] bit_shift1_out1;  // ufix12
  wire Cmp2_out1;
  wire CT24_out1_4;
  wire CT62_out1_3;
  reg [1:0] Unit_Delay7_out1_5;  // ufix2
  wire [1:0] Add1_out1_6;  // ufix2
  wire CT60_out1_5;
  wire CT12_out1_4;
  wire [4:0] Bit_Slice6_out1_1;  // ufix5
  reg [4:0] Unit_Delay54_out1_5;  // ufix5
  wire Relational_Operator8_relop1;
  reg  Unit_Delay54_out1_6;
  wire Switch20_out1_4;
  wire Switch17_out1_4;
  wire Or3_out1_6;
  wire Switch208_out1_4;
  reg  Unit_Delay55_out1_4;
  wire CT70_out1_5;
  wire Or2_out1_6;
  wire [6:0] Switch83_out1_3;  // ufix7
  reg [6:0] Unit_Delay32_out1_3;  // ufix7
  wire [6:0] Add11_out1_4;  // ufix7
  wire Ro102_relop1;
  reg  Unit_Delay57_out1_4;
  wire Switch49_out1_4;
  wire Switch105_out1_4;
  reg  Unit_Delay1_out1_3;
  wire switch_compare_1_11;
  wire CT55_out1_5;
  wire CT57_out1_5;
  wire CT59_out1_5;
  wire CT61_out1_4;
  wire CT58_out1_4;
  wire CT56_out1_2;
  wire CT51_out1_5;
  wire switch_compare_1_12;
  reg [1:0] Unit_Delay7_out1_6;  // ufix2
  wire [1:0] Add1_out1_7;  // ufix2
  wire CT60_out1_6;
  wire CT12_out1_5;
  reg  Unit_Delay54_out1_7;
  wire Switch20_out1_5;
  wire Switch17_out1_5;
  wire Or3_out1_7;
  wire Switch208_out1_5;
  reg  Unit_Delay55_out1_5;
  wire CT70_out1_6;
  wire Or2_out1_7;
  wire [7:0] Switch83_out1_4;  // uint8
  reg [7:0] Unit_Delay32_out1_4;  // uint8
  wire [7:0] Add11_out1_5;  // uint8
  wire Ro103_relop1;
  reg  Unit_Delay57_out1_5;
  wire Switch49_out1_5;
  wire Switch105_out1_5;
  reg  Unit_Delay1_out1_4;
  wire switch_compare_1_13;
  wire CT55_out1_6;
  wire CT57_out1_6;
  wire CT59_out1_6;
  wire CT61_out1_5;
  wire CT58_out1_5;
  wire CT56_out1_3;
  wire CT51_out1_6;
  wire switch_compare_1_14;
  wire CT72_out1_2;
  wire CT71_out1_2;
  wire [7:0] Add12_out1_6;  // uint8
  wire [6:0] Add12_out1_7;  // ufix7
  reg [1:0] Unit_Delay7_out1_7;  // ufix2
  wire [1:0] Add1_out1_8;  // ufix2
  wire CT60_out1_7;
  wire CT12_out1_6;
  wire CT84_out1_2;
  wire [15:0] Switch138_out1_1;  // uint16
  wire [15:0] Add14_out1_2;  // uint16
  reg [15:0] Unit_Delay61_out1_2;  // uint16
  wire Relational_Operator12_relop1;
  reg  Unit_Delay54_out1_8;
  wire Switch20_out1_6;
  wire Switch17_out1_6;
  wire Or3_out1_8;
  wire Switch208_out1_6;
  reg  Unit_Delay55_out1_6;
  wire CT70_out1_7;
  wire Or2_out1_8;
  wire [8:0] Switch83_out1_5;  // ufix9
  reg [8:0] Unit_Delay32_out1_5;  // ufix9
  wire [8:0] Add11_out1_6;  // ufix9
  wire Ro106_relop1;
  reg  Unit_Delay57_out1_6;
  wire Switch49_out1_6;
  wire Switch105_out1_6;
  reg  Unit_Delay1_out1_5;
  wire switch_compare_1_15;
  wire switch_compare_1_16;
  wire CT55_out1_7;
  wire CT57_out1_7;
  wire CT59_out1_7;
  wire CT61_out1_6;
  wire [8:0] Add12_out1_8;  // ufix9
  wire CT58_out1_6;
  wire CT56_out1_4;
  wire CT51_out1_7;
  wire CT115_out1_2;
  wire CT113_out1_3;
  wire CT111_out1_3;
  wire CT109_out1_1;
  wire CT8_out1_2;
  wire CT2_out1_2;
  wire signed [12:0] Constant9_out1_dtc;  // sfix13
  wire signed [12:0] Constant10_out1_dtc;  // sfix13
  wire CT130_out1_1;
  wire CT129_out1;
  wire CT128_out1_1;
  wire CT127_out1;
  wire CT126_out1;
  wire CT108_out1_2;
  wire CT107_out1_1;
  wire Or_out1_1;
  wire OR1_out1_5;
  wire CT80_out1_2;
  wire CT26_out1_4;
  wire CT74_out1_2;
  wire CT25_out1_2;
  wire CT40_out1_2;
  wire CT17_out1_2;
  wire CT39_out1_2;
  wire CT16_out1_3;
  wire CT9_out1_3;
  wire CT19_out1_3;
  wire CT44_out1_2;
  wire CT42_out1_2;
  wire CT96_out1_1;
  wire CT94_out1_2;
  wire CT99_out1_2;
  wire CT98_out1_3;
  wire CT5_out1_3;
  wire CT1_out1_2;
  wire CT7_out1_2;
  wire CT3_out1_3;
  wire CT23_out1_3;
  wire CT14_out1_2;
  wire CT29_out1_2;
  wire CT21_out1_2;
  wire OR5_out1_1;
  wire OR3_out1_9;
  wire signed [15:0] signal2_19;  // int16
  wire signed [15:0] s_17;  // int16
  wire signed [15:0] signal2_20;  // int16
  wire signed [15:0] s_18;  // int16
  wire signed [15:0] signal2_21;  // int16
  wire signed [15:0] s_19;  // int16
  wire signed [15:0] signal2_22;  // int16
  wire signed [15:0] s_20;  // int16
  wire signed [15:0] signal2_23;  // int16
  wire signed [15:0] s_21;  // int16
  wire signed [15:0] signal2_24;  // int16
  wire signed [15:0] s_22;  // int16
  wire signed [15:0] signal2_25;  // int16
  wire signed [15:0] s_23;  // int16
  wire signed [15:0] signal2_26;  // int16
  wire signed [15:0] s_24;  // int16
  wire signed [15:0] signal2_27;  // int16
  wire signed [15:0] s_25;  // int16
  wire signed [15:0] signal2_28;  // int16
  wire signed [15:0] s_26;  // int16
  wire signed [15:0] signal2_29;  // int16
  wire signed [15:0] s_27;  // int16
  wire signed [15:0] signal2_30;  // int16
  wire signed [15:0] s_28;  // int16
  wire signed [15:0] signal2_31;  // int16
  wire signed [15:0] s_29;  // int16
  wire signed [15:0] signal2_32;  // int16
  wire signed [15:0] s_30;  // int16
  wire signed [15:0] signal2_33;  // int16
  wire signed [15:0] s_31;  // int16
  wire signed [15:0] signal2_34;  // int16
  wire signed [15:0] signal2_35;  // int16
  wire signed [23:0] DTC4_out1;  // sfix24
  wire Compare_To_Constant4_out1;
  wire Compare_To_Constant2_out1;
  wire [23:0] Switch84_out1_1;  // ufix24
  reg [23:0] Unit_Delay51_out1_1;  // ufix24
  wire [23:0] bit_shift1_out1_1;  // ufix24
  wire Compare_To_Constant3_out1;
  wire signed [11:0] Switch107_out1_11;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_11;  // sfix12
  wire [23:0] Switch86_out1;  // ufix24
  reg [23:0] Unit_Delay50_out1;  // ufix24
  wire [23:0] Switch122_out1;  // ufix24
  wire [23:0] Bitwise_Operator1_out1;  // ufix24
  wire signed [36:0] Product11_mul_temp;  // sfix37
  wire signed [24:0] Product11_1;  // sfix25
  wire signed [35:0] Product1_out1;  // sfix36
  wire Compare_To_Constant1_out1;
  reg [23:0] Unit_Delay38_out1_1;  // ufix24
  wire [23:0] Switch87_out1_1;  // ufix24
  wire [23:0] Switch107_out1_12;  // ufix24
  reg [23:0] Unit_Delay39_out1_12;  // ufix24
  wire [23:0] Switch107_out1_13;  // ufix24
  reg [23:0] Unit_Delay39_out1_13;  // ufix24
  wire signed [23:0] DTC3_out1;  // sfix24
  wire signed [23:0] signal2_36;  // sfix24
  wire signed [23:0] s_32;  // sfix24
  wire signed [23:0] DTC2_out1;  // sfix24
  wire signed [23:0] signal2_37;  // sfix24
  wire signed [23:0] s_33;  // sfix24
  wire signed [23:0] DTC1_out1;  // sfix24
  wire signed [23:0] signal2_38;  // sfix24
  wire signed [23:0] s_34;  // sfix24
  wire signed [23:0] DTC_out1;  // sfix24
  wire signed [23:0] signal2_39;  // sfix24
  wire signed [23:0] s_35;  // sfix24
  wire signed [23:0] signal2_40;  // sfix24
  wire signed [23:0] s_36;  // sfix24
  wire signed [12:0] signal2_41;  // sfix13
  wire signed [12:0] s_37;  // sfix13
  wire signed [12:0] signal2_42;  // sfix13
  wire signed [12:0] s_38;  // sfix13
  wire signed [12:0] signal2_43;  // sfix13
  wire signed [12:0] s_39;  // sfix13
  wire signed [12:0] signal2_44;  // sfix13
  wire signed [12:0] s_40;  // sfix13
  wire signed [12:0] Constant2_out1_dtc;  // sfix13
  wire signed [12:0] Switch5_out1;  // sfix13
  wire signed [12:0] signal2_45;  // sfix13
  wire signed [12:0] s_41;  // sfix13
  wire signed [12:0] signal2_46;  // sfix13
  wire signed [12:0] s_42;  // sfix13
  wire signed [12:0] signal2_47;  // sfix13
  wire signed [12:0] s_43;  // sfix13
  wire signed [12:0] signal2_48;  // sfix13
  wire signed [12:0] signal2_49;  // sfix13
  wire signed [23:0] DTC5_out1;  // sfix24
  wire signed [23:0] signal2_50;  // sfix24
  wire signed [23:0] signal2_51;  // sfix24
  wire CT20_out1_2;
  wire CT11_out1_1;
  wire CT10_out1_1;
  wire Logical_Operator2_out1_1;
  wire Logical_Operator3_out1;
  wire OR6_out1_3;
  wire CT49_out1_4;
  wire CT48_out1_3;
  wire CT46_out1_3;
  wire CT45_out1_1;
  wire signed [11:0] signal4_3;  // sfix12
  wire signed [11:0] s_44;  // sfix12
  wire signed [11:0] signal4_4;  // sfix12
  wire signed [11:0] s_45;  // sfix12
  wire signed [11:0] signal4_5;  // sfix12
  wire signed [11:0] s_46;  // sfix12
  wire signed [11:0] signal4_6;  // sfix12
  wire signed [11:0] signal4_7;  // sfix12
  wire signed [11:0] signal4_8;  // sfix12
  wire signed [21:0] signal4_dtc_1;  // sfix22
  wire signed [11:0] signal5_3;  // sfix12
  wire signed [11:0] s_47;  // sfix12
  wire signed [11:0] signal5_4;  // sfix12
  wire signed [11:0] s_48;  // sfix12
  wire signed [11:0] signal5_5;  // sfix12
  wire signed [11:0] s_49;  // sfix12
  wire signed [11:0] signal5_6;  // sfix12
  wire signed [11:0] signal5_7;  // sfix12
  wire signed [11:0] signal5_8;  // sfix12
  wire signed [6:0] Switch20_out1_7;  // sfix7
  wire signed [6:0] Add1_out1_9;  // sfix7
  wire CT12_out1_7;
  wire signed [6:0] Switch17_out1_7;  // sfix7
  reg signed [6:0] Unit_Delay7_out1_8;  // sfix7
  wire CT13_out1_1;
  wire Logical_Operator_out1_3;
  wire Logical_Operator1_out1_2;
  wire OR2_out1_9;
  wire OR4_out1_3;
  wire switch_compare_1_17;
  wire CT57_out1_8;
  wire CT56_out1_5;
  wire CT54_out1_2;
  wire CT53_out1_1;
  wire CT72_out1_3;
  wire switch_compare_1_18;
  wire CT69_out1_2;
  wire CT66_out1_4;
  wire CT63_out1_2;
  wire CT70_out1_8;
  wire CT67_out1_2;
  wire CT64_out1_3;
  reg [2:0] Unit_Delay44_out1;  // ufix3
  wire [2:0] Add17_out1_1;  // ufix3
  wire CT78_out1_2;
  wire [2:0] Switch106_out1;  // ufix3
  wire CT68_out1_4;
  wire Logical_Operator_out1_4;
  wire CT66_out1_5;
  wire CT80_out1_3;
  wire CT81_out1_4;
  wire [15:0] Switch123_out1_1;  // uint16
  wire [15:0] Add14_out1_3;  // uint16
  reg [15:0] Unit_Delay49_out1;  // uint16
  wire Relational_Operator91_relop1;
  wire CT79_out1_4;
  reg  Unit_Delay50_out1_1;
  wire Switch122_out1_1;
  wire Switch121_out1;
  wire Or2_out1_10;
  wire And8_out1;
  wire signed [3:0] Switch105_out1_7;  // sfix4
  wire signed [3:0] Add13_out1;  // sfix4
  wire CT70_out1_9;
  wire signed [3:0] Switch104_out1;  // sfix4
  reg signed [3:0] Unit_Delay48_out1;  // sfix4
  wire CT71_out1_3;
  wire signed [11:0] signal1_17;  // sfix12
  wire signed [11:0] signal1_18;  // sfix12
  wire signed [11:0] signal1_19;  // sfix12
  wire CT43_out1_3;
  wire CT41_out1_1;
  wire CT39_out1_3;
  wire CT45_out1_2;
  wire CT33_out1_3;
  wire CT31_out1_3;
  wire CT29_out1_3;
  wire CT89_out1_3;
  wire CT12_out1_8;
  wire CT11_out1_2;
  wire CT10_out1_2;
  wire signed [11:0] Switch107_out1_14;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_14;  // sfix12
  wire signed [11:0] Switch107_out1_15;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_15;  // sfix12
  wire signed [11:0] Switch107_out1_16;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_16;  // sfix12
  wire signed [11:0] Switch107_out1_17;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_17;  // sfix12
  wire signed [11:0] signal2_52;  // sfix12
  wire signed [11:0] s_50;  // sfix12
  wire signed [11:0] Switch107_out1_18;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_18;  // sfix12
  wire signed [12:0] Unary_Minus16_in0;  // sfix13
  wire signed [11:0] Unary_Minus16_out1;  // sfix12
  wire signed [11:0] signal2_53;  // sfix12
  wire signed [11:0] s_51;  // sfix12
  wire signed [11:0] signal2_54;  // sfix12
  wire signed [11:0] s_52;  // sfix12
  wire signed [11:0] signal2_55;  // sfix12
  wire signed [11:0] s_53;  // sfix12
  wire signed [11:0] Switch107_out1_19;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_19;  // sfix12
  wire signed [11:0] signal2_56;  // sfix12
  wire signed [11:0] s_54;  // sfix12
  wire signed [11:0] Switch107_out1_20;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_20;  // sfix12
  wire signed [12:0] Unary_Minus15_in0;  // sfix13
  wire signed [11:0] Unary_Minus15_out1;  // sfix12
  wire signed [11:0] signal2_57;  // sfix12
  wire signed [11:0] s_55;  // sfix12
  wire signed [11:0] signal2_58;  // sfix12
  wire signed [11:0] s_56;  // sfix12
  wire signed [11:0] signal2_59;  // sfix12
  wire signed [11:0] s_57;  // sfix12
  wire signed [11:0] signal2_60;  // sfix12
  wire signed [11:0] s_58;  // sfix12
  wire signed [11:0] signal2_61;  // sfix12
  wire signed [11:0] s_59;  // sfix12
  wire signed [11:0] signal2_62;  // sfix12
  wire signed [11:0] s_60;  // sfix12
  wire signed [11:0] signal2_63;  // sfix12
  wire signed [11:0] s_61;  // sfix12
  wire signed [11:0] signal2_64;  // sfix12
  wire signed [11:0] s_62;  // sfix12
  wire signed [11:0] signal2_65;  // sfix12
  wire signed [11:0] s_63;  // sfix12
  wire signed [12:0] Unary_Minus9_in0;  // sfix13
  wire signed [11:0] Unary_Minus9_out1;  // sfix12
  wire signed [11:0] signal2_66;  // sfix12
  wire signed [11:0] s_64;  // sfix12
  wire signed [11:0] signal2_67;  // sfix12
  wire signed [11:0] s_65;  // sfix12
  wire signed [11:0] signal2_68;  // sfix12
  wire signed [11:0] s_66;  // sfix12
  wire signed [11:0] signal2_69;  // sfix12
  wire signed [11:0] s_67;  // sfix12
  wire signed [12:0] Unary_Minus8_in0;  // sfix13
  wire signed [11:0] Unary_Minus8_out1_1;  // sfix12
  wire signed [11:0] signal2_70;  // sfix12
  wire signed [11:0] s_68;  // sfix12
  wire signed [11:0] signal2_71;  // sfix12
  wire signed [11:0] s_69;  // sfix12
  wire signed [11:0] signal2_72;  // sfix12
  wire signed [11:0] s_70;  // sfix12
  wire signed [12:0] Unary_Minus5_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1;  // sfix12
  wire signed [11:0] signal2_73;  // sfix12
  wire signed [11:0] s_71;  // sfix12
  wire signed [11:0] signal2_74;  // sfix12
  wire signed [11:0] s_72;  // sfix12
  wire signed [11:0] signal2_75;  // sfix12
  wire signed [11:0] s_73;  // sfix12
  wire signed [11:0] signal2_76;  // sfix12
  wire signed [11:0] s_74;  // sfix12
  wire signed [12:0] Unary_Minus6_in0;  // sfix13
  wire signed [11:0] Unary_Minus6_out1;  // sfix12
  wire signed [11:0] signal2_77;  // sfix12
  wire signed [11:0] s_75;  // sfix12
  wire signed [11:0] signal2_78;  // sfix12
  wire signed [11:0] s_76;  // sfix12
  wire signed [11:0] signal2_79;  // sfix12
  wire signed [11:0] s_77;  // sfix12
  wire signed [11:0] signal2_80;  // sfix12
  wire signed [11:0] s_78;  // sfix12
  wire signed [12:0] Unary_Minus17_in0;  // sfix13
  wire signed [11:0] Unary_Minus17_out1;  // sfix12
  wire signed [11:0] signal2_81;  // sfix12
  wire signed [11:0] s_79;  // sfix12
  wire signed [11:0] signal2_82;  // sfix12
  wire signed [11:0] s_80;  // sfix12
  wire signed [11:0] signal2_83;  // sfix12
  wire signed [11:0] s_81;  // sfix12
  wire signed [11:0] signal2_84;  // sfix12
  wire signed [11:0] s_82;  // sfix12
  wire signed [12:0] Unary_Minus4_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1_1;  // sfix12
  wire signed [11:0] signal2_85;  // sfix12
  wire signed [11:0] s_83;  // sfix12
  wire signed [11:0] signal2_86;  // sfix12
  wire signed [11:0] s_84;  // sfix12
  wire signed [11:0] signal2_87;  // sfix12
  wire signed [11:0] s_85;  // sfix12
  wire signed [11:0] signal2_88;  // sfix12
  wire signed [11:0] s_86;  // sfix12
  wire signed [11:0] signal2_89;  // sfix12
  wire signed [11:0] s_87;  // sfix12
  wire signed [11:0] signal2_90;  // sfix12
  wire signed [11:0] s_88;  // sfix12
  wire signed [11:0] signal2_91;  // sfix12
  wire signed [11:0] s_89;  // sfix12
  wire signed [11:0] signal2_92;  // sfix12
  wire signed [11:0] s_90;  // sfix12
  wire signed [11:0] signal2_93;  // sfix12
  wire signed [11:0] s_91;  // sfix12
  wire signed [11:0] signal2_94;  // sfix12
  wire signed [11:0] s_92;  // sfix12
  wire signed [11:0] signal2_95;  // sfix12
  wire signed [11:0] s_93;  // sfix12
  wire signed [11:0] signal2_96;  // sfix12
  wire signed [11:0] s_94;  // sfix12
  wire signed [11:0] signal2_97;  // sfix12
  wire signed [11:0] s_95;  // sfix12
  wire signed [11:0] Switch106_out1_1;  // sfix12
  wire signed [11:0] signal2_98;  // sfix12
  wire signed [11:0] s_96;  // sfix12
  wire signed [11:0] Switch105_out1_8;  // sfix12
  wire signed [11:0] signal2_99;  // sfix12
  wire signed [11:0] s_97;  // sfix12
  wire signed [11:0] Switch104_out1_1;  // sfix12
  wire signed [11:0] signal2_100;  // sfix12
  wire signed [11:0] s_98;  // sfix12
  wire signed [11:0] Switch103_out1;  // sfix12
  wire signed [11:0] signal2_101;  // sfix12
  wire signed [11:0] s_99;  // sfix12
  wire signed [11:0] Switch102_out1;  // sfix12
  wire signed [11:0] signal2_102;  // sfix12
  wire signed [11:0] s_100;  // sfix12
  wire signed [11:0] Switch101_out1;  // sfix12
  wire signal3_3;
  wire s_101;
  wire signal3_4;
  wire s_102;
  wire signal3_5;
  wire s_103;
  wire signal3_6;
  wire s_104;
  wire signal3_7;
  wire s_105;
  wire signal3_8;
  wire s_106;
  wire signal3_9;
  wire s_107;
  wire signal3_10;
  wire s_108;
  wire signal3_11;
  wire s_109;
  wire signal3_12;
  wire s_110;
  wire signal3_13;
  wire s_111;
  wire signal3_14;
  wire s_112;
  wire signal3_15;
  wire s_113;
  wire signal3_16;
  wire s_114;
  wire signal3_17;
  wire s_115;
  wire signal3_18;
  wire s_116;
  wire signal3_19;
  wire s_117;
  wire signal3_20;
  wire s_118;
  wire signal3_21;
  wire s_119;
  wire signal3_22;
  wire s_120;
  wire signal3_23;
  wire s_121;
  wire signal3_24;
  wire s_122;
  wire signal3_25;
  wire s_123;
  wire signal3_26;
  wire s_124;
  wire signal3_27;
  wire s_125;
  wire signal3_28;
  wire s_126;
  wire signal3_29;
  wire s_127;
  wire signal3_30;
  wire s_128;
  wire signal3_31;
  wire s_129;
  wire signal3_32;
  wire s_130;
  wire signal3_33;
  wire s_131;
  wire signal3_34;
  wire s_132;
  wire signal3_35;
  wire s_133;
  wire signal3_36;
  wire s_134;
  wire signal3_37;
  wire s_135;
  wire signal3_38;
  wire s_136;
  wire signal3_39;
  wire s_137;
  wire signal3_40;
  wire s_138;
  wire signal3_41;
  wire s_139;
  wire signal3_42;
  wire s_140;
  wire signal3_43;
  wire s_141;
  wire signal3_44;
  wire s_142;
  wire signal3_45;
  wire s_143;
  wire signal3_46;
  wire s_144;
  wire signal3_47;
  wire s_145;
  wire signal3_48;
  wire s_146;
  wire signal3_49;
  wire s_147;
  wire signal3_50;
  wire s_148;
  wire signal3_51;
  wire s_149;
  wire signal3_52;
  wire s_150;
  wire signal3_53;
  wire s_151;
  wire signal3_54;
  wire signal3_55;
  wire signal3_56;
  wire signed [11:0] signal2_103;  // sfix12
  wire signed [11:0] signal2_104;  // sfix12
  wire signed [11:0] signal2_105;  // sfix12
  wire signed [24:0] Constant9_out1_dtc_1;  // sfix25
  wire signed [24:0] Constant2_out1_dtc_1;  // sfix25
  wire signed [24:0] Constant1_out1_dtc_2;  // sfix25
  wire CT29_out1_4;
  wire CT81_out1_5;
  wire [15:0] Switch130_out1_2;  // uint16
  wire [15:0] Add14_out1_4;  // uint16
  reg [15:0] Unit_Delay61_out1_3;  // uint16
  wire Relational_Operator11_relop1;
  reg  Unit_Delay36_out1_2;
  wire Switch214_out1_2;
  wire Switch213_out1_2;
  wire Or6_out1_4;
  wire Switch83_out1_6;
  reg  Unit_Delay37_out1_2;
  wire CT61_out1_7;
  wire CT63_out1_3;
  wire CT52_out1_3;
  wire CT51_out1_8;
  wire CT99_out1_3;
  wire CT122_out1_1;
  wire CT110_out1_2;
  wire CT102_out1_2;
  wire RO_1_relop1;
  wire signed [11:0] SW_1_out1;  // sfix12
  wire RO_2_relop1;
  wire signed [11:0] SW_2_out1;  // sfix12
  wire RO_3_relop1;
  wire signed [11:0] SW_3_out1;  // sfix12
  wire RO_4_relop1;
  wire signed [11:0] SW_4_out1;  // sfix12
  wire CT11_out1_3;
  wire CT10_out1_3;
  wire CT8_out1_3;
  wire CT6_out1_3;
  wire [10:0] Bit_Slice8_out1;  // ufix11
  wire signed [10:0] Data_Type_S13_out1;  // sfix11
  wire signed [11:0] Data_Type_S14_out1;  // sfix12
  wire [8:0] Bit_Slice7_out1;  // ufix9
  wire signed [8:0] Data_Type_S11_out1_1;  // sfix9
  wire signed [11:0] Data_Type_S12_out1_1;  // sfix12
  wire CT104_out1_2;
  wire CT126_out1_1;
  wire CT172_out1;
  wire CT127_out1_1;
  wire CT16_out1_4;
  wire CT18_out1_2;
  wire CT20_out1_3;
  wire CT25_out1_3;
  wire CT27_out1_3;
  wire CT173_out1;
  wire CT185_out1;
  wire CT109_out1_2;
  wire CT124_out1_1;
  wire CT129_out1_1;
  wire CT19_out1_4;
  wire RO171_relop1;
  wire signed [11:0] Switch290_out1;  // sfix12
  wire RO161_relop1;
  wire signed [11:0] Switch289_out1;  // sfix12
  wire signed [11:0] Switch291_out1;  // sfix12
  wire CT17_out1_3;
  wire Compare_To_Constant24_out1;
  wire Compare_To_Constant22_out1;
  wire [23:0] Switch294_out1;  // ufix24
  reg [23:0] Unit_Delay141_out1;  // ufix24
  wire [23:0] bit_shift9_out1;  // ufix24
  wire Compare_To_Constant23_out1;
  wire Compare_To_Constant16_out1;
  wire Compare_To_Constant14_out1;
  wire [23:0] Switch182_out1;  // ufix24
  reg [23:0] Unit_Delay92_out1;  // ufix24
  wire [23:0] bit_shift5_out1;  // ufix24
  wire Compare_To_Constant15_out1;
  wire Compare_To_Constant8_out1;
  wire Compare_To_Constant6_out1;
  wire [23:0] Switch178_out1;  // ufix24
  reg [23:0] Unit_Delay89_out1;  // ufix24
  wire [23:0] bit_shift3_out1;  // ufix24
  wire Compare_To_Constant7_out1;
  wire Compare_To_Constant11_out1;
  wire Compare_To_Constant9_out1;
  wire [23:0] Switch218_out1;  // ufix24
  reg [23:0] Unit_Delay106_out1;  // ufix24
  wire [23:0] bit_shift8_out1;  // ufix24
  wire Compare_To_Constant10_out1;
  wire CT71_out1_4;
  wire signed [36:0] Constant35_out1_dtc;  // sfix37
  wire signed [36:0] Constant36_out1_dtc;  // sfix37
  wire CT21_out1_3;
  wire [6:0] Add2_out1_3;  // ufix7
  wire CT30_out1_3;
  wire CT56_out1_6;
  wire CT28_out1_3;
  wire CT105_out1_1;
  wire CT40_out1_3;
  wire CT120_out1_1;
  reg  Unit_Delay34_out1;
  wire Switch81_out1_1;
  wire Switch212_out1;
  wire Or5_out1_2;
  wire Switch211_out1;
  reg  Unit_Delay35_out1;
  wire switch_compare_1_19;
  wire CT41_out1_2;
  wire CT44_out1_3;
  wire CT58_out1_7;
  wire CT45_out1_3;
  wire CT42_out1_3;
  wire [7:0] Switch59_out1_1;  // uint8
  wire [7:0] Add18_out1;  // uint8
  reg [7:0] Unit_Delay21_out1_1;  // uint8
  wire Constant20_out1;
  wire [7:0] Add20_out1;  // uint8
  wire CT107_out1_2;
  wire CT37_out1_3;
  wire CT34_out1_3;
  wire CT13_out1_2;
  reg  Unit_Delay32_out1_6;
  wire Switch209_out1_1;
  wire Switch82_out1_1;
  wire Or4_out1_4;
  wire Switch210_out1_1;
  reg  Unit_Delay56_out1_1;
  wire CT78_out1_3;
  wire Or8_out1;
  wire CT36_out1_2;
  wire CT38_out1_2;
  wire CT35_out1_3;
  wire Constant15_out1;
  reg [2:0] Unit_Delay44_out1_1;  // ufix3
  wire [2:0] Add17_out1_2;  // ufix3
  wire CT78_out1_4;
  wire [2:0] Switch106_out1_2;  // ufix3
  wire CT68_out1_5;
  wire Logical_Operator4_out1_1;
  wire CT66_out1_6;
  wire signed [11:0] B30_out1_signal2;  // sfix12
  wire signed [11:0] B30_out1_signal2_1;  // sfix12
  wire signed [11:0] signal2_106;  // sfix12
  wire signed [11:0] signal2_107;  // sfix12
  wire signed [11:0] signal2_108;  // sfix12
  wire CT80_out1_4;
  wire CT81_out1_6;
  wire [15:0] Switch123_out1_2;  // uint16
  wire [15:0] Add14_out1_5;  // uint16
  reg [15:0] Unit_Delay49_out1_1;  // uint16
  wire Relational_Operator9_relop1;
  wire CT79_out1_5;
  reg  Unit_Delay50_out1_2;
  wire Switch122_out1_2;
  wire Switch121_out1_1;
  wire Or2_out1_11;
  wire And8_out1_1;
  wire signed [3:0] Switch105_out1_9;  // sfix4
  wire signed [3:0] Add13_out1_1;  // sfix4
  wire CT70_out1_10;
  wire signed [3:0] Switch104_out1_2;  // sfix4
  reg signed [3:0] Unit_Delay48_out1_1;  // sfix4
  wire CT71_out1_5;
  wire signed [11:0] signal1_20;  // sfix12
  wire signed [11:0] signal1_21;  // sfix12
  wire signed [11:0] signal1_22;  // sfix12
  wire CT83_out1_3;
  wire CT85_out1_3;
  wire CT17_out1_4;
  wire CT20_out1_4;
  wire CT44_out1_4;
  wire CT36_out1_3;
  wire CT78_out1_5;
  wire CT15_out1_3;
  wire CT107_out1_3;
  wire CT110_out1_3;
  wire CT18_out1_3;
  wire CT2_out1_3;
  wire CT10_out1_4;
  wire CT94_out1_3;
  wire CT88_out1_1;
  wire CT109_out1_3;
  wire CT38_out1_3;
  wire CT123_out1_2;
  reg  Unit_Delay52_out1_2;
  wire Switch124_out1_1;
  wire Switch123_out1_3;
  wire Or1_out1_6;
  wire Switch125_out1_1;
  reg  Unit_Delay53_out1_3;
  wire switch_compare_1_20;
  wire CT11_out1_4;
  wire CT96_out1_2;
  wire CT92_out1_2;
  wire CT14_out1_3;
  wire CT108_out1_3;
  wire CT105_out1_2;
  wire CT106_out1_3;
  wire CT1_out1_3;
  wire CT53_out1_2;
  wire CT75_out1_2;
  wire CT9_out1_4;
  wire CT13_out1_3;
  wire CT87_out1_3;
  wire CT91_out1_3;
  wire CT93_out1_2;
  wire CT95_out1_1;
  wire CT104_out1_3;
  wire CT102_out1_3;
  wire CT7_out1_3;
  wire CT41_out1_3;
  wire Compare_To_Constant20_out1;
  wire Compare_To_Constant18_out1;
  wire [23:0] Switch186_out1;  // ufix24
  reg [23:0] Unit_Delay95_out1;  // ufix24
  wire [23:0] bit_shift7_out1;  // ufix24
  wire Compare_To_Constant19_out1;
  wire CT97_out1_4;
  wire signed [23:0] Data_Type_Conversion27_out1;  // sfix24
  wire signed [23:0] B37_out1_signal2;  // sfix24
  wire signed [23:0] Data_Type_Conversion23_out1;  // sfix24
  wire signed [23:0] B36_out1_signal2;  // sfix24
  wire signed [15:0] signal2_109;  // int16
  wire signed [15:0] signal2_110;  // int16
  wire signed [23:0] Data_Type_Conversion13_out1;  // sfix24
  wire signed [15:0] signal2_111;  // int16
  wire signed [15:0] s_152;  // int16
  wire signed [15:0] signal2_112;  // int16
  wire signed [15:0] s_153;  // int16
  wire signed [15:0] signal2_113;  // int16
  wire signed [15:0] s_154;  // int16
  wire signed [15:0] signal2_114;  // int16
  wire signed [15:0] s_155;  // int16
  wire signed [15:0] signal2_115;  // int16
  wire signed [15:0] s_156;  // int16
  wire signed [15:0] signal2_116;  // int16
  wire signed [15:0] s_157;  // int16
  wire CT166_out1;
  wire CT164_out1;
  wire CT151_out1;
  wire Cmp20_out1;
  wire Cmp18_out1;
  wire [11:0] Switch167_out1;  // ufix12
  reg [11:0] Unit_Delay81_out1;  // ufix12
  wire [11:0] bit_shift4_out1;  // ufix12
  wire Cmp19_out1;
  wire CT93_out1_3;
  wire CT160_out1;
  wire CT158_out1;
  wire CT80_out1_5;
  wire CT86_out1_2;
  wire CT82_out1_3;
  wire CT69_out1_3;
  wire CT53_out1_3;
  wire CT168_out1;
  wire CT157_out1;
  wire CT155_out1;
  wire CT153_out1;
  wire Cmp23_out1;
  wire Cmp21_out1;
  wire [11:0] Switch171_out1;  // ufix12
  reg [11:0] Unit_Delay84_out1;  // ufix12
  wire [11:0] bit_shift6_out1;  // ufix12
  wire Cmp22_out1;
  wire CT95_out1_2;
  wire CT149_out1;
  wire CT147_out1;
  wire CT145_out1;
  wire CT88_out1_2;
  wire CT84_out1_3;
  wire CT75_out1_3;
  wire CT67_out1_3;
  reg signed [23:0] Unit_Delay48_out1_2;  // sfix24
  wire signed [23:0] Data_Type_Conversion1_out1;  // sfix24
  wire signed [23:0] Switch133_out1;  // sfix24
  reg signed [23:0] Unit_Delay64_out1;  // sfix24
  wire signed [23:0] Switch137_out1_1;  // sfix24
  reg signed [23:0] Unit_Delay66_out1;  // sfix24
  wire signed [23:0] Switch142_out1;  // sfix24
  reg signed [23:0] Unit_Delay68_out1;  // sfix24
  wire signed [23:0] Switch146_out1;  // sfix24
  reg signed [23:0] Unit_Delay124_out1;  // sfix24
  wire signed [23:0] Switch252_out1;  // sfix24
  reg signed [23:0] Unit_Delay125_out1;  // sfix24
  wire signed [23:0] Switch261_out1;  // sfix24
  reg signed [11:0] Unit_Delay77_out1;  // sfix12
  wire signed [23:0] Data_Type_S23_out1;  // sfix24
  reg signed [23:0] Unit_Delay126_out1;  // sfix24
  wire signed [23:0] Switch263_out1;  // sfix24
  reg signed [23:0] Unit_Delay72_out1;  // sfix24
  wire signed [23:0] Data_Type_Conversion25_out1;  // sfix24
  wire signed [23:0] Switch156_out1;  // sfix24
  wire [11:0] Switch170_out1;  // ufix12
  reg [11:0] Unit_Delay82_out1;  // ufix12
  wire [11:0] Switch173_out1;  // ufix12
  wire [11:0] Bitwise_Operator9_out1;  // ufix12
  wire [23:0] Product10_out1;  // ufix24
  wire signed [24:0] RO341_1_1;  // sfix25
  wire signed [24:0] RO341_1_2;  // sfix25
  wire RO341_relop1;
  wire signed [11:0] Data_Type_Conversion29_out1;  // sfix12
  reg signed [11:0] Unit_Delay83_out1;  // sfix12
  wire signed [11:0] Switch172_out1;  // sfix12
  wire signed [23:0] Data_Type_S25_out1;  // sfix24
  reg signed [23:0] Unit_Delay128_out1;  // sfix24
  wire signed [23:0] Switch269_out1;  // sfix24
  wire signed [24:0] Unary_Minus110_in0;  // sfix25
  wire signed [23:0] Unary_Minus1_out1_2;  // sfix24
  reg signed [23:0] Unit_Delay129_out1;  // sfix24
  wire signed [23:0] Switch271_out1;  // sfix24
  wire signed [24:0] Unary_Minus22_in0;  // sfix25
  wire signed [23:0] Unary_Minus2_out1_2;  // sfix24
  reg signed [23:0] Unit_Delay130_out1;  // sfix24
  wire signed [23:0] Switch273_out1;  // sfix24
  reg signed [23:0] Unit_Delay136_out1;  // sfix24
  wire signed [23:0] Switch285_out1;  // sfix24
  wire signed [23:0] signal2_117;  // sfix24
  wire signed [23:0] s_158;  // sfix24
  wire signed [23:0] signal2_118;  // sfix24
  wire signed [23:0] s_159;  // sfix24
  wire signed [23:0] signal2_119;  // sfix24
  wire signed [23:0] s_160;  // sfix24
  wire signed [23:0] signal2_120;  // sfix24
  wire signed [23:0] s_161;  // sfix24
  wire signed [23:0] signal2_121;  // sfix24
  wire signed [23:0] s_162;  // sfix24
  wire signed [23:0] signal2_122;  // sfix24
  wire signed [23:0] s_163;  // sfix24
  wire signed [23:0] signal2_123;  // sfix24
  wire signed [23:0] s_164;  // sfix24
  wire signed [23:0] signal2_124;  // sfix24
  wire signed [23:0] s_165;  // sfix24
  wire signed [23:0] signal2_125;  // sfix24
  wire signed [23:0] s_166;  // sfix24
  wire signed [23:0] signal2_126;  // sfix24
  wire signed [23:0] s_167;  // sfix24
  wire signed [23:0] signal2_127;  // sfix24
  wire signed [23:0] s_168;  // sfix24
  wire signed [23:0] signal2_128;  // sfix24
  wire signed [23:0] s_169;  // sfix24
  wire signed [23:0] signal2_129;  // sfix24
  wire signed [23:0] signal2_130;  // sfix24
  reg signed [23:0] Unit_Delay47_out1;  // sfix24
  wire signed [23:0] Switch103_out1_1;  // sfix24
  reg signed [23:0] Unit_Delay63_out1;  // sfix24
  wire signed [23:0] Switch135_out1;  // sfix24
  reg signed [23:0] Unit_Delay65_out1;  // sfix24
  wire signed [23:0] Switch140_out1_1;  // sfix24
  reg signed [23:0] Unit_Delay67_out1;  // sfix24
  wire signed [23:0] Switch144_out1;  // sfix24
  reg signed [23:0] Unit_Delay115_out1;  // sfix24
  wire signed [23:0] Switch127_out1;  // sfix24
  reg signed [23:0] Unit_Delay131_out1;  // sfix24
  wire signed [23:0] Switch275_out1;  // sfix24
  reg signed [11:0] Unit_Delay74_out1;  // sfix12
  wire signed [23:0] Data_Type_S22_out1;  // sfix24
  reg signed [23:0] Unit_Delay132_out1;  // sfix24
  wire signed [23:0] Switch277_out1;  // sfix24
  reg signed [23:0] Unit_Delay71_out1;  // sfix24
  wire signed [23:0] Switch154_out1;  // sfix24
  wire [11:0] Switch166_out1;  // ufix12
  reg [11:0] Unit_Delay79_out1;  // ufix12
  wire [11:0] Switch169_out1;  // ufix12
  wire [11:0] Bitwise_Operator8_out1;  // ufix12
  wire [23:0] Product9_out1;  // ufix24
  wire signed [24:0] RO331_1_1;  // sfix25
  wire signed [24:0] RO331_1_2;  // sfix25
  wire RO331_relop1;
  wire signed [11:0] Data_Type_Conversion28_out1;  // sfix12
  reg signed [11:0] Unit_Delay80_out1;  // sfix12
  wire signed [11:0] Switch168_out1;  // sfix12
  wire signed [23:0] Data_Type_S24_out1;  // sfix24
  reg signed [23:0] Unit_Delay127_out1;  // sfix24
  wire signed [23:0] Switch267_out1;  // sfix24
  reg signed [23:0] Unit_Delay134_out1;  // sfix24
  wire signed [23:0] Switch281_out1;  // sfix24
  reg signed [23:0] Unit_Delay135_out1;  // sfix24
  wire signed [23:0] Switch283_out1;  // sfix24
  reg [23:0] Unit_Delay69_out1;  // ufix24
  wire [15:0] Bit_Slice8_out1_1;  // uint16
  wire signed [15:0] Data_Type_Conversion20_out1;  // int16
  wire signed [15:0] B34_out1_signal2;  // int16
  wire signed [15:0] signal2_131;  // int16
  wire signed [15:0] signal2_132;  // int16
  wire signed [23:0] Data_Type_Conversion11_out1;  // sfix24
  reg [23:0] Unit_Delay87_out1;  // ufix24
  wire signed [23:0] Data_Type_Conversion16_out1;  // sfix24
  wire signed [23:0] Data_Type_Conversion17_out1;  // sfix24
  reg signed [11:0] Unit_Delay85_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion3_out1_1;  // sfix12
  wire signed [11:0] Switch174_out1;  // sfix12
  wire [23:0] Switch187_out1;  // ufix24
  reg [23:0] Unit_Delay94_out1;  // ufix24
  wire [23:0] Switch189_out1;  // ufix24
  wire [23:0] Bitwise_Operator12_out1;  // ufix24
  wire signed [36:0] Product13_mul_temp;  // sfix37
  wire signed [24:0] Product13_1;  // sfix25
  wire signed [35:0] Product13_out1;  // sfix36
  wire Compare_To_Constant17_out1;
  reg [23:0] Unit_Delay93_out1;  // ufix24
  wire [23:0] Switch188_out1;  // ufix24
  wire signed [23:0] Data_Type_Conversion18_out1;  // sfix24
  wire signed [23:0] signal2_133;  // sfix24
  wire signed [23:0] s_170;  // sfix24
  wire signed [23:0] signal2_134;  // sfix24
  wire signed [23:0] s_171;  // sfix24
  wire signed [23:0] signal2_135;  // sfix24
  wire signed [23:0] s_172;  // sfix24
  wire signed [23:0] signal2_136;  // sfix24
  wire signed [23:0] s_173;  // sfix24
  wire signed [23:0] signal2_137;  // sfix24
  wire signed [23:0] s_174;  // sfix24
  reg signed [11:0] Unit_Delay25_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion3_out1_2;  // sfix12
  wire signed [11:0] Switch78_out1;  // sfix12
  wire OR9_out1_2;
  wire Logical_Operator2_out1_2;
  wire signed [11:0] Switch69_out1;  // sfix12
  wire signed [11:0] Switch81_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay26_out1;  // sfix12
  wire signed [11:0] signal2_138;  // sfix12
  wire signed [11:0] s_175;  // sfix12
  wire signed [11:0] signal2_139;  // sfix12
  wire signed [11:0] s_176;  // sfix12
  wire signed [11:0] signal2_140;  // sfix12
  wire signed [11:0] s_177;  // sfix12
  wire signed [11:0] Switch66_out1;  // sfix12
  wire signed [11:0] signal2_141;  // sfix12
  wire signed [11:0] s_178;  // sfix12
  wire signed [11:0] signal2_142;  // sfix12
  wire signed [11:0] s_179;  // sfix12
  wire signed [11:0] signal2_143;  // sfix12
  wire signed [11:0] s_180;  // sfix12
  wire signed [11:0] signal2_144;  // sfix12
  wire signed [11:0] s_181;  // sfix12
  wire signed [11:0] signal2_145;  // sfix12
  wire signed [11:0] s_182;  // sfix12
  wire signed [11:0] Switch181_out1;  // sfix12
  wire signed [11:0] signal2_146;  // sfix12
  wire signed [11:0] s_183;  // sfix12
  reg signed [11:0] Unit_Delay114_out1;  // sfix12
  wire signed [11:0] signal2_147;  // sfix12
  wire signed [11:0] s_184;  // sfix12
  wire signed [11:0] signal2_148;  // sfix12
  wire signed [11:0] s_185;  // sfix12
  wire signed [11:0] signal2_149;  // sfix12
  wire signed [11:0] s_186;  // sfix12
  reg signed [11:0] Unit_Delay46_out1;  // sfix12
  wire signed [11:0] signal2_150;  // sfix12
  wire signed [11:0] s_187;  // sfix12
  wire signed [11:0] signal2_151;  // sfix12
  wire signed [11:0] signal2_152;  // sfix12
  wire signed [23:0] Data_Type_Conversion9_out1;  // sfix24
  wire signed [23:0] signal2_153;  // sfix24
  wire signed [23:0] s_188;  // sfix24
  wire signed [23:0] signal2_154;  // sfix24
  wire signed [23:0] s_189;  // sfix24
  wire signed [23:0] signal2_155;  // sfix24
  wire signed [23:0] signal2_156;  // sfix24
  wire signed [24:0] Add4_out1_2;  // sfix25
  wire [17:0] Bit_Slice12_out1;  // ufix18
  wire signed [17:0] Data_Type_S13_out1_1;  // sfix18
  wire RO42_relop1;
  wire signed [17:0] Switch157_out1;  // sfix18
  wire RO41_relop1;
  wire signed [17:0] Switch162_out1;  // sfix18
  wire signed [11:0] Data_Type_Conversion28_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1;  // sfix12
  wire signed [11:0] Switch7_out1;  // sfix12
  reg signed [11:0] Unit_Delay63_out1_1;  // sfix12
  wire signed [11:0] Switch168_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay64_out1_1;  // sfix12
  wire signed [11:0] Switch170_out1_1;  // sfix12
  wire signed [11:0] signal1_23;  // sfix12
  wire signed [11:0] s_190;  // sfix12
  wire signed [11:0] signal1_24;  // sfix12
  wire signed [11:0] s_191;  // sfix12
  wire signed [11:0] signal1_25;  // sfix12
  wire signed [11:0] s_192;  // sfix12
  wire signed [11:0] signal1_26;  // sfix12
  wire signed [11:0] s_193;  // sfix12
  wire signed [11:0] signal1_27;  // sfix12
  wire signed [11:0] s_194;  // sfix12
  wire signed [11:0] signal1_28;  // sfix12
  wire signed [11:0] s_195;  // sfix12
  wire signed [11:0] signal1_29;  // sfix12
  wire signed [11:0] signal1_30;  // sfix12
  wire signed [15:0] Data_Type_Conversion10_out1;  // int16
  reg signed [15:0] Unit_Delay47_out1_1;  // int16
  wire signed [15:0] Data_Type_Conversion6_out1_1;  // int16
  wire signed [15:0] Switch103_out1_2;  // int16
  wire signed [15:0] signal1_31;  // int16
  wire signed [15:0] signal1_32;  // int16
  wire signed [16:0] Add13_out1_2;  // sfix17
  wire signed [23:0] Data_Type_S20_out1;  // sfix24
  wire signed [15:0] Data_Type_S20_out1_dtc;  // int16
  wire signed [23:0] Switch164_out1;  // sfix24
  wire signed [15:0] Switch164_out1_dtc;  // int16
  wire signed [15:0] signal5_9;  // int16
  wire signed [15:0] signal5_10;  // int16
  wire signed [19:0] Data_Type_S18_out1;  // sfix20
  wire signed [20:0] Add131_sub_temp;  // sfix21
  wire signed [20:0] Add131_1;  // sfix21
  wire signed [20:0] Add131_2;  // sfix21
  wire signed [16:0] Add17_out1_3;  // sfix17
  wire signed [23:0] Data_Type_S21_out1;  // sfix24
  wire signed [26:0] Data_Type_S14_out1_1;  // sfix27
  wire signed [29:0] In25_out1_dtc;  // sfix30
  reg signed [15:0] Unit_Delay23_out1;  // int16
  wire signed [16:0] Unary_Minus51_in0;  // sfix17
  wire signed [15:0] Unary_Minus5_out1_1;  // int16
  reg signed [15:0] Unit_Delay66_out1_1;  // int16
  wire signed [15:0] Data_Type_S16_out1;  // int16
  wire signed [15:0] Switch173_out1_1;  // int16
  wire RO25_relop1;
  wire signed [15:0] Switch117_out1;  // int16
  wire signed [15:0] signal5_11;  // int16
  wire signed [15:0] s_196;  // int16
  wire signed [15:0] signal5_12;  // int16
  wire signed [15:0] s_197;  // int16
  wire signed [15:0] signal5_13;  // int16
  wire signed [15:0] signal5_14;  // int16
  wire signed [16:0] Data_Type_S23_out1_1;  // sfix17
  wire [26:0] Bit_Concat4_out1;  // ufix27
  wire signed [26:0] Data_Type_S15_out1;  // sfix27
  wire signed [29:0] In24_out1_dtc;  // sfix30
  wire signed [15:0] signal4_9;  // int16
  wire signed [15:0] signal4_10;  // int16
  wire signed [15:0] signal4_11;  // int16
  wire signed [16:0] Data_Type_S22_out1_1;  // sfix17
  wire [26:0] Bit_Concat2_out1;  // ufix27
  reg signed [29:0] Unit_Delay65_out1_1;  // sfix30
  wire signed [29:0] Switch163_out1_1;  // sfix30
  wire signed [29:0] Switch172_out1_1;  // sfix30
  wire signed [29:0] s_198;  // sfix30
  reg signed [29:0] Unit_Delay67_out1_1;  // sfix30
  wire signed [29:0] Switch175_out1;  // sfix30
  wire signed [29:0] s_199;  // sfix30
  wire Switch234_out1;
  wire Logical_Operator11_out1;
  wire Logical_Operator10_out1;
  wire signed [29:0] Switch179_out1;  // sfix30
  reg signed [29:0] Unit_Delay8_out1;  // sfix30
  wire signed [29:0] Switch18_out1;  // sfix30
  wire signed [29:0] signal6;  // sfix30
  wire signed [29:0] s_200;  // sfix30
  wire signed [29:0] signal6_1;  // sfix30
  wire signed [29:0] s_201;  // sfix30
  wire signed [29:0] signal6_2;  // sfix30
  wire signed [29:0] signal6_3;  // sfix30
  wire signed [29:0] signal6_4;  // sfix30
  reg signed [27:0] Unit_Delay50_out1_3;  // sfix28
  wire signed [27:0] Data_Type_Conversion5_out1_1;  // sfix28
  wire signed [27:0] Switch152_out1;  // sfix28
  wire signed [27:0] s_202;  // sfix28
  reg signed [27:0] Unit_Delay56_out1_2;  // sfix28
  wire signed [27:0] Switch156_out1_1;  // sfix28
  wire signed [27:0] s_203;  // sfix28
  reg signed [27:0] Unit_Delay6_out1_1;  // sfix28
  wire signed [27:0] Switch12_out1;  // sfix28
  wire signed [27:0] signal2_157;  // sfix28
  wire signed [27:0] s_204;  // sfix28
  wire signed [27:0] signal2_158;  // sfix28
  wire signed [27:0] s_205;  // sfix28
  wire signed [27:0] signal2_159;  // sfix28
  wire signed [27:0] signal2_160;  // sfix28
  wire signed [27:0] signal2_161;  // sfix28
  wire signed [27:0] Switch180_out1;  // sfix28
  wire signed [30:0] Add181_add_temp;  // sfix31
  wire signed [30:0] Add181_1;  // sfix31
  wire signed [30:0] Add181_2;  // sfix31
  wire signed [29:0] Add18_out1_1;  // sfix30
  wire signed [29:0] RO43_1_1;  // sfix30
  wire RO43_relop1;
  wire signed [29:0] Switch178_out1_1;  // sfix30
  wire signed [29:0] RO44_1_1;  // sfix30
  wire RO44_relop1;
  wire [19:0] Bit_Slice13_out1;  // ufix20
  wire signed [15:0] Switch74_out1;  // int16
  reg signed [15:0] Unit_Delay68_out1_1;  // int16
  wire signed [15:0] Switch176_out1;  // int16
  wire RO3_relop1;
  wire signed [15:0] Switch116_out1;  // int16
  wire signed [15:0] signal4_12;  // int16
  wire signed [15:0] s_206;  // int16
  wire signed [15:0] signal4_13;  // int16
  wire signed [15:0] s_207;  // int16
  wire signed [15:0] signal4_14;  // int16
  wire signed [20:0] Add171_sub_temp;  // sfix21
  wire signed [20:0] Add171_1;  // sfix21
  wire signed [20:0] Add171_2;  // sfix21
  reg signed [27:0] Unit_Delay49_out1_2;  // sfix28
  wire signed [27:0] Switch146_out1_1;  // sfix28
  wire [22:0] Bit_Slice11_out1;  // ufix23
  wire signed [22:0] Data_Type_S12_out1_2;  // sfix23
  wire signed [22:0] s_208;  // sfix23
  reg signed [27:0] Unit_Delay51_out1_2;  // sfix28
  wire signed [27:0] Switch154_out1_1;  // sfix28
  wire [22:0] Bit_Slice10_out1;  // ufix23
  wire signed [22:0] Data_Type_S11_out1_2;  // sfix23
  wire signed [22:0] s_209;  // sfix23
  wire signed [39:0] Product6_out1;  // sfix40
  wire RO24_relop1;
  wire signed [39:0] Switch113_out1;  // sfix40
  wire RO23_relop1;
  wire signed [39:0] Switch114_out1;  // sfix40
  reg signed [27:0] Unit_Delay5_out1_1;  // sfix28
  wire signed [27:0] Switch9_out1_1;  // sfix28
  wire [22:0] Bit_Slice2_out1;  // ufix23
  wire signed [22:0] Data_Type_S3_out1;  // sfix23
  wire signed [22:0] signal1_33;  // sfix23
  wire signed [22:0] s_210;  // sfix23
  wire signed [22:0] signal1_34;  // sfix23
  wire signed [22:0] s_211;  // sfix23
  wire signed [22:0] signal1_35;  // sfix23
  wire signed [22:0] signal1_36;  // sfix23
  wire signed [22:0] signal1_37;  // sfix23
  reg signed [15:0] Unit_Delay1_out1_6;  // int16
  wire signed [15:0] Switch1_out1;  // int16
  wire signed [15:0] signal3_57;  // int16
  wire signed [15:0] s_212;  // int16
  wire signed [15:0] signal3_58;  // int16
  wire signed [15:0] s_213;  // int16
  wire signed [15:0] signal3_59;  // int16
  wire signed [15:0] signal3_60;  // int16
  wire signed [15:0] signal3_61;  // int16
  wire signed [23:0] Add161_1;  // sfix24
  wire signed [23:0] Add161_2;  // sfix24
  wire signed [23:0] Add16_out1_1;  // sfix24
  wire signed [23:0] RO45_1_1;  // sfix24
  wire RO45_relop1;
  wire signed [23:0] RO46_1_1;  // sfix24
  wire RO46_relop1;
  wire signed [15:0] Switch177_out1;  // int16
  wire signed [20:0] Add32_1;  // sfix21
  wire signed [20:0] Add32_2;  // sfix21
  wire signed [20:0] Add3_out1_3;  // sfix21
  reg signed [15:0] Unit_Delay9_out1;  // int16
  wire signed [15:0] Switch19_out1;  // int16
  wire signed [15:0] Switch25_out1_1;  // int16
  wire RO38_relop1;
  wire signed [24:0] Switch137_out1_2;  // sfix25
  wire RO37_relop1;
  wire signed [24:0] Switch138_out1_2;  // sfix25
  wire signed [15:0] Data_Type_Conversion19_out1;  // int16
  reg signed [15:0] Unit_Delay41_out1;  // int16
  wire signed [15:0] Switch135_out1_1;  // int16
  wire [32:0] Bit_Slice5_out1_2;  // ufix33
  wire signed [32:0] Data_Type_S5_out1;  // sfix33
  wire RO32_relop1;
  wire signed [32:0] Switch115_out1;  // sfix33
  wire RO26_relop1;
  wire signed [32:0] Switch118_out1;  // sfix33
  reg signed [15:0] Unit_Delay22_out1;  // int16
  wire signed [15:0] Switch72_out1;  // int16
  wire signed [15:0] signal1_38;  // int16
  wire signed [15:0] s_214;  // int16
  wire signed [15:0] signal1_39;  // int16
  wire signed [15:0] s_215;  // int16
  wire signed [15:0] signal1_40;  // int16
  wire signed [15:0] s_216;  // int16
  wire signed [15:0] signal1_41;  // int16
  wire signed [15:0] s_217;  // int16
  wire signed [15:0] signal1_42;  // int16
  wire signed [15:0] s_218;  // int16
  wire signed [11:0] signal3_62;  // sfix12
  wire RO241_relop1;
  wire signed [11:0] Switch114_out1_1;  // sfix12
  wire signed [11:0] B30_out1_signal3;  // sfix12
  wire signed [11:0] B30_out1_signal3_1;  // sfix12
  wire signed [11:0] signal3_63;  // sfix12
  wire signed [11:0] signal3_64;  // sfix12
  wire RO231_relop1;
  wire signed [11:0] Switch113_out1_1;  // sfix12
  wire signed [11:0] Switch115_out1_1;  // sfix12
  wire signed [11:0] Add15_out1;  // sfix12
  wire Logical_Operator3_out1_1;
  wire Logical_Operator1_out1_3;
  wire Logical_Operator_out1_5;
  wire signed [11:0] Switch112_out1;  // sfix12
  wire signed [11:0] Switch102_out1_1;  // sfix12
  wire signed [11:0] Switch128_out1;  // sfix12
  wire signed [11:0] Switch70_out1;  // sfix12
  wire Switch77_out1;
  wire signed [11:0] Data_Type_S2_out1;  // sfix12
  reg signed [11:0] Unit_Delay17_out1;  // sfix12
  wire signed [11:0] Switch56_out1;  // sfix12
  wire [6:0] Add16_out1_2;  // ufix7
  wire [6:0] Add19_out1_1;  // ufix7
  reg [6:0] Unit_Delay16_out1_1;  // ufix7
  wire And1_out1;
  wire [6:0] Switch50_out1_1;  // ufix7
  reg signed [16:0] Unit_Delay30_out1_1;  // sfix17
  wire [11:0] Bit_Slice1_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S15_out1_1;  // sfix12
  wire signed [11:0] signal1_43;  // sfix12
  wire signed [11:0] s_219;  // sfix12
  wire signed [11:0] signal1_44;  // sfix12
  wire signed [11:0] signal1_45;  // sfix12
  wire signed [11:0] signal1_46;  // sfix12
  wire signed [11:0] UVctDelay_Ram_out1;  // sfix12
  wire signed [11:0] Switch215_out1;  // sfix12
  wire signed [11:0] Switch52_out1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1;  // sfix12
  wire signed [11:0] signal2_162;  // sfix12
  wire signed [11:0] s_220;  // sfix12
  wire signed [11:0] signal2_163;  // sfix12
  wire signed [11:0] signal2_164;  // sfix12
  wire signed [11:0] signal2_165;  // sfix12
  wire Switch128_out1_1;
  reg  Unit_Delay60_out1;
  wire And3_out1;
  wire signed [11:0] Switch54_out1;  // sfix12
  reg signed [16:0] Unit_Delay33_out1_1;  // sfix17
  wire [11:0] Bit_Slice10_out1_1;  // ufix12
  reg  Unit_Delay25_out1_1;
  reg signed [11:0] Unit_Delay99_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion31_out1;  // sfix12
  wire signed [11:0] Switch198_out1;  // sfix12
  wire Ro9_relop1;
  wire Switch78_out1_1;
  reg signed [11:0] Unit_Delay22_out1_1;  // sfix12
  wire Ro4_relop1;
  wire signed [11:0] Switch73_out1;  // sfix12
  reg signed [11:0] Unit_Delay23_out1_1;  // sfix12
  wire Ro5_relop1;
  wire signed [11:0] Switch74_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay24_out1_1;  // sfix12
  wire Ro6_relop1;
  wire signed [11:0] Switch75_out1;  // sfix12
  wire signed [11:0] signal1_47;  // sfix12
  wire signed [11:0] s_221;  // sfix12
  wire signed [11:0] signal1_48;  // sfix12
  wire signed [11:0] s_222;  // sfix12
  wire signed [11:0] signal1_49;  // sfix12
  wire signed [11:0] signal1_50;  // sfix12
  wire signed [11:0] signal1_51;  // sfix12
  wire signed [11:0] WavingDelay_Ram_out1;  // sfix12
  wire signed [11:0] Switch58_out1;  // sfix12
  wire signed [11:0] Switch63_out1;  // sfix12
  wire signed [11:0] Switch65_out1;  // sfix12
  wire signed [11:0] signal2_166;  // sfix12
  wire signed [11:0] s_223;  // sfix12
  wire signed [11:0] signal2_167;  // sfix12
  wire signed [11:0] s_224;  // sfix12
  wire signed [11:0] signal2_168;  // sfix12
  wire signed [11:0] signal2_169;  // sfix12
  wire signed [11:0] signal2_170;  // sfix12
  wire signed [11:0] Switch61_out1;  // sfix12
  wire Ro1_relop1;
  wire signed [11:0] Switch70_out1_1;  // sfix12
  wire Ro2_relop1;
  wire signed [11:0] Switch71_out1;  // sfix12
  wire Ro3_relop1_1;
  wire signed [11:0] Switch72_out1_1;  // sfix12
  wire signed [12:0] Add211_sub_temp;  // sfix13
  wire signed [12:0] Add211_1;  // sfix13
  wire signed [12:0] Add211_2;  // sfix13
  wire [7:0] Add21_out1;  // uint8
  wire signed [11:0] Ro7_1_1;  // sfix12
  wire Ro7_relop1;
  wire Logical_Operator3_out1_2;
  reg signed [11:0] Unit_Delay98_out1;  // sfix12
  wire signed [11:0] Switch196_out1;  // sfix12
  wire Ro8_relop1;
  wire Logical_Operator2_out1_3;
  wire signed [11:0] Switch57_out1;  // sfix12
  reg signed [16:0] Unit_Delay14_out1;  // sfix17
  wire [11:0] Bit_Slice13_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S18_out1_1;  // sfix12
  wire signed [16:0] Switch29_out1_1;  // sfix17
  wire signed [16:0] Switch30_out1_1;  // sfix17
  wire signed [16:0] Switch34_out1;  // sfix17
  wire signed [16:0] Switch27_out1;  // sfix17
  reg signed [16:0] Unit_Delay15_out1;  // sfix17
  wire signed [16:0] signal2_171;  // sfix17
  wire signed [16:0] s_225;  // sfix17
  wire signed [16:0] signal2_172;  // sfix17
  wire signed [16:0] s_226;  // sfix17
  wire signed [16:0] signal2_173;  // sfix17
  wire signed [16:0] s_227;  // sfix17
  wire signed [16:0] signal2_174;  // sfix17
  wire signed [16:0] signal2_175;  // sfix17
  wire signed [16:0] signal2_176;  // sfix17
  wire signed [11:0] Switch32_out1;  // sfix12
  wire signed [11:0] Filter_Ram_out1;  // sfix12
  wire signed [11:0] Switch45_out1;  // sfix12
  reg signed [11:0] Unit_Delay12_out1;  // sfix12
  wire signed [11:0] Data_Type_Conversion24_out1;  // sfix12
  wire signed [11:0] Switch24_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay62_out1;  // sfix12
  wire signed [11:0] Switch51_out1;  // sfix12
  wire [23:0] Switch219_out1;  // ufix24
  reg [23:0] Unit_Delay105_out1;  // ufix24
  wire [23:0] Switch221_out1;  // ufix24
  wire [23:0] Bitwise_Operator2_out1;  // ufix24
  wire signed [36:0] Product2_mul_temp;  // sfix37
  wire signed [24:0] Product2_1;  // sfix25
  wire signed [35:0] Product2_out1;  // sfix36
  wire Compare_To_Constant5_out1;
  reg [23:0] Unit_Delay104_out1;  // ufix24
  wire [23:0] Switch220_out1;  // ufix24
  wire signed [23:0] Data_Type_S34_out1;  // sfix24
  wire signed [23:0] Data_Type_S29_out1;  // sfix24
  wire signed [23:0] Data_Type_S30_out1;  // sfix24
  wire [23:0] Switch179_out1_1;  // ufix24
  reg [23:0] Unit_Delay88_out1;  // ufix24
  wire [23:0] Switch181_out1_1;  // ufix24
  wire [23:0] Bitwise_Operator10_out1;  // ufix24
  wire signed [36:0] Product111_mul_temp;  // sfix37
  wire signed [24:0] Product111_1;  // sfix25
  wire signed [35:0] Product11_out1;  // sfix36
  wire Compare_To_Constant12_out1;
  wire [23:0] Switch180_out1_1;  // ufix24
  wire signed [23:0] Data_Type_S31_out1;  // sfix24
  reg [23:0] Unit_Delay90_out1;  // ufix24
  wire signed [23:0] Data_Type_S32_out1;  // sfix24
  wire [23:0] Switch183_out1;  // ufix24
  reg [23:0] Unit_Delay91_out1;  // ufix24
  wire [23:0] Switch185_out1;  // ufix24
  wire [23:0] Bitwise_Operator11_out1;  // ufix24
  wire signed [36:0] Product12_mul_temp;  // sfix37
  wire signed [24:0] Product12_1;  // sfix25
  wire signed [35:0] Product12_out1_1;  // sfix36
  wire Compare_To_Constant13_out1;
  wire [23:0] Switch184_out1;  // ufix24
  wire signed [23:0] Data_Type_S33_out1;  // sfix24
  wire [23:0] Switch295_out1;  // ufix24
  reg [23:0] Unit_Delay140_out1;  // ufix24
  wire [23:0] Switch297_out1;  // ufix24
  wire [23:0] Bitwise_Operator3_out1;  // ufix24
  wire signed [11:0] SA_1_out1;  // sfix12
  wire signed [36:0] Product3_mul_temp;  // sfix37
  wire signed [24:0] Product3_1;  // sfix25
  wire signed [35:0] Product3_out1;  // sfix36
  wire Compare_To_Constant21_out1;
  reg [23:0] Unit_Delay139_out1;  // ufix24
  wire [23:0] Switch296_out1;  // ufix24
  wire signed [23:0] Data_Type_S43_out1;  // sfix24
  wire signed [23:0] signal2_177;  // sfix24
  wire signed [23:0] s_228;  // sfix24
  wire signed [23:0] signal2_178;  // sfix24
  wire signed [23:0] s_229;  // sfix24
  wire signed [23:0] signal2_179;  // sfix24
  wire signed [23:0] s_230;  // sfix24
  wire signed [23:0] signal2_180;  // sfix24
  wire signed [23:0] s_231;  // sfix24
  wire signed [23:0] signal2_181;  // sfix24
  wire signed [23:0] s_232;  // sfix24
  wire signed [23:0] signal2_182;  // sfix24
  wire signed [23:0] s_233;  // sfix24
  wire signed [23:0] signal2_183;  // sfix24
  wire signed [23:0] s_234;  // sfix24
  wire signed [11:0] Switch91_out1;  // sfix12
  reg signed [11:0] Unit_Delay42_out1;  // sfix12
  reg signed [11:0] Unit_Delay9_out1_1;  // sfix12
  wire signed [11:0] Switch19_out1_1;  // sfix12
  wire Or11_out1;
  wire signed [11:0] Switch89_out1;  // sfix12
  wire signed [11:0] Switch92_out1;  // sfix12
  reg signed [11:0] Unit_Delay44_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay10_out1_1;  // sfix12
  wire signed [11:0] Switch22_out1;  // sfix12
  wire RO201_relop1;
  wire signed [11:0] Switch90_out1;  // sfix12
  reg signed [11:0] Unit_Delay109_out1;  // sfix12
  wire signed [11:0] Switch228_out1;  // sfix12
  wire signed [11:0] signal2_184;  // sfix12
  wire signed [11:0] s_235;  // sfix12
  wire signed [11:0] signal2_185;  // sfix12
  wire signed [11:0] s_236;  // sfix12
  wire signed [11:0] signal2_186;  // sfix12
  wire signed [11:0] s_237;  // sfix12
  wire signed [11:0] signal2_187;  // sfix12
  wire signed [11:0] s_238;  // sfix12
  wire signed [11:0] Switch107_out1_21;  // sfix12
  wire signed [11:0] signal2_188;  // sfix12
  wire signed [11:0] s_239;  // sfix12
  wire signed [11:0] Switch107_out1_22;  // sfix12
  wire signed [11:0] signal2_189;  // sfix12
  wire signed [11:0] s_240;  // sfix12
  wire signed [11:0] Switch107_out1_23;  // sfix12
  wire signed [11:0] signal2_190;  // sfix12
  wire signed [11:0] s_241;  // sfix12
  wire signed [11:0] Switch107_out1_24;  // sfix12
  wire signed [11:0] signal2_191;  // sfix12
  wire signed [11:0] s_242;  // sfix12
  wire signed [11:0] signal2_192;  // sfix12
  wire signed [11:0] s_243;  // sfix12
  wire signed [11:0] signal2_193;  // sfix12
  wire signed [11:0] s_244;  // sfix12
  wire signed [11:0] signal2_194;  // sfix12
  wire signed [11:0] s_245;  // sfix12
  wire signed [11:0] signal2_195;  // sfix12
  wire signed [11:0] s_246;  // sfix12
  wire signed [11:0] signal2_196;  // sfix12
  wire signed [11:0] s_247;  // sfix12
  wire signed [11:0] signal2_197;  // sfix12
  wire signed [11:0] s_248;  // sfix12
  wire signed [11:0] signal2_198;  // sfix12
  wire signed [11:0] s_249;  // sfix12
  wire signed [11:0] signal2_199;  // sfix12
  wire signed [11:0] s_250;  // sfix12
  wire signed [11:0] signal2_200;  // sfix12
  wire signed [11:0] s_251;  // sfix12
  wire signed [11:0] signal2_201;  // sfix12
  wire signed [11:0] s_252;  // sfix12
  wire signed [11:0] signal2_202;  // sfix12
  wire signed [11:0] s_253;  // sfix12
  wire signed [11:0] signal2_203;  // sfix12
  wire signed [11:0] s_254;  // sfix12
  wire signed [11:0] signal2_204;  // sfix12
  wire signed [11:0] s_255;  // sfix12
  wire signed [11:0] signal2_205;  // sfix12
  wire signed [11:0] s_256;  // sfix12
  wire signed [11:0] signal2_206;  // sfix12
  wire signed [11:0] s_257;  // sfix12
  wire signed [11:0] signal2_207;  // sfix12
  wire signed [11:0] s_258;  // sfix12
  wire signed [11:0] signal2_208;  // sfix12
  wire signed [11:0] s_259;  // sfix12
  wire signed [11:0] signal2_209;  // sfix12
  wire signed [11:0] s_260;  // sfix12
  wire signed [11:0] signal2_210;  // sfix12
  wire signed [11:0] s_261;  // sfix12
  wire signed [11:0] signal2_211;  // sfix12
  wire signed [11:0] s_262;  // sfix12
  wire signed [11:0] Switch107_out1_25;  // sfix12
  wire signed [11:0] signal2_212;  // sfix12
  wire signed [11:0] s_263;  // sfix12
  wire signed [11:0] Switch107_out1_26;  // sfix12
  wire signed [11:0] signal2_213;  // sfix12
  wire signed [11:0] s_264;  // sfix12
  wire signed [11:0] Switch107_out1_27;  // sfix12
  wire signed [11:0] signal2_214;  // sfix12
  wire signed [11:0] s_265;  // sfix12
  wire signed [11:0] Switch107_out1_28;  // sfix12
  wire signed [11:0] signal2_215;  // sfix12
  wire signed [11:0] signal2_216;  // sfix12
  wire signed [23:0] Data_Type_S21_out1_1;  // sfix24
  wire signed [23:0] signal2_217;  // sfix24
  wire signed [23:0] signal2_218;  // sfix24
  reg signed [11:0] Unit_Delay107_out1;  // sfix12
  wire signed [11:0] Switch222_out1;  // sfix12
  wire RO10_relop1;
  wire signed [11:0] Switch224_out1;  // sfix12
  wire RO9_relop1_1;
  wire signed [11:0] Switch225_out1;  // sfix12
  wire signed [23:0] Data_Type_S35_out1;  // sfix24
  wire signed [24:0] Add10_out1;  // sfix25
  wire RO361_relop1;
  wire signed [24:0] Switch194_out1;  // sfix25
  wire RO351_relop1;
  wire signed [24:0] Switch195_out1;  // sfix25
  wire signed [23:0] Data_Type_Conversion30_out1;  // sfix24
  reg signed [23:0] Unit_Delay100_out1;  // sfix24
  wire signed [23:0] Switch200_out1;  // sfix24
  wire signed [23:0] Data_Type_S5_out1_1;  // sfix24
  wire signed [23:0] Data_Type_S7_out1;  // sfix24
  wire signed [23:0] Data_Type_S8_out1;  // sfix24
  wire signed [23:0] Data_Type_S9_out1;  // sfix24
  reg signed [11:0] Unit_Delay149_out1;  // sfix12
  wire signed [11:0] Switch315_out1;  // sfix12
  wire signed [23:0] Data_Type_S44_out1;  // sfix24
  wire signed [23:0] signal1_52;  // sfix24
  wire signed [23:0] s_266;  // sfix24
  wire signed [23:0] signal1_53;  // sfix24
  wire signed [23:0] s_267;  // sfix24
  wire signed [23:0] signal1_54;  // sfix24
  wire signed [23:0] s_268;  // sfix24
  wire signed [23:0] signal1_55;  // sfix24
  wire signed [23:0] s_269;  // sfix24
  wire signed [23:0] signal1_56;  // sfix24
  wire signed [23:0] s_270;  // sfix24
  wire signed [23:0] signal1_57;  // sfix24
  wire signed [23:0] s_271;  // sfix24
  wire signed [23:0] signal1_58;  // sfix24
  wire signed [23:0] s_272;  // sfix24
  reg signed [11:0] Unit_Delay39_out1_21;  // sfix12
  wire signed [11:0] Switch107_out1_29;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_22;  // sfix12
  wire signed [11:0] Switch107_out1_30;  // sfix12
  reg signed [11:0] Unit_Delay142_out1;  // sfix12
  wire signed [11:0] Switch299_out1;  // sfix12
  reg signed [11:0] Unit_Delay108_out1;  // sfix12
  wire signed [11:0] Switch227_out1;  // sfix12
  wire signed [11:0] Switch300_out1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_23;  // sfix12
  wire signed [11:0] Switch107_out1_31;  // sfix12
  wire signed [11:0] Switch207_out1;  // sfix12
  wire signed [11:0] s_273;  // sfix12
  reg signed [23:0] Unit_Delay97_out1;  // sfix24
  wire signed [23:0] Switch192_out1;  // sfix24
  wire signed [23:0] signal2_219;  // sfix24
  wire signed [23:0] s_274;  // sfix24
  reg signed [11:0] Unit_Delay3_out1;  // sfix12
  wire signed [11:0] Switch5_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1_1;  // sfix12
  wire signed [11:0] Switch7_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay5_out1_2;  // sfix12
  wire signed [11:0] Switch9_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay6_out1_2;  // sfix12
  wire signed [11:0] Switch12_out1_1;  // sfix12
  wire RO_5_relop1;
  wire signed [11:0] SW_5_out1;  // sfix12
  reg signed [11:0] Unit_Delay57_out1_7;  // sfix12
  wire signed [11:0] signal2_220;  // sfix12
  wire signed [11:0] s_275;  // sfix12
  wire signed [11:0] signal2_221;  // sfix12
  wire signed [11:0] s_276;  // sfix12
  wire signed [11:0] Switch109_out1;  // sfix12
  wire signed [11:0] signal2_222;  // sfix12
  wire signed [11:0] s_277;  // sfix12
  wire signed [11:0] signal2_223;  // sfix12
  wire signed [11:0] s_278;  // sfix12
  wire signed [11:0] signal2_224;  // sfix12
  wire signed [11:0] s_279;  // sfix12
  wire signed [11:0] signal2_225;  // sfix12
  wire signed [11:0] s_280;  // sfix12
  wire signed [11:0] signal2_226;  // sfix12
  wire signed [11:0] s_281;  // sfix12
  wire signed [11:0] signal2_227;  // sfix12
  wire signed [11:0] s_282;  // sfix12
  wire signed [11:0] signal2_228;  // sfix12
  wire signed [11:0] s_283;  // sfix12
  wire signed [11:0] signal2_229;  // sfix12
  wire signed [11:0] s_284;  // sfix12
  wire signed [11:0] signal2_230;  // sfix12
  wire signed [11:0] s_285;  // sfix12
  wire signed [11:0] signal2_231;  // sfix12
  wire signed [11:0] s_286;  // sfix12
  wire signed [11:0] signal2_232;  // sfix12
  wire signed [11:0] s_287;  // sfix12
  wire signed [11:0] signal2_233;  // sfix12
  wire signed [11:0] s_288;  // sfix12
  wire signed [11:0] signal2_234;  // sfix12
  wire signed [11:0] signal2_235;  // sfix12
  wire signed [23:0] Data_Type_S27_out1;  // sfix24
  wire signed [23:0] signal2_236;  // sfix24
  wire signed [23:0] signal2_237;  // sfix24
  reg signed [23:0] Unit_Delay96_out1;  // sfix24
  wire signed [23:0] Switch190_out1;  // sfix24
  wire signed [23:0] signal1_59;  // sfix24
  wire signed [23:0] s_289;  // sfix24
  reg signed [11:0] Unit_Delay103_out1;  // sfix12
  wire signed [11:0] s_290;  // sfix12
  wire signed [11:0] Switch216_out1;  // sfix12
  wire signed [11:0] s_291;  // sfix12
  wire signed [24:0] Add4_out1_3;  // sfix25
  wire RO82_relop1;
  wire signed [24:0] Switch76_out1;  // sfix25
  wire RO72_relop1;
  wire signed [24:0] Switch79_out1_1;  // sfix25
  reg signed [11:0] Unit_Delay86_out1;  // sfix12
  wire signed [11:0] Switch176_out1_1;  // sfix12
  wire signed [11:0] signal1_60;  // sfix12
  wire signed [11:0] signal3_65;  // sfix12
  wire RO221_relop1;
  wire signed [11:0] Switch95_out1;  // sfix12
  reg signed [11:0] Unit_Delay45_out1;  // sfix12
  wire signed [11:0] Switch93_out1;  // sfix12
  wire signed [11:0] Switch101_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_1;  // sfix12
  wire signed [11:0] Switch102_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay29_out1;  // sfix12
  wire signed [11:0] signal3_66;  // sfix12
  wire signed [11:0] s_292;  // sfix12
  wire signed [11:0] signal3_67;  // sfix12
  wire signed [11:0] s_293;  // sfix12
  wire signed [11:0] signal3_68;  // sfix12
  wire signed [11:0] signal3_69;  // sfix12
  reg signed [11:0] Unit_Delay28_out1;  // sfix12
  wire signed [11:0] Switch110_out1;  // sfix12
  wire signed [11:0] Switch317_out1;  // sfix12
  reg signed [11:0] Unit_Delay27_out1;  // sfix12
  wire signed [11:0] Switch106_out1_3;  // sfix12
  wire Data_Type_S37_out1;
  wire signed [11:0] Switch107_out1_32;  // sfix12
  wire RO4_relop1_1;
  wire signed [11:0] Switch108_out1;  // sfix12
  wire RO310_relop1;
  wire signed [11:0] signal1_61;  // sfix12
  wire signed [11:0] s_294;  // sfix12
  wire signed [11:0] signal1_62;  // sfix12
  wire signed [11:0] s_295;  // sfix12
  wire signed [11:0] signal1_63;  // sfix12
  wire signed [11:0] signal1_64;  // sfix12
  wire RO212_relop1;
  wire signed [11:0] Switch94_out1;  // sfix12
  wire signed [11:0] Switch96_out1;  // sfix12
  wire signed [11:0] Add7_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_24;  // sfix12
  wire signed [11:0] Switch107_out1_33;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_25;  // sfix12
  wire signed [11:0] Switch107_out1_34;  // sfix12
  wire signed [24:0] Add_out1;  // sfix25
  reg signed [24:0] Delay16_out1;  // sfix25
  wire signed [24:0] Switch13_out1;  // sfix25
  reg signed [11:0] Unit_Delay1_out1_7;  // sfix12
  wire signed [11:0] Data_Type_Conversion1_out1_1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  reg signed [11:0] Unit_Delay2_out1_1;  // sfix12
  wire signed [11:0] Switch11_out1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1_1;  // sfix12
  wire signed [11:0] Switch12_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay69_out1_1;  // sfix12
  wire signed [11:0] Data_Type_Conversion3_out1_3;  // sfix12
  wire signed [11:0] Switch150_out1;  // sfix12
  reg signed [11:0] Unit_Delay11_out1;  // sfix12
  wire signed [11:0] Switch29_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay12_out1_1;  // sfix12
  wire signed [11:0] Switch31_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay13_out1_2;  // sfix12
  wire signed [11:0] Switch33_out1;  // sfix12
  reg signed [11:0] Unit_Delay19_out1;  // sfix12
  wire signed [11:0] Switch35_out1;  // sfix12
  reg signed [11:0] Unit_Delay14_out1_1;  // sfix12
  wire signed [11:0] Switch37_out1;  // sfix12
  reg signed [11:0] Unit_Delay15_out1_1;  // sfix12
  wire signed [11:0] Switch39_out1;  // sfix12
  reg signed [11:0] Unit_Delay18_out1;  // sfix12
  wire signed [11:0] Switch43_out1;  // sfix12
  wire signed [11:0] signal3_70;  // sfix12
  wire RO243_relop1;
  wire signed [11:0] Switch114_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_2;  // sfix12
  wire signed [11:0] signal3_71;  // sfix12
  wire signed [11:0] signal3_72;  // sfix12
  wire RO233_relop1;
  wire signed [11:0] Switch113_out1_2;  // sfix12
  wire signed [11:0] Switch115_out1_2;  // sfix12
  wire signed [11:0] Add15_out1_1;  // sfix12
  wire signed [11:0] Data_Type_S11_out1_3;  // sfix12
  wire signed [11:0] signal2_238;  // sfix12
  wire signed [11:0] signal2_239;  // sfix12
  wire signed [11:0] signal2_240;  // sfix12
  wire signed [11:0] Switch112_out1_1;  // sfix12
  wire signed [11:0] Switch102_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay32_out1_7;  // sfix12
  wire signed [11:0] Data_Type_S4_out1;  // sfix12
  wire signed [11:0] Switch88_out1;  // sfix12
  wire signed [11:0] Switch103_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_35;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_26;  // sfix12
  wire signed [11:0] Switch107_out1_36;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_27;  // sfix12
  reg signed [11:0] Unit_Delay34_out1_1;  // sfix12
  wire signed [11:0] Switch96_out1_1;  // sfix12
  wire signed [11:0] Switch104_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_37;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_28;  // sfix12
  wire signed [11:0] Switch107_out1_38;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_29;  // sfix12
  reg signed [11:0] Unit_Delay36_out1_3;  // sfix12
  wire signed [11:0] Switch99_out1;  // sfix12
  wire signed [11:0] Switch105_out1_10;  // sfix12
  wire signed [11:0] Switch107_out1_39;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_30;  // sfix12
  wire signed [11:0] Switch107_out1_40;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_31;  // sfix12
  wire signed [26:0] Data_Type_S2_out1_1;  // sfix27
  wire signed [29:0] In8_out1_dtc;  // sfix30
  wire signed [11:0] Switch90_out1_1;  // sfix12
  wire signed [12:0] Add25_1;  // sfix13
  wire signed [12:0] Add25_2;  // sfix13
  wire signed [12:0] Add2_out1_4;  // sfix13
  wire [26:0] Bit_Concat3_out1;  // ufix27
  wire signed [26:0] Data_Type_S19_out1;  // sfix27
  wire signed [29:0] In7_out1_dtc;  // sfix30
  wire signed [12:0] Add61_1;  // sfix13
  wire signed [12:0] Add61_2;  // sfix13
  wire signed [12:0] Add6_out1;  // sfix13
  wire [26:0] Bit_Concat1_out1;  // ufix27
  reg signed [29:0] Unit_Delay31_out1;  // sfix30
  wire signed [29:0] Switch107_out1_41;  // sfix30
  wire signed [29:0] Switch87_out1_2;  // sfix30
  reg signed [29:0] Unit_Delay33_out1_2;  // sfix30
  wire signed [29:0] Switch95_out1_1;  // sfix30
  reg signed [29:0] Unit_Delay35_out1_1;  // sfix30
  wire signed [29:0] Switch98_out1_1;  // sfix30
  wire signed [29:0] Switch92_out1_1;  // sfix30
  reg signed [29:0] Unit_Delay37_out1_3;  // sfix30
  wire signed [29:0] Switch101_out1_2;  // sfix30
  wire signed [29:0] signal6_5;  // sfix30
  wire signed [29:0] s_296;  // sfix30
  wire signed [29:0] signal6_6;  // sfix30
  wire signed [29:0] s_297;  // sfix30
  wire signed [29:0] signal6_7;  // sfix30
  wire signed [29:0] s_298;  // sfix30
  wire signed [29:0] signal6_8;  // sfix30
  wire signed [29:0] signal6_9;  // sfix30
  wire signed [29:0] signal6_10;  // sfix30
  reg signed [27:0] Unit_Delay29_out1_1;  // sfix28
  wire signed [27:0] Data_Type_S1_out1;  // sfix28
  wire signed [27:0] Switch73_out1_1;  // sfix28
  reg signed [27:0] Unit_Delay30_out1_2;  // sfix28
  wire signed [27:0] Switch75_out1_1;  // sfix28
  reg signed [27:0] Unit_Delay27_out1_1;  // sfix28
  wire signed [27:0] Switch79_out1_2;  // sfix28
  reg signed [27:0] Unit_Delay28_out1_1;  // sfix28
  wire signed [27:0] Switch81_out1_3;  // sfix28
  wire signed [27:0] signal2_241;  // sfix28
  wire signed [27:0] s_299;  // sfix28
  wire signed [27:0] signal2_242;  // sfix28
  wire signed [27:0] s_300;  // sfix28
  wire signed [27:0] signal2_243;  // sfix28
  wire signed [27:0] s_301;  // sfix28
  wire signed [27:0] signal2_244;  // sfix28
  wire signed [27:0] signal2_245;  // sfix28
  wire signed [27:0] signal2_246;  // sfix28
  wire signed [27:0] Switch93_out1_1;  // sfix28
  wire signed [30:0] Add81_add_temp;  // sfix31
  wire signed [30:0] Add81_1;  // sfix31
  wire signed [30:0] Add81_2;  // sfix31
  wire signed [29:0] Add8_out1_1;  // sfix30
  wire signed [29:0] RO52_1_1;  // sfix30
  wire RO52_relop1;
  wire signed [29:0] Switch91_out1_1;  // sfix30
  wire signed [29:0] RO62_1_1;  // sfix30
  wire RO62_relop1;
  wire [15:0] Bit_Slice9_out1;  // uint16
  wire signed [15:0] Data_Type_S6_out1;  // int16
  wire signed [21:0] Switch89_out1_1;  // sfix22
  wire signed [11:0] Switch89_out1_dtc;  // sfix12
  reg signed [27:0] Unit_Delay18_out1_1;  // sfix28
  wire signed [27:0] Switch59_out1_2;  // sfix28
  wire [20:0] Bit_Slice2_out1_1;  // ufix21
  wire signed [20:0] Data_Type_S3_out1_1;  // sfix21
  reg signed [27:0] Unit_Delay26_out1_1;  // sfix28
  wire signed [27:0] Switch67_out1;  // sfix28
  wire [20:0] Bit_Slice4_out1;  // ufix21
  wire signed [20:0] Data_Type_S5_out1_2;  // sfix21
  reg signed [27:0] Unit_Delay15_out1_2;  // sfix28
  wire signed [27:0] Switch69_out1_1;  // sfix28
  wire [20:0] Bit_Slice5_out1_3;  // ufix21
  wire signed [20:0] Data_Type_S7_out1_1;  // sfix21
  wire signed [35:0] Product_out1_1;  // sfix36
  wire [27:0] Bit_Slice1_out1_2;  // ufix28
  reg signed [27:0] Unit_Delay16_out1_2;  // sfix28
  wire signed [27:0] Switch71_out1_1;  // sfix28
  wire [20:0] Bit_Slice6_out1_2;  // ufix21
  wire signed [20:0] Data_Type_S9_out1_1;  // sfix21
  wire signed [20:0] signal1_65;  // sfix21
  wire signed [20:0] s_302;  // sfix21
  wire signed [20:0] signal1_66;  // sfix21
  wire signed [20:0] s_303;  // sfix21
  wire signed [20:0] signal1_67;  // sfix21
  wire signed [20:0] s_304;  // sfix21
  wire signed [20:0] signal1_68;  // sfix21
  wire signed [20:0] signal1_69;  // sfix21
  wire signed [20:0] signal1_70;  // sfix21
  wire signed [20:0] Switch108_out1_1;  // sfix21
  reg signed [11:0] Unit_Delay5_out1_3;  // sfix12
  wire signed [11:0] Data_Type_S8_out1_1;  // sfix12
  wire signed [11:0] Switch36_out1;  // sfix12
  reg signed [11:0] Unit_Delay6_out1_3;  // sfix12
  wire signed [11:0] Switch44_out1;  // sfix12
  reg signed [11:0] Unit_Delay10_out1_2;  // sfix12
  wire signed [11:0] Switch46_out1;  // sfix12
  wire signed [11:0] Switch107_out1_42;  // sfix12
  wire signed [11:0] Switch107_out1_43;  // sfix12
  wire signed [11:0] Switch13_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_44;  // sfix12
  wire signed [11:0] Switch107_out1_45;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12
  wire signed [11:0] Switch107_out1_46;  // sfix12
  wire signed [11:0] Switch15_out1;  // sfix12
  wire signed [11:0] Switch107_out1_47;  // sfix12
  wire signed [11:0] Switch18_out1_1;  // sfix12
  wire signed [11:0] Switch19_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_48;  // sfix12
  wire signed [11:0] Switch19_out1_3;  // sfix12
  wire signed [11:0] s_305;  // sfix12
  wire signed [11:0] Switch2_out1;  // sfix12
  wire signed [11:0] Switch107_out1_49;  // sfix12
  wire signed [11:0] Switch21_out1_1;  // sfix12
  wire signed [11:0] s_306;  // sfix12
  wire signed [11:0] Switch3_out1;  // sfix12
  wire signed [11:0] Switch107_out1_50;  // sfix12
  wire signed [11:0] Switch28_out1;  // sfix12
  wire signed [11:0] s_307;  // sfix12
  wire signed [11:0] Switch29_out1_3;  // sfix12
  wire signed [11:0] s_308;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire signed [11:0] Switch107_out1_51;  // sfix12
  wire signed [11:0] s_309;  // sfix12
  wire signed [11:0] signal1_71;  // sfix12
  wire signed [11:0] s_310;  // sfix12
  wire signed [11:0] signal1_72;  // sfix12
  wire signed [11:0] s_311;  // sfix12
  wire signed [11:0] signal1_73;  // sfix12
  wire signed [11:0] s_312;  // sfix12
  wire signed [11:0] signal1_74;  // sfix12
  wire signed [11:0] s_313;  // sfix12
  wire signed [11:0] signal1_75;  // sfix12
  wire signed [11:0] s_314;  // sfix12
  wire signed [11:0] signal1_76;  // sfix12
  wire signed [11:0] s_315;  // sfix12
  wire signed [11:0] signal1_77;  // sfix12
  wire signed [11:0] s_316;  // sfix12
  wire signed [11:0] signal1_78;  // sfix12
  wire signed [11:0] signal1_79;  // sfix12
  wire signed [11:0] s_317;  // sfix12
  reg signed [11:0] Unit_Delay47_out1_2;  // sfix12
  wire signed [11:0] Data_Type_Conversion10_out1_1;  // sfix12
  wire signed [11:0] Switch127_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay48_out1_3;  // sfix12
  wire signed [11:0] Switch128_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay45_out1_1;  // sfix12
  wire signed [11:0] Switch123_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_3;  // sfix12
  wire signed [11:0] Switch125_out1_2;  // sfix12
  wire signed [11:0] signal1_80;  // sfix12
  wire signed [11:0] s_318;  // sfix12
  wire signed [11:0] signal1_81;  // sfix12
  wire signed [11:0] s_319;  // sfix12
  wire signed [11:0] signal1_82;  // sfix12
  wire signed [11:0] s_320;  // sfix12
  wire signed [11:0] signal1_83;  // sfix12
  wire signed [11:0] s_321;  // sfix12
  wire signed [11:0] Switch30_out1_2;  // sfix12
  wire signed [11:0] s_322;  // sfix12
  wire signed [11:0] Switch31_out1_3;  // sfix12
  wire signed [11:0] s_323;  // sfix12
  wire signed [11:0] Switch34_out1_1;  // sfix12
  wire signed [11:0] s_324;  // sfix12
  wire signed [11:0] Switch35_out1_1;  // sfix12
  wire signed [11:0] s_325;  // sfix12
  reg signed [11:0] Unit_Delay17_out1_1;  // sfix12
  wire signed [11:0] Switch16_out1;  // sfix12
  reg signed [11:0] Unit_Delay44_out1_3;  // sfix12
  wire signed [11:0] Switch47_out1;  // sfix12
  wire signed [11:0] s_326;  // sfix12
  reg signed [11:0] Unit_Delay9_out1_2;  // sfix12
  wire signed [11:0] Switch24_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay55_out1_7;  // sfix12
  wire signed [11:0] Switch49_out1_7;  // sfix12
  wire signed [11:0] s_327;  // sfix12
  reg signed [11:0] Unit_Delay14_out1_2;  // sfix12
  wire signed [11:0] Switch39_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay25_out1_2;  // sfix12
  wire signed [11:0] Switch63_out1_1;  // sfix12
  wire signed [11:0] s_328;  // sfix12
  reg signed [11:0] Unit_Delay19_out1_1;  // sfix12
  wire signed [11:0] Switch40_out1;  // sfix12
  reg signed [11:0] Unit_Delay51_out1_3;  // sfix12
  wire signed [11:0] Switch64_out1;  // sfix12
  wire signed [11:0] s_329;  // sfix12
  reg signed [11:0] Unit_Delay52_out1_3;  // sfix12
  wire signed [11:0] Switch135_out1_2;  // sfix12
  wire signed [11:0] Switch140_out1_2;  // sfix12
  wire signed [11:0] s_330;  // sfix12
  reg signed [11:0] Unit_Delay53_out1_4;  // sfix12
  wire signed [11:0] Switch136_out1;  // sfix12
  wire signed [11:0] Switch141_out1_1;  // sfix12
  wire signed [11:0] s_331;  // sfix12
  wire signed [11:0] Switch142_out1_1;  // sfix12
  wire signed [11:0] s_332;  // sfix12
  wire signed [11:0] s_333;  // sfix12
  reg signed [11:0] Unit_Delay47_out1_3;  // sfix12
  wire signed [11:0] Data_Type_Conversion2_out1;  // sfix12
  wire signed [11:0] Switch133_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_52;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_32;  // sfix12
  wire signed [11:0] s_334;  // sfix12
  reg signed [11:0] Unit_Delay48_out1_4;  // sfix12
  wire signed [11:0] Switch134_out1;  // sfix12
  wire signed [11:0] Switch107_out1_53;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_33;  // sfix12
  wire signed [11:0] s_335;  // sfix12
  reg signed [11:0] Unit_Delay49_out1_3;  // sfix12
  wire signed [11:0] Switch135_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_54;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_34;  // sfix12
  wire signed [11:0] s_336;  // sfix12
  reg signed [11:0] Unit_Delay50_out1_4;  // sfix12
  wire signed [11:0] Switch136_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_55;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_35;  // sfix12
  wire signed [11:0] s_337;  // sfix12
  reg signed [12:0] Unit_Delay30_out1_3;  // sfix13
  wire [11:0] Bit_Slice6_out1_3;  // ufix12
  wire signed [11:0] Data_Type_S11_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_36;  // sfix12
  reg signed [12:0] Unit_Delay33_out1_3;  // sfix13
  wire [11:0] Bit_Slice1_out1_3;  // ufix12
  wire signed [11:0] Data_Type_S12_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_37;  // sfix12
  reg signed [12:0] Unit_Delay34_out1_2;  // sfix13
  wire [11:0] Bit_Slice2_out1_2;  // ufix12
  wire signed [11:0] Data_Type_S13_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_38;  // sfix12
  reg signed [11:0] Unit_Delay1_out1_8;  // sfix12
  wire signed [11:0] Switch1_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1_2;  // sfix12
  wire signed [11:0] Switch4_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay54_out1_9;  // sfix12
  wire signed [11:0] Switch111_out1;  // sfix12
  reg signed [11:0] Unit_Delay56_out1_3;  // sfix12
  wire signed [11:0] Switch113_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay57_out1_8;  // sfix12
  wire signed [11:0] Switch144_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay58_out1_2;  // sfix12
  wire signed [11:0] Switch146_out1_2;  // sfix12
  reg signed [18:0] Unit_Delay30_out1_4;  // sfix19
  wire [11:0] Bit_Slice6_out1_4;  // ufix12
  wire signed [11:0] Data_Type_S11_out1_5;  // sfix12
  reg signed [18:0] Unit_Delay33_out1_4;  // sfix19
  wire [11:0] Bit_Slice1_out1_4;  // ufix12
  wire signed [11:0] Data_Type_S12_out1_4;  // sfix12
  reg signed [18:0] Unit_Delay34_out1_3;  // sfix19
  wire [11:0] Bit_Slice2_out1_3;  // ufix12
  wire signed [11:0] Data_Type_S13_out1_3;  // sfix12
  wire signed [18:0] Switch79_out1_3;  // sfix19
  wire signed [18:0] Switch80_out1_1;  // sfix19
  wire signed [18:0] Switch87_out1_3;  // sfix19
  wire signed [18:0] Switch89_out1_2;  // sfix19
  reg signed [18:0] Unit_Delay35_out1_2;  // sfix19
  wire signed [18:0] signal2_247;  // sfix19
  wire signed [18:0] s_338;  // sfix19
  wire signed [18:0] signal2_248;  // sfix19
  wire signed [18:0] s_339;  // sfix19
  wire signed [18:0] signal2_249;  // sfix19
  wire signed [18:0] s_340;  // sfix19
  wire signed [18:0] signal2_250;  // sfix19
  wire signed [18:0] signal2_251;  // sfix19
  wire signed [18:0] signal2_252;  // sfix19
  wire signed [11:0] Switch84_out1_2;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_1;  // sfix12
  wire signed [11:0] Switch98_out1_2;  // sfix12
  wire signed [11:0] signal1_84;  // sfix12
  wire signed [11:0] s_341;  // sfix12
  wire signed [11:0] signal1_85;  // sfix12
  wire signed [11:0] s_342;  // sfix12
  wire signed [11:0] signal1_86;  // sfix12
  wire signed [11:0] s_343;  // sfix12
  wire signed [11:0] signal1_87;  // sfix12
  wire signed [11:0] signal1_88;  // sfix12
  wire signed [11:0] signal1_89;  // sfix12
  wire signed [11:0] Switch97_out1_1;  // sfix12
  wire signed [19:0] Add7_stage22_1;  // sfix20
  wire signed [19:0] Add7_stage22_2;  // sfix20
  wire signed [19:0] Add7_op_stage2_1;  // sfix20
  wire signed [19:0] Add7_stage32_add_temp;  // sfix20
  wire signed [19:0] Add7_stage32_1;  // sfix20
  wire signed [18:0] Add7_out1_2;  // sfix19
  wire signed [18:0] Switch91_out1_2;  // sfix19
  wire [11:0] Bit_Slice3_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S15_out1_2;  // sfix12
  wire signed [11:0] Switch84_out1_3;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_2;  // sfix12
  wire signed [11:0] Switch98_out1_3;  // sfix12
  reg signed [12:0] Unit_Delay30_out1_5;  // sfix13
  wire [11:0] Bit_Slice6_out1_5;  // ufix12
  wire signed [11:0] Data_Type_S11_out1_6;  // sfix12
  reg signed [12:0] Unit_Delay33_out1_5;  // sfix13
  wire [11:0] Bit_Slice1_out1_5;  // ufix12
  wire signed [11:0] Data_Type_S12_out1_5;  // sfix12
  reg signed [12:0] Unit_Delay34_out1_4;  // sfix13
  wire [11:0] Bit_Slice2_out1_4;  // ufix12
  wire signed [11:0] Data_Type_S13_out1_4;  // sfix12
  wire signed [11:0] Switch84_out1_4;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_3;  // sfix12
  wire signed [11:0] Switch98_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay27_out1_2;  // sfix12
  wire signed [11:0] Switch72_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_39;  // sfix12
  reg signed [11:0] Unit_Delay28_out1_2;  // sfix12
  wire signed [11:0] Switch73_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_40;  // sfix12
  wire signed [11:0] signal1_90;  // sfix12
  wire signed [11:0] s_344;  // sfix12
  wire signed [11:0] signal1_91;  // sfix12
  wire signed [11:0] s_345;  // sfix12
  wire signed [11:0] Switch107_out1_56;  // sfix12
  wire signed [11:0] signal1_92;  // sfix12
  wire signed [11:0] s_346;  // sfix12
  wire signed [11:0] Switch107_out1_57;  // sfix12
  wire signed [11:0] signal1_93;  // sfix12
  wire signed [11:0] signal1_94;  // sfix12
  wire signed [11:0] signal1_95;  // sfix12
  wire signed [11:0] Switch97_out1_2;  // sfix12
  wire signed [12:0] Add71_1;  // sfix13
  wire signed [12:0] Add71_2;  // sfix13
  wire signed [12:0] Add7_out1_3;  // sfix13
  wire signed [12:0] Switch79_out1_4;  // sfix13
  wire signed [12:0] Switch80_out1_2;  // sfix13
  wire signed [12:0] Switch87_out1_4;  // sfix13
  wire signed [12:0] Switch89_out1_3;  // sfix13
  reg signed [12:0] Unit_Delay35_out1_3;  // sfix13
  wire signed [12:0] signal2_253;  // sfix13
  wire signed [12:0] s_347;  // sfix13
  wire signed [12:0] signal2_254;  // sfix13
  wire signed [12:0] s_348;  // sfix13
  wire signed [12:0] signal2_255;  // sfix13
  wire signed [12:0] s_349;  // sfix13
  wire signed [12:0] signal2_256;  // sfix13
  wire signed [12:0] signal2_257;  // sfix13
  wire signed [12:0] signal2_258;  // sfix13
  wire signed [12:0] Switch1_out1_2;  // sfix13
  wire signed [12:0] Switch91_out1_3;  // sfix13
  wire [11:0] Bit_Slice3_out1_2;  // ufix12
  wire signed [11:0] Data_Type_S15_out1_3;  // sfix12
  wire signed [11:0] signal1_96;  // sfix12
  wire signed [11:0] s_350;  // sfix12
  wire signed [11:0] signal1_97;  // sfix12
  wire signed [11:0] s_351;  // sfix12
  wire signed [11:0] signal1_98;  // sfix12
  wire signed [11:0] s_352;  // sfix12
  wire signed [11:0] signal1_99;  // sfix12
  wire signed [11:0] signal1_100;  // sfix12
  wire signed [11:0] signal1_101;  // sfix12
  wire signed [11:0] Switch97_out1_3;  // sfix12
  wire signed [12:0] Add7_1;  // sfix13
  wire signed [12:0] Add7_2;  // sfix13
  wire signed [12:0] Add7_out1_4;  // sfix13
  wire signed [12:0] Switch79_out1_5;  // sfix13
  wire signed [12:0] Switch80_out1_3;  // sfix13
  wire signed [12:0] Switch87_out1_5;  // sfix13
  wire signed [12:0] Switch89_out1_4;  // sfix13
  reg signed [12:0] Unit_Delay35_out1_4;  // sfix13
  wire signed [12:0] signal2_259;  // sfix13
  wire signed [12:0] s_353;  // sfix13
  wire signed [12:0] signal2_260;  // sfix13
  wire signed [12:0] s_354;  // sfix13
  wire signed [12:0] signal2_261;  // sfix13
  wire signed [12:0] s_355;  // sfix13
  wire signed [12:0] signal2_262;  // sfix13
  wire signed [12:0] signal2_263;  // sfix13
  wire signed [12:0] signal2_264;  // sfix13
  wire signed [12:0] Switch1_out1_3;  // sfix13
  wire signed [12:0] Switch91_out1_4;  // sfix13
  wire [11:0] Bit_Slice3_out1_3;  // ufix12
  wire signed [11:0] Data_Type_S15_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_41;  // sfix12
  wire signed [11:0] signal2_265;  // sfix12
  wire signed [11:0] s_356;  // sfix12
  wire signed [11:0] signal2_266;  // sfix12
  wire signed [11:0] s_357;  // sfix12
  wire signed [11:0] signal2_267;  // sfix12
  wire signed [11:0] s_358;  // sfix12
  wire signed [11:0] signal2_268;  // sfix12
  wire signed [11:0] s_359;  // sfix12
  wire signed [11:0] signal2_269;  // sfix12
  wire signed [11:0] s_360;  // sfix12
  wire signed [11:0] signal2_270;  // sfix12
  wire signed [11:0] s_361;  // sfix12
  wire signed [11:0] signal2_271;  // sfix12
  wire signed [11:0] s_362;  // sfix12
  wire signed [11:0] signal2_272;  // sfix12
  wire signed [11:0] s_363;  // sfix12
  wire signed [11:0] signal2_273;  // sfix12
  wire signed [11:0] s_364;  // sfix12
  wire signed [11:0] signal2_274;  // sfix12
  wire signed [11:0] s_365;  // sfix12
  wire signed [11:0] signal2_275;  // sfix12
  wire signed [11:0] s_366;  // sfix12
  wire signed [11:0] signal2_276;  // sfix12
  wire signed [11:0] s_367;  // sfix12
  wire signed [11:0] signal2_277;  // sfix12
  wire signed [11:0] s_368;  // sfix12
  wire signed [11:0] signal2_278;  // sfix12
  wire signed [11:0] s_369;  // sfix12
  wire signed [11:0] signal2_279;  // sfix12
  wire signed [11:0] s_370;  // sfix12
  wire signed [11:0] signal2_280;  // sfix12
  wire signed [11:0] s_371;  // sfix12
  wire signed [11:0] signal2_281;  // sfix12
  wire signed [11:0] s_372;  // sfix12
  wire signed [11:0] signal2_282;  // sfix12
  wire signed [11:0] signal2_283;  // sfix12
  reg signed [11:0] Unit_Delay45_out1_2;  // sfix12
  wire signed [11:0] Switch110_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_42;  // sfix12
  wire signed [11:0] signal1_102;  // sfix12
  wire signed [11:0] signal3_73;  // sfix12
  wire RO22_relop1;
  wire signed [11:0] Switch95_out1_2;  // sfix12
  wire signed [11:0] Switch93_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_58;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_4;  // sfix12
  wire signed [11:0] signal3_74;  // sfix12
  wire signed [11:0] s_373;  // sfix12
  wire signed [11:0] signal3_75;  // sfix12
  wire signed [11:0] signal3_76;  // sfix12
  wire signed [12:0] Unary_Minus31_in0;  // sfix13
  wire signed [11:0] Unary_Minus3_out1_1;  // sfix12
  reg signed [23:0] Unit_Delay18_out1_2;  // sfix24
  wire signed [23:0] Data_Type_Conversion25_out1_1;  // sfix24
  wire signed [23:0] Switch56_out1_1;  // sfix24
  wire [11:0] Switch58_out1_1;  // ufix12
  reg [11:0] Unit_Delay19_out1_2;  // ufix12
  wire [11:0] Switch61_out1_1;  // ufix12
  wire [11:0] Bitwise_Operator1_out1_1;  // ufix12
  wire [23:0] Product1_out1_1;  // ufix24
  wire signed [24:0] RO16_1_1;  // sfix25
  wire signed [24:0] RO16_1_2;  // sfix25
  wire RO16_relop1;
  wire signed [11:0] Data_Type_Conversion4_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1_1;  // sfix12
  wire signed [11:0] Switch60_out1;  // sfix12
  wire RO181_relop1;
  reg  Unit_Delay123_out1;
  wire Switch260_out1;
  wire RO191_relop1;
  wire signed [11:0] Add13_out1_3;  // sfix12
  wire signed [11:0] Switch257_out1;  // sfix12
  wire signed [11:0] Switch258_out1;  // sfix12
  reg signed [11:0] Unit_Delay122_out1;  // sfix12
  wire signed [11:0] RO251_1_1;  // sfix12
  wire RO251_relop1;
  reg  Unit_Delay102_out1;
  wire Switch265_out1;
  reg signed [23:0] Unit_Delay70_out1;  // sfix24
  wire signed [23:0] Switch152_out1_1;  // sfix24
  wire [11:0] Switch162_out1_1;  // ufix12
  reg [11:0] Unit_Delay76_out1;  // ufix12
  wire [11:0] Switch165_out1;  // ufix12
  wire [11:0] Bitwise_Operator7_out1;  // ufix12
  wire [23:0] Product8_out1;  // ufix24
  wire signed [24:0] RO321_1_1;  // sfix25
  wire signed [24:0] RO321_1_2;  // sfix25
  wire RO321_relop1;
  wire signed [11:0] Data_Type_Conversion27_out1_1;  // sfix12
  wire signed [11:0] Switch164_out1_1;  // sfix12
  wire signed [11:0] RO242_1_1;  // sfix12
  wire RO242_relop1;
  wire Switch264_out1;
  wire signed [11:0] Switch255_out1;  // sfix12
  wire signed [11:0] Switch256_out1;  // sfix12
  wire Switch259_out1;
  wire RO18_relop1;
  wire signed [11:0] Switch62_out1;  // sfix12
  wire RO17_relop1;
  wire signed [11:0] Switch63_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay10_out1_3;  // sfix12
  wire signed [11:0] Data_Type_Conversion2_out1_1;  // sfix12
  wire signed [11:0] Switch24_out1_3;  // sfix12
  wire RO13_relop1_1;
  wire signed [11:0] Switch38_out1;  // sfix12
  wire RO12_relop1;
  wire signed [11:0] Switch39_out1_2;  // sfix12
  wire RO35_relop1;
  wire signed [11:0] Switch241_out1;  // sfix12
  wire OR5_out1_3;
  wire signed [11:0] Switch240_out1;  // sfix12
  reg signed [11:0] Unit_Delay74_out1_1;  // sfix12
  wire signed [12:0] Unary_Minus41_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1_2;  // sfix12
  wire RO30_relop1;
  wire signed [24:0] Switch148_out1;  // sfix25
  wire RO29_relop1;
  wire signed [24:0] Switch149_out1;  // sfix25
  reg signed [23:0] Unit_Delay69_out1_2;  // sfix24
  wire signed [23:0] Switch150_out1_1;  // sfix24
  wire [11:0] Switch158_out1;  // ufix12
  reg [11:0] Unit_Delay73_out1;  // ufix12
  wire [11:0] Switch161_out1;  // ufix12
  wire [11:0] Bitwise_Operator6_out1;  // ufix12
  wire [23:0] Product7_out1;  // ufix24
  wire signed [24:0] RO31_1_1;  // sfix25
  wire signed [24:0] RO31_1_2;  // sfix25
  wire RO31_relop1;
  wire signed [11:0] Data_Type_Conversion26_out1;  // sfix12
  wire signed [11:0] Switch160_out1;  // sfix12
  reg signed [23:0] Unit_Delay2_out1_2;  // sfix24
  wire signed [23:0] Data_Type_Conversion1_out1_2;  // sfix24
  wire signed [23:0] Switch3_out1_1;  // sfix24
  wire signed [24:0] Unary_Minus111_in0;  // sfix25
  wire signed [23:0] Unary_Minus11_out1_1;  // sfix24
  reg signed [23:0] Unit_Delay16_out1_3;  // sfix24
  wire signed [23:0] Switch53_out1;  // sfix24
  wire signed [24:0] Unary_Minus91_in0;  // sfix25
  wire signed [23:0] Unary_Minus9_out1_1;  // sfix24
  reg signed [23:0] Unit_Delay17_out1_2;  // sfix24
  wire signed [23:0] Switch55_out1;  // sfix24
  wire signed [24:0] Unary_Minus101_in0;  // sfix25
  wire signed [23:0] Unary_Minus10_out1_1;  // sfix24
  wire signed [23:0] signal2_284;  // sfix24
  wire signed [23:0] s_374;  // sfix24
  wire signed [23:0] signal2_285;  // sfix24
  wire signed [23:0] s_375;  // sfix24
  wire signed [23:0] signal2_286;  // sfix24
  wire signed [23:0] s_376;  // sfix24
  wire signed [23:0] signal2_287;  // sfix24
  wire signed [23:0] s_377;  // sfix24
  wire signed [11:0] Switch84_out1_5;  // sfix12
  wire signed [12:0] Unary_Minus61_in0;  // sfix13
  wire signed [11:0] Unary_Minus6_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay28_out1_3;  // sfix12
  wire signed [11:0] Data_Type_Conversion24_out1_1;  // sfix12
  wire signed [11:0] Switch47_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay27_out1_3;  // sfix12
  wire signed [11:0] Switch35_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay38_out1_2;  // sfix12
  wire signed [11:0] signal2_288;  // sfix12
  wire signed [11:0] s_378;  // sfix12
  wire signed [11:0] signal2_289;  // sfix12
  wire signed [11:0] s_379;  // sfix12
  wire signed [11:0] signal2_290;  // sfix12
  wire signed [11:0] s_380;  // sfix12
  wire signed [11:0] signal2_291;  // sfix12
  wire signed [11:0] s_381;  // sfix12
  wire signed [11:0] signal2_292;  // sfix12
  wire signed [11:0] s_382;  // sfix12
  wire signed [11:0] signal2_293;  // sfix12
  wire signed [11:0] signal2_294;  // sfix12
  wire signed [23:0] Data_Type_Conversion15_out1;  // sfix24
  wire signed [23:0] signal2_295;  // sfix24
  wire signed [23:0] signal2_296;  // sfix24
  reg signed [23:0] Unit_Delay3_out1_2;  // sfix24
  wire signed [23:0] Switch4_out1_2;  // sfix24
  wire [28:0] Bit_Slice7_out1_1;  // ufix29
  wire signed [28:0] Data_Type_S7_out1_2;  // sfix29
  wire RO34_relop1;
  wire signed [28:0] Switch133_out1_2;  // sfix29
  wire RO33_relop1;
  wire signed [28:0] Switch134_out1_1;  // sfix29
  wire signed [15:0] Data_Type_Conversion7_out1_2;  // int16
  reg signed [15:0] Unit_Delay40_out1;  // int16
  wire signed [15:0] Switch120_out1;  // int16
  wire signed [23:0] Data_Type_Conversion21_out1;  // sfix24
  reg signed [23:0] Unit_Delay12_out1_2;  // sfix24
  wire signed [23:0] Switch51_out1_1;  // sfix24
  wire signed [23:0] signal1_103;  // sfix24
  wire signed [23:0] s_383;  // sfix24
  wire signed [23:0] signal1_104;  // sfix24
  wire signed [23:0] s_384;  // sfix24
  wire signed [23:0] signal1_105;  // sfix24
  wire signed [23:0] s_385;  // sfix24
  wire signed [23:0] signal1_106;  // sfix24
  wire signed [23:0] s_386;  // sfix24
  reg signed [11:0] Unit_Delay44_out1_4;  // sfix12
  wire signed [11:0] Switch142_out1_2;  // sfix12
  wire RO39_relop1;
  wire signed [11:0] Switch165_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay48_out1_5;  // sfix12
  wire signed [11:0] Switch144_out1_2;  // sfix12
  wire RO40_relop1;
  wire signed [11:0] Switch166_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay14_out1_3;  // sfix12
  wire signed [11:0] Switch28_out1_1;  // sfix12
  wire [28:0] Bit_Slice6_out1_6;  // ufix29
  wire signed [28:0] Data_Type_S10_out1;  // sfix29
  wire RO28_relop1;
  wire signed [28:0] Switch104_out1_4;  // sfix29
  wire RO27_relop1;
  wire signed [28:0] Switch131_out1;  // sfix29
  reg signed [11:0] Unit_Delay15_out1_3;  // sfix12
  wire signed [11:0] Switch33_out1_1;  // sfix12
  wire signed [12:0] Unary_Minus121_in0;  // sfix13
  wire signed [11:0] Unary_Minus12_out1_1;  // sfix12
  wire signed [11:0] Switch251_out1;  // sfix12
  wire signed [11:0] signal1_107;  // sfix12
  wire signed [11:0] s_387;  // sfix12
  wire signed [11:0] signal1_108;  // sfix12
  wire signed [11:0] s_388;  // sfix12
  wire signed [11:0] signal1_109;  // sfix12
  wire signed [11:0] s_389;  // sfix12
  wire signed [11:0] signal1_110;  // sfix12
  wire signed [11:0] s_390;  // sfix12
  wire signed [11:0] signal1_111;  // sfix12
  wire signed [11:0] s_391;  // sfix12
  wire signed [11:0] signal1_112;  // sfix12
  wire signed [11:0] signal1_113;  // sfix12
  wire signed [23:0] Data_Type_Conversion14_out1;  // sfix24
  wire signed [23:0] signal1_114;  // sfix24
  wire signed [23:0] signal1_115;  // sfix24
  wire signed [24:0] Add42_1;  // sfix25
  wire signed [24:0] Add42_2;  // sfix25
  wire RO81_relop1;
  wire signed [24:0] Switch76_out1_1;  // sfix25
  wire RO71_relop1;
  wire signed [24:0] Switch79_out1_6;  // sfix25
  reg signed [11:0] Unit_Delay60_out1_1;  // sfix12
  wire signed [11:0] Switch183_out1_1;  // sfix12
  wire RO48_relop1;
  wire signed [11:0] Switch184_out1_1;  // sfix12
  wire RO47_relop1;
  wire signed [11:0] Switch185_out1_1;  // sfix12
  reg signed [18:0] Unit_Delay116_out1;  // sfix19
  wire signed [18:0] Switch242_out1;  // sfix19
  wire signed [18:0] Switch243_out1;  // sfix19
  reg signed [18:0] Unit_Delay117_out1;  // sfix19
  wire signed [18:0] signal2_297;  // sfix19
  wire signed [18:0] s_392;  // sfix19
  wire signed [18:0] signal2_298;  // sfix19
  wire signed [18:0] signal2_299;  // sfix19
  wire signed [18:0] signal2_300;  // sfix19
  wire signed [11:0] Switch245_out1;  // sfix12
  wire signed [11:0] IFilter_Ram1_out1;  // sfix12
  wire signed [11:0] Switch250_out1;  // sfix12
  wire signed [47:0] Product6_out1_1;  // sfix48
  wire [25:0] Bit_Slice3_out1_4;  // ufix26
  wire signed [25:0] Data_Type_S17_out1;  // sfix26
  wire RO61_relop1;
  wire signed [25:0] Switch67_out1_1;  // sfix26
  wire RO51_relop1;
  wire signed [25:0] Switch68_out1;  // sfix26
  wire signed [11:0] Data_Type_Conversion2_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_1;  // sfix12
  wire signed [11:0] Switch16_out1_1;  // sfix12
  wire [39:0] Bit_Slice17_out1;  // ufix40
  wire signed [39:0] Data_Type_S45_out1;  // sfix40
  wire RO261_relop1;
  wire signed [39:0] Switch306_out1;  // sfix40
  wire RO232_relop1;
  wire signed [39:0] Switch307_out1;  // sfix40
  wire signed [11:0] Data_Type_Conversion4_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay144_out1;  // sfix12
  wire signed [11:0] Switch305_out1;  // sfix12
  wire signed [11:0] signal1_116;  // sfix12
  wire signed [11:0] s_393;  // sfix12
  wire signed [11:0] signal1_117;  // sfix12
  wire signed [11:0] signal1_118;  // sfix12
  wire signed [11:0] signal1_119;  // sfix12
  wire signed [11:0] Switch249_out1;  // sfix12
  wire signed [19:0] Add22_stage2_1;  // sfix20
  wire signed [19:0] Add22_stage2_2;  // sfix20
  wire signed [19:0] Add22_op_stage2;  // sfix20
  wire signed [19:0] Add22_stage3_add_temp;  // sfix20
  wire signed [19:0] Add22_stage3_1;  // sfix20
  wire signed [18:0] Add22_out1;  // sfix19
  wire signed [18:0] Switch247_out1;  // sfix19
  wire [11:0] Bit_Slice12_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S36_out1;  // sfix12
  wire signed [12:0] Unary_Minus19_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1;  // sfix12
  wire [24:0] Bit_Slice3_out1_5;  // ufix25
  wire signed [24:0] Data_Type_S17_out1_1;  // sfix25
  wire RO6_relop1_1;
  wire signed [24:0] Switch67_out1_2;  // sfix25
  wire RO5_relop1_1;
  wire signed [24:0] Switch68_out1_1;  // sfix25
  reg signed [11:0] Unit_Delay11_out1_1;  // sfix12
  wire signed [11:0] Switch41_out1;  // sfix12
  wire RO15_relop1;
  wire signed [11:0] Switch42_out1;  // sfix12
  wire RO14_relop1;
  wire signed [11:0] Switch43_out1_1;  // sfix12
  wire RO36_relop1;
  wire signed [11:0] Switch127_out1_2;  // sfix12
  wire OR1_out1_7;
  wire signed [11:0] Switch122_out1_3;  // sfix12
  reg  Unit_Delay112_out1;
  reg signed [11:0] Unit_Delay111_out1;  // sfix12
  wire signed [11:0] Switch232_out1;  // sfix12
  wire Ro12_relop1_1;
  wire Switch235_out1;
  reg signed [11:0] Unit_Delay110_out1;  // sfix12
  wire signed [11:0] Switch230_out1;  // sfix12
  wire Ro11_relop1;
  wire And1_out1_1;
  wire signed [11:0] Switch48_out1_1;  // sfix12
  wire RO20_relop1;
  wire signed [11:0] Switch64_out1_1;  // sfix12
  wire RO19_relop1;
  wire signed [11:0] Switch65_out1_1;  // sfix12
  wire signed [11:0] signal1_120;  // sfix12
  wire signed [11:0] s_394;  // sfix12
  wire signed [11:0] signal1_121;  // sfix12
  wire signed [11:0] signal1_122;  // sfix12
  wire RO211_relop1;
  wire signed [11:0] Switch94_out1_1;  // sfix12
  wire signed [11:0] Switch96_out1_2;  // sfix12
  wire signed [11:0] Add7_out1_5;  // sfix12
  wire signed [11:0] Switch101_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay34_out1_5;  // sfix12
  reg signed [16:0] Unit_Delay116_out1_1;  // sfix17
  wire [11:0] Bit_Slice4_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S39_out1;  // sfix12
  wire signed [11:0] Switch102_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay35_out1_5;  // sfix12
  wire signed [16:0] Switch29_out1_4;  // sfix17
  wire signed [16:0] Switch243_out1_1;  // sfix17
  reg signed [16:0] Unit_Delay33_out1_6;  // sfix17
  wire signed [16:0] signal2_301;  // sfix17
  wire signed [16:0] s_395;  // sfix17
  wire signed [16:0] signal2_302;  // sfix17
  wire signed [16:0] signal2_303;  // sfix17
  wire signed [16:0] signal2_304;  // sfix17
  wire signed [11:0] Switch32_out1_1;  // sfix12
  wire signed [11:0] Filter_Ram_out1_1;  // sfix12
  wire signed [11:0] Switch45_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay25_out1_3;  // sfix12
  wire signed [11:0] Switch70_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_43;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_44;  // sfix12
  reg signed [11:0] Unit_Delay26_out1_2;  // sfix12
  wire signed [11:0] Switch71_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_45;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_46;  // sfix12
  wire signed [11:0] signal1_123;  // sfix12
  wire signed [11:0] s_396;  // sfix12
  wire signed [11:0] signal1_124;  // sfix12
  wire signed [11:0] signal1_125;  // sfix12
  wire signed [11:0] signal1_126;  // sfix12
  wire signed [11:0] Switch44_out1_1;  // sfix12
  wire signed [17:0] Add15_stage2_1;  // sfix18
  wire signed [17:0] Add15_stage2_2;  // sfix18
  wire signed [17:0] Add15_op_stage2;  // sfix18
  wire signed [17:0] Add15_stage3_add_temp;  // sfix18
  wire signed [17:0] Add15_stage3_1;  // sfix18
  wire signed [16:0] Add15_out1_2;  // sfix17
  wire signed [16:0] Switch99_out1_1;  // sfix17
  wire [11:0] Bit_Slice1_out1_6;  // ufix12
  wire signed [11:0] Data_Type_S2_out1_2;  // sfix12
  wire signed [11:0] signal2_305;  // sfix12
  wire signed [11:0] s_397;  // sfix12
  wire signed [11:0] signal2_306;  // sfix12
  wire signed [11:0] signal2_307;  // sfix12
  wire signed [11:0] signal2_308;  // sfix12
  wire signed [11:0] Switch108_out1_2;  // sfix12
  wire signed [11:0] Switch111_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_47;  // sfix12
  reg signed [11:0] Unit_Delay31_out1_1;  // sfix12
  wire signed [11:0] Switch114_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_59;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_48;  // sfix12
  reg signed [11:0] Unit_Delay45_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay40_out1_1;  // sfix12
  wire signed [11:0] Switch116_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_60;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_49;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay41_out1_1;  // sfix12
  wire signed [11:0] Switch118_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_61;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_50;  // sfix12
  reg signed [11:0] Unit_Delay29_out1_2;  // sfix12
  wire signed [11:0] signal1_127;  // sfix12
  wire signed [11:0] signal3_77;  // sfix12
  wire RO222_relop1;
  wire signed [11:0] Switch95_out1_3;  // sfix12
  wire signed [11:0] Switch93_out1_3;  // sfix12
  wire signed [11:0] Switch101_out1_4;  // sfix12
  wire signed [11:0] Switch102_out1_5;  // sfix12
  wire signed [11:0] Switch112_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_2;  // sfix12
  wire signed [11:0] signal3_78;  // sfix12
  wire signed [11:0] s_398;  // sfix12
  wire signed [11:0] signal3_79;  // sfix12
  wire signed [11:0] s_399;  // sfix12
  wire signed [11:0] signal3_80;  // sfix12
  wire signed [11:0] s_400;  // sfix12
  wire signed [11:0] signal3_81;  // sfix12
  wire signed [11:0] signal3_82;  // sfix12
  wire signed [11:0] Data_Type_S15_out1_5;  // sfix12
  wire signed [11:0] signal1_128;  // sfix12
  wire signed [11:0] s_401;  // sfix12
  wire signed [11:0] Data_Type_S13_out1_5;  // sfix12
  wire signed [11:0] signal1_129;  // sfix12
  wire signed [11:0] s_402;  // sfix12
  wire signed [11:0] Data_Type_S12_out1_6;  // sfix12
  wire signed [11:0] signal1_130;  // sfix12
  wire signed [11:0] s_403;  // sfix12
  wire signed [11:0] signal1_131;  // sfix12
  wire signed [11:0] signal1_132;  // sfix12
  wire RO219_relop1;
  wire signed [11:0] Switch94_out1_2;  // sfix12
  wire signed [11:0] Switch96_out1_3;  // sfix12
  wire signed [11:0] Add2_out1_5;  // sfix12
  wire signed [11:0] Switch10_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay49_out1_4;  // sfix12
  wire signed [11:0] Switch120_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_62;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_51;  // sfix12
  reg signed [11:0] Unit_Delay13_out1_3;  // sfix12
  wire signed [11:0] Switch8_out1;  // sfix12
  reg signed [11:0] Unit_Delay12_out1_3;  // sfix12
  wire signed [11:0] Switch12_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay22_out1_2;  // sfix12
  wire signed [11:0] Switch54_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay24_out1_2;  // sfix12
  wire signed [11:0] Data_Type_Conversion1_out1_3;  // sfix12
  wire signed [11:0] Switch60_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1_3;  // sfix12
  wire signed [11:0] Switch10_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay2_out1_3;  // sfix12
  wire signed [11:0] Switch3_out1_2;  // sfix12
  wire signed [11:0] signal2_309;  // sfix12
  wire signed [11:0] s_404;  // sfix12
  wire signed [11:0] signal2_310;  // sfix12
  wire signed [11:0] signal2_311;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_3;  // sfix12
  wire signed [11:0] Switch7_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay20_out1_2;  // sfix12
  wire signed [11:0] Switch22_out1_1;  // sfix12
  wire signed [11:0] signal1_133;  // sfix12
  wire signed [11:0] s_405;  // sfix12
  wire signed [11:0] signal1_134;  // sfix12
  wire signed [11:0] signal1_135;  // sfix12
  wire signed [12:0] Add34_1;  // sfix13
  wire signed [12:0] Add34_2;  // sfix13
  wire signed [12:0] Add3_out1_4;  // sfix13
  wire RO213_relop1;
  wire signed [12:0] Switch37_out1_1;  // sfix13
  wire RO112_relop1;
  wire signed [12:0] Switch38_out1_1;  // sfix13
  reg signed [11:0] Unit_Delay21_out1_2;  // sfix12
  wire signed [11:0] Switch52_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay23_out1_2;  // sfix12
  wire signed [11:0] Switch56_out1_2;  // sfix12
  reg signed [18:0] Unit_Delay30_out1_6;  // sfix19
  wire [11:0] Bit_Slice6_out1_7;  // ufix12
  reg signed [11:0] Unit_Delay39_out1_52;  // sfix12
  reg signed [18:0] Unit_Delay33_out1_7;  // sfix19
  wire [11:0] Bit_Slice1_out1_7;  // ufix12
  reg signed [11:0] Unit_Delay39_out1_53;  // sfix12
  reg signed [18:0] Unit_Delay34_out1_6;  // sfix19
  wire [11:0] Bit_Slice2_out1_5;  // ufix12
  reg signed [11:0] Unit_Delay39_out1_54;  // sfix12
  wire signed [18:0] Switch79_out1_7;  // sfix19
  wire signed [18:0] Switch80_out1_4;  // sfix19
  wire signed [18:0] Switch87_out1_6;  // sfix19
  wire signed [18:0] Switch89_out1_5;  // sfix19
  reg signed [18:0] Unit_Delay35_out1_6;  // sfix19
  wire signed [18:0] signal2_312;  // sfix19
  wire signed [18:0] s_406;  // sfix19
  wire signed [18:0] signal2_313;  // sfix19
  wire signed [18:0] s_407;  // sfix19
  wire signed [18:0] signal2_314;  // sfix19
  wire signed [18:0] s_408;  // sfix19
  wire signed [18:0] signal2_315;  // sfix19
  wire signed [18:0] signal2_316;  // sfix19
  wire signed [18:0] signal2_317;  // sfix19
  wire signed [11:0] Switch84_out1_6;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_4;  // sfix12
  wire signed [11:0] Switch98_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay21_out1_3;  // sfix12
  wire signed [11:0] Switch58_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_55;  // sfix12
  reg signed [11:0] Unit_Delay22_out1_3;  // sfix12
  wire signed [11:0] Switch59_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_56;  // sfix12
  reg signed [11:0] Unit_Delay24_out1_3;  // sfix12
  wire signed [11:0] Switch61_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_57;  // sfix12
  wire signed [11:0] signal1_136;  // sfix12
  wire signed [11:0] s_409;  // sfix12
  wire signed [11:0] Switch107_out1_63;  // sfix12
  wire signed [11:0] signal1_137;  // sfix12
  wire signed [11:0] s_410;  // sfix12
  wire signed [11:0] signal1_138;  // sfix12
  wire signed [11:0] s_411;  // sfix12
  wire signed [11:0] signal1_139;  // sfix12
  wire signed [11:0] signal1_140;  // sfix12
  wire signed [11:0] signal1_141;  // sfix12
  wire signed [11:0] Switch97_out1_4;  // sfix12
  wire signed [19:0] Add7_stage21_1;  // sfix20
  wire signed [19:0] Add7_stage21_2;  // sfix20
  wire signed [19:0] Add7_op_stage2_2;  // sfix20
  wire signed [19:0] Add7_stage31_add_temp;  // sfix20
  wire signed [19:0] Add7_stage31_1;  // sfix20
  wire signed [18:0] Add7_out1_6;  // sfix19
  wire signed [18:0] Switch91_out1_5;  // sfix19
  wire [11:0] Bit_Slice3_out1_6;  // ufix12
  reg signed [11:0] Unit_Delay39_out1_58;  // sfix12
  wire signed [11:0] signal1_142;  // sfix12
  wire signed [11:0] s_412;  // sfix12
  wire signed [11:0] signal1_143;  // sfix12
  wire signed [11:0] s_413;  // sfix12
  wire signed [11:0] signal1_144;  // sfix12
  wire signed [11:0] s_414;  // sfix12
  wire signed [11:0] signal1_145;  // sfix12
  wire signed [11:0] s_415;  // sfix12
  wire signed [11:0] signal1_146;  // sfix12
  wire signed [11:0] s_416;  // sfix12
  wire signed [11:0] signal1_147;  // sfix12
  wire signed [11:0] s_417;  // sfix12
  wire signed [11:0] signal1_148;  // sfix12
  wire signed [11:0] s_418;  // sfix12
  wire signed [11:0] signal1_149;  // sfix12
  wire signed [11:0] s_419;  // sfix12
  wire signed [11:0] signal1_150;  // sfix12
  wire signed [11:0] s_420;  // sfix12
  wire signed [11:0] signal1_151;  // sfix12
  wire signed [11:0] s_421;  // sfix12
  wire signed [11:0] signal1_152;  // sfix12
  wire signed [11:0] s_422;  // sfix12
  wire signed [11:0] signal1_153;  // sfix12
  wire signed [11:0] s_423;  // sfix12
  wire signed [11:0] signal1_154;  // sfix12
  wire signed [11:0] s_424;  // sfix12
  wire signed [11:0] signal1_155;  // sfix12
  wire signed [11:0] s_425;  // sfix12
  wire signed [11:0] signal1_156;  // sfix12
  wire signed [11:0] s_426;  // sfix12
  wire signed [11:0] signal1_157;  // sfix12
  wire signed [11:0] s_427;  // sfix12
  wire signed [11:0] signal1_158;  // sfix12
  wire signed [11:0] s_428;  // sfix12
  wire signed [11:0] signal1_159;  // sfix12
  wire signed [11:0] signal1_160;  // sfix12
  wire signed [12:0] Add24_1;  // sfix13
  wire signed [12:0] Add24_2;  // sfix13
  wire signed [12:0] Add_out1_1;  // sfix13
  wire RO83_relop1;
  wire signed [12:0] Switch26_out1;  // sfix13
  wire RO73_relop1;
  wire signed [12:0] Switch27_out1_1;  // sfix13
  reg signed [11:0] Unit_Delay49_out1_5;  // sfix12
  wire signed [11:0] Switch131_out1_1;  // sfix12
  wire signed [11:0] s_429;  // sfix12
  wire signed [11:0] signal1_161;  // sfix12
  wire signed [11:0] s_430;  // sfix12
  wire signed [11:0] signal1_162;  // sfix12
  wire signed [11:0] s_431;  // sfix12
  wire signed [11:0] signal1_163;  // sfix12
  wire signed [11:0] s_432;  // sfix12
  wire signed [11:0] signal1_164;  // sfix12
  wire signed [11:0] s_433;  // sfix12
  wire signed [11:0] signal1_165;  // sfix12
  wire signed [11:0] s_434;  // sfix12
  wire signed [11:0] signal1_166;  // sfix12
  wire signed [11:0] s_435;  // sfix12
  wire signed [11:0] signal1_167;  // sfix12
  wire signed [11:0] s_436;  // sfix12
  wire signed [11:0] signal1_168;  // sfix12
  wire signed [11:0] s_437;  // sfix12
  wire signed [11:0] signal1_169;  // sfix12
  wire signed [11:0] s_438;  // sfix12
  wire signed [11:0] signal1_170;  // sfix12
  wire signed [11:0] s_439;  // sfix12
  wire signed [11:0] signal1_171;  // sfix12
  wire signed [11:0] s_440;  // sfix12
  wire signed [11:0] signal1_172;  // sfix12
  wire signed [11:0] s_441;  // sfix12
  wire signed [11:0] signal1_173;  // sfix12
  wire signed [11:0] s_442;  // sfix12
  wire signed [11:0] signal1_174;  // sfix12
  wire signed [11:0] s_443;  // sfix12
  wire signed [11:0] signal1_175;  // sfix12
  wire signed [11:0] s_444;  // sfix12
  wire signed [11:0] signal1_176;  // sfix12
  wire signed [11:0] signal1_177;  // sfix12
  wire signed [11:0] s_445;  // sfix12
  wire signed [11:0] signal1_178;  // sfix12
  wire signed [11:0] s_446;  // sfix12
  wire signed [11:0] signal1_179;  // sfix12
  wire signed [11:0] signal1_180;  // sfix12
  wire [24:0] Bit_Slice3_out1_7;  // ufix25
  wire signed [24:0] Data_Type_S10_out1_1;  // sfix25
  wire RO113_relop1;
  wire signed [24:0] Switch109_out1_1;  // sfix25
  wire RO122_relop1;
  wire signed [24:0] Switch110_out1_2;  // sfix25
  reg signed [11:0] Unit_Delay11_out1_2;  // sfix12
  wire signed [11:0] Switch51_out1_2;  // sfix12
  wire signed [11:0] signal3_83;  // sfix12
  wire signed [11:0] s_447;  // sfix12
  wire signed [11:0] signal3_84;  // sfix12
  wire signed [11:0] s_448;  // sfix12
  wire signed [11:0] signal3_85;  // sfix12
  wire signed [11:0] s_449;  // sfix12
  wire signed [11:0] signal3_86;  // sfix12
  wire signed [11:0] signal3_87;  // sfix12
  wire signed [11:0] signal3_88;  // sfix12
  wire signed [21:0] Add52_1;  // sfix22
  wire signed [21:0] Add52_2;  // sfix22
  wire signed [21:0] Add5_out1_1;  // sfix22
  wire signed [21:0] RO312_1_1;  // sfix22
  wire RO312_relop1;
  wire signed [21:0] RO49_1_1;  // sfix22
  wire RO49_relop1;
  wire signed [16:0] Add91_1;  // sfix17
  wire signed [16:0] Add91_2;  // sfix17
  wire signed [16:0] Add9_out1;  // sfix17
  reg signed [11:0] Unit_Delay38_out1_3;  // sfix12
  wire signed [11:0] Switch102_out1_6;  // sfix12
  wire signed [11:0] Switch106_out1_4;  // sfix12
  wire signed [11:0] Switch107_out1_64;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_59;  // sfix12
  wire signed [11:0] Switch107_out1_65;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_60;  // sfix12
  reg signed [11:0] Unit_Delay34_out1_7;  // sfix12
  wire signed [11:0] Switch89_out1_6;  // sfix12
  wire signed [24:0] Add4_out1_4;  // sfix25
  wire RO2_relop1_1;
  wire signed [24:0] Switch99_out1_2;  // sfix25
  wire RO1_relop1_1;
  wire signed [24:0] Switch100_out1;  // sfix25
  reg signed [11:0] Unit_Delay35_out1_7;  // sfix12
  wire signed [11:0] Switch91_out1_6;  // sfix12
  reg signed [11:0] Unit_Delay46_out1_6;  // sfix12
  wire signed [11:0] Switch116_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay43_out1_3;  // sfix12
  wire signed [11:0] Switch118_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay44_out1_5;  // sfix12
  wire signed [11:0] Switch120_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay42_out1_1;  // sfix12
  wire signed [12:0] Unary_Minus13_in0;  // sfix13
  wire signed [11:0] Unary_Minus13_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay40_out1_2;  // sfix12
  wire signed [11:0] signal1_181;  // sfix12
  wire signed [11:0] s_450;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_61;  // sfix12
  wire signed [11:0] signal1_182;  // sfix12
  wire signed [11:0] signal1_183;  // sfix12
  wire signed [11:0] signal1_184;  // sfix12
  wire signed [11:0] UVctDelay_Ram1_out1;  // sfix12
  wire signed [11:0] Switch139_out1_2;  // sfix12
  wire signed [11:0] Switch114_out1_4;  // sfix12
  wire signed [11:0] signal2_318;  // sfix12
  wire signed [11:0] s_451;  // sfix12
  reg signed [11:0] Unit_Delay41_out1_2;  // sfix12
  wire signed [11:0] signal2_319;  // sfix12
  wire signed [11:0] signal2_320;  // sfix12
  wire signed [11:0] signal2_321;  // sfix12
  wire signed [11:0] Switch112_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus14_in0;  // sfix13
  wire signed [11:0] Unary_Minus14_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay17_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus1_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay9_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus2_in0;  // sfix13
  wire signed [11:0] Unary_Minus2_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay7_out1_9;  // sfix12
  wire signed [11:0] signal1_185;  // sfix12
  wire signed [11:0] s_452;  // sfix12
  reg signed [11:0] Unit_Delay6_out1_4;  // sfix12
  wire signed [11:0] signal1_186;  // sfix12
  wire signed [11:0] s_453;  // sfix12
  reg signed [11:0] Unit_Delay5_out1_4;  // sfix12
  wire signed [11:0] signal1_187;  // sfix12
  wire signed [11:0] s_454;  // sfix12
  reg signed [11:0] Unit_Delay4_out1_3;  // sfix12
  wire signed [11:0] signal1_188;  // sfix12
  wire signed [11:0] signal1_189;  // sfix12
  wire signed [11:0] signal1_190;  // sfix12
  wire signed [11:0] UVctDelay_Ram_out1_1;  // sfix12
  wire signed [11:0] Switch215_out1_1;  // sfix12
  wire signed [11:0] Switch52_out1_2;  // sfix12
  wire signed [11:0] Switch54_out1_2;  // sfix12
  wire signed [11:0] Switch27_out1_2;  // sfix12
  wire signed [11:0] signal2_322;  // sfix12
  wire signed [11:0] s_455;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_4;  // sfix12
  wire signed [11:0] signal2_323;  // sfix12
  wire signed [11:0] s_456;  // sfix12
  wire signed [11:0] signal2_324;  // sfix12
  wire signed [11:0] s_457;  // sfix12
  wire signed [11:0] signal2_325;  // sfix12
  wire signed [11:0] signal2_326;  // sfix12
  wire signed [11:0] signal2_327;  // sfix12
  wire signed [11:0] Switch25_out1_2;  // sfix12
  wire signed [12:0] Unary_Minus3_in0;  // sfix13
  wire signed [11:0] Unary_Minus3_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay31_out1_2;  // sfix12
  wire signed [11:0] Switch87_out1_7;  // sfix12
  reg signed [11:0] Unit_Delay33_out1_8;  // sfix12
  wire signed [11:0] Switch88_out1_1;  // sfix12
  wire signed [11:0] signal2_328;  // sfix12
  wire signed [11:0] s_458;  // sfix12
  wire signed [11:0] signal2_329;  // sfix12
  wire signed [11:0] s_459;  // sfix12
  wire signed [11:0] signal2_330;  // sfix12
  wire signed [11:0] s_460;  // sfix12
  wire signed [11:0] signal2_331;  // sfix12
  wire signed [11:0] s_461;  // sfix12
  wire signed [11:0] signal2_332;  // sfix12
  wire signed [11:0] s_462;  // sfix12
  wire signed [11:0] signal2_333;  // sfix12
  wire signed [11:0] s_463;  // sfix12
  wire signed [11:0] signal2_334;  // sfix12
  wire signed [11:0] s_464;  // sfix12
  wire signed [11:0] signal2_335;  // sfix12
  wire signed [11:0] s_465;  // sfix12
  wire signed [11:0] signal2_336;  // sfix12
  wire signed [11:0] s_466;  // sfix12
  wire signed [11:0] signal2_337;  // sfix12
  wire signed [11:0] s_467;  // sfix12
  wire signed [11:0] signal2_338;  // sfix12
  wire signed [11:0] s_468;  // sfix12
  wire signed [11:0] signal2_339;  // sfix12
  wire signed [11:0] s_469;  // sfix12
  wire signed [11:0] signal2_340;  // sfix12
  wire signed [11:0] s_470;  // sfix12
  wire signed [11:0] signal2_341;  // sfix12
  wire signed [11:0] s_471;  // sfix12
  wire signed [11:0] signal2_342;  // sfix12
  wire signed [11:0] s_472;  // sfix12
  wire signed [11:0] signal2_343;  // sfix12
  wire signed [11:0] s_473;  // sfix12
  wire signed [11:0] signal2_344;  // sfix12
  wire signed [11:0] signal2_345;  // sfix12
  wire signed [11:0] Switch107_out1_66;  // sfix12
  wire signed [11:0] Switch110_out1_3;  // sfix12
  wire signed [11:0] Switch14_out1_1;  // sfix12
  wire signed [11:0] Switch17_out1_8;  // sfix12
  wire signed [11:0] Switch20_out1_8;  // sfix12
  wire signed [11:0] Switch23_out1;  // sfix12
  reg signed [11:0] Unit_Delay29_out1_3;  // sfix12
  wire signed [11:0] Switch80_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay30_out1_7;  // sfix12
  wire signed [11:0] Switch81_out1_4;  // sfix12
  wire signed [11:0] signal1_191;  // sfix12
  wire signed [11:0] s_474;  // sfix12
  wire signed [11:0] signal1_192;  // sfix12
  wire signed [11:0] s_475;  // sfix12
  wire signed [11:0] signal1_193;  // sfix12
  wire signed [11:0] s_476;  // sfix12
  wire signed [11:0] signal1_194;  // sfix12
  wire signed [11:0] s_477;  // sfix12
  wire signed [11:0] signal1_195;  // sfix12
  wire signed [11:0] s_478;  // sfix12
  wire signed [11:0] signal1_196;  // sfix12
  wire signed [11:0] s_479;  // sfix12
  wire signed [11:0] signal1_197;  // sfix12
  wire signed [11:0] s_480;  // sfix12
  wire signed [11:0] signal1_198;  // sfix12
  wire signed [11:0] s_481;  // sfix12
  wire signed [11:0] signal1_199;  // sfix12
  wire signed [11:0] s_482;  // sfix12
  wire signed [11:0] signal1_200;  // sfix12
  wire signed [11:0] s_483;  // sfix12
  wire signed [11:0] signal1_201;  // sfix12
  wire signed [11:0] s_484;  // sfix12
  wire signed [11:0] signal1_202;  // sfix12
  wire signed [11:0] s_485;  // sfix12
  wire signed [11:0] signal1_203;  // sfix12
  wire signed [11:0] s_486;  // sfix12
  wire signed [11:0] signal1_204;  // sfix12
  wire signed [11:0] s_487;  // sfix12
  wire signed [11:0] signal1_205;  // sfix12
  wire signed [11:0] s_488;  // sfix12
  wire signed [11:0] signal1_206;  // sfix12
  wire signed [11:0] s_489;  // sfix12
  wire signed [11:0] signal1_207;  // sfix12
  wire signed [11:0] signal1_208;  // sfix12
  wire signed [12:0] Add4_add_temp;  // sfix13
  wire signed [12:0] Add4_1;  // sfix13
  wire signed [12:0] Add4_2;  // sfix13
  wire RO8_relop1_1;
  wire signed [24:0] Switch76_out1_2;  // sfix25
  wire RO7_relop1_1;
  wire signed [24:0] Switch79_out1_8;  // sfix25
  wire [23:0] Bit_Slice2_out1_6;  // ufix24
  reg signed [11:0] Unit_Delay45_out1_4;  // sfix12
  wire signed [11:0] Switch122_out1_4;  // sfix12
  wire signed [11:0] signal1_209;  // sfix12
  wire signed [11:0] s_490;  // sfix12
  wire signed [11:0] signal1_210;  // sfix12
  wire signed [11:0] s_491;  // sfix12
  wire signed [11:0] signal1_211;  // sfix12
  wire signed [11:0] s_492;  // sfix12
  wire signed [11:0] signal1_212;  // sfix12
  wire signed [11:0] s_493;  // sfix12
  wire signed [11:0] signal1_213;  // sfix12
  wire signed [11:0] s_494;  // sfix12
  wire signed [11:0] signal1_214;  // sfix12
  wire signed [11:0] s_495;  // sfix12
  wire signed [11:0] signal1_215;  // sfix12
  wire signed [11:0] s_496;  // sfix12
  wire signed [11:0] signal1_216;  // sfix12
  wire signed [11:0] s_497;  // sfix12
  wire signed [11:0] signal1_217;  // sfix12
  wire signed [11:0] s_498;  // sfix12
  wire signed [11:0] signal1_218;  // sfix12
  wire signed [11:0] s_499;  // sfix12
  wire signed [11:0] signal1_219;  // sfix12
  wire signed [11:0] s_500;  // sfix12
  wire signed [11:0] signal1_220;  // sfix12
  wire signed [11:0] s_501;  // sfix12
  wire signed [11:0] signal1_221;  // sfix12
  wire signed [11:0] s_502;  // sfix12
  wire signed [11:0] signal1_222;  // sfix12
  wire signed [11:0] s_503;  // sfix12
  wire signed [11:0] signal1_223;  // sfix12
  wire signed [11:0] s_504;  // sfix12
  wire signed [11:0] signal1_224;  // sfix12
  wire signed [11:0] s_505;  // sfix12
  wire signed [11:0] signal1_225;  // sfix12
  wire signed [11:0] s_506;  // sfix12
  wire signed [11:0] signal1_226;  // sfix12
  wire signed [11:0] s_507;  // sfix12
  wire signed [11:0] signal1_227;  // sfix12
  wire signed [11:0] s_508;  // sfix12
  wire signed [11:0] signal1_228;  // sfix12
  wire signed [11:0] s_509;  // sfix12
  wire signed [11:0] signal1_229;  // sfix12
  wire signed [11:0] s_510;  // sfix12
  wire signed [11:0] signal1_230;  // sfix12
  wire signed [11:0] s_511;  // sfix12
  wire signed [11:0] signal1_231;  // sfix12
  wire signed [11:0] s_512;  // sfix12
  wire signed [11:0] signal1_232;  // sfix12
  wire signed [11:0] s_513;  // sfix12
  wire signed [11:0] signal1_233;  // sfix12
  wire signed [11:0] s_514;  // sfix12
  wire signed [11:0] signal1_234;  // sfix12
  wire signed [11:0] s_515;  // sfix12
  wire signed [11:0] signal1_235;  // sfix12
  wire signed [11:0] s_516;  // sfix12
  wire signed [11:0] signal1_236;  // sfix12
  wire signed [11:0] s_517;  // sfix12
  wire signed [11:0] signal1_237;  // sfix12
  wire signed [11:0] s_518;  // sfix12
  wire signed [11:0] signal1_238;  // sfix12
  wire signed [11:0] s_519;  // sfix12
  wire signed [11:0] signal1_239;  // sfix12
  wire signed [11:0] s_520;  // sfix12
  wire signed [11:0] signal1_240;  // sfix12
  wire signed [11:0] s_521;  // sfix12
  wire signed [11:0] signal1_241;  // sfix12
  wire signed [11:0] s_522;  // sfix12
  wire signed [11:0] signal1_242;  // sfix12
  wire signed [11:0] s_523;  // sfix12
  wire signed [11:0] signal1_243;  // sfix12
  wire signed [11:0] s_524;  // sfix12
  wire signed [11:0] signal1_244;  // sfix12
  wire signed [11:0] s_525;  // sfix12
  wire signed [11:0] signal1_245;  // sfix12
  wire signed [11:0] s_526;  // sfix12
  wire signed [11:0] signal1_246;  // sfix12
  wire signed [11:0] s_527;  // sfix12
  wire signed [11:0] signal1_247;  // sfix12
  wire signed [11:0] s_528;  // sfix12
  wire signed [11:0] signal1_248;  // sfix12
  wire signed [11:0] s_529;  // sfix12
  wire signed [11:0] signal1_249;  // sfix12
  wire signed [11:0] s_530;  // sfix12
  wire signed [11:0] signal1_250;  // sfix12
  wire signed [11:0] s_531;  // sfix12
  wire signed [11:0] signal1_251;  // sfix12
  wire signed [11:0] s_532;  // sfix12
  wire signed [11:0] signal1_252;  // sfix12
  wire signed [11:0] s_533;  // sfix12
  wire signed [11:0] signal1_253;  // sfix12
  wire signed [11:0] s_534;  // sfix12
  wire signed [11:0] signal1_254;  // sfix12
  wire signed [11:0] s_535;  // sfix12
  wire signed [11:0] signal1_255;  // sfix12
  wire signed [11:0] s_536;  // sfix12
  wire signed [11:0] signal1_256;  // sfix12
  wire signed [11:0] s_537;  // sfix12
  wire signed [11:0] signal1_257;  // sfix12
  wire signed [11:0] s_538;  // sfix12
  wire signed [11:0] signal1_258;  // sfix12
  wire signed [11:0] s_539;  // sfix12
  wire signed [11:0] signal1_259;  // sfix12
  wire signed [11:0] s_540;  // sfix12
  wire signed [11:0] signal1_260;  // sfix12
  wire signed [11:0] signal1_261;  // sfix12
  wire signed [11:0] signal1_262;  // sfix12
  wire signed [23:0] Product_out1_2;  // sfix24
  wire signed [25:0] Add_add_temp;  // sfix26
  wire signed [25:0] Add_1;  // sfix26
  wire signed [25:0] Add_2;  // sfix26
  wire CT55_out1_8;
  wire signed [24:0] Switch41_out1_1;  // sfix25
  wire CT56_out1_7;
  wire signed [24:0] Switch42_out1_1;  // sfix25
  wire [13:0] Bit_Slice1_out1_8;  // ufix14
  reg signed [11:0] Unit_Delay23_out1_3;  // sfix12
  wire signed [11:0] Switch60_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_62;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_63;  // sfix12
  wire signed [11:0] signal2_346;  // sfix12
  wire signed [11:0] s_541;  // sfix12
  wire signed [11:0] signal2_347;  // sfix12
  wire signed [11:0] s_542;  // sfix12
  wire signed [11:0] signal2_348;  // sfix12
  wire signed [11:0] signal2_349;  // sfix12
  wire signed [11:0] signal2_350;  // sfix12
  wire signed [11:0] Switch112_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay145_out1;  // sfix12
  wire signed [11:0] s_543;  // sfix12
  wire signed [11:0] Switch303_out1;  // sfix12
  wire signed [11:0] s_544;  // sfix12
  reg signed [11:0] Unit_Delay26_out1_3;  // sfix12
  wire signed [11:0] Switch97_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay138_out1;  // sfix12
  wire signed [11:0] Switch292_out1;  // sfix12
  wire signed [11:0] signal1_263;  // sfix12
  wire signed [11:0] s_545;  // sfix12
  wire signed [11:0] signal1_264;  // sfix12
  wire signed [11:0] s_546;  // sfix12
  wire signed [11:0] signal1_265;  // sfix12
  wire signed [11:0] s_547;  // sfix12
  wire signed [11:0] signal1_266;  // sfix12
  wire signed [11:0] s_548;  // sfix12
  wire signed [11:0] signal1_267;  // sfix12
  wire signed [11:0] s_549;  // sfix12
  wire signed [11:0] signal1_268;  // sfix12
  wire signed [11:0] s_550;  // sfix12
  wire signed [11:0] signal1_269;  // sfix12
  wire signed [11:0] s_551;  // sfix12
  wire signed [11:0] signal1_270;  // sfix12
  wire signed [11:0] s_552;  // sfix12
  wire signed [11:0] signal1_271;  // sfix12
  wire signed [11:0] s_553;  // sfix12
  wire signed [11:0] signal1_272;  // sfix12
  wire signed [11:0] s_554;  // sfix12
  wire signed [11:0] signal1_273;  // sfix12
  wire signed [11:0] s_555;  // sfix12
  wire signed [11:0] signal1_274;  // sfix12
  wire signed [11:0] s_556;  // sfix12
  wire signed [11:0] signal1_275;  // sfix12
  wire signed [11:0] s_557;  // sfix12
  wire signed [11:0] signal1_276;  // sfix12
  wire signed [11:0] s_558;  // sfix12
  wire signed [11:0] signal1_277;  // sfix12
  wire signed [11:0] signal1_278;  // sfix12
  wire signed [23:0] Data_Type_S26_out1;  // sfix24
  wire signed [23:0] signal1_279;  // sfix24
  wire signed [23:0] signal1_280;  // sfix24
  wire signed [24:0] Add10_1;  // sfix25
  wire signed [24:0] Add10_2;  // sfix25
  wire RO381_relop1;
  wire signed [24:0] Switch202_out1;  // sfix25
  wire RO371_relop1;
  wire signed [24:0] Switch203_out1;  // sfix25
  reg signed [11:0] Unit_Delay101_out1;  // sfix12
  wire signed [11:0] Switch204_out1;  // sfix12
  wire RO401_relop1;
  wire signed [11:0] Switch206_out1;  // sfix12
  wire RO391_relop1;
  wire signed [11:0] s_559;  // sfix12
  wire signed [20:0] Data_Type_S1_out1_1;  // sfix21
  wire signed [29:0] In8_out1_dtc_1;  // sfix30
  wire signed [11:0] Switch40_out1_1;  // sfix12
  wire signed [12:0] Add33_1;  // sfix13
  wire signed [12:0] Add33_2;  // sfix13
  wire signed [12:0] Add3_out1_5;  // sfix13
  wire [20:0] Bit_Concat3_out1_1;  // ufix21
  wire signed [20:0] Data_Type_S19_out1_1;  // sfix21
  wire signed [29:0] In7_out1_dtc_1;  // sfix30
  wire signed [12:0] Add6_1;  // sfix13
  wire signed [12:0] Add6_2;  // sfix13
  wire signed [12:0] Add6_out1_1;  // sfix13
  wire [20:0] Bit_Concat1_out1_1;  // ufix21
  reg signed [29:0] Unit_Delay18_out1_3;  // sfix30
  wire signed [29:0] s_560;  // sfix30
  wire signed [29:0] Switch42_out1_2;  // sfix30
  wire signed [29:0] Switch48_out1_2;  // sfix30
  wire signed [29:0] Switch37_out1_2;  // sfix30
  wire signed [29:0] s_561;  // sfix30
  wire signed [29:0] signal6_11;  // sfix30
  wire signed [29:0] signal6_12;  // sfix30
  wire signed [29:0] signal6_13;  // sfix30
  reg signed [23:0] Unit_Delay2_out1_4;  // sfix24
  wire signed [23:0] s_562;  // sfix24
  wire signed [23:0] Switch3_out1_3;  // sfix24
  wire signed [23:0] s_563;  // sfix24
  wire signed [23:0] signal2_351;  // sfix24
  wire signed [23:0] signal2_352;  // sfix24
  wire signed [23:0] signal2_353;  // sfix24
  wire signed [23:0] Switch43_out1_2;  // sfix24
  wire signed [30:0] Add8_add_temp;  // sfix31
  wire signed [30:0] Add8_1;  // sfix31
  wire signed [30:0] Add8_2;  // sfix31
  wire signed [29:0] Add8_out1_2;  // sfix30
  wire signed [29:0] RO131_1_1;  // sfix30
  wire RO131_relop1;
  wire signed [29:0] Switch41_out1_2;  // sfix30
  wire signed [29:0] RO141_1_1;  // sfix30
  wire RO141_relop1;
  wire [21:0] Bit_Slice9_out1_1;  // ufix22
  wire signed [21:0] Data_Type_S6_out1_1;  // sfix22
  wire signed [16:0] Switch39_out1_3;  // sfix17
  wire signed [11:0] Switch39_out1_dtc;  // sfix12
  wire signed [15:0] Data_Type_S3_out1_2;  // int16
  wire signed [15:0] s_564;  // int16
  wire RO210_relop1;
  wire signed [47:0] Switch13_out1_2;  // sfix48
  wire RO110_relop1;
  wire signed [47:0] Switch14_out1_2;  // sfix48
  reg signed [23:0] Unit_Delay1_out1_9;  // sfix24
  wire signed [23:0] Switch1_out1_4;  // sfix24
  wire [15:0] Bit_Slice2_out1_7;  // uint16
  wire signed [15:0] s_565;  // int16
  wire signed [15:0] signal1_281;  // int16
  wire signed [15:0] signal1_282;  // int16
  wire signed [15:0] signal1_283;  // int16
  wire signed [16:0] Add51_1;  // sfix17
  wire signed [16:0] Add51_2;  // sfix17
  wire signed [16:0] Add5_out1_2;  // sfix17
  wire signed [16:0] RO111_1_1;  // sfix17
  wire RO111_relop1;
  wire signed [16:0] RO121_1_1;  // sfix17
  wire RO121_relop1;
  wire signed [22:0] Add9_1;  // sfix23
  wire signed [22:0] Add9_2;  // sfix23
  wire signed [22:0] Add9_out1_1;  // sfix23
  wire signed [11:0] Data_Type_S4_out1_1;  // sfix12
  reg signed [11:0] Unit_Delay19_out1_3;  // sfix12
  wire signed [11:0] Switch38_out1_2;  // sfix12
  wire signed [11:0] signal1_284;  // sfix12
  wire signed [11:0] s_566;  // sfix12
  wire signed [11:0] signal1_285;  // sfix12
  wire signed [11:0] s_567;  // sfix12
  wire signed [11:0] signal1_286;  // sfix12
  wire signed [11:0] s_568;  // sfix12
  wire signed [11:0] signal1_287;  // sfix12
  wire signed [11:0] s_569;  // sfix12
  wire signed [11:0] signal1_288;  // sfix12
  wire signed [11:0] s_570;  // sfix12
  wire signed [11:0] signal1_289;  // sfix12
  wire signed [11:0] s_571;  // sfix12
  wire signed [11:0] signal1_290;  // sfix12
  wire signed [11:0] s_572;  // sfix12
  wire signed [11:0] signal1_291;  // sfix12
  wire signed [11:0] s_573;  // sfix12
  wire signed [11:0] signal1_292;  // sfix12
  wire signed [11:0] s_574;  // sfix12
  wire signed [11:0] signal1_293;  // sfix12
  wire signed [11:0] s_575;  // sfix12
  wire signed [11:0] signal1_294;  // sfix12
  wire signed [11:0] s_576;  // sfix12
  wire signed [11:0] signal1_295;  // sfix12
  wire signed [11:0] s_577;  // sfix12
  wire signed [11:0] signal1_296;  // sfix12
  wire signed [11:0] s_578;  // sfix12
  wire signed [11:0] signal1_297;  // sfix12
  wire signed [11:0] s_579;  // sfix12
  wire signed [11:0] signal1_298;  // sfix12
  wire signed [11:0] s_580;  // sfix12
  wire signed [11:0] signal1_299;  // sfix12
  wire signed [11:0] s_581;  // sfix12
  wire signed [11:0] signal1_300;  // sfix12
  wire signed [11:0] s_582;  // sfix12
  wire signed [11:0] signal1_301;  // sfix12
  wire signed [11:0] s_583;  // sfix12
  wire signed [11:0] signal1_302;  // sfix12
  wire signed [11:0] s_584;  // sfix12
  wire signed [11:0] signal1_303;  // sfix12
  wire signed [11:0] s_585;  // sfix12
  wire signed [11:0] signal1_304;  // sfix12
  wire signed [11:0] s_586;  // sfix12
  wire signed [11:0] signal1_305;  // sfix12
  wire signed [11:0] s_587;  // sfix12
  wire signed [11:0] signal1_306;  // sfix12
  wire signed [11:0] s_588;  // sfix12
  wire signed [11:0] signal1_307;  // sfix12
  wire signed [11:0] s_589;  // sfix12
  wire signed [11:0] signal1_308;  // sfix12
  wire signed [11:0] s_590;  // sfix12
  wire signed [11:0] signal1_309;  // sfix12
  wire signed [11:0] s_591;  // sfix12
  wire signed [11:0] signal1_310;  // sfix12
  wire signed [11:0] s_592;  // sfix12
  wire signed [11:0] signal1_311;  // sfix12
  wire signed [11:0] signal1_312;  // sfix12
  wire signed [23:0] Data_Type_S20_out1_1;  // sfix24
  wire signed [23:0] signal1_313;  // sfix24
  wire signed [23:0] signal1_314;  // sfix24
  wire [36:0] Bit_Slice6_out1_8;  // ufix37
  wire signed [36:0] Data_Type_S10_out1_2;  // sfix37
  wire RO281_relop1;
  wire signed [36:0] Switch104_out1_5;  // sfix37
  wire RO271_relop1;
  wire signed [36:0] Switch131_out1_2;  // sfix37
  reg signed [11:0] Unit_Delay11_out1_3;  // sfix12
  wire signed [11:0] Switch26_out1_1;  // sfix12
  wire signed [11:0] signal1_315;  // sfix12
  wire signed [11:0] s_593;  // sfix12
  wire signed [11:0] signal1_316;  // sfix12
  wire signed [11:0] s_594;  // sfix12
  wire signed [11:0] signal1_317;  // sfix12
  wire signed [11:0] s_595;  // sfix12
  wire signed [11:0] signal1_318;  // sfix12
  wire signed [11:0] signal1_319;  // sfix12
  wire signed [11:0] signal1_320;  // sfix12
  wire signed [11:0] Switch44_out1_2;  // sfix12
  wire signed [17:0] Add15_stage21_1;  // sfix18
  wire signed [17:0] Add15_stage21_2;  // sfix18
  wire signed [17:0] Add15_op_stage2_1;  // sfix18
  wire signed [17:0] Add15_stage31_add_temp;  // sfix18
  wire signed [17:0] Add15_stage31_1;  // sfix18
  wire signed [16:0] Add15_out1_3;  // sfix17
  wire signed [16:0] Switch46_out1_1;  // sfix17
  wire [11:0] Bit_Slice11_out1_1;  // ufix12
  wire signed [11:0] Data_Type_S16_out1_1;  // sfix12
  wire signed [11:0] signal1_321;  // sfix12
  wire signed [11:0] s_596;  // sfix12
  wire signed [11:0] signal1_322;  // sfix12
  wire signed [11:0] s_597;  // sfix12
  wire signed [11:0] signal1_323;  // sfix12
  wire signed [11:0] s_598;  // sfix12
  wire signed [11:0] signal1_324;  // sfix12
  wire signed [11:0] s_599;  // sfix12
  wire signed [11:0] signal1_325;  // sfix12
  wire signed [11:0] s_600;  // sfix12
  wire signed [11:0] signal1_326;  // sfix12
  wire signed [11:0] s_601;  // sfix12
  wire signed [11:0] signal1_327;  // sfix12
  wire signed [11:0] s_602;  // sfix12
  wire signed [11:0] signal1_328;  // sfix12
  wire signed [11:0] s_603;  // sfix12
  wire signed [11:0] signal1_329;  // sfix12
  wire signed [11:0] s_604;  // sfix12
  wire signed [11:0] signal1_330;  // sfix12
  wire signed [11:0] s_605;  // sfix12
  wire signed [11:0] signal1_331;  // sfix12
  wire signed [11:0] s_606;  // sfix12
  wire signed [11:0] signal1_332;  // sfix12
  wire signed [11:0] s_607;  // sfix12
  wire signed [11:0] signal1_333;  // sfix12
  wire signed [11:0] s_608;  // sfix12
  wire signed [11:0] signal1_334;  // sfix12
  wire signed [11:0] signal1_335;  // sfix12
  wire signed [15:0] Data_Type_Conversion8_out1_1;  // int16
  wire signed [15:0] signal1_336;  // int16
  wire signed [15:0] s_609;  // int16
  wire signed [15:0] signal1_337;  // int16
  wire signed [15:0] s_610;  // int16
  wire signed [15:0] signal1_338;  // int16
  wire signed [15:0] signal1_339;  // int16
  wire RO21_relop1;
  wire signed [39:0] Switch13_out1_3;  // sfix40
  wire RO11_relop1_1;
  wire signed [39:0] Switch14_out1_3;  // sfix40
  reg signed [23:0] Unit_Delay42_out1_2;  // sfix24
  wire signed [23:0] Switch140_out1_3;  // sfix24
  wire [19:0] Bit_Slice14_out1;  // ufix20
  wire signed [19:0] Data_Type_S42_out1;  // sfix20
  wire signed [23:0] Data_Type_S41_out1;  // sfix24
  wire signed [24:0] Unary_Minus32_in0;  // sfix25
  wire signed [23:0] Unary_Minus3_out1_3;  // sfix24
  wire signed [23:0] signal1_340;  // sfix24
  wire signed [23:0] s_611;  // sfix24
  wire signed [23:0] signal1_341;  // sfix24
  wire signed [23:0] s_612;  // sfix24
  wire signed [23:0] signal1_342;  // sfix24
  wire signed [23:0] s_613;  // sfix24
  wire signed [23:0] signal1_343;  // sfix24
  wire signed [23:0] s_614;  // sfix24
  wire signed [23:0] signal1_344;  // sfix24
  wire signed [23:0] s_615;  // sfix24
  wire signed [23:0] signal1_345;  // sfix24
  wire signed [23:0] s_616;  // sfix24
  wire signed [23:0] signal1_346;  // sfix24
  wire signed [23:0] s_617;  // sfix24
  wire signed [23:0] signal1_347;  // sfix24
  wire signed [23:0] s_618;  // sfix24
  wire signed [23:0] signal1_348;  // sfix24
  wire signed [23:0] s_619;  // sfix24
  wire signed [23:0] signal1_349;  // sfix24
  wire signed [23:0] s_620;  // sfix24
  wire signed [23:0] signal1_350;  // sfix24
  wire signed [23:0] s_621;  // sfix24
  wire signed [23:0] signal1_351;  // sfix24
  wire signed [23:0] s_622;  // sfix24
  wire signed [23:0] signal1_352;  // sfix24
  wire signed [23:0] signal1_353;  // sfix24
  wire signed [24:0] Add43_1;  // sfix25
  wire signed [24:0] Add43_2;  // sfix25
  wire RO301_relop1;
  wire signed [24:0] Switch148_out1_1;  // sfix25
  wire RO291_relop1;
  wire signed [24:0] Switch149_out1_1;  // sfix25
  wire [23:0] From292_out1_dtc;  // ufix24
  wire [23:0] Switch150_out1_2;  // ufix24
  wire [11:0] Switch158_out1_1;  // ufix12
  reg [11:0] Unit_Delay73_out1_1;  // ufix12
  wire [11:0] Switch161_out1_1;  // ufix12
  wire [11:0] Bitwise_Operator6_out1_1;  // ufix12
  wire [23:0] Product7_out1_1;  // ufix24
  wire RO311_relop1;
  wire signed [11:0] Data_Type_Conversion26_out1_1;  // sfix12
  wire signed [11:0] Switch160_out1_1;  // sfix12
  wire signed [11:0] RO201_1_1;  // sfix12
  wire Switch88_out1_2;
  reg  Unit_Delay39_out1_64;
  wire Switch107_out1_67;
  reg  Unit_Delay39_out1_65;
  wire [11:0] Bit_Slice4_out1_2;  // ufix12
  wire signed [11:0] Data_Type_S39_out1_1;  // sfix12
  wire signed [11:0] Switch107_out1_68;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_66;  // sfix12
  wire CT162_out1;
  reg signed [23:0] Unit_Delay133_out1;  // sfix24
  wire signed [23:0] Switch279_out1;  // sfix24
  wire CT138_out1;
  reg signed [23:0] Unit_Delay137_out1;  // sfix24
  wire signed [23:0] Switch287_out1;  // sfix24
  wire CT74_out1_3;
  reg signed [23:0] Unit_Delay39_out1_67;  // sfix24
  wire signed [23:0] Switch129_out1;  // sfix24
  wire [5:0] Bit_Slice1_out1_9;  // ufix6
  reg [5:0] Unit_Delay52_out1_4;  // ufix6
  wire Relational_Operator13_relop1;
  wire Not_out1;
  wire Or1_out1_8;
  wire R6_relop1;
  reg  Unit_Delay56_out1_4;
  wire Switch93_out1_4;
  wire Logical_Operator4_out1_2;
  wire signed [34:0] Constant11_out1_dtc;  // sfix35
  wire signed [23:0] Constant8_out1_dtc;  // sfix24
  wire signed [36:0] Switch3_out1_4;  // sfix37
  wire signed [37:0] Add102_add_temp;  // sfix38
  wire signed [37:0] Add102_1;  // sfix38
  wire [34:0] Add10_out1_1;  // ufix35
  wire signed [36:0] Add10_out1_dtc;  // sfix37
  wire signed [36:0] Add_out1_2;  // sfix37
  wire signed [37:0] Add93_sub_temp;  // sfix38
  wire signed [37:0] Add93_1;  // sfix38
  wire [34:0] Add9_out1_2;  // ufix35
  wire signed [36:0] Add9_out1_dtc;  // sfix37
  wire signed [34:0] Add1_out1_10;  // sfix35
  wire [23:0] Bit_Slice4_out1_3;  // ufix24
  wire signed [23:0] Data_Type_Conversion4_out1_3;  // sfix24
  wire signed [34:0] Add5_out1_3;  // sfix35
  wire R4_relop1;
  reg signed [36:0] Unit_Delay3_out1_4;  // sfix37
  wire signed [35:0] Data_Type_Conversion2_out1_3;  // sfix36
  wire Cmp2_out1_1;
  wire signed [35:0] Switch4_out1_3;  // sfix36
  wire signed [36:0] Add130_sub_temp;  // sfix37
  wire signed [36:0] Add130_1;  // sfix37
  wire signed [36:0] Add130_2;  // sfix37
  wire signed [34:0] Switch5_out1_2;  // sfix35
  reg signed [34:0] Unit_Delay5_out1_5;  // sfix35
  wire signed [23:0] Switch8_out1_1;  // sfix24
  wire signed [35:0] Add53_add_temp;  // sfix36
  wire signed [35:0] Add53_1;  // sfix36
  wire signed [35:0] Add53_2;  // sfix36
  wire R3_relop1;
  reg signed [36:0] Unit_Delay7_out1_10;  // sfix37
  wire signed [36:0] Switch6_out1;  // sfix37
  wire Switch10_out1_3;
  reg  Unit_Delay6_out1_5;
  wire Cmp3_out1_1;
  wire Logical_Operator1_out1_4;
  reg signed [23:0] Unit_Delay1_out1_10;  // sfix24
  wire signed [37:0] Add28_add_temp;  // sfix38
  wire signed [37:0] Add28_add_temp_1;  // sfix38
  wire signed [37:0] Add28_1;  // sfix38
  wire signed [37:0] Add28_2;  // sfix38
  wire signed [37:0] Add28_3;  // sfix38
  wire Cmp4_out1;
  wire Cmp5_out1;
  wire signed [36:0] Switch2_out1_1;  // sfix37
  wire [11:0] Bit_Slice_out1;  // ufix12
  wire [11:0] Add7_out1_7;  // ufix12
  wire Cmp1_out1_1;
  reg [5:0] Unit_Delay41_out1_3;  // ufix6
  wire [5:0] Add12_out1_9;  // ufix6
  wire CT97_out1_5;
  wire [5:0] Switch126_out1_4;  // ufix6
  wire CT76_out1_4;
  wire CT7_out1_4;
  wire CT6_out1_4;
  wire CT10_out1_5;
  wire CT12_out1_9;
  wire CT14_out1_4;
  wire CT17_out1_5;
  wire CT20_out1_5;
  wire CT22_out1_5;
  wire CT24_out1_5;
  wire CT26_out1_5;
  wire CT28_out1_4;
  wire CT37_out1_4;
  wire CT39_out1_4;
  wire CT41_out1_4;
  wire CT45_out1_4;
  wire CT55_out1_9;
  wire CT57_out1_9;
  wire CT61_out1_8;
  wire CT63_out1_4;
  wire CT73_out1_4;
  wire CT75_out1_4;
  wire CT77_out1_4;
  wire CT79_out1_6;
  wire CT1_out1_4;
  reg [2:0] Unit_Delay43_out1_4;  // ufix3
  wire [2:0] Add4_out1_5;  // ufix3
  wire CT13_out1_4;
  wire CT16_out1_5;
  wire CT1_out1_5;
  wire CT2_out1_4;
  wire CT3_out1_4;
  wire CT9_out1_5;
  wire CT12_out1_10;
  wire CT14_out1_5;
  wire CT6_out1_5;
  wire CT5_out1_4;
  wire CT4_out1_4;
  wire CT7_out1_5;
  wire CT2_out1_5;
  wire CT5_out1_5;
  wire CT3_out1_5;
  wire CT1_out1_6;
  wire CT34_out1_4;
  wire CT36_out1_4;
  wire CT29_out1_5;
  wire CT33_out1_4;
  wire CT30_out1_4;
  wire signed [15:0] signal3_89;  // int16
  wire signed [15:0] s_623;  // int16
  wire CT25_out1_4;
  wire RO313_relop1;
  wire signed [35:0] Constant9_out1_dtc_2;  // sfix36
  wire signed [35:0] Switch12_out1_4;  // sfix36
  wire RO214_relop1;
  wire signed [35:0] Constant5_out1_dtc;  // sfix36
  wire signed [35:0] Switch11_out1_1;  // sfix36
  wire signed [23:0] Data_Type_Conversion2_out1_4;  // sfix24
  reg signed [23:0] Unit_Delay12_out1_4;  // sfix24
  wire signed [23:0] Switch38_out1_3;  // sfix24
  wire [11:0] Bit_Slice3_out1_8;  // ufix12
  wire signed [11:0] Data_Type_S3_out1_3;  // sfix12
  wire signed [17:0] Data_Type_S13_out1_6;  // sfix18
  wire signed [17:0] signal1_354;  // sfix18
  wire signed [17:0] s_624;  // sfix18
  wire CT21_out1_4;
  reg signed [23:0] Unit_Delay10_out1_4;  // sfix24
  wire signed [23:0] Switch32_out1_2;  // sfix24
  wire [11:0] Bit_Slice4_out1_4;  // ufix12
  wire signed [11:0] Data_Type_S5_out1_3;  // sfix12
  wire signed [17:0] Data_Type_S7_out1_3;  // sfix18
  wire signed [15:0] signal3_90;  // int16
  wire signed [15:0] signal3_91;  // int16
  wire signed [15:0] signal3_92;  // int16
  wire signed [17:0] signal1_355;  // sfix18
  wire signed [17:0] signal1_356;  // sfix18
  wire signed [17:0] signal1_357;  // sfix18
  wire signed [18:0] Add62_1;  // sfix19
  wire signed [18:0] Add62_2;  // sfix19
  wire signed [18:0] Add6_out1_2;  // sfix19
  wire signed [15:0] signal4_15;  // int16
  wire signed [15:0] s_625;  // int16
  wire signed [15:0] signal4_16;  // int16
  wire signed [15:0] signal4_17;  // int16
  wire signed [15:0] signal4_18;  // int16
  wire signed [18:0] RO53_1_1;  // sfix19
  wire RO53_relop1;
  wire signed [18:0] signal4_dtc_2;  // sfix19
  wire signed [18:0] Switch22_out1_2;  // sfix19
  wire signed [15:0] signal5_15;  // int16
  wire signed [15:0] s_626;  // int16
  wire signed [15:0] signal5_16;  // int16
  wire signed [15:0] signal5_17;  // int16
  wire signed [15:0] signal5_18;  // int16
  wire signed [18:0] RO91_1_1;  // sfix19
  wire RO91_relop1;
  wire signed [15:0] Switch22_out1_dtc;  // int16
  wire signed [15:0] Switch23_out1_1;  // int16
  wire CT123_out1_3;
  reg  Unit_Delay52_out1_5;
  wire Switch124_out1_2;
  wire Switch123_out1_5;
  wire Or1_out1_9;
  wire Switch125_out1_3;
  reg  Unit_Delay53_out1_5;
  wire CT27_out1_4;
  reg signed [23:0] Unit_Delay13_out1_4;  // sfix24
  wire signed [23:0] Switch40_out1_2;  // sfix24
  wire signed [23:0] signal2_354;  // sfix24
  wire signed [23:0] s_627;  // sfix24
  wire CT23_out1_4;
  reg signed [23:0] Unit_Delay11_out1_4;  // sfix24
  wire signed [23:0] Switch34_out1_2;  // sfix24
  wire switch_compare_1_21;
  wire signed [23:0] signal2_355;  // sfix24
  wire signed [23:0] signal2_356;  // sfix24
  wire signed [23:0] signal2_357;  // sfix24
  wire signed [23:0] Switch37_out1_3;  // sfix24
  wire CT28_out1_5;
  wire CT31_out1_4;
  wire signed [16:0] Add27_1;  // sfix17
  wire signed [16:0] Add27_2;  // sfix17
  wire signed [16:0] Add2_out1_6;  // sfix17
  wire [37:0] Bit_Concat2_out1_1;  // ufix38
  wire signed [37:0] Data_Type_S11_out1_7;  // sfix38
  wire signed [37:0] signal7;  // sfix38
  wire signed [37:0] s_628;  // sfix38
  wire signed [37:0] signal7_1;  // sfix38
  wire signed [37:0] signal7_2;  // sfix38
  wire signed [37:0] signal7_3;  // sfix38
  wire signed [38:0] signal7_dtc;  // sfix39
  wire signed [16:0] Add129_1;  // sfix17
  wire signed [16:0] Add129_2;  // sfix17
  wire signed [16:0] Add1_out1_11;  // sfix17
  wire [37:0] Bit_Concat4_out1_1;  // ufix38
  wire signed [37:0] Data_Type_S10_out1_3;  // sfix38
  wire signed [37:0] signal8;  // sfix38
  wire signed [37:0] s_629;  // sfix38
  wire signed [37:0] signal8_1;  // sfix38
  wire signed [37:0] signal8_2;  // sfix38
  wire signed [37:0] signal8_3;  // sfix38
  wire signed [38:0] Switch26_out1_2;  // sfix39
  wire signed [37:0] Switch26_out1_dtc;  // sfix38
  reg signed [37:0] Unit_Delay16_out1_4;  // sfix38
  wire signed [37:0] Switch36_out1_1;  // sfix38
  wire signed [37:0] Switch48_out1_3;  // sfix38
  reg signed [37:0] Unit_Delay14_out1_4;  // sfix38
  wire signed [37:0] Switch45_out1_2;  // sfix38
  wire signed [37:0] signal6_14;  // sfix38
  wire signed [37:0] s_630;  // sfix38
  wire signed [37:0] signal6_15;  // sfix38
  wire signed [37:0] signal6_16;  // sfix38
  wire signed [37:0] signal6_17;  // sfix38
  wire signed [38:0] Add92_1;  // sfix39
  wire signed [38:0] Add92_2;  // sfix39
  wire signed [38:0] Add9_out1_3;  // sfix39
  wire signed [38:0] RO101_1_2;  // sfix39
  wire RO101_relop1_1;
  wire signed [38:0] RO114_1_1;  // sfix39
  wire RO114_relop1;
  wire [16:0] Bit_Slice5_out1_4;  // ufix17
  wire signed [16:0] Data_Type_S12_out1_7;  // sfix17
  wire signed [23:0] Data_Type_S8_out1_2;  // sfix24
  wire signed [23:0] signal9;  // sfix24
  wire signed [23:0] s_631;  // sfix24
  wire signed [23:0] signal9_1;  // sfix24
  wire signed [23:0] signal9_2;  // sfix24
  wire signed [23:0] signal9_3;  // sfix24
  wire signed [24:0] Add101_add_temp;  // sfix25
  wire signed [24:0] Add101_1;  // sfix25
  wire signed [24:0] Add101_2;  // sfix25
  wire signed [25:0] Add10_out1_2;  // sfix26
  reg signed [25:0] Unit_Delay15_out1_4;  // sfix26
  wire signed [25:0] Switch46_out1_2;  // sfix26
  wire signed [11:0] Data_Type_S18_out1_2;  // sfix12
  wire signed [11:0] signal1_358;  // sfix12
  wire signed [11:0] s_632;  // sfix12
  wire CT32_out1_4;
  reg signed [25:0] Unit_Delay17_out1_4;  // sfix26
  wire signed [25:0] Switch49_out1_8;  // sfix26
  wire signed [11:0] Data_Type_S17_out1_2;  // sfix12
  wire signed [11:0] signal1_359;  // sfix12
  wire signed [11:0] s_633;  // sfix12
  wire signed [11:0] signal1_360;  // sfix12
  wire signed [11:0] s_634;  // sfix12
  wire signed [11:0] signal1_361;  // sfix12
  wire signed [11:0] s_635;  // sfix12
  wire signed [11:0] signal1_362;  // sfix12
  wire signed [11:0] signal1_363;  // sfix12
  wire signed [11:0] signal1_364;  // sfix12
  wire CT4_out1_5;
  wire CT6_out1_6;
  wire CT100_out1_3;
  wire CT96_out1_3;
  reg signed [11:0] Unit_Delay37_out1_4;  // sfix12
  wire signed [11:0] Switch98_out1_6;  // sfix12
  wire signed [11:0] Switch107_out1_69;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_68;  // sfix12
  wire signed [11:0] Switch107_out1_70;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_69;  // sfix12
  wire CT95_out1_3;
  reg signed [11:0] Unit_Delay36_out1_4;  // sfix12
  wire signed [11:0] Switch97_out1_6;  // sfix12
  wire signed [11:0] Switch107_out1_71;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_70;  // sfix12
  wire signed [11:0] Switch107_out1_72;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_71;  // sfix12
  wire signed [11:0] Switch107_out1_73;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_72;  // sfix12
  wire signed [11:0] Switch107_out1_74;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_73;  // sfix12
  wire signed [12:0] Constant27_out1_dtc;  // sfix13
  wire signed [12:0] Constant26_out1_dtc_1;  // sfix13
  reg signed [11:0] Unit_Delay3_out1_5;  // sfix12
  wire signed [11:0] Data_Type_Conversion6_out1_2;  // sfix12
  wire signed [11:0] Switch7_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay2_out1_5;  // sfix12
  wire signed [11:0] Switch5_out1_3;  // sfix12
  wire signed [11:0] signal2_358;  // sfix12
  wire signed [11:0] s_636;  // sfix12
  wire signed [11:0] signal2_359;  // sfix12
  wire signed [11:0] s_637;  // sfix12
  wire signed [11:0] signal2_360;  // sfix12
  wire signed [11:0] s_638;  // sfix12
  wire signed [11:0] signal2_361;  // sfix12
  wire signed [11:0] s_639;  // sfix12
  wire signed [11:0] signal2_362;  // sfix12
  wire signed [11:0] signal2_363;  // sfix12
  wire signed [11:0] signal2_364;  // sfix12
  wire signed [12:0] Add26_1;  // sfix13
  wire signed [12:0] Add26_2;  // sfix13
  wire signed [12:0] Add_out1_3;  // sfix13
  wire RO142_relop1;
  wire signed [12:0] Switch55_out1_1;  // sfix13
  wire RO132_relop1;
  wire signed [12:0] Switch54_out1_3;  // sfix13
  reg signed [11:0] Unit_Delay1_out1_11;  // sfix12
  wire signed [11:0] Switch3_out1_5;  // sfix12
  wire signed [11:0] Switch107_out1_75;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_74;  // sfix12
  wire CT37_out1_5;
  reg signed [11:0] Unit_Delay19_out1_4;  // sfix12
  wire signed [11:0] Switch52_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_76;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_75;  // sfix12
  wire CT35_out1_4;
  reg signed [11:0] Unit_Delay18_out1_4;  // sfix12
  wire signed [11:0] Switch50_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_77;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_76;  // sfix12
  wire R0_relop1;
  wire signed [11:0] Switch_out1;  // sfix12
  wire R1_relop1;
  wire signed [11:0] Switch1_out1_5;  // sfix12
  wire signed [11:0] Switch107_out1_78;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_77;  // sfix12
  wire CT21_out1_5;
  wire signed [12:0] Unary_Minus62_in0;  // sfix13
  wire signed [11:0] Unary_Minus6_out1_2;  // sfix12
  wire signed [11:0] Switch27_out1_3;  // sfix12
  wire signed [11:0] signal2_365;  // sfix12
  wire signed [11:0] s_640;  // sfix12
  wire signed [11:0] Switch107_out1_79;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_78;  // sfix12
  wire CT20_out1_6;
  wire signed [12:0] Unary_Minus52_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1_2;  // sfix12
  wire signed [11:0] Switch26_out1_3;  // sfix12
  wire signed [11:0] signal2_366;  // sfix12
  wire signed [11:0] s_641;  // sfix12
  wire signed [11:0] Switch107_out1_80;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_79;  // sfix12
  wire CT8_out1_4;
  wire signed [12:0] Unary_Minus113_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1_4;  // sfix12
  wire signed [11:0] Switch12_out1_5;  // sfix12
  wire signed [11:0] signal2_367;  // sfix12
  wire signed [11:0] s_642;  // sfix12
  wire CT17_out1_6;
  wire R2_relop1;
  wire signed [11:0] Switch2_out1_2;  // sfix12
  wire R31_relop1;
  wire signed [11:0] Switch3_out1_6;  // sfix12
  wire signed [12:0] Add3_out1_6;  // sfix13
  wire [11:0] Bit_Slice3_out1_9;  // ufix12
  wire signed [11:0] Data_Type_Conversion4_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay4_out1_4;  // sfix12
  wire signed [11:0] Switch18_out1_2;  // sfix12
  wire signed [12:0] Unary_Minus20_in0;  // sfix13
  wire signed [11:0] Unary_Minus_out1_2;  // sfix12
  wire signed [11:0] signal2_368;  // sfix12
  wire signed [11:0] s_643;  // sfix12
  wire signed [11:0] signal2_369;  // sfix12
  wire signed [11:0] s_644;  // sfix12
  wire signed [11:0] signal2_370;  // sfix12
  wire signed [11:0] s_645;  // sfix12
  wire signed [11:0] signal2_371;  // sfix12
  wire signed [11:0] signal2_372;  // sfix12
  reg signed [11:0] Unit_Delay1_out1_12;  // sfix12
  wire signed [11:0] Data_Type_Conversion5_out1_2;  // sfix12
  wire signed [11:0] Switch7_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay2_out1_6;  // sfix12
  wire signed [11:0] Switch8_out1_2;  // sfix12
  wire signed [25:0] Product14_mul_temp;  // sfix26
  wire signed [24:0] Product1_out1_2;  // sfix25
  wire [13:0] Bit_Slice2_out1_8;  // ufix14
  wire signed [13:0] Data_Type_Conversion1_out1_4;  // sfix14
  wire RO315_relop1;
  wire signed [13:0] Switch14_out1_4;  // sfix14
  wire RO216_relop1;
  wire signed [13:0] Switch13_out1_4;  // sfix14
  reg signed [11:0] Unit_Delay3_out1_6;  // sfix12
  wire signed [11:0] Switch9_out1_3;  // sfix12
  wire signed [11:0] signal1_365;  // sfix12
  wire signed [11:0] s_646;  // sfix12
  wire signed [11:0] signal1_366;  // sfix12
  wire signed [11:0] s_647;  // sfix12
  wire signed [11:0] signal1_367;  // sfix12
  wire signed [11:0] s_648;  // sfix12
  wire signed [11:0] signal1_368;  // sfix12
  wire signed [11:0] s_649;  // sfix12
  wire signed [11:0] signal1_369;  // sfix12
  wire signed [11:0] s_650;  // sfix12
  wire signed [11:0] signal1_370;  // sfix12
  wire signed [11:0] s_651;  // sfix12
  wire signed [11:0] signal1_371;  // sfix12
  wire signed [11:0] signal1_372;  // sfix12
  wire signed [12:0] Add36_1;  // sfix13
  wire signed [12:0] Add36_2;  // sfix13
  wire RO412_relop1;
  wire signed [12:0] Switch11_out1_2;  // sfix13
  wire RO116_relop1;
  wire signed [12:0] Switch10_out1_4;  // sfix13
  wire signed [11:0] Data_Type_Conversion2_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_5;  // sfix12
  wire signed [11:0] Switch22_out1_3;  // sfix12
  wire signed [11:0] Switch107_out1_81;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_80;  // sfix12
  wire signed [11:0] signal1_373;  // sfix12
  wire signed [11:0] s_652;  // sfix12
  wire CT11_out1_5;
  reg signed [11:0] Unit_Delay7_out1_11;  // sfix12
  wire signed [11:0] Switch20_out1_9;  // sfix12
  wire signed [11:0] Switch107_out1_82;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_81;  // sfix12
  wire signed [11:0] signal1_374;  // sfix12
  wire signed [11:0] s_653;  // sfix12
  wire CT10_out1_6;
  reg signed [11:0] Unit_Delay6_out1_6;  // sfix12
  wire signed [11:0] Switch16_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_83;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_82;  // sfix12
  wire signed [11:0] signal1_375;  // sfix12
  wire signed [11:0] s_654;  // sfix12
  wire CT72_out1_4;
  wire CT59_out1_8;
  wire CT71_out1_6;
  wire CT21_out1_6;
  wire Compare_To_Constant5_out1_1;
  wire Compare_To_Constant3_out1_1;
  wire [23:0] Switch84_out1_7;  // ufix24
  reg [23:0] Unit_Delay51_out1_4;  // ufix24
  wire [23:0] bit_shift_out1_2;  // ufix24
  wire Compare_To_Constant4_out1_1;
  wire Compare_To_Constant9_out1_1;
  wire Compare_To_Constant7_out1_1;
  wire [23:0] Switch58_out1_3;  // ufix24
  reg [23:0] Unit_Delay29_out1_4;  // ufix24
  wire [23:0] bit_shift1_out1_2;  // ufix24
  wire Compare_To_Constant8_out1_1;
  wire [23:0] Switch59_out1_4;  // ufix24
  reg [23:0] Unit_Delay28_out1_4;  // ufix24
  wire [23:0] Switch57_out1_1;  // ufix24
  wire [23:0] Bitwise_Operator2_out1_1;  // ufix24
  wire signed [36:0] Product141_mul_temp;  // sfix37
  wire signed [24:0] Product141_1;  // sfix25
  wire signed [35:0] Product14_out1;  // sfix36
  wire Compare_To_Constant6_out1_1;
  reg [23:0] Unit_Delay27_out1_4;  // ufix24
  wire [23:0] Switch60_out1_3;  // ufix24
  wire signed [23:0] Data_Type_Conversion3_out1_4;  // sfix24
  wire CT46_out1_4;
  wire CT58_out1_8;
  wire CT68_out1_6;
  wire CT2_out1_6;
  wire CT47_out1_4;
  wire CT49_out1_5;
  wire CT51_out1_9;
  wire CT53_out1_4;
  wire CT31_out1_5;
  wire CT33_out1_5;
  wire CT35_out1_5;
  wire CT43_out1_4;
  wire CT67_out1_4;
  wire CT69_out1_4;
  wire RO_relop1;
  wire signed [11:0] Switch31_out1_4;  // sfix12
  wire RO119_relop1;
  wire signed [11:0] max1_out1;  // sfix12
  wire signed [11:0] Switch32_out1_3;  // sfix12
  wire RO218_relop1;
  wire signed [11:0] mid_out1;  // sfix12
  wire CT66_out1_7;
  wire CT64_out1_4;
  wire CT29_out1_6;
  wire signed [12:0] Unary_Minus132_in0;  // sfix13
  wire signed [11:0] Unary_Minus13_out1_2;  // sfix12
  wire CT65_out1_5;
  wire signed [12:0] Unary_Minus115_in0;  // sfix13
  wire signed [11:0] Unary_Minus11_out1_2;  // sfix12
  wire CT23_out1_5;
  wire CT62_out1_4;
  wire CT42_out1_4;
  wire CT30_out1_5;
  wire CT27_out1_5;
  wire CT25_out1_5;
  reg  Unit_Delay7_out1_12;  // ufix1
  wire [8:0] Add136_add_temp;  // ufix9
  wire Add1_out1_12;  // ufix1
  wire CT51_out1_10;
  wire CT12_out1_11;
  reg  Unit_Delay54_out1_10;
  wire Switch20_out1_10;
  wire Switch17_out1_9;
  wire Or3_out1_10;
  wire Switch208_out1_7;
  reg  Unit_Delay55_out1_8;
  wire CT70_out1_11;
  wire Or2_out1_12;
  wire [6:0] Switch83_out1_7;  // ufix7
  reg [6:0] Unit_Delay32_out1_8;  // ufix7
  wire [6:0] Add11_out1_7;  // ufix7
  wire Ro1010_relop1;
  reg  Unit_Delay57_out1_9;
  wire Switch49_out1_9;
  wire Switch105_out1_11;
  reg  Unit_Delay1_out1_13;
  wire switch_compare_1_22;
  wire CT55_out1_10;
  wire CT2_out1_7;
  wire CT1_out1_7;
  wire switch_compare_1_23;
  reg  Unit_Delay7_out1_13;  // ufix1
  wire [8:0] Add135_add_temp;  // ufix9
  wire Add1_out1_13;  // ufix1
  wire CT51_out1_11;
  wire CT12_out1_12;
  reg  Unit_Delay54_out1_11;
  wire Switch20_out1_11;
  wire Switch17_out1_10;
  wire Or3_out1_11;
  wire Switch208_out1_8;
  reg  Unit_Delay55_out1_9;
  wire CT70_out1_12;
  wire Or2_out1_13;
  wire [4:0] Switch83_out1_8;  // ufix5
  reg [4:0] Unit_Delay32_out1_9;  // ufix5
  wire [4:0] Add11_out1_8;  // ufix5
  wire Ro109_relop1;
  reg  Unit_Delay57_out1_10;
  wire Switch49_out1_10;
  wire Switch105_out1_12;
  reg  Unit_Delay1_out1_14;
  wire switch_compare_1_24;
  wire switch_compare_1_25;
  wire CT55_out1_11;
  wire CT9_out1_6;
  wire [4:0] Add12_out1_10;  // ufix5
  reg [2:0] Unit_Delay42_out1_3;  // ufix3
  wire [8:0] Add1114_add_temp;  // ufix9
  wire [2:0] Add11_out1_9;  // ufix3
  wire [6:0] Add12_out1_11;  // ufix7
  wire CT60_out1_8;
  reg [1:0] Unit_Delay7_out1_14;  // ufix2
  wire [1:0] Add1_out1_14;  // ufix2
  wire CT56_out1_8;
  wire CT12_out1_13;
  reg  Unit_Delay54_out1_12;
  wire Switch20_out1_12;
  wire Switch17_out1_11;
  wire Or3_out1_12;
  wire Switch208_out1_9;
  reg  Unit_Delay55_out1_10;
  wire CT70_out1_13;
  wire Or2_out1_14;
  wire [8:0] Switch83_out1_9;  // ufix9
  reg [8:0] Unit_Delay32_out1_10;  // ufix9
  wire [8:0] Add11_out1_10;  // ufix9
  wire Ro108_relop1;
  reg  Unit_Delay57_out1_11;
  wire Switch49_out1_11;
  wire Switch105_out1_13;
  reg  Unit_Delay1_out1_15;
  wire switch_compare_1_26;
  wire switch_compare_1_27;
  wire CT55_out1_12;
  wire CT57_out1_10;
  wire CT59_out1_9;
  wire CT61_out1_9;
  wire CT15_out1_4;
  wire CT13_out1_5;
  wire CT11_out1_6;
  wire [8:0] Add12_out1_12;  // ufix9
  wire CT60_out1_9;
  wire CT58_out1_9;
  wire CT51_out1_12;
  wire CT70_out1_14;
  wire signed [11:0] min_out1;  // sfix12
  wire signed [11:0] max_out1;  // sfix12
  wire CT56_out1_9;
  wire CT44_out1_5;
  reg  Unit_Delay7_out1_15;  // ufix1
  wire [8:0] Add13_add_temp;  // ufix9
  wire Add1_out1_15;  // ufix1
  wire CT51_out1_13;
  wire CT12_out1_14;
  reg  Unit_Delay54_out1_13;
  wire Switch20_out1_13;
  wire Switch17_out1_12;
  wire Or3_out1_13;
  wire Switch208_out1_10;
  reg  Unit_Delay55_out1_11;
  wire CT70_out1_15;
  wire Or2_out1_15;
  wire [7:0] Switch83_out1_10;  // uint8
  reg [7:0] Unit_Delay32_out1_11;  // uint8
  wire [7:0] Add11_out1_11;  // uint8
  wire Ro10_relop1_1;
  reg  Unit_Delay57_out1_12;
  wire Switch49_out1_12;
  wire Switch105_out1_14;
  reg  Unit_Delay1_out1_16;
  wire CT55_out1_13;
  wire CT57_out1_11;
  wire signed [11:0] signal1_376;  // sfix12
  wire signed [11:0] s_655;  // sfix12
  wire switch_compare_1_28;
  wire signed [11:0] signal1_377;  // sfix12
  wire signed [11:0] signal1_378;  // sfix12
  wire signed [11:0] signal1_379;  // sfix12
  wire signed [11:0] Switch84_out1_8;  // sfix12
  wire signed [11:0] Switch97_out1_7;  // sfix12
  wire [7:0] Add12_out1_13;  // uint8
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_5;  // sfix12
  wire switch_compare_1_29;
  wire signed [11:0] Switch98_out1_7;  // sfix12
  wire signed [19:0] Add7_stage2_1;  // sfix20
  wire signed [19:0] Add7_stage2_2;  // sfix20
  wire signed [19:0] Add7_op_stage2_3;  // sfix20
  wire CT56_out1_10;
  reg signed [18:0] Unit_Delay30_out1_8;  // sfix19
  wire signed [18:0] B23_out1_signal2_1;  // sfix19
  reg signed [18:0] Unit_Delay33_out1_9;  // sfix19
  wire signed [18:0] B24_out1_signal2_2;  // sfix19
  wire signed [18:0] Switch79_out1_9;  // sfix19
  wire signed [18:0] Switch87_out1_8;  // sfix19
  wire signed [18:0] B24_out1_signal2_3;  // sfix19
  wire signed [18:0] signal2_373;  // sfix19
  wire signed [18:0] s_656;  // sfix19
  wire signed [18:0] signal2_374;  // sfix19
  wire signed [18:0] signal2_375;  // sfix19
  wire signed [18:0] signal2_376;  // sfix19
  wire signed [19:0] Add7_stage3_add_temp;  // sfix20
  wire signed [19:0] Add7_stage3_1;  // sfix20
  wire signed [18:0] Add7_out1_8;  // sfix19
  wire signed [18:0] Switch80_out1_6;  // sfix19
  wire [11:0] Bit_Slice6_out1_9;  // ufix12
  wire signed [11:0] Data_Type_S11_out1_8;  // sfix12
  wire signed [11:0] Switch107_out1_84;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_83;  // sfix12
  wire CT38_out1_4;
  wire CT32_out1_5;
  wire CT18_out1_4;
  wire signed [11:0] Switch107_out1_85;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_84;  // sfix12
  wire signed [11:0] Switch107_out1_86;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_85;  // sfix12
  wire signed [11:0] Switch107_out1_87;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_86;  // sfix12
  wire CT8_out1_5;
  wire CT74_out1_4;
  wire CT48_out1_4;
  wire signed [12:0] Unary_Minus43_in0;  // sfix13
  wire signed [11:0] Unary_Minus4_out1_3;  // sfix12
  wire CT40_out1_4;
  wire [11:0] Bit_Slice1_out1_10;  // ufix12
  wire signed [11:0] Data_Type_S1_out1_2;  // sfix12
  wire signed [11:0] Switch107_out1_88;  // sfix12
  reg signed [11:0] Unit_Delay39_out1_87;  // sfix12
  wire signed [12:0] Unary_Minus24_in0;  // sfix13
  wire signed [11:0] Unary_Minus2_out1_4;  // sfix12
  wire CT36_out1_5;
  wire CT34_out1_5;
  wire signed [12:0] Unary_Minus92_in0;  // sfix13
  wire signed [11:0] Unary_Minus9_out1_2;  // sfix12
  wire signed [12:0] Unary_Minus82_in0;  // sfix13
  wire signed [11:0] Unary_Minus8_out1_2;  // sfix12
  wire CT16_out1_6;
  wire CT5_out1_6;
  reg signed [11:0] Unit_Delay1_out1_17;  // sfix12
  wire signed [11:0] Data_Type_Conversion34_out1_1;  // sfix12
  wire signed [11:0] Switch3_out1_7;  // sfix12
  wire signed [12:0] Unary_Minus114_in0;  // sfix13
  wire signed [11:0] Unary_Minus1_out1_5;  // sfix12
  wire signed [11:0] mid1_out1;  // sfix12
  wire signed [12:0] Unary_Minus63_in0;  // sfix13
  wire signed [11:0] Unary_Minus6_out1_3;  // sfix12
  wire signed [11:0] Switch12_out1_6;  // sfix12
  reg signed [11:0] Unit_Delay14_out1_5;  // sfix12
  wire signed [11:0] Switch31_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay15_out1_5;  // sfix12
  wire signed [11:0] Switch33_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay17_out1_5;  // sfix12
  wire signed [11:0] Data_Type_Conversion33_out1;  // sfix12
  wire signed [11:0] Switch38_out1_4;  // sfix12
  wire signed [12:0] Unary_Minus34_in0;  // sfix13
  wire signed [11:0] Unary_Minus3_out1_4;  // sfix12
  wire signed [11:0] mid3_out1;  // sfix12
  wire signed [11:0] Data_Type_S12_out1_8;  // sfix12
  wire signed [12:0] Abs3_y;  // sfix13
  wire signed [11:0] Abs3_out1;  // sfix12
  wire signed [11:0] Data_Type_S13_out1_7;  // sfix12
  wire signed [12:0] Abs4_y;  // sfix13
  wire signed [11:0] Abs4_out1;  // sfix12
  wire [10:0] Bit_Slice2_out1_9;  // ufix11
  wire signed [10:0] Data_Type_Conversion2_out1_6;  // sfix11
  wire signed [11:0] Data_Type_Conversion8_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay21_out1_4;  // sfix12
  wire signed [11:0] Data_Type_Conversion35_out1;  // sfix12
  wire signed [11:0] Switch46_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus151_in0;  // sfix13
  wire signed [11:0] Unary_Minus15_out1_1;  // sfix12
  reg signed [12:0] Unit_Delay2_out1_7;  // sfix13
  wire [11:0] Bit_Slice1_out1_11;  // ufix12
  wire signed [11:0] Data_Type_S1_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay36_out1_5;  // sfix12
  wire signed [11:0] Switch74_out1_2;  // sfix12
  wire signed [12:0] Add29_1;  // sfix13
  wire signed [12:0] Add29_2;  // sfix13
  wire signed [12:0] Add2_out1_7;  // sfix13
  wire signed [12:0] Saturation3_out1_1;  // sfix13
  wire signed [11:0] Data_Type_Conversion6_out1_3;  // sfix12
  wire signed [11:0] signal2_377;  // sfix12
  wire signed [11:0] s_657;  // sfix12
  wire signed [11:0] signal2_378;  // sfix12
  wire signed [11:0] s_658;  // sfix12
  wire signed [11:0] signal2_379;  // sfix12
  wire signed [11:0] s_659;  // sfix12
  wire signed [11:0] signal2_380;  // sfix12
  wire signed [11:0] s_660;  // sfix12
  wire signed [11:0] signal2_381;  // sfix12
  wire signed [11:0] s_661;  // sfix12
  wire signed [11:0] signal2_382;  // sfix12
  wire signed [11:0] s_662;  // sfix12
  wire signed [11:0] signal2_383;  // sfix12
  wire signed [11:0] s_663;  // sfix12
  wire signed [11:0] signal2_384;  // sfix12
  wire signed [11:0] s_664;  // sfix12
  wire signed [11:0] signal2_385;  // sfix12
  wire signed [11:0] s_665;  // sfix12
  wire signed [11:0] signal2_386;  // sfix12
  wire signed [11:0] s_666;  // sfix12
  wire signed [11:0] signal2_387;  // sfix12
  wire signed [11:0] s_667;  // sfix12
  wire signed [11:0] signal2_388;  // sfix12
  wire signed [11:0] s_668;  // sfix12
  wire signed [11:0] signal2_389;  // sfix12
  wire signed [11:0] s_669;  // sfix12
  wire signed [11:0] signal2_390;  // sfix12
  wire signed [11:0] s_670;  // sfix12
  wire signed [11:0] signal2_391;  // sfix12
  wire signed [11:0] s_671;  // sfix12
  wire signed [11:0] signal2_392;  // sfix12
  wire signed [11:0] s_672;  // sfix12
  wire signed [11:0] min1_out1;  // sfix12
  wire signed [11:0] signal2_393;  // sfix12
  wire signed [11:0] s_673;  // sfix12
  wire signed [11:0] signal2_394;  // sfix12
  wire signed [11:0] s_674;  // sfix12
  wire signed [11:0] signal2_395;  // sfix12
  wire signed [11:0] s_675;  // sfix12
  wire signed [11:0] signal2_396;  // sfix12
  wire signed [11:0] s_676;  // sfix12
  wire signed [11:0] signal2_397;  // sfix12
  wire signed [11:0] s_677;  // sfix12
  wire signed [11:0] signal2_398;  // sfix12
  wire signed [11:0] s_678;  // sfix12
  wire signed [11:0] signal2_399;  // sfix12
  wire signed [11:0] signal2_400;  // sfix12
  reg signed [11:0] Unit_Delay5_out1_6;  // sfix12
  wire signed [11:0] Switch16_out1_3;  // sfix12
  wire signed [11:0] max2_out1;  // sfix12
  wire signed [12:0] Unary_Minus53_in0;  // sfix13
  wire signed [11:0] Unary_Minus5_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay7_out1_16;  // sfix12
  wire signed [11:0] Switch14_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay13_out1_5;  // sfix12
  wire signed [11:0] Switch29_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay16_out1_5;  // sfix12
  wire signed [11:0] Switch36_out1_2;  // sfix12
  wire signed [23:0] Product12_out1_2;  // sfix24
  wire [15:0] Bit_Slice16_out1_1;  // uint16
  wire signed [15:0] Data_Type_Conversion36_out1;  // int16
  wire signed [15:0] Saturation16_out1;  // int16
  reg signed [11:0] Unit_Delay19_out1_5;  // sfix12
  wire signed [11:0] Switch42_out1_3;  // sfix12
  wire signed [12:0] Unary_Minus102_in0;  // sfix13
  wire signed [11:0] Unary_Minus10_out1_2;  // sfix12
  wire signed [11:0] Data_Type_S11_out1_9;  // sfix12
  wire signed [12:0] Abs2_y;  // sfix13
  wire signed [11:0] Abs2_out1;  // sfix12
  reg signed [11:0] Unit_Delay25_out1_4;  // sfix12
  wire signed [11:0] Switch54_out1_4;  // sfix12
  wire [10:0] Bit_Slice3_out1_10;  // ufix11
  wire signed [10:0] Data_Type_Conversion9_out1_1;  // sfix11
  wire signed [11:0] Data_Type_Conversion10_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay34_out1_8;  // sfix12
  wire signed [11:0] Switch70_out1_3;  // sfix12
  wire Compare_To_Constant11_out1_1;
  wire signed [11:0] mid18_out1;  // sfix12
  wire signed [11:0] Switch33_out1_3;  // sfix12
  wire signed [11:0] Switch34_out1_3;  // sfix12
  wire signed [11:0] max3_out1;  // sfix12
  reg signed [18:0] Unit_Delay34_out1_9;  // sfix19
  wire [11:0] Bit_Slice2_out1_10;  // ufix12
  reg signed [18:0] Unit_Delay30_out1_9;  // sfix19
  wire [11:0] Bit_Slice6_out1_10;  // ufix12
  wire signed [18:0] Switch79_out1_10;  // sfix19
  wire signed [18:0] Switch80_out1_7;  // sfix19
  wire signed [18:0] Switch89_out1_7;  // sfix19
  reg signed [18:0] Unit_Delay35_out1_8;  // sfix19
  wire signed [18:0] Switch91_out1_7;  // sfix19
  wire signed [18:0] signal2_401;  // sfix19
  wire signed [18:0] s_679;  // sfix19
  wire signed [18:0] signal2_402;  // sfix19
  wire signed [18:0] s_680;  // sfix19
  reg signed [18:0] Unit_Delay33_out1_10;  // sfix19
  wire signed [18:0] signal2_403;  // sfix19
  wire signed [18:0] s_681;  // sfix19
  wire signed [18:0] signal2_404;  // sfix19
  wire signed [18:0] signal2_405;  // sfix19
  wire signed [18:0] signal2_406;  // sfix19
  wire signed [11:0] Switch84_out1_9;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_6;  // sfix12
  wire signed [11:0] Switch98_out1_8;  // sfix12
  reg signed [11:0] Unit_Delay3_out1_7;  // sfix12
  wire signed [11:0] Switch7_out1_5;  // sfix12
  reg signed [11:0] Unit_Delay4_out1_5;  // sfix12
  wire signed [11:0] Switch9_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay6_out1_7;  // sfix12
  wire signed [11:0] Switch11_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay2_out1_8;  // sfix12
  wire signed [11:0] signal1_380;  // sfix12
  wire signed [11:0] s_682;  // sfix12
  wire signed [11:0] signal1_381;  // sfix12
  wire signed [11:0] s_683;  // sfix12
  wire signed [11:0] signal1_382;  // sfix12
  wire signed [11:0] s_684;  // sfix12
  wire signed [11:0] signal1_383;  // sfix12
  wire signed [11:0] signal1_384;  // sfix12
  wire signed [11:0] signal1_385;  // sfix12
  wire signed [11:0] Switch97_out1_8;  // sfix12
  wire signed [19:0] Add7_stage24_1;  // sfix20
  wire signed [19:0] Add7_stage24_2;  // sfix20
  wire signed [19:0] Add7_op_stage2_4;  // sfix20
  wire signed [19:0] Add7_stage34_add_temp;  // sfix20
  wire signed [19:0] Add7_stage34_1;  // sfix20
  wire signed [18:0] Add7_out1_9;  // sfix19
  wire signed [18:0] Switch87_out1_9;  // sfix19
  wire [11:0] Bit_Slice1_out1_12;  // ufix12
  reg signed [11:0] Unit_Delay30_out1_10;  // sfix12
  wire signed [11:0] Data_Type_Conversion37_out1;  // sfix12
  wire signed [11:0] Switch62_out1_1;  // sfix12
  wire signed [11:0] signal2_407;  // sfix12
  wire signed [11:0] s_685;  // sfix12
  wire signed [11:0] signal2_408;  // sfix12
  wire signed [11:0] s_686;  // sfix12
  wire signed [11:0] signal2_409;  // sfix12
  wire signed [11:0] s_687;  // sfix12
  wire signed [11:0] signal2_410;  // sfix12
  wire signed [11:0] s_688;  // sfix12
  wire signed [11:0] signal2_411;  // sfix12
  wire signed [11:0] s_689;  // sfix12
  wire signed [11:0] signal2_412;  // sfix12
  wire signed [11:0] s_690;  // sfix12
  wire signed [11:0] signal2_413;  // sfix12
  wire signed [11:0] s_691;  // sfix12
  wire signed [11:0] signal2_414;  // sfix12
  wire signed [11:0] s_692;  // sfix12
  wire signed [11:0] signal2_415;  // sfix12
  wire signed [11:0] s_693;  // sfix12
  wire signed [11:0] signal2_416;  // sfix12
  wire signed [11:0] s_694;  // sfix12
  wire signed [11:0] signal2_417;  // sfix12
  wire signed [11:0] signal2_418;  // sfix12
  wire signed [11:0] Switch84_out1_10;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_7;  // sfix12
  wire signed [11:0] Switch98_out1_9;  // sfix12
  wire signed [11:0] Data_Type_S11_out1_10;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_8;  // sfix12
  reg signed [15:0] Unit_Delay30_out1_11;  // int16
  wire signed [15:0] signal2_419;  // int16
  wire signed [15:0] signal2_420;  // int16
  wire signed [15:0] signal2_421;  // int16
  wire signed [11:0] Switch84_out1_11;  // sfix12
  wire signed [11:0] Simple_Dual_Port_RAM2_out1_9;  // sfix12
  wire signed [11:0] Switch98_out1_10;  // sfix12
  wire signed [11:0] Switch5_out1_4;  // sfix12
  wire signed [11:0] signal1_386;  // sfix12
  wire signed [11:0] signal1_387;  // sfix12
  wire signed [11:0] signal1_388;  // sfix12
  wire signed [11:0] Switch97_out1_9;  // sfix12
  wire signed [16:0] Add7_stage25_1;  // sfix17
  wire signed [16:0] Add7_stage25_2;  // sfix17
  wire signed [16:0] Add7_op_stage2_5;  // sfix17
  wire signed [16:0] Add7_stage35_add_temp;  // sfix17
  wire signed [16:0] Add7_stage35_1;  // sfix17
  wire signed [15:0] Add7_out1_10;  // int16
  wire signed [15:0] Switch79_out1_11;  // int16
  wire signed [15:0] Switch80_out1_8;  // int16
  wire [11:0] Bit_Slice6_out1_11;  // ufix12
  wire signed [12:0] Add47_1;  // sfix13
  wire signed [12:0] Add47_2;  // sfix13
  wire signed [12:0] Add4_out1_6;  // sfix13
  wire signed [12:0] Saturation4_out1;  // sfix13
  wire signed [11:0] Data_Type_Conversion7_out1_3;  // sfix12
  wire signed [23:0] Product1_out1_3;  // sfix24
  wire [15:0] Bit_Slice1_out1_13;  // uint16
  wire signed [15:0] Data_Type_Conversion5_out1_3;  // int16
  wire signed [15:0] Saturation2_out1_1;  // int16
  wire signed [11:0] Data_Type_Conversion4_out1_5;  // sfix12
  wire signed [11:0] signal1_389;  // sfix12
  wire signed [11:0] s_695;  // sfix12
  wire signed [11:0] signal1_390;  // sfix12
  wire signed [11:0] signal1_391;  // sfix12
  wire signed [11:0] signal1_392;  // sfix12
  wire signed [11:0] Switch97_out1_10;  // sfix12
  wire signed [12:0] Add75_1;  // sfix13
  wire signed [12:0] Add75_2;  // sfix13
  wire signed [12:0] Add7_out1_11;  // sfix13
  wire signed [12:0] Switch79_out1_12;  // sfix13
  wire signed [12:0] Switch2_out1_3;  // sfix13
  wire signed [12:0] signal2_422;  // sfix13
  wire signed [12:0] s_696;  // sfix13
  reg signed [12:0] Unit_Delay30_out1_12;  // sfix13
  wire signed [12:0] signal2_423;  // sfix13
  wire signed [12:0] signal2_424;  // sfix13
  wire signed [12:0] signal2_425;  // sfix13
  wire signed [12:0] Switch1_out1_6;  // sfix13
  wire signed [12:0] Switch80_out1_9;  // sfix13
  wire [11:0] Bit_Slice6_out1_12;  // ufix12
  wire signed [11:0] Data_Type_S11_out1_11;  // sfix12
  reg signed [11:0] Unit_Delay10_out1_5;  // sfix12
  wire signed [11:0] Switch22_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay11_out1_5;  // sfix12
  wire signed [11:0] Switch24_out1_4;  // sfix12
  wire signed [11:0] Switch27_out1_4;  // sfix12
  reg signed [11:0] Unit_Delay18_out1_5;  // sfix12
  wire signed [11:0] Switch40_out1_3;  // sfix12
  reg signed [11:0] Unit_Delay31_out1_3;  // sfix12
  wire signed [11:0] Switch64_out1_2;  // sfix12
  wire [10:0] Bit_Slice18_out1;  // ufix11
  wire signed [10:0] Data_Type_Conversion40_out1;  // sfix11
  wire signed [11:0] Data_Type_Conversion39_out1;  // sfix12
  reg signed [11:0] Unit_Delay9_out1_4;  // sfix12
  wire RO86_relop1;
  wire signed [11:0] mid13_out1;  // sfix12
  wire signed [11:0] Switch20_out1_14;  // sfix12
  wire RO76_relop1;
  wire signed [11:0] mid12_out1;  // sfix12
  wire signed [11:0] mid11_out1;  // sfix12
  reg signed [11:0] Unit_Delay12_out1_5;  // sfix12
  wire signed [12:0] Unary_Minus142_in0;  // sfix13
  wire signed [11:0] Unary_Minus14_out1_2;  // sfix12
  wire RO93_relop1;
  wire signed [11:0] mid15_out1;  // sfix12
  wire signed [11:0] Switch26_out1_4;  // sfix12
  wire signed [12:0] Unary_Minus122_in0;  // sfix13
  wire signed [11:0] Unary_Minus12_out1_2;  // sfix12
  reg signed [11:0] Unit_Delay32_out1_12;  // sfix12
  wire signed [11:0] Switch66_out1_1;  // sfix12
  wire [10:0] Bit_Slice19_out1;  // ufix11
  wire signed [10:0] Data_Type_Conversion41_out1;  // sfix11
  wire signed [11:0] Data_Type_Conversion42_out1;  // sfix12
  wire RO103_relop1_1;
  wire signed [11:0] mid16_out1;  // sfix12
  wire signed [11:0] mid14_out1;  // sfix12
  wire signed [11:0] signal1_393;  // sfix12
  wire signed [11:0] s_697;  // sfix12
  wire signed [11:0] signal1_394;  // sfix12
  wire signed [11:0] s_698;  // sfix12
  wire signed [11:0] signal1_395;  // sfix12
  wire signed [11:0] s_699;  // sfix12
  wire signed [11:0] signal1_396;  // sfix12
  wire signed [11:0] s_700;  // sfix12
  wire signed [11:0] signal1_397;  // sfix12
  wire signed [11:0] s_701;  // sfix12
  wire signed [11:0] signal1_398;  // sfix12
  wire signed [11:0] s_702;  // sfix12
  wire signed [11:0] signal1_399;  // sfix12
  wire signed [11:0] s_703;  // sfix12
  wire signed [11:0] signal1_400;  // sfix12
  wire signed [11:0] s_704;  // sfix12
  wire signed [11:0] signal1_401;  // sfix12
  wire signed [11:0] s_705;  // sfix12
  wire signed [11:0] signal1_402;  // sfix12
  wire signed [11:0] s_706;  // sfix12
  wire signed [11:0] signal1_403;  // sfix12
  wire signed [11:0] signal1_404;  // sfix12
  wire [11:0] Bit_Slice15_out1_2;  // ufix12
  reg signed [11:0] Unit_Delay33_out1_11;  // sfix12
  wire signed [11:0] Switch68_out1_2;  // sfix12
  wire Compare_To_Constant10_out1_1;
  wire signed [11:0] mid17_out1;  // sfix12
  reg signed [11:0] Unit_Delay26_out1_4;  // sfix12
  wire signed [11:0] Switch56_out1_3;  // sfix12
  wire signed [12:0] Abs_y;  // sfix13
  wire signed [11:0] Abs_out1;  // sfix12
  wire RO117_relop1;
  wire signed [11:0] mid1_out1_1;  // sfix12
  wire RO217_relop1;
  wire signed [11:0] mid10_out1;  // sfix12
  reg signed [11:0] Unit_Delay20_out1_4;  // sfix12
  wire signed [11:0] Switch44_out1_3;  // sfix12
  wire signed [11:0] signal2_426;  // sfix12
  wire signed [11:0] s_707;  // sfix12
  wire signed [11:0] signal2_427;  // sfix12
  wire signed [11:0] signal2_428;  // sfix12
  reg signed [11:0] Unit_Delay8_out1_6;  // sfix12
  wire signed [12:0] Abs1_y;  // sfix13
  wire signed [11:0] Abs1_out1;  // sfix12
  wire CT4_out1_6;
  wire signed [11:0] Switch35_out1_3;  // sfix12
  wire [23:0] Switch86_out1_1;  // ufix24
  reg [23:0] Unit_Delay50_out1_5;  // ufix24
  wire [23:0] Switch122_out1_5;  // ufix24
  wire [23:0] Bitwise_Operator1_out1_2;  // ufix24
  wire signed [36:0] Product131_mul_temp;  // sfix37
  wire signed [24:0] Product131_1;  // sfix25
  wire signed [35:0] Product13_out1_1;  // sfix36
  wire Compare_To_Constant2_out1_1;
  reg [23:0] Unit_Delay38_out1_4;  // ufix24
  wire [23:0] Switch87_out1_10;  // ufix24
  wire signed [23:0] Data_Type_Conversion1_out1_5;  // sfix24
  wire signed [24:0] Unary_Minus71_in0;  // sfix25
  wire signed [23:0] Unary_Minus7_out1;  // sfix24
  wire signed [11:0] Switch18_out1_3;  // sfix12
  wire CT3_out1_6;
  wire signed [23:0] Switch1_out1_7;  // sfix24
  wire signed [23:0] signal1_405;  // sfix24
  wire signed [23:0] s_708;  // sfix24
  wire signed [23:0] signal1_406;  // sfix24
  wire signed [23:0] signal1_407;  // sfix24
  wire signed [35:0] Product15_out1;  // sfix36
  wire [23:0] Bit_Slice17_out1_1;  // ufix24
  wire signed [23:0] Data_Type_Conversion38_out1;  // sfix24
  wire signed [23:0] Saturation17_out1;  // sfix24
  reg signed [11:0] Unit_Delay35_out1_9;  // sfix12
  wire signed [11:0] Switch72_out1_3;  // sfix12
  wire RO118_relop1;
  wire signed [11:0] mid19_out1;  // sfix12
  wire RO125_relop1;
  wire signed [11:0] mid20_out1;  // sfix12
  wire signed [11:0] mid2_out1;  // sfix12
  wire signed [11:0] signal1_408;  // sfix12
  wire signed [11:0] s_709;  // sfix12
  wire signed [11:0] signal1_409;  // sfix12
  wire signed [11:0] s_710;  // sfix12
  wire signed [11:0] signal1_410;  // sfix12
  wire signed [11:0] s_711;  // sfix12
  wire signed [11:0] signal1_411;  // sfix12
  wire signed [11:0] s_712;  // sfix12
  wire signed [11:0] signal1_412;  // sfix12
  wire signed [11:0] s_713;  // sfix12
  wire signed [11:0] signal1_413;  // sfix12
  wire signed [11:0] s_714;  // sfix12
  wire signed [11:0] signal1_414;  // sfix12
  wire signed [11:0] s_715;  // sfix12
  wire signed [11:0] signal1_415;  // sfix12
  wire signed [11:0] s_716;  // sfix12
  wire signed [11:0] signal1_416;  // sfix12
  wire signed [11:0] s_717;  // sfix12
  wire signed [11:0] signal1_417;  // sfix12
  wire signed [11:0] s_718;  // sfix12
  wire signed [11:0] signal1_418;  // sfix12
  wire signed [11:0] s_719;  // sfix12
  wire signed [11:0] signal1_419;  // sfix12
  wire signed [11:0] s_720;  // sfix12
  wire signed [11:0] signal1_420;  // sfix12
  wire signed [11:0] s_721;  // sfix12
  wire signed [11:0] signal1_421;  // sfix12
  wire signed [11:0] s_722;  // sfix12
  wire signed [11:0] signal1_422;  // sfix12
  wire signed [11:0] s_723;  // sfix12
  wire signed [11:0] signal1_423;  // sfix12
  wire signed [11:0] s_724;  // sfix12
  wire signed [11:0] signal1_424;  // sfix12
  wire signed [11:0] s_725;  // sfix12
  wire signed [11:0] signal1_425;  // sfix12
  wire signed [11:0] s_726;  // sfix12
  wire signed [11:0] signal1_426;  // sfix12
  wire signed [11:0] s_727;  // sfix12
  wire signed [11:0] signal1_427;  // sfix12
  wire signed [11:0] signal1_428;  // sfix12
  wire signed [12:0] Add37_1;  // sfix13
  wire signed [12:0] Add37_2;  // sfix13
  wire signed [12:0] Add3_out1_7;  // sfix13
  wire signed [12:0] Saturation15_out1_1;  // sfix13
  reg signed [11:0] Unit_Delay37_out1_5;  // sfix12
  wire signed [11:0] Switch76_out1_3;  // sfix12
  wire [11:0] Add4_out1_7;  // ufix12
  wire [11:0] Switch1_out1_8;  // ufix12
  wire signed [11:0] Data_Type_Conversion1_out1_6;  // sfix12
  wire signed [11:0] Add6_out1_3;  // sfix12
  wire RO411_relop1;
  wire RO54_relop1;
  wire Logical_Operator5_out1_1;
  wire Data_Type_Conversion4_out1_6;
  reg  Unit_Delay58_out1_3;
  wire Switch94_out1_3;
  wire Dy9_relop1;
  wire [7:0] Switch3_out1_8;  // uint8
  wire Dy10_relop1;
  wire [7:0] Switch4_out1_4;  // uint8
  wire Dy713_relop1;
  wire [7:0] Add6_out1_4;  // uint8
  wire [7:0] Switch2_out1_4;  // uint8
  reg [7:0] Unit_Delay1_out1_18;  // uint8
  wire [7:0] Switch1_out1_9;  // uint8
  wire [8:0] Add616_add_temp;  // ufix9
  wire Switch82_out1_2;
  wire Cmp_out1;
  wire [11:0] Add3_out1_8;  // ufix12
  wire [11:0] Switch_out1_1;  // ufix12
  wire signed [11:0] Data_Type_Conversion3_out1_5;  // sfix12
  wire RO215_relop1;
  wire RO314_relop1;
  wire Logical_Operator3_out1_3;
  wire Data_Type_Conversion3_out1_6;
  reg  Unit_Delay57_out1_13;
  wire Switch92_out1_2;
  wire Dy71_relop1;
  wire [7:0] Add6_out1_5;  // uint8
  wire [7:0] Switch2_out1_5;  // uint8
  reg [7:0] Unit_Delay1_out1_19;  // uint8
  wire [7:0] Switch1_out1_10;  // uint8
  wire [8:0] Add64_add_temp;  // ufix9
  wire Switch80_out1_10;
  wire Logical_Operator2_out1_4;
  wire signed [2:0] Switch1_out1_11;  // sfix3
  wire Dy7_relop1;
  wire signed [7:0] Switch1_out1_12;  // int8
  wire Dy8_relop1;
  wire signed [7:0] Switch2_out1_6;  // int8
  wire CT1_out1_8;
  wire signed [7:0] Add6_out1_6;  // int8
  wire signed [7:0] Switch3_out1_9;  // int8
  wire Dy730_relop1;
  wire signed [7:0] Switch2_out1_7;  // int8
  reg signed [7:0] Unit_Delay1_out1_20;  // int8
  wire signed [8:0] Add633_add_temp;  // sfix9
  wire signed [8:0] Add633_1;  // sfix9
  wire signed [8:0] Add633_2;  // sfix9
  wire Data_Type_Conversion_out1;
  reg  Unit_Delay2_out1_9;
  wire Switch33_out1_4;
  wire Switch34_out1_4;
  wire Logical_Operator2_out1_5;
  wire signed [2:0] Switch1_out1_13;  // sfix3
  wire CT1_out1_9;
  wire signed [7:0] Add6_out1_7;  // int8
  wire signed [7:0] Switch3_out1_10;  // int8
  wire Dy76_relop1;
  wire signed [7:0] Switch2_out1_8;  // int8
  reg signed [7:0] Unit_Delay1_out1_21;  // int8
  wire signed [8:0] Add69_add_temp;  // sfix9
  wire signed [8:0] Add69_1;  // sfix9
  wire signed [8:0] Add69_2;  // sfix9
  wire Data_Type_Conversion_out1_1;
  reg  Unit_Delay2_out1_10;
  wire Switch33_out1_5;
  wire Switch34_out1_5;
  wire Logical_Operator2_out1_6;
  wire signed [2:0] Switch1_out1_14;  // sfix3
  wire Dy724_relop1;
  wire [7:0] Switch3_out1_11;  // uint8
  wire [7:0] Switch2_out1_9;  // uint8
  reg [7:0] Unit_Delay1_out1_22;  // uint8
  wire signed [9:0] Add627_add_temp;  // sfix10
  wire signed [9:0] Add627_1;  // sfix10
  wire signed [9:0] Add627_2;  // sfix10
  wire [7:0] Add6_out1_8;  // uint8
  wire Switch33_out1_6;
  wire Data_Type_Conversion_out1_2;
  wire Switch1_out1_15;
  reg  Unit_Delay1_out1_23;
  wire Switch4_out1_5;
  wire Data_Type_Conversion_out1_3;
  wire Not1_out1;
  wire Dy72_relop1;
  wire [7:0] Add6_out1_9;  // uint8
  wire [7:0] Switch2_out1_10;  // uint8
  reg [7:0] Unit_Delay1_out1_24;  // uint8
  wire [7:0] Switch1_out1_16;  // uint8
  wire [8:0] Add65_add_temp;  // ufix9
  wire Switch81_out1_5;
  wire Logical_Operator2_out1_7;
  wire signed [2:0] Switch1_out1_17;  // sfix3
  wire CT1_out1_10;
  wire signed [7:0] Add6_out1_10;  // int8
  wire signed [7:0] Switch3_out1_12;  // int8
  wire Dy75_relop1;
  wire signed [7:0] Switch2_out1_11;  // int8
  reg signed [7:0] Unit_Delay1_out1_25;  // int8
  wire signed [8:0] Add68_add_temp;  // sfix9
  wire signed [8:0] Add68_1;  // sfix9
  wire signed [8:0] Add68_2;  // sfix9
  wire Data_Type_Conversion_out1_4;
  reg  Unit_Delay2_out1_11;
  wire Switch33_out1_7;
  wire Switch34_out1_6;
  wire Not2_out1;
  wire Dy717_relop1;
  wire [7:0] Add6_out1_11;  // uint8
  wire [7:0] Switch2_out1_12;  // uint8
  reg [7:0] Unit_Delay1_out1_26;  // uint8
  wire [7:0] Switch1_out1_18;  // uint8
  wire [8:0] Add620_add_temp;  // ufix9
  wire Switch83_out1_11;
  wire Logical_Operator2_out1_8;
  wire signed [2:0] Switch1_out1_19;  // sfix3
  wire CT1_out1_11;
  wire signed [7:0] Add6_out1_12;  // int8
  wire signed [7:0] Switch3_out1_13;  // int8
  wire Dy77_relop1;
  wire signed [7:0] Switch2_out1_13;  // int8
  reg signed [7:0] Unit_Delay1_out1_27;  // int8
  wire signed [8:0] Add610_add_temp;  // sfix9
  wire signed [8:0] Add610_1;  // sfix9
  wire signed [8:0] Add610_2;  // sfix9
  wire Data_Type_Conversion_out1_5;
  reg  Unit_Delay2_out1_12;
  wire Switch33_out1_8;
  wire Switch34_out1_7;
  wire Logical_Operator2_out1_9;
  wire signed [2:0] Switch1_out1_20;  // sfix3
  wire Dy725_relop1;
  wire [7:0] Switch3_out1_14;  // uint8
  wire [7:0] Switch2_out1_14;  // uint8
  reg [7:0] Unit_Delay1_out1_28;  // uint8
  wire signed [9:0] Add628_add_temp;  // sfix10
  wire signed [9:0] Add628_1;  // sfix10
  wire signed [9:0] Add628_2;  // sfix10
  wire [7:0] Add6_out1_13;  // uint8
  wire Switch33_out1_9;
  wire Data_Type_Conversion_out1_6;
  wire Switch1_out1_21;
  reg  Unit_Delay1_out1_29;
  wire Switch4_out1_6;
  wire Data_Type_Conversion_out1_7;
  wire CT78_out1_6;
  reg signed [11:0] Unit_Delay39_out1_88;  // sfix12
  wire signed [11:0] Switch78_out1_2;  // sfix12
  wire RO85_relop1;
  wire RO92_relop1;
  wire Logical_Operator7_out1_1;
  wire Data_Type_Conversion6_out1_4;
  reg  Unit_Delay60_out1_2;
  wire Switch96_out1_4;
  wire Dy720_relop1;
  wire [7:0] Add6_out1_14;  // uint8
  wire [7:0] Switch2_out1_15;  // uint8
  reg [7:0] Unit_Delay1_out1_30;  // uint8
  wire [7:0] Switch1_out1_22;  // uint8
  wire [8:0] Add623_add_temp;  // ufix9
  wire Switch86_out1_2;
  wire RO63_relop1;
  wire RO75_relop1;
  wire Logical_Operator6_out1_1;
  wire Data_Type_Conversion5_out1_4;
  reg  Unit_Delay59_out1_3;
  wire Switch95_out1_4;
  wire Dy718_relop1;
  wire [7:0] Add6_out1_15;  // uint8
  wire [7:0] Switch2_out1_16;  // uint8
  reg [7:0] Unit_Delay1_out1_31;  // uint8
  wire [7:0] Switch1_out1_23;  // uint8
  wire [8:0] Add621_add_temp;  // ufix9
  wire Switch84_out1_12;
  wire Logical_Operator2_out1_10;
  wire signed [2:0] Switch1_out1_24;  // sfix3
  wire CT1_out1_12;
  wire signed [7:0] Add6_out1_16;  // int8
  wire signed [7:0] Switch3_out1_15;  // int8
  wire Dy78_relop1;
  wire signed [7:0] Switch2_out1_17;  // int8
  reg signed [7:0] Unit_Delay1_out1_32;  // int8
  wire signed [8:0] Add611_add_temp;  // sfix9
  wire signed [8:0] Add611_1;  // sfix9
  wire signed [8:0] Add611_2;  // sfix9
  wire Data_Type_Conversion_out1_8;
  reg  Unit_Delay2_out1_13;
  wire Switch33_out1_10;
  wire Switch34_out1_8;
  wire Logical_Operator2_out1_11;
  wire signed [2:0] Switch1_out1_25;  // sfix3
  wire CT1_out1_13;
  wire signed [7:0] Add6_out1_17;  // int8
  wire signed [7:0] Switch3_out1_16;  // int8
  wire Dy710_relop1;
  wire signed [7:0] Switch2_out1_18;  // int8
  reg signed [7:0] Unit_Delay1_out1_33;  // int8
  wire signed [8:0] Add613_add_temp;  // sfix9
  wire signed [8:0] Add613_1;  // sfix9
  wire signed [8:0] Add613_2;  // sfix9
  wire Data_Type_Conversion_out1_9;
  reg  Unit_Delay2_out1_14;
  wire Switch33_out1_11;
  wire Switch34_out1_9;
  wire Logical_Operator2_out1_12;
  wire signed [2:0] Switch1_out1_26;  // sfix3
  wire Dy726_relop1;
  wire [7:0] Switch3_out1_17;  // uint8
  wire [7:0] Switch2_out1_19;  // uint8
  reg [7:0] Unit_Delay1_out1_34;  // uint8
  wire signed [9:0] Add629_add_temp;  // sfix10
  wire signed [9:0] Add629_1;  // sfix10
  wire signed [9:0] Add629_2;  // sfix10
  wire [7:0] Add6_out1_18;  // uint8
  wire Switch33_out1_12;
  wire Data_Type_Conversion_out1_10;
  wire Switch1_out1_27;
  reg  Unit_Delay1_out1_35;
  wire Switch4_out1_7;
  wire Data_Type_Conversion_out1_11;
  wire Not3_out1;
  wire Dy719_relop1;
  wire [7:0] Add6_out1_19;  // uint8
  wire [7:0] Switch2_out1_20;  // uint8
  reg [7:0] Unit_Delay1_out1_36;  // uint8
  wire [7:0] Switch1_out1_28;  // uint8
  wire [8:0] Add622_add_temp;  // ufix9
  wire Switch85_out1;
  wire Logical_Operator2_out1_13;
  wire signed [2:0] Switch1_out1_29;  // sfix3
  wire CT1_out1_14;
  wire signed [7:0] Add6_out1_20;  // int8
  wire signed [7:0] Switch3_out1_18;  // int8
  wire Dy79_relop1;
  wire signed [7:0] Switch2_out1_21;  // int8
  reg signed [7:0] Unit_Delay1_out1_37;  // int8
  wire signed [8:0] Add612_add_temp;  // sfix9
  wire signed [8:0] Add612_1;  // sfix9
  wire signed [8:0] Add612_2;  // sfix9
  wire Data_Type_Conversion_out1_12;
  reg  Unit_Delay2_out1_15;
  wire Switch33_out1_13;
  wire Switch34_out1_10;
  wire Not4_out1;
  wire Dy721_relop1;
  wire [7:0] Add6_out1_21;  // uint8
  wire [7:0] Switch2_out1_22;  // uint8
  reg [7:0] Unit_Delay1_out1_38;  // uint8
  wire [7:0] Switch1_out1_30;  // uint8
  wire [8:0] Add624_add_temp;  // ufix9
  wire Switch87_out1_11;
  wire Logical_Operator2_out1_14;
  wire signed [2:0] Switch1_out1_31;  // sfix3
  wire CT1_out1_15;
  wire signed [7:0] Add6_out1_22;  // int8
  wire signed [7:0] Switch3_out1_19;  // int8
  wire Dy711_relop1;
  wire signed [7:0] Switch2_out1_23;  // int8
  reg signed [7:0] Unit_Delay1_out1_39;  // int8
  wire signed [8:0] Add614_add_temp;  // sfix9
  wire signed [8:0] Add614_1;  // sfix9
  wire signed [8:0] Add614_2;  // sfix9
  wire Data_Type_Conversion_out1_13;
  reg  Unit_Delay2_out1_16;
  wire Switch33_out1_14;
  wire Switch34_out1_11;
  wire Logical_Operator2_out1_15;
  wire signed [2:0] Switch1_out1_32;  // sfix3
  wire Dy727_relop1;
  wire [7:0] Switch3_out1_20;  // uint8
  wire [7:0] Switch2_out1_24;  // uint8
  reg [7:0] Unit_Delay1_out1_40;  // uint8
  wire signed [9:0] Add630_add_temp;  // sfix10
  wire signed [9:0] Add630_1;  // sfix10
  wire signed [9:0] Add630_2;  // sfix10
  wire [7:0] Add6_out1_23;  // uint8
  wire Switch33_out1_15;
  wire Data_Type_Conversion_out1_14;
  wire Switch1_out1_33;
  reg  Unit_Delay1_out1_41;
  wire Switch4_out1_8;
  wire Data_Type_Conversion_out1_15;
  wire CT80_out1_6;
  reg signed [11:0] Unit_Delay40_out1_3;  // sfix12
  wire signed [11:0] Switch80_out1_11;  // sfix12
  wire RO124_relop1;
  wire RO133_relop1;
  wire Logical_Operator10_out1_1;
  wire Data_Type_Conversion8_out1_3;
  reg  Unit_Delay62_out1_1;
  wire Switch98_out1_11;
  wire Dy73_relop1;
  wire [7:0] Add6_out1_24;  // uint8
  wire [7:0] Switch2_out1_25;  // uint8
  reg [7:0] Unit_Delay1_out1_42;  // uint8
  wire [7:0] Switch1_out1_34;  // uint8
  wire [8:0] Add66_add_temp;  // ufix9
  wire Switch90_out1_2;
  wire RO102_relop1_1;
  wire RO115_relop1;
  wire Logical_Operator8_out1;
  wire Data_Type_Conversion7_out1_4;
  reg  Unit_Delay61_out1_4;
  wire Switch97_out1_11;
  wire Dy722_relop1;
  wire [7:0] Add6_out1_25;  // uint8
  wire [7:0] Switch2_out1_26;  // uint8
  reg [7:0] Unit_Delay1_out1_43;  // uint8
  wire [7:0] Switch1_out1_35;  // uint8
  wire [8:0] Add625_add_temp;  // ufix9
  wire Switch88_out1_3;
  wire Logical_Operator2_out1_16;
  wire signed [2:0] Switch1_out1_36;  // sfix3
  wire CT1_out1_16;
  wire signed [7:0] Add6_out1_26;  // int8
  wire signed [7:0] Switch3_out1_21;  // int8
  wire Dy712_relop1;
  wire signed [7:0] Switch2_out1_27;  // int8
  reg signed [7:0] Unit_Delay1_out1_44;  // int8
  wire signed [8:0] Add615_add_temp;  // sfix9
  wire signed [8:0] Add615_1;  // sfix9
  wire signed [8:0] Add615_2;  // sfix9
  wire Data_Type_Conversion_out1_16;
  reg  Unit_Delay2_out1_17;
  wire Switch33_out1_16;
  wire Switch34_out1_12;
  wire Logical_Operator2_out1_17;
  wire signed [2:0] Switch1_out1_37;  // sfix3
  wire CT1_out1_17;
  wire signed [7:0] Add6_out1_27;  // int8
  wire signed [7:0] Switch3_out1_22;  // int8
  wire Dy715_relop1;
  wire signed [7:0] Switch2_out1_28;  // int8
  reg signed [7:0] Unit_Delay1_out1_45;  // int8
  wire signed [8:0] Add618_add_temp;  // sfix9
  wire signed [8:0] Add618_1;  // sfix9
  wire signed [8:0] Add618_2;  // sfix9
  wire Data_Type_Conversion_out1_17;
  reg  Unit_Delay2_out1_18;
  wire Switch33_out1_17;
  wire Switch34_out1_13;
  wire Logical_Operator2_out1_18;
  wire signed [2:0] Switch1_out1_38;  // sfix3
  wire Dy728_relop1;
  wire [7:0] Switch3_out1_23;  // uint8
  wire [7:0] Switch2_out1_29;  // uint8
  reg [7:0] Unit_Delay1_out1_46;  // uint8
  wire signed [9:0] Add631_add_temp;  // sfix10
  wire signed [9:0] Add631_1;  // sfix10
  wire signed [9:0] Add631_2;  // sfix10
  wire [7:0] Add6_out1_28;  // uint8
  wire Switch33_out1_18;
  wire Data_Type_Conversion_out1_18;
  wire Switch1_out1_39;
  reg  Unit_Delay1_out1_47;
  wire Switch4_out1_9;
  wire Data_Type_Conversion_out1_19;
  wire Not5_out1;
  wire Dy723_relop1;
  wire [7:0] Add6_out1_29;  // uint8
  wire [7:0] Switch2_out1_30;  // uint8
  reg [7:0] Unit_Delay1_out1_48;  // uint8
  wire [7:0] Switch1_out1_40;  // uint8
  wire [8:0] Add626_add_temp;  // ufix9
  wire Switch89_out1_8;
  wire Logical_Operator2_out1_19;
  wire signed [2:0] Switch1_out1_41;  // sfix3
  wire CT1_out1_18;
  wire signed [7:0] Add6_out1_30;  // int8
  wire signed [7:0] Switch3_out1_24;  // int8
  wire Dy714_relop1;
  wire signed [7:0] Switch2_out1_31;  // int8
  reg signed [7:0] Unit_Delay1_out1_49;  // int8
  wire signed [8:0] Add617_add_temp;  // sfix9
  wire signed [8:0] Add617_1;  // sfix9
  wire signed [8:0] Add617_2;  // sfix9
  wire Data_Type_Conversion_out1_20;
  reg  Unit_Delay2_out1_19;
  wire Switch33_out1_19;
  wire Switch34_out1_14;
  wire Not6_out1;
  wire Dy74_relop1;
  wire [7:0] Add6_out1_31;  // uint8
  wire [7:0] Switch2_out1_32;  // uint8
  reg [7:0] Unit_Delay1_out1_50;  // uint8
  wire [7:0] Switch1_out1_42;  // uint8
  wire [8:0] Add67_add_temp;  // ufix9
  wire Switch91_out1_8;
  wire Logical_Operator2_out1_20;
  wire signed [2:0] Switch1_out1_43;  // sfix3
  wire CT1_out1_19;
  wire signed [7:0] Add6_out1_32;  // int8
  wire signed [7:0] Switch3_out1_25;  // int8
  wire Dy716_relop1;
  wire signed [7:0] Switch2_out1_33;  // int8
  reg signed [7:0] Unit_Delay1_out1_51;  // int8
  wire signed [8:0] Add619_add_temp;  // sfix9
  wire signed [8:0] Add619_1;  // sfix9
  wire signed [8:0] Add619_2;  // sfix9
  wire Data_Type_Conversion_out1_21;
  reg  Unit_Delay2_out1_20;
  wire Switch33_out1_20;
  wire Switch34_out1_15;
  wire Logical_Operator2_out1_21;
  wire signed [2:0] Switch1_out1_44;  // sfix3
  wire Dy729_relop1;
  wire [7:0] Switch3_out1_26;  // uint8
  wire [7:0] Switch2_out1_34;  // uint8
  reg [7:0] Unit_Delay1_out1_52;  // uint8
  wire signed [9:0] Add632_add_temp;  // sfix10
  wire signed [9:0] Add632_1;  // sfix10
  wire signed [9:0] Add632_2;  // sfix10
  wire [7:0] Add6_out1_33;  // uint8
  wire Switch33_out1_21;
  wire Data_Type_Conversion_out1_22;
  wire Switch1_out1_45;
  reg  Unit_Delay1_out1_53;
  wire Switch4_out1_10;
  wire Data_Type_Conversion_out1_23;
  wire signed [13:0] Saturation4_out1_1;  // sfix14
  wire signed [11:0] Data_Type_Conversion8_out1_4;  // sfix12
  wire CT181_out1;
  reg signed [11:0] Unit_Delay146_out1;  // sfix12
  wire signed [11:0] Switch309_out1;  // sfix12
  wire Ro14_relop1_1;
  wire CT183_out1;
  reg signed [11:0] Unit_Delay147_out1;  // sfix12
  wire signed [11:0] Switch311_out1;  // sfix12
  wire Ro15_relop1_1;
  reg  Unit_Delay148_out1;
  wire Switch314_out1;
  wire Switch313_out1;
  wire [7:0] Bit_Slice7_out1_2;  // uint8
  reg [7:0] Unit_Delay8_out1_7;  // uint8
  wire Relational_Operator4_relop1;

  // 1 = 0.04us
  // 
  // Ki=1 represent 1/4096
  // 
  // Ki=1 represent 1/4096
  // 
  // Ki=1 represent 1/512
  // 
  // Ki=1 represent 1/4
  // 
  // Kp=1 represent 1/128
  // 
  // Ki=1 represent 1/4
  // 
  // Kp=1 represent 1/2^8=1/256
  // 
  // Ki=1 represent 4096/2^8=16
  // 
  // Kp=1 represent 1/32
  // 
  // Ki=1 represent 4
  // 
  // Kp=1 represent 1/32
  // 
  // Kp=1 represent 1/32
  // 
  // Ki=1 represent 4


  always @(posedge g_clk)
    begin : Unit_Delay592_process
      if (Rst_n == 1'b0) begin
        Unit_Delay59_out1 <= 1'b0;
      end
      else begin
        Unit_Delay59_out1 <= 1'b1;
      end
    end

  assign Soft_on = OR2_out1_2;
  
  assign Logical_Operator2_out1 =  ~ Unit_Delay59_out1;



  always @(posedge g_clk)
    begin : Unit_Delay143_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Logical_Operator2_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay591_process
      if (Rst_n == 1'b0) begin
        Unit_Delay59_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay59_out1_1 <= 1'b1;
      end
    end



  assign Logical_Operator1_out1 =  ~ Unit_Delay59_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay59_process
      if (Rst_n == 1'b0) begin
        Unit_Delay59_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay59_out1_2 <= 1'b1;
      end
    end



  assign Logical_Operator1_out1_1 =  ~ Unit_Delay59_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay581_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay58_out1 <= Switch139_out1;
      end
    end



  assign Add12_out1 = 7'b0000001 + Unit_Delay58_out1;



  assign CT73_out1 = Add12_out1 >= 7'b0101001;



  assign Logical_Operator_out1 = Logical_Operator1_out1_1 | CT73_out1;



  assign Switch126_out1 = (Logical_Operator_out1 == 1'b0 ? Add12_out1 :
              7'b0101001);



  always @(posedge g_clk)
    begin : Unit_Delay582_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay58_out1_1 <= Switch139_out1_1;
      end
    end



  assign Add12_out1_1 = 7'b0000001 + Unit_Delay58_out1_1;



  assign CT73_out1_1 = Add12_out1_1 >= 7'b0101100;



  assign Logical_Operator_out1_1 = Logical_Operator1_out1 | CT73_out1_1;



  assign Switch126_out1_1 = (Logical_Operator_out1_1 == 1'b0 ? Add12_out1_1 :
              7'b0101100);



  assign Switch139_out1_1 = (Logical_Operator_out1_2 == 1'b0 ? Switch126_out1_1 :
              7'b0000000);



  assign CT72_out1 = Switch139_out1_1 == 7'b0101010;



  assign Switch139_out1 = (CT72_out1 == 1'b0 ? Switch126_out1 :
              7'b0000000);



  assign CT72_out1_1 = Switch139_out1 == 7'b0101000;



  always @(posedge g_clk)
    begin : Unit_Delay241_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1 <= 1'b0;
      end
      else begin
        Unit_Delay24_out1 <= CT72_out1_1;
      end
    end



  assign Logical_Operator_out1_2 = Unit_Delay1_out1 | Unit_Delay24_out1;



  assign Or12_out1 =  ~ IDEL;



  assign Bit_Slice5_out1 = Um_ref_b12[11:3];



  assign Cmp14_out1 = Switch139_out1_1 == 7'b0001101;



  assign Cmp12_out1 = Switch139_out1_1 == 7'b0000011;



  always @(posedge g_clk)
    begin : Unit_Delay752_process
      if (Rst_n == 1'b0) begin
        Unit_Delay75_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay75_out1 <= Switch159_out1;
      end
    end



  assign bit_shift_out1 = Unit_Delay75_out1 >> 8'd1;



  assign Switch159_out1 = (Cmp12_out1 == 1'b0 ? bit_shift_out1 :
              12'b010000000000);



  assign Cmp13_out1 = Switch139_out1_1 == 7'b0000011;



  assign CT89_out1 = Switch139_out1_1 == 7'b0000010;



  assign CT90_out1 = Switch139_out1_1 == 7'b0000010;



  assign CT92_out1 = Switch139_out1_1 == 7'b0000100;



  assign CT94_out1 = Switch139_out1_1 == 7'b0000110;



  assign CT96_out1 = Switch139_out1_1 == 7'b0001000;



  assign CT159_out1 = Switch139_out1_1 == 7'b0001110;



  assign CT161_out1 = Switch139_out1_1 == 7'b0001111;



  assign CT98_out1 = Switch139_out1_1 == 7'b0010000;



  assign CT163_out1 = Switch139_out1_1 == 7'b0010010;



  assign CT100_out1 = Switch139_out1_1 == 7'b0010100;



  assign CT165_out1 = Switch139_out1_1 == 7'b0010101;



  assign CT167_out1 = Switch139_out1_1 == 7'b0010110;



  assign CT169_out1 = Switch139_out1_1 == 7'b0010111;



  assign CT139_out1 = Switch139_out1_1 == 7'b0011000;



  assign CT82_out1 = Switch139_out1 == 7'b0000010;



  assign CT77_out1 = Switch139_out1 == 7'b0000010;



  assign CT39_out1 = Switch139_out1 == 7'b0000011;



  assign CT40_out1 = Switch139_out1 == 7'b0000100;



  assign CT97_out1 = Switch139_out1 == 7'b0001001;



  assign CT98_out1_1 = Switch139_out1 == 7'b0001010;



  assign CT99_out1 = Switch139_out1 == 7'b0001011;



  assign CT100_out1_1 = Switch139_out1 == 7'b0001100;



  assign Logical_Operator5_out1 = CT100_out1_1 | (CT99_out1 | (CT98_out1_1 | (CT97_out1 | (CT40_out1 | (CT77_out1 | CT39_out1)))));



  assign CT64_out1 = Switch139_out1 == 7'b0001101;



  assign CT65_out1 = Switch139_out1 == 7'b0000110;



  assign CT66_out1 = Switch139_out1 == 7'b0000111;



  assign CT67_out1 = Switch139_out1 == 7'b0001110;



  assign CT111_out1 = Switch139_out1 == 7'b0001111;



  assign CT112_out1 = Switch139_out1 == 7'b0100000;



  assign Logical_Operator6_out1 = CT112_out1 | (CT111_out1 | (CT67_out1 | (CT65_out1 | CT66_out1)));



  assign CT5_out1 = Switch139_out1 == 7'b0000000;



  assign CT3_out1 = Switch139_out1 == 7'b0000001;



  assign CT43_out1 = Switch139_out1 == 7'b0000101;



  assign CT22_out1 = Switch139_out1 == 7'b0010000;



  assign CT21_out1 = Switch139_out1 == 7'b0010001;



  assign CT23_out1 = Switch139_out1 == 7'b0010010;



  assign CT35_out1 = Switch139_out1 == 7'b0011110;



  assign CT37_out1 = Switch139_out1 == 7'b0011111;



  assign CT28_out1 = Switch139_out1 == 7'b0100001;



  assign CT31_out1 = Switch139_out1 == 7'b0100010;



  assign CT33_out1 = Switch139_out1 == 7'b0100011;



  assign CT47_out1 = Switch139_out1 == 7'b0100100;



  assign CT49_out1 = Switch139_out1 == 7'b0100101;



  assign CT51_out1 = Switch139_out1 == 7'b0100110;



  assign Add1_out1 = 2'b01 + Unit_Delay7_out1;



  always @(posedge g_clk)
    begin : Unit_Delay76_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1 <= Add1_out1;
      end
    end



  assign CT32_out1 = Unit_Delay7_out1 == 2'b11;



  assign CT12_out1 = Unit_Delay7_out1 == 2'b00;



  assign Add12_out1_2 = 7'b0000001 + Unit_Delay5_out1;



  assign CT97_out1_1 = Add12_out1_2 >= 7'b0001000;



  assign Switch126_out1_2 = (CT97_out1_1 == 1'b0 ? Add12_out1_2 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay515_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch126_out1_2;
      end
    end



  assign CT16_out1 = Unit_Delay5_out1 == 7'b0000101;



  assign CT19_out1 = Unit_Delay5_out1 == 7'b0000101;



  assign CT20_out1 = Unit_Delay5_out1 == 7'b0000001;



  assign CT22_out1_1 = Unit_Delay5_out1 == 7'b0000010;



  assign CT24_out1 = Unit_Delay5_out1 == 7'b0000011;



  assign CT26_out1 = Unit_Delay5_out1 == 7'b0000100;



  assign CT44_out1 = Unit_Delay5_out1 == 7'b0000000;



  assign Add120_add_temp = 9'b000000001 + ({8'b0, Unit_Delay7_out1_1});
  assign Add1_out1_1 = Add120_add_temp[0];



  always @(posedge g_clk)
    begin : Unit_Delay713_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1_1 <= Add1_out1_1;
      end
    end



  assign CT56_out1 = Unit_Delay7_out1_1 == 1'b1;



  assign CT12_out1_1 = Unit_Delay7_out1_1 == 1'b0;



  assign Switch20_out1 = (Pulse50x64_Hz1 == 1'b0 ? Unit_Delay54_out1 :
              1'b1);



  assign Switch17_out1 = (CT12_out1_1 == 1'b0 ? Switch20_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay549_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch17_out1;
      end
    end



  assign Or3_out1 = Pulse50x64_Hz1 | Unit_Delay54_out1;



  always @(posedge g_clk)
    begin : Unit_Delay558_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Switch208_out1;
      end
    end



  assign Switch208_out1 = (CT12_out1_1 == 1'b0 ? Unit_Delay55_out1 :
              Or3_out1);



  assign CT70_out1 = Unit_Delay7_out1_1 == 1'b0;



  assign Or2_out1 = Switch208_out1 & CT70_out1;



  assign Switch83_out1 = (Switch208_out1 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1 = Switch83_out1 + Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay328_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay32_out1 <= Add11_out1;
      end
    end



  assign Ro107_relop1 = Unit_Delay32_out1 > Add11_out1;



  assign Switch49_out1 = (Ro107_relop1 == 1'b0 ? Unit_Delay57_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay579_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Switch49_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay155_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_1 <= Switch105_out1;
      end
    end



  assign Switch105_out1 = (Or2_out1 == 1'b0 ? Unit_Delay1_out1_1 :
              Unit_Delay57_out1);



  assign CT55_out1 = Unit_Delay7_out1_1 == 1'b0;



  assign CT57_out1 = Unit_Delay7_out1_1 == 1'b1;



  assign signal1 = (CT57_out1 == 1'b0 ? Ib_b12 :
              Ib_b12);



  assign s = signal1;

  assign switch_compare_1 = Switch105_out1 > 1'b0;



  assign signal1_1 = (CT55_out1 == 1'b0 ? s :
              Ia_b12);



  assign signal1_2 = signal1_1;

  assign signal1_3 = signal1_2;

  assign Switch84_out1 = (switch_compare_1 == 1'b0 ? 12'sb000000000000 :
              signal1_3);



  assign Switch97_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1);



  assign Add12_out1_3 = Add11_out1 + 7'b0000001;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch84_out1),
                                                               .wr_addr(Add11_out1),
                                                               .wr_en(Switch208_out1),
                                                               .rd_addr(Add12_out1_3),
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)
                                                               );

  assign switch_compare_1_1 = Switch105_out1 > 1'b0;



  assign Switch98_out1 = (Switch208_out1 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1);



  assign Add7_stage23_1 = {{7{Switch97_out1[11]}}, Switch97_out1};
  assign Add7_stage23_2 = {{7{Switch98_out1[11]}}, Switch98_out1};
  assign Add7_op_stage2 = Add7_stage23_1 - Add7_stage23_2;



  assign CT51_out1_1 = Unit_Delay7_out1_1 == 1'b0;



  assign Switch80_out1 = (CT51_out1_1 == 1'b0 ? Unit_Delay30_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay309_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 18'sb000000000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch80_out1;
      end
    end



  assign B23_out1_signal2 = Unit_Delay30_out1;

  assign B24_out1_signal2 = Unit_Delay33_out1;

  assign B24_out1_signal2_1 = Unit_Delay33_out1;

  assign signal2 = (CT57_out1 == 1'b0 ? B24_out1_signal2_1 :
              B24_out1_signal2);



  assign s_1 = signal2;

  assign signal2_1 = (CT55_out1 == 1'b0 ? s_1 :
              B23_out1_signal2);



  assign signal2_2 = signal2_1;

  assign signal2_3 = signal2_2;

  assign Add7_stage33_1 = {signal2_3[17], signal2_3};
  assign Add7_stage33_add_temp = Add7_op_stage2 + Add7_stage33_1;
  assign Add7_out1 = Add7_stage33_add_temp[17:0];



  assign Switch79_out1 = (switch_compare_1_1 == 1'b0 ? 18'sb000000000000000000 :
              Add7_out1);



  assign Switch87_out1 = (CT56_out1 == 1'b0 ? Unit_Delay33_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay339_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 18'sb000000000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch87_out1;
      end
    end



  assign Bit_Slice1_out1 = Unit_Delay33_out1[17:6];



  assign Data_Type_S12_out1 = Bit_Slice1_out1;



  always @(posedge g_clk)
    begin : Unit_Delay3971_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1 <= Switch107_out1;
      end
    end



  assign Switch107_out1 = (CT44_out1 == 1'b0 ? Unit_Delay39_out1 :
              Data_Type_S12_out1);



  assign Unary_Minus42_in0 =  - ({Switch107_out1[11], Switch107_out1});
  assign Unary_Minus4_out1 = Unary_Minus42_in0[11:0];



  assign signal1_4 = (CT26_out1 == 1'b0 ? Unary_Minus4_out1 :
              Unary_Minus4_out1);



  assign s_2 = signal1_4;

  assign Unary_Minus33_in0 =  - ({Switch107_out1[11], Switch107_out1});
  assign Unary_Minus3_out1 = Unary_Minus33_in0[11:0];



  assign signal1_5 = (CT24_out1 == 1'b0 ? s_2 :
              Unary_Minus3_out1);



  assign s_3 = signal1_5;

  assign Bit_Slice6_out1 = Unit_Delay30_out1[17:6];



  assign Data_Type_S11_out1 = Bit_Slice6_out1;



  always @(posedge g_clk)
    begin : Unit_Delay3970_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_1 <= Switch107_out1_1;
      end
    end



  assign Switch107_out1_1 = (CT44_out1 == 1'b0 ? Unit_Delay39_out1_1 :
              Data_Type_S11_out1);



  assign Unary_Minus23_in0 =  - ({Switch107_out1_1[11], Switch107_out1_1});
  assign Unary_Minus2_out1 = Unary_Minus23_in0[11:0];



  assign signal1_6 = (CT22_out1_1 == 1'b0 ? s_3 :
              Unary_Minus2_out1);



  assign s_4 = signal1_6;

  assign Unary_Minus112_in0 =  - ({Switch107_out1_1[11], Switch107_out1_1});
  assign Unary_Minus1_out1 = Unary_Minus112_in0[11:0];



  assign signal1_7 = (CT20_out1 == 1'b0 ? s_4 :
              Unary_Minus1_out1);



  assign signal1_8 = signal1_7;

  assign s_5 = signal1_8;

  assign CT17_out1 = Unit_Delay5_out1 == 7'b0000101;



  assign RO74_relop1 = CarryNum_b12 > 12'sb000011001000;



  assign Switch24_out1 = (RO74_relop1 == 1'b0 ? CarryNum_b12 :
              12'sb000011001000);



  assign RO410_relop1 = Switch24_out1 < 12'sb000000101000;



  assign Switch21_out1 = (RO410_relop1 == 1'b0 ? Switch24_out1 :
              12'sb000000101000);



  assign signal1_9 = (CT17_out1 == 1'b0 ? Switch21_out1 :
              Switch21_out1);



  assign signal1_10 = signal1_9;

  assign s_6 = signal1_10;

  assign signal2_4 = (CT26_out1 == 1'b0 ? DC_Ki_b12 :
              DC_Ki_b12);



  assign s_7 = signal2_4;

  assign signal2_5 = (CT24_out1 == 1'b0 ? s_7 :
              DC_Kp_b12);



  assign s_8 = signal2_5;

  assign signal2_6 = (CT22_out1_1 == 1'b0 ? s_8 :
              DC_Ki_b12);



  assign s_9 = signal2_6;

  assign signal2_7 = (CT20_out1 == 1'b0 ? s_9 :
              DC_Kp_b12);



  assign signal2_8 = signal2_7;

  assign Data_Type_Conversion4_out1 = {{12{signal2_8[11]}}, signal2_8};



 // assign signal2_9 = (CT17_out1 == 1'b0 ? w_b18 :
 //             w_b18);

  assign signal2_9 = (CT17_out1 == 1'b0 ? 18'd68716 :
              18'd68716 );

  assign signal2_10 = signal2_9;

  assign Data_Type_Conversion7_out1 = {{6{signal2_10[17]}}, signal2_10};



  assign signal1_11 = (CT19_out1 == 1'b0 ? s_5 :
              s_6);



  assign signal1_12 = signal1_11;

  assign signal2_11 = (CT19_out1 == 1'b0 ? Data_Type_Conversion4_out1 :
              Data_Type_Conversion7_out1);



  assign signal2_12 = signal2_11;

  assign Product_out1 = signal1_12 * signal2_12;



  assign RO123_relop1 = Product_out1 > 36'sh01FFFFFFF;



  assign Constant18_out1_dtc = 36'sh01FFFFFFF;



  assign Switch30_out1 = (RO123_relop1 == 1'b0 ? Product_out1 :
              Constant18_out1_dtc);



  assign RO84_relop1 = Switch30_out1 < 36'shFE0000001;



  assign Constant17_out1_dtc = 36'shFE0000001;



  assign Switch29_out1 = (RO84_relop1 == 1'b0 ? Switch30_out1 :
              Constant17_out1_dtc);



  assign Data_Type_Conversion8_out1 = Switch29_out1[29:0];



  assign Switch25_out1 = (CT16_out1 == 1'b0 ? Unit_Delay7_out1_2 :
              Data_Type_Conversion8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay714_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_2 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay7_out1_2 <= Switch25_out1;
      end
    end



  assign Switch81_out1 = (Sim_On == 1'b0 ? Unit_Delay7_out1_2 :
              Unit_Delay7_out1_2);



  assign Add82_1 = {{7{Switch81_out1[29]}}, Switch81_out1};
  assign Add82_2 = {2'b0, Unit_Delay2_out1};
  assign Add82_add_temp = Add82_1 + Add82_2;
  assign Add8_out1 = Add82_add_temp[34:0];



  always @(posedge g_clk)
    begin : Unit_Delay217_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 35'h000000000;
      end
      else begin
        Unit_Delay2_out1 <= Add8_out1;
      end
    end



  assign Bit_Slice5_out1_1 = Unit_Delay2_out1[34:23];



  assign Bit_Slice3_out1 = Bit_Slice5_out1_1[6:0];



  always @(posedge g_clk)
    begin : Unit_Delay535_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay53_out1 <= Bit_Slice3_out1;
      end
    end



  assign Relational_Operator3_relop1 = Bit_Slice3_out1 < Unit_Delay53_out1;



  assign Switch20_out1_1 = (Relational_Operator3_relop1 == 1'b0 ? Unit_Delay54_out1_1 :
              1'b1);



  assign Switch17_out1_1 = (CT12_out1 == 1'b0 ? Switch20_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay546_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_1 <= Switch17_out1_1;
      end
    end



  assign Or3_out1_1 = Relational_Operator3_relop1 | Unit_Delay54_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay555_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_1 <= Switch208_out1_1;
      end
    end



  assign Switch208_out1_1 = (CT12_out1 == 1'b0 ? Unit_Delay55_out1_1 :
              Or3_out1_1);



  assign CT70_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign Or2_out1_1 = Switch208_out1_1 & CT70_out1_1;



  assign Switch31_out1 = (Switch208_out1_1 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1_1 = Switch31_out1 + Unit_Delay13_out1;



  always @(posedge g_clk)
    begin : Unit_Delay132_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay13_out1 <= Add11_out1_1;
      end
    end



  assign Ro105_relop1 = Unit_Delay13_out1 > Add11_out1_1;



  assign Switch49_out1_1 = (Ro105_relop1 == 1'b0 ? Unit_Delay57_out1_1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay576_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_1 <= Switch49_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay432_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1 <= 1'b0;
      end
      else begin
        Unit_Delay43_out1 <= Switch105_out1_1;
      end
    end



  assign Switch105_out1_1 = (Or2_out1_1 == 1'b0 ? Unit_Delay43_out1 :
              Unit_Delay57_out1_1);



  assign switch_compare_1_2 = Switch105_out1_1 > 1'b0;



  assign switch_compare_1_3 = Switch105_out1_1 > 1'b0;



  assign CT55_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign CT57_out1_1 = Unit_Delay7_out1 == 2'b01;



  assign CT31_out1_1 = Unit_Delay7_out1 == 2'b10;



  assign CT33_out1_1 = Unit_Delay7_out1 == 2'b11;



  assign CT26_out1_1 = Switch139_out1_1 == 7'b0100111;



  assign CT46_out1 = Switch139_out1_1 >= 7'b0100011;



  assign CT47_out1_1 = Switch139_out1_1 <= 7'b0100111;



  assign Lo_out1 = CT46_out1 & CT47_out1_1;



  assign CT130_out1 = Switch139_out1_1 == 7'b0001111;



  assign CT174_out1 = Switch139_out1_1 == 7'b0101100;



  assign Lo1_out1 = CT174_out1 | (Lo_out1 | CT130_out1);



  assign CT43_out1_1 = Switch139_out1_1 == 7'b0000000;



  assign CT54_out1 = Switch139_out1_1 == 7'b0000001;



  assign CT68_out1 = Switch139_out1_1 == 7'b0000010;



  assign CT74_out1 = Switch139_out1_1 == 7'b0000011;



  assign CT76_out1 = Switch139_out1_1 == 7'b0000100;



  assign CT83_out1 = Switch139_out1_1 == 7'b0000101;



  assign CT85_out1 = Switch139_out1_1 == 7'b0000110;



  assign CT87_out1 = Switch139_out1_1 == 7'b0000111;



  assign CT101_out1 = Switch139_out1_1 == 7'b0001000;



  assign CT103_out1 = Switch139_out1_1 == 7'b0001001;



  assign CT39_out1_1 = Switch139_out1_1 == 7'b0001010;



  assign CT79_out1 = Switch139_out1_1 == 7'b0001011;



  assign CT121_out1 = Switch139_out1_1 == 7'b0001100;



  assign CT140_out1 = Switch139_out1_1 == 7'b0001101;



  assign CT146_out1 = Switch139_out1_1 == 7'b0001110;



  assign CT128_out1 = Switch139_out1_1 == 7'b0010000;



  assign CT148_out1 = Switch139_out1_1 == 7'b0010001;



  assign CT150_out1 = Switch139_out1_1 == 7'b0010010;



  assign CT152_out1 = Switch139_out1_1 == 7'b0010011;



  assign CT154_out1 = Switch139_out1_1 == 7'b0010100;



  assign CT156_out1 = Switch139_out1_1 == 7'b0010101;



  assign CT1_out1 = Switch139_out1_1 == 7'b0010110;



  assign CT3_out1_1 = Switch139_out1_1 == 7'b0010111;



  assign CT179_out1 = Switch139_out1_1 == 7'b0011000;



  assign CT5_out1_1 = Switch139_out1_1 == 7'b0011001;



  assign CT7_out1 = Switch139_out1_1 == 7'b0011010;



  assign CT9_out1 = Switch139_out1_1 == 7'b0011011;



  assign CT14_out1 = Switch139_out1_1 == 7'b0011100;



  assign CT60_out1 = Switch139_out1_1 == 7'b0101000;



  assign CT62_out1 = Switch139_out1_1 == 7'b0101001;



  assign CT171_out1 = Switch139_out1_1 == 7'b0101010;



  assign CT178_out1 = Switch139_out1_1 == 7'b0101011;



  assign signal1_13 = (CT178_out1 == 1'b0 ? IqRef_co_Lvrt_b12 :
              IqRef_co_Lvrt_b12);



  assign s_10 = signal1_13;

  assign signal1_14 = (CT171_out1 == 1'b0 ? s_10 :
              Um_ref_b12);



  assign s_11 = signal1_14;

  assign signal1_15 = (CT62_out1 == 1'b0 ? s_11 :
              Um_ref_b12);



  assign s_12 = signal1_15;

  assign signal1_16 = (CT60_out1 == 1'b0 ? s_12 :
              Um_ref_b12);



  assign s_13 = signal1_16;

  assign CT23_out1_1 = Switch139_out1_1 == 7'b0011000;



  assign CT24_out1_1 = Switch139_out1_1 == 7'b0011000;



  assign signal3 = (CT24_out1_1 == 1'b0 ? R_co_b12 :
              R_co_b12);



  assign signal3_1 = signal3;

  assign signal3_2 = signal3_1;

  assign CT2_out1 = Switch139_out1_1 == 7'b0010110;



  assign Constant1_out1_dtc = 48'sh0000003FFFFF;



  assign Constant3_out1_dtc = 48'shFFFFFFC00001;



  assign signal4 = (CT24_out1_1 == 1'b0 ? 12'sb011111111111 :
              12'sb011111111111);



  assign signal4_1 = signal4;

  assign signal4_2 = signal4_1;

  assign signal4_dtc = {{5{signal4_2[11]}}, signal4_2};



  assign signal5 = (CT24_out1_1 == 1'b0 ? R_co_b12 :
              R_co_b12);



  assign signal5_1 = signal5;

  assign signal5_2 = signal5_1;

  assign CT123_out1 = Switch139_out1_1 == 7'b0000000;



  assign Switch124_out1 = (Pulse_4096Hz == 1'b0 ? Unit_Delay52_out1 :
              1'b1);



  assign Switch123_out1 = (CT123_out1 == 1'b0 ? Switch124_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay522_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1 <= 1'b0;
      end
      else begin
        Unit_Delay52_out1 <= Switch123_out1;
      end
    end



  assign Or1_out1 = Pulse_4096Hz | Unit_Delay52_out1;



  always @(posedge g_clk)
    begin : Unit_Delay532_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1_1 <= Switch125_out1;
      end
    end



  assign Switch125_out1 = (CT123_out1 == 1'b0 ? Unit_Delay53_out1_1 :
              Or1_out1);



  assign OR4_out1 = Switch125_out1 & CtlLoop_On;



  assign switch_compare_1_4 = OR4_out1 > 1'b0;



  assign CT4_out1 = Switch139_out1_1 == 7'b0010111;



  assign CT22_out1_2 = Switch139_out1_1 == 7'b0011000;



  assign CT111_out1_1 = Switch139_out1_1 == 7'b0010101;



  assign CT48_out1 = Switch139_out1_1 == 7'b0001010;



  assign CT106_out1 = Switch139_out1_1 == 7'b0000000;



  assign CT108_out1 = Switch139_out1_1 == 7'b0000001;



  assign CT132_out1 = Switch139_out1_1 == 7'b0001101;



  assign CT125_out1 = Switch139_out1_1 == 7'b0001110;



  assign CT134_out1 = Switch139_out1_1 == 7'b0001111;



  assign CT112_out1_1 = Switch139_out1_1 == 7'b0010101;



  assign CT113_out1 = Switch139_out1_1 == 7'b0011010;



  assign CT114_out1 = Switch139_out1_1 == 7'b0011011;



  assign CT116_out1 = Switch139_out1_1 == 7'b0011100;



  assign CT117_out1 = Switch139_out1_1 == 7'b0011101;



  assign CT182_out1 = Switch139_out1_1 == 7'b0011110;



  assign CT184_out1 = Switch139_out1_1 == 7'b0011111;



  assign CT64_out1_1 = Switch139_out1_1 == 7'b0101001;



  assign CT176_out1 = Switch139_out1_1 == 7'b0101010;



  assign CT186_out1 = Switch139_out1_1 == 7'b0101010;



  assign CT170_out1 = Switch139_out1_1 == 7'b0101010;



  assign CT59_out1 = Switch139_out1_1 == 7'b0101000;



  assign CT180_out1 = Switch139_out1_1 == 7'b0011000;



  assign CT66_out1_1 = Unit_Delay7_out1 == 2'b10;



  assign Or_out1 = Excite_On | (UOpenLoop_En | (ILoop_En | UdcLoop_En));



  assign OR3_out1_2 =  ~ Or_out1;



  assign OR2_out1_2 = OR3_out1_2 & CtlLoop_On;



  assign CT49_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign CT50_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT65_out1_1 = Unit_Delay7_out1 == 2'b10;



  assign Add12_out1_4 = 7'b0000001 + Unit_Delay38_out1;



  assign CT97_out1_2 = Add12_out1_4 >= 7'b0110101;



  assign Switch126_out1_3 = (CT97_out1_2 == 1'b0 ? Add12_out1_4 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay38_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1 <= 7'b0000000;
      end
      else begin
        Unit_Delay38_out1 <= Switch126_out1_3;
      end
    end



  assign CT99_out1_1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT59_out1_1 = Unit_Delay38_out1 == 7'b0010101;



  assign CT5_out1_2 = Unit_Delay38_out1 == 7'b0000000;



  assign CT1_out1_1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT3_out1_2 = Unit_Delay38_out1 == 7'b0000010;



  assign CT2_out1_1 = Unit_Delay38_out1 == 7'b0000011;



  assign CT7_out1_1 = Unit_Delay38_out1 == 7'b0000100;



  assign CT4_out1_1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT14_out1_1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT15_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT101_out1_1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT103_out1_1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT104_out1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT17_out1_1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT18_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT19_out1_1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT21_out1_1 = Unit_Delay38_out1 == 7'b0001110;



  assign CT22_out1_3 = Unit_Delay38_out1 == 7'b0001111;



  assign CT47_out1_2 = Unit_Delay38_out1 == 7'b0010000;



  assign CT48_out1_1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT49_out1_2 = Unit_Delay38_out1 == 7'b0010010;



  assign CT50_out1_1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT51_out1_2 = Unit_Delay38_out1 == 7'b0010100;



  assign CT52_out1 = Unit_Delay38_out1 == 7'b0010101;



  assign CT53_out1 = Unit_Delay38_out1 == 7'b0010110;



  assign CT54_out1_1 = Unit_Delay38_out1 == 7'b0010111;



  assign CT61_out1 = Unit_Delay38_out1 == 7'b0011000;



  assign CT62_out1_1 = Unit_Delay38_out1 == 7'b0011001;



  assign CT63_out1 = Unit_Delay38_out1 == 7'b0011010;



  assign CT64_out1_2 = Unit_Delay38_out1 == 7'b0011011;



  assign CT65_out1_2 = Unit_Delay38_out1 == 7'b0011100;



  assign CT66_out1_2 = Unit_Delay38_out1 == 7'b0011101;



  assign CT67_out1_1 = Unit_Delay38_out1 == 7'b0011110;



  assign CT68_out1_1 = Unit_Delay38_out1 == 7'b0011111;



  assign CT73_out1_2 = Unit_Delay38_out1 == 7'b0100000;



  assign CT74_out1_1 = Unit_Delay38_out1 == 7'b0100001;



  assign CT75_out1 = Unit_Delay38_out1 == 7'b0100010;



  assign CT76_out1_1 = Unit_Delay38_out1 == 7'b0100011;



  assign CT79_out1_1 = Unit_Delay38_out1 == 7'b0100100;



  assign CT80_out1 = Unit_Delay38_out1 == 7'b0100101;



  assign CT81_out1 = Unit_Delay38_out1 == 7'b0100110;



  assign CT82_out1_1 = Unit_Delay38_out1 == 7'b0100111;



  assign CT91_out1 = Unit_Delay38_out1 == 7'b0101001;



  assign CT92_out1_1 = Unit_Delay38_out1 == 7'b0101010;



  assign CT93_out1 = Unit_Delay38_out1 == 7'b0101011;



  assign CT94_out1_1 = Unit_Delay38_out1 == 7'b0101100;



  assign CT118_out1 = Unit_Delay38_out1 == 7'b0101101;



  assign CT119_out1 = Unit_Delay38_out1 == 7'b0101110;



  assign CT120_out1 = Unit_Delay38_out1 == 7'b0101111;



  assign CT121_out1_1 = Unit_Delay38_out1 == 7'b0110000;



  assign CT122_out1 = Unit_Delay38_out1 == 7'b0110001;



  assign CT123_out1_1 = Unit_Delay38_out1 == 7'b0110010;



  assign CT124_out1 = Unit_Delay38_out1 == 7'b0110011;



  assign CT125_out1_1 = Unit_Delay38_out1 == 7'b0110100;



  assign CT114_out1_1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT6_out1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT8_out1 = Unit_Delay38_out1 == 7'b0000001;



  assign CT9_out1_1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT117_out1_1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT111_out1_2 = Unit_Delay38_out1 == 7'b0000111;



  assign CT113_out1_1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT115_out1 = Unit_Delay38_out1 == 7'b0001001;



  assign CT90_out1_1 = Unit_Delay38_out1 == 7'b0001011;



  assign CT30_out1 = Unit_Delay38_out1 == 7'b0001100;



  assign CT32_out1_1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT34_out1 = Unit_Delay38_out1 == 7'b0001110;



  assign CT46_out1_1 = Unit_Delay38_out1 == 7'b0010000;



  assign CT40_out1_1 = Unit_Delay38_out1 == 7'b0010001;



  assign CT42_out1 = Unit_Delay38_out1 == 7'b0010010;



  assign CT44_out1_1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT86_out1 = Unit_Delay38_out1 == 7'b0100110;



  assign CT88_out1 = Unit_Delay38_out1 == 7'b0101000;



  assign CT78_out1 = Unit_Delay38_out1 == 7'b0100011;



  assign CT77_out1_1 = Unit_Delay38_out1 == 7'b0100001;



  assign CT23_out1_2 = Unit_Delay38_out1 == 7'b0001111;



  assign CT20_out1_1 = Unit_Delay38_out1 == 7'b0001101;



  assign CT16_out1_1 = Unit_Delay38_out1 == 7'b0000101;



  assign CT13_out1 = Unit_Delay38_out1 == 7'b0000010;



  assign CT105_out1 = Unit_Delay38_out1 == 7'b0001010;



  assign CT102_out1 = Unit_Delay38_out1 == 7'b0001000;



  assign CT98_out1_2 = Unit_Delay38_out1 == 7'b0000000;



  assign Add31_2 = {{2{Ia_b12[11]}}, Ia_b12};
  assign Add31_3 = {{2{Ib_b12[11]}}, Ib_b12};
  assign Add31_add_temp = Add31_2 + Add31_3;
  assign Add31_1 = {{2{Ic_b12[11]}}, Ic_b12};
  assign Add3_out1 = Add31_add_temp + Add31_1;



  assign Product12_out1 = Add3_out1 * 12'sb001010101010;



  assign Bit_Slice15_out1 = Product12_out1[25:11];



  assign Data_Type_Conversion7_out1_1 = Bit_Slice15_out1;



  assign Saturation15_out1 = (Data_Type_Conversion7_out1_1 > 15'sb000011111111111 ? 15'sb000011111111111 :
              (Data_Type_Conversion7_out1_1 < 15'sb111100000000001 ? 15'sb111100000000001 :
              Data_Type_Conversion7_out1_1));



  assign Data_Type_Conversion34_out1 = Saturation15_out1[11:0];



  assign Add11_1 = {Ic_b12[11], Ic_b12};
  assign Add11_2 = {Data_Type_Conversion34_out1[11], Data_Type_Conversion34_out1};
  assign Add1_out1_2 = Add11_1 - Add11_2;



  assign Saturation1_out1 = (Add1_out1_2 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add1_out1_2 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add1_out1_2));



  assign Data_Type_Conversion3_out1 = Saturation1_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3927_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_2 <= Switch107_out1_2;
      end
    end



  assign Switch107_out1_2 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_2 :
              Data_Type_Conversion3_out1);



  assign Add21_1 = {Ib_b12[11], Ib_b12};
  assign Add21_2 = {Data_Type_Conversion34_out1[11], Data_Type_Conversion34_out1};
  assign Add2_out1 = Add21_1 - Add21_2;



  assign Saturation2_out1 = (Add2_out1 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add2_out1 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add2_out1));



  assign Data_Type_Conversion5_out1 = Saturation2_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3926_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_3 <= Switch107_out1_3;
      end
    end



  assign Switch107_out1_3 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_3 :
              Data_Type_Conversion5_out1);



  assign Add41_1 = {Ia_b12[11], Ia_b12};
  assign Add41_2 = {Data_Type_Conversion34_out1[11], Data_Type_Conversion34_out1};
  assign Add4_out1 = Add41_1 - Add41_2;



  assign Saturation3_out1 = (Add4_out1 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add4_out1 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add4_out1));



  assign Data_Type_Conversion6_out1 = Saturation3_out1[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3923_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_4 <= Switch107_out1_4;
      end
    end



  assign Switch107_out1_4 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_4 :
              Data_Type_Conversion6_out1);



  assign CT84_out1 = Unit_Delay38_out1 == 7'b0100111;



  assign CT83_out1_1 = Unit_Delay38_out1 == 7'b0100101;



  assign Add1_out1_3 = 2'b01 + Unit_Delay10_out1;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 2'b00;
      end
      else begin
        Unit_Delay10_out1 <= Add1_out1_3;
      end
    end



  assign CT25_out1 = Unit_Delay10_out1 == 2'b10;



  assign CT24_out1_2 = Unit_Delay10_out1 == 2'b00;



  assign Switch209_out1 = (Pulse50x256_Hz1 == 1'b0 ? Unit_Delay32_out1_1 :
              1'b1);



  assign Switch82_out1 = (CT24_out1_2 == 1'b0 ? Switch209_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay32_out1_1 <= Switch82_out1;
      end
    end



  assign Or4_out1_1 = Pulse50x256_Hz1 | Unit_Delay32_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay56_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1 <= Switch210_out1;
      end
    end



  assign Switch210_out1 = (CT24_out1_2 == 1'b0 ? Unit_Delay56_out1 :
              Or4_out1_1);



  assign CT36_out1 = Unit_Delay10_out1 == 2'b00;



  assign CT38_out1 = Unit_Delay10_out1 == 2'b01;



  assign CT26_out1_2 = Unit_Delay10_out1 == 2'b10;



  assign CT28_out1_1 = Unit_Delay10_out1 == 2'b11;



  assign CT27_out1 = Unit_Delay10_out1 == 2'b11;



  assign CT37_out1_1 = Unit_Delay10_out1 == 2'b01;



  assign CT35_out1_1 = Unit_Delay10_out1 == 2'b00;



  assign Switch50_out1 = (Switch210_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  always @(posedge g_clk)
    begin : Unit_Delay16_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay16_out1 <= Add16_out1;
      end
    end



  assign Add16_out1 = Switch50_out1 + Unit_Delay16_out1;



  assign Add19_out1 = Add16_out1 + 8'b00000001;



  assign Add2_out1_1 = 2'b01 + Unit_Delay51_out1;



  always @(posedge g_clk)
    begin : Unit_Delay51_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1 <= 2'b00;
      end
      else begin
        Unit_Delay51_out1 <= Add2_out1_1;
      end
    end



  assign CT106_out1_1 = Unit_Delay51_out1 == 2'b00;



  assign CT131_out1 = Unit_Delay51_out1 == 2'b00;



  assign Switch137_out1 = (Pulse50x256_Hz1 == 1'b0 ? Unit_Delay53_out1_2 :
              1'b1);



  assign Switch141_out1 = (CT131_out1 == 1'b0 ? Switch137_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay53_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1_2 <= Switch141_out1;
      end
    end



  assign Or1_out1_1 = Pulse50x256_Hz1 | Unit_Delay53_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_2 <= Switch138_out1;
      end
    end



  assign Switch138_out1 = (CT131_out1 == 1'b0 ? Unit_Delay54_out1_2 :
              Or1_out1_1);



  assign CT107_out1 = Unit_Delay51_out1 == 2'b00;



  assign CT109_out1 = Unit_Delay51_out1 == 2'b01;



  assign CT108_out1_1 = Unit_Delay51_out1 == 2'b01;



  assign Switch140_out1 = (Switch138_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  always @(posedge g_clk)
    begin : Unit_Delay52_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1_1 <= 8'b00000000;
      end
      else begin
        Unit_Delay52_out1_1 <= Add3_out1_1;
      end
    end



  assign Add3_out1_1 = Switch140_out1 + Unit_Delay52_out1_1;



  assign Add5_out1 = Add3_out1_1 + 8'b00000001;



  always @(posedge g_clk)
    begin : Unit_Delay3918_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_5 <= Switch107_out1_5;
      end
    end



  assign Switch107_out1_5 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_5 :
              Ic_CT);



  assign Unary_Minus12_in0 =  - ({Switch107_out1_5[11], Switch107_out1_5});
  assign Unary_Minus12_out1 = Unary_Minus12_in0[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3917_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_6 <= Switch107_out1_6;
      end
    end



  assign Switch107_out1_6 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_6 :
              Ib_CT);



  assign Unary_Minus11_in0 =  - ({Switch107_out1_6[11], Switch107_out1_6});
  assign Unary_Minus11_out1 = Unary_Minus11_in0[11:0];



  always @(posedge g_clk)
    begin : Unit_Delay3916_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_7 <= Switch107_out1_7;
      end
    end



  assign Switch107_out1_7 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_7 :
              Ia_CT);



  assign Unary_Minus10_in0 =  - ({Switch107_out1_7[11], Switch107_out1_7});
  assign Unary_Minus10_out1 = Unary_Minus10_in0[11:0];



  assign CT112_out1_2 = Unit_Delay38_out1 == 7'b0001000;



  assign CT110_out1 = Unit_Delay38_out1 == 7'b0000111;



  assign CT116_out1_1 = Unit_Delay38_out1 == 7'b0000110;



  assign CT87_out1_1 = Unit_Delay38_out1 == 7'b0101000;



  assign CT85_out1_1 = Unit_Delay38_out1 == 7'b0100110;



  assign Add4_out1_1 = 7'b0000001 + Unit_Delay43_out1_1;



  assign CT43_out1_2 = Add4_out1_1 >= 7'b0011110;



  assign Switch48_out1 = (CT43_out1_2 == 1'b0 ? Add4_out1_1 :
              7'b0000000);



  always @(posedge g_clk)
    begin : Unit_Delay433_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay43_out1_1 <= Switch48_out1;
      end
    end



  assign CT79_out1_2 = Unit_Delay43_out1_1 == 7'b0000000;



  assign CT75_out1_1 = Unit_Delay43_out1_1 == 7'b0011001;



  assign CT65_out1_3 = Unit_Delay43_out1_1 == 7'b0010110;



  assign CT68_out1_2 = Unit_Delay43_out1_1 == 7'b0010111;



  assign CT71_out1 = Unit_Delay43_out1_1 == 7'b0011000;



  assign CT76_out1_2 = Unit_Delay43_out1_1 == 7'b0011001;



  assign CT41_out1 = Unit_Delay43_out1_1 == 7'b0001101;



  assign CT61_out1_1 = Unit_Delay43_out1_1 <= 7'b0000111;



  assign CT62_out1_2 = Unit_Delay43_out1_1 <= 7'b0001101;



  assign CT52_out1_1 = Unit_Delay43_out1_1 == 7'b0001110;



  assign CT47_out1_3 = Unit_Delay43_out1_1 == 7'b0001111;



  assign CT51_out1_3 = Unit_Delay43_out1_1 == 7'b0010000;



  assign CT50_out1_2 = Unit_Delay43_out1_1 == 7'b0010001;



  assign CT60_out1_1 = Unit_Delay43_out1_1 == 7'b0010010;



  assign CT55_out1_2 = Unit_Delay43_out1_1 == 7'b0010011;



  assign CT59_out1_2 = Unit_Delay43_out1_1 == 7'b0010100;



  assign CT58_out1 = Unit_Delay43_out1_1 == 7'b0010101;



  assign CT87_out1_2 = Unit_Delay43_out1_1 == 7'b0010110;



  assign CT89_out1_1 = Unit_Delay43_out1_1 == 7'b0010111;



  assign CT91_out1_1 = Unit_Delay43_out1_1 == 7'b0011000;



  assign CT93_out1_1 = Unit_Delay43_out1_1 == 7'b0011001;



  assign CT110_out1_1 = Unit_Delay43_out1_1 == 7'b0011010;



  assign CT112_out1_3 = Unit_Delay43_out1_1 == 7'b0011011;



  assign CT114_out1_2 = Unit_Delay43_out1_1 == 7'b0011100;



  assign CT116_out1_2 = Unit_Delay43_out1_1 == 7'b0011101;



  assign CT103_out1_2 = Unit_Delay43_out1_1 == 7'b0010000;



  assign CT77_out1_2 = Unit_Delay43_out1_1 == 7'b0000000;



  assign CT18_out1_1 = Unit_Delay43_out1_1 == 7'b0000001;



  assign CT28_out1_2 = Unit_Delay43_out1_1 == 7'b0000010;



  assign CT27_out1_1 = Unit_Delay43_out1_1 == 7'b0000011;



  assign CT83_out1_2 = Unit_Delay43_out1_1 == 7'b0000100;



  assign CT73_out1_3 = Unit_Delay43_out1_1 == 7'b0000101;



  assign CT82_out1_2 = Unit_Delay43_out1_1 == 7'b0000110;



  assign CT81_out1_1 = Unit_Delay43_out1_1 == 7'b0000111;



  assign CT34_out1_1 = Unit_Delay43_out1_1 == 7'b0001000;



  assign CT36_out1_1 = Unit_Delay43_out1_1 == 7'b0001001;



  assign CT101_out1_2 = Unit_Delay43_out1_1 == 7'b0001010;



  assign CT100_out1_2 = Unit_Delay43_out1_1 == 7'b0001011;



  assign CT95_out1 = Unit_Delay43_out1_1 == 7'b0001100;



  assign CT97_out1_3 = Unit_Delay43_out1_1 == 7'b0001101;



  assign CT102_out1_1 = Unit_Delay43_out1_1 == 7'b0001110;



  assign CT85_out1_2 = Unit_Delay43_out1_1 == 7'b0001111;



  assign CT104_out1_1 = Unit_Delay43_out1_1 == 7'b0010000;



  assign CT106_out1_2 = Unit_Delay43_out1_1 == 7'b0010001;



  always @(posedge g_clk)
    begin : Unit_Delay3943_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_8 <= Switch107_out1_8;
      end
    end



  //assign Switch107_out1_8 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_8 :
              //12'sb000000000000);
    assign Switch107_out1_8 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_8 :
              Iqn_ref2);


  assign CT78_out1_1 = Unit_Delay43_out1_1 == 7'b0000000;



  assign Add1_out1_4 = 2'b01 + Unit_Delay7_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay72_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_3 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_3 <= Add1_out1_4;
      end
    end



  assign CT60_out1_2 = Unit_Delay7_out1_3 == 2'b11;



  assign CT12_out1_2 = Unit_Delay7_out1_3 == 2'b00;



  assign Switch20_out1_2 = (Relational_Operator3_relop1 == 1'b0 ? Unit_Delay54_out1_3 :
              1'b1);



  assign Switch17_out1_2 = (CT12_out1_2 == 1'b0 ? Switch20_out1_2 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay542_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_3 <= Switch17_out1_2;
      end
    end



  assign Or3_out1_3 = Relational_Operator3_relop1 | Unit_Delay54_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay551_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_2 <= Switch208_out1_2;
      end
    end



  assign Switch208_out1_2 = (CT12_out1_2 == 1'b0 ? Unit_Delay55_out1_2 :
              Or3_out1_3);



  assign CT70_out1_2 = Unit_Delay7_out1_3 == 2'b00;



  assign Or2_out1_3 = Switch208_out1_2 & CT70_out1_2;



  assign Switch83_out1_1 = (Switch208_out1_2 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  assign Add11_out1_2 = Switch83_out1_1 + Unit_Delay32_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay322_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_2 <= 9'b000000000;
      end
      else begin
        Unit_Delay32_out1_2 <= Add11_out1_2;
      end
    end



  assign Ro101_relop1 = Unit_Delay32_out1_2 > Add11_out1_2;



  assign Switch49_out1_2 = (Ro101_relop1 == 1'b0 ? Unit_Delay57_out1_2 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay571_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_2 <= Switch49_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay111_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_2 <= Switch105_out1_2;
      end
    end



  assign Switch105_out1_2 = (Or2_out1_3 == 1'b0 ? Unit_Delay1_out1_2 :
              Unit_Delay57_out1_2);



  assign switch_compare_1_5 = Switch105_out1_2 > 1'b0;



  assign switch_compare_1_6 = Switch105_out1_2 > 1'b0;



  assign CT55_out1_3 = Unit_Delay7_out1_3 == 2'b00;



  assign CT57_out1_2 = Unit_Delay7_out1_3 == 2'b01;



  assign CT59_out1_3 = Unit_Delay7_out1_3 == 2'b10;



  assign CT61_out1_2 = Unit_Delay7_out1_3 == 2'b11;



  assign CT60_out1_3 = Unit_Delay38_out1 == 7'b0010111;



  assign CT58_out1_1 = Unit_Delay38_out1 == 7'b0010011;



  assign CT57_out1_3 = Unit_Delay38_out1 == 7'b0010001;



  assign Add12_out1_5 = Add11_out1_2 + 9'b000000001;



  assign CT58_out1_2 = Unit_Delay7_out1_3 == 2'b10;



  assign CT56_out1_1 = Unit_Delay7_out1_3 == 2'b01;



  assign CT51_out1_4 = Unit_Delay7_out1_3 == 2'b00;



  assign CT35_out1_2 = Unit_Delay43_out1_1 == 7'b0001001;



  assign CT31_out1_2 = Unit_Delay43_out1_1 == 7'b0001001;



  assign CT38_out1_1 = Unit_Delay43_out1_1 == 7'b0001000;



  assign CT32_out1_2 = Unit_Delay43_out1_1 == 7'b0001001;



  assign CT30_out1_1 = Unit_Delay43_out1_1 == 7'b0000110;



  assign CT15_out1_1 = Unit_Delay43_out1_1 == 7'b0000101;



  assign CT4_out1_2 = Unit_Delay43_out1_1 == 7'b0000011;



  assign CT6_out1_1 = Unit_Delay43_out1_1 == 7'b0000000;



  assign Constant3_out1_dtc_1 = 13'sb0011111111111;



  assign Constant1_out1_dtc_1 = 13'sb1100000000001;



  assign CT37_out1_2 = Unit_Delay43_out1_1 == 7'b0001000;



  assign CT33_out1_2 = Unit_Delay43_out1_1 == 7'b0001000;



  assign CT22_out1_4 = Unit_Delay43_out1_1 == 7'b0000111;



  assign CT24_out1_3 = Unit_Delay43_out1_1 == 7'b0000100;



  assign CT118_out1_1 = Switch139_out1_1 == 7'b0011101;



  assign Add3_out1_2 = 2'b01 + Unit_Delay6_out1;



  always @(posedge g_clk)
    begin : Unit_Delay618_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 2'b00;
      end
      else begin
        Unit_Delay6_out1 <= Add3_out1_2;
      end
    end



  assign CT11_out1 = Unit_Delay6_out1 == 2'b11;



  assign CT49_out1_3 = Unit_Delay6_out1 == 2'b00;



  assign CT50_out1_3 = Unit_Delay6_out1 == 2'b01;



  assign CT65_out1_4 = Unit_Delay6_out1 == 2'b10;



  assign CT10_out1 = Unit_Delay6_out1 == 2'b11;



  assign signal2_13 = (CT10_out1 == 1'b0 ? 12'sb000000000000 :
              12'sb000000000000);



  assign s_14 = signal2_13;

  assign signal2_14 = (CT65_out1_4 == 1'b0 ? s_14 :
              12'sb000000000000);



  assign s_15 = signal2_14;

  assign signal2_15 = (CT50_out1_3 == 1'b0 ? s_15 :
              12'sb000000000000);



  assign s_16 = signal2_15;

  assign OR1_out1_2 = Excite_On & CtlLoop_On;



  assign signal2_16 = (CT49_out1_3 == 1'b0 ? s_16 :
              12'sb000000000000);



  assign signal2_17 = signal2_16;

  assign signal2_18 = signal2_17;

  assign CT29_out1 = Unit_Delay6_out1 == 2'b00;



  assign CT81_out1_2 = UacSoftFre_b16 >= 16'b1111111111111010;



  assign Switch130_out1 = (CT81_out1_2 == 1'b0 ? UacSoftFre_b16 :
              16'b1111111111111010);



  always @(posedge g_clk)
    begin : Unit_Delay619_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1 <= Add14_out1;
      end
    end



  assign Add14_out1 = Switch130_out1 + Unit_Delay61_out1;



  assign Relational_Operator14_relop1 = Add14_out1 < Unit_Delay61_out1;



  assign Switch214_out1 = (Relational_Operator14_relop1 == 1'b0 ? Unit_Delay36_out1 :
              1'b1);



  assign Switch213_out1 = (CT29_out1 == 1'b0 ? Switch214_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay365_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1 <= 1'b0;
      end
      else begin
        Unit_Delay36_out1 <= Switch213_out1;
      end
    end



  assign Or6_out1 = Relational_Operator14_relop1 | Unit_Delay36_out1;



  always @(posedge g_clk)
    begin : Unit_Delay375_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1 <= 1'b0;
      end
      else begin
        Unit_Delay37_out1 <= Switch9_out1;
      end
    end



  assign Switch9_out1 = (CT29_out1 == 1'b0 ? Unit_Delay37_out1 :
              Or6_out1);



  assign CT66_out1_3 = Unit_Delay6_out1 == 2'b10;



  assign CT52_out1_2 = Unit_Delay6_out1 == 2'b01;



  assign CT9_out1_2 = Unit_Delay6_out1 == 2'b00;



  assign CT119_out1_1 = Switch139_out1_1 == 7'b0011100;



  assign CT115_out1_1 = Switch139_out1_1 == 7'b0011011;



  assign CT77_out1_3 = Switch139_out1_1 == 7'b0011010;



  always @(posedge g_clk)
    begin : Unit_Delay3942_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_9 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_9 <= Switch107_out1_9;
      end
    end



   // assign Switch107_out1_9 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_9 :
  //12'sb000000000000);
  assign Switch107_out1_9 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_9 :
              Idn_ref2);



  assign Or5_out1 =  ~ UOpenLoop_En;



  assign Or6_out1_1 =  ~ Excite_On;



  assign Or4_out1_2 = Or6_out1_1 & (UdcLoop_En & Or5_out1);



  assign Add1_out1_5 = 2'b01 + Unit_Delay7_out1_4;



  always @(posedge g_clk)
    begin : Unit_Delay75_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_4 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_4 <= Add1_out1_5;
      end
    end



  assign CT63_out1_1 = Unit_Delay7_out1_4 == 2'b01;



  assign Or2_out1_4 =  ~ UdcLoop_En;



  assign Or3_out1_4 =  ~ UOpenLoop_En;



  assign Or7_out1 =  ~ Excite_On;



  assign Or1_out1_3 = Or7_out1 & (Or3_out1_4 & (ILoop_En & Or2_out1_4));



  assign Logical_Operator4_out1 = Or1_out1_3 & CtlLoop_On;



  assign CT60_out1_4 = Unit_Delay7_out1_4 == 2'b00;



  assign CT61_out1_3 = Unit_Delay7_out1_4 == 2'b01;



  assign CT58_out1_3 = Unit_Delay7_out1_4 == 2'b01;



  assign CT12_out1_3 = Unit_Delay7_out1_4 == 2'b00;



  assign Switch20_out1_3 = (Pulse_4096Hz == 1'b0 ? Unit_Delay54_out1_4 :
              1'b1);



  assign Switch17_out1_3 = (CT12_out1_3 == 1'b0 ? Switch20_out1_3 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay545_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_4 <= Switch17_out1_3;
      end
    end



  assign Or3_out1_5 = Pulse_4096Hz | Unit_Delay54_out1_4;



  always @(posedge g_clk)
    begin : Unit_Delay554_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_3 <= Switch208_out1_3;
      end
    end



  assign Switch208_out1_3 = (CT12_out1_3 == 1'b0 ? Unit_Delay55_out1_3 :
              Or3_out1_5);



  assign CT70_out1_3 = Unit_Delay7_out1_4 == 2'b00;



  assign Or2_out1_5 = Switch208_out1_3 & CT70_out1_3;



  assign Switch31_out1_1 = (Switch208_out1_3 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1_3 = Switch31_out1_1 + Unit_Delay13_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay131_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay13_out1_1 <= Add11_out1_3;
      end
    end



  assign Ro104_relop1 = Unit_Delay13_out1_1 > Add11_out1_3;



  assign Switch49_out1_3 = (Ro104_relop1 == 1'b0 ? Unit_Delay57_out1_3 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay575_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_3 <= Switch49_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay431_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay43_out1_2 <= Switch105_out1_3;
      end
    end



  assign Switch105_out1_3 = (Or2_out1_5 == 1'b0 ? Unit_Delay43_out1_2 :
              Unit_Delay57_out1_3);



  assign switch_compare_1_7 = Switch105_out1_3 > 1'b0;



  assign switch_compare_1_8 = Switch105_out1_3 > 1'b0;



  assign CT141_out1 = Unit_Delay7_out1_4 == 2'b00;



  assign CT59_out1_4 = Unit_Delay7_out1_4 == 2'b01;



  assign CT70_out1_4 = Unit_Delay38_out1 == 7'b0011011;



  assign CT69_out1 = Unit_Delay38_out1 == 7'b0011001;



  assign Constant10_out1 = 1'b1;



  assign Add2_out1_2 = Add11_out1_3 + 7'b0000001;



  assign CT136_out1 = Unit_Delay7_out1_4 == 2'b00;



  assign CT29_out1_1 = Unit_Delay7_out1_4 == 2'b00;



  assign CT81_out1_3 = IacSoftFre_b16 >= 16'b0111111111111000;



  assign Switch130_out1_1 = (CT81_out1_3 == 1'b0 ? IacSoftFre_b16 :
              16'b0111111111111000);



  always @(posedge g_clk)
    begin : Unit_Delay611_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1_1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1_1 <= Add14_out1_1;
      end
    end



  assign Add14_out1_1 = Switch130_out1_1 + Unit_Delay61_out1_1;



  assign Relational_Operator1_relop1 = Add14_out1_1 < Unit_Delay61_out1_1;



  assign Switch214_out1_1 = (Relational_Operator1_relop1 == 1'b0 ? Unit_Delay36_out1_1 :
              1'b1);



  assign Switch213_out1_1 = (CT29_out1_1 == 1'b0 ? Switch214_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay361_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay36_out1_1 <= Switch213_out1_1;
      end
    end



  assign Or6_out1_2 = Relational_Operator1_relop1 | Unit_Delay36_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay371_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay37_out1_1 <= Switch83_out1_2;
      end
    end



  assign Switch83_out1_2 = (CT29_out1_1 == 1'b0 ? Unit_Delay37_out1_1 :
              Or6_out1_2);



  assign Or9_out1 = BelgiumVrt | LVRT_En;



  assign CT131_out1_1 = Switch139_out1_1 == 7'b0001101;



  assign CT133_out1 = Switch139_out1_1 == 7'b0001111;



  assign CT19_out1_2 = Switch139_out1 == 7'b0001111;



  assign Unary_Minus21_in0 =  - ({ILimit_b12[11], ILimit_b12});
  assign Unary_Minus2_out1_1 = Unary_Minus21_in0[11:0];



  assign OR1_out1_4 = Or9_out1 | BelgiumVrt;



  assign CT142_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT135_out1 = Unit_Delay7_out1 == 2'b00;



  assign Switch238_out1 = (Pulse50x256_Hz1 == 1'b0 ? Unit_Delay119_out1 :
              1'b1);



  assign Switch237_out1 = (CT135_out1 == 1'b0 ? Switch238_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay119_process
      if (Rst_n == 1'b0) begin
        Unit_Delay119_out1 <= 1'b0;
      end
      else begin
        Unit_Delay119_out1 <= Switch237_out1;
      end
    end



  assign Or9_out1_1 = Pulse50x256_Hz1 | Unit_Delay119_out1;



  always @(posedge g_clk)
    begin : Unit_Delay120_process
      if (Rst_n == 1'b0) begin
        Unit_Delay120_out1 <= 1'b0;
      end
      else begin
        Unit_Delay120_out1 <= Switch239_out1;
      end
    end



  assign Switch239_out1 = (CT135_out1 == 1'b0 ? Unit_Delay120_out1 :
              Or9_out1_1);



  assign CT144_out1 = Unit_Delay7_out1 == 2'b00;



  assign Or7_out1_1 = Switch239_out1 & CT144_out1;



  assign CT137_out1 = Unit_Delay7_out1 < 2'b10;



  assign Or10_out1 = Switch239_out1 & CT137_out1;



  assign Switch244_out1 = (Or10_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  assign Add17_out1 = Switch244_out1 + Unit_Delay113_out1;



  always @(posedge g_clk)
    begin : Unit_Delay1131_process
      if (Rst_n == 1'b0) begin
        Unit_Delay113_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay113_out1 <= Add17_out1;
      end
    end



  assign Ro13_relop1 = Unit_Delay113_out1 > Add17_out1;



  assign Switch253_out1 = (Ro13_relop1 == 1'b0 ? Unit_Delay121_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay1211_process
      if (Rst_n == 1'b0) begin
        Unit_Delay121_out1 <= 1'b0;
      end
      else begin
        Unit_Delay121_out1 <= Switch253_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1181_process
      if (Rst_n == 1'b0) begin
        Unit_Delay118_out1 <= 1'b0;
      end
      else begin
        Unit_Delay118_out1 <= Switch236_out1;
      end
    end



  assign Switch236_out1 = (Or7_out1_1 == 1'b0 ? Unit_Delay118_out1 :
              Unit_Delay121_out1);



  assign switch_compare_1_9 = Switch236_out1 > 1'b0;



  assign switch_compare_1_10 = Switch236_out1 > 1'b0;



  assign CT141_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign CT143_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT177_out1 = Switch139_out1_1 == 7'b0101011;



  assign Constant110_out1_dtc = 40'sh00000007FF;



  assign Constant111_out1_dtc = 40'shFFFFFFF801;



  assign CT15_out1_2 = Switch139_out1_1 == 7'b0100011;



  assign Constant25_out1_dtc = 26'sb00000000000000011111111111;



  assign Constant26_out1_dtc = 26'sb11111111111111100000000001;



  assign Add23_out1 = Add17_out1 + 8'b00000001;



  assign CT136_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign CT114_out1_3 = Switch139_out1 == 7'b0100111;



  assign CT68_out1_3 = Switch139_out1 == 7'b0000010;



  assign CT80_out1_1 = Switch139_out1 == 7'b0000011;



  assign CT69_out1_1 = Switch139_out1 == 7'b0010010;



  assign CT71_out1_1 = Switch139_out1 == 7'b0010011;



  assign Logical_Operator7_out1 = CT71_out1_1 | (CT69_out1_1 | (CT68_out1_3 | CT80_out1_1));



  assign CT101_out1_3 = Switch139_out1 == 7'b0001000;



  assign CT103_out1_3 = Switch139_out1 == 7'b0001001;



  assign CT42_out1_1 = Switch139_out1 == 7'b0100001;



  assign CT55_out1_4 = Switch139_out1 == 7'b0100101;



  assign CT57_out1_4 = Switch139_out1 == 7'b0100110;



  assign CT113_out1_2 = Switch139_out1 == 7'b0100111;



  assign CT32_out1_3 = Switch139_out1 == 7'b0100010;



  assign CT30_out1_2 = Switch139_out1 == 7'b0100001;



  assign CT86_out1_1 = Switch139_out1 == 7'b0000111;



  assign CT84_out1_1 = Switch139_out1 == 7'b0000110;



  assign CT8_out1_1 = Switch139_out1 == 7'b0000010;



  assign CT79_out1_3 = Switch139_out1 == 7'b0000011;



  assign CT90_out1_2 = Switch139_out1 == 7'b0010010;



  assign CT25_out1_1 = Switch139_out1 == 7'b0010011;



  assign CT26_out1_3 = Switch139_out1 == 7'b0010000;



  assign CT76_out1_3 = Switch139_out1 == 7'b0000010;



  assign CT6_out1_2 = Switch139_out1 == 7'b0000000;



  assign CT46_out1_2 = Switch139_out1 == 7'b0100011;



  assign CT48_out1_2 = Switch139_out1 == 7'b0100100;



  assign CT45_out1 = Switch139_out1 == 7'b0100000;



  always @(posedge g_clk)
    begin : Unit_Delay3935_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_10 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_10 <= Switch107_out1_10;
      end
    end



  assign Switch107_out1_10 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_10 :
              Idc_b12);



  assign Unary_Minus131_in0 =  - ({Switch107_out1_10[11], Switch107_out1_10});
  assign Unary_Minus13_out1 = Unary_Minus131_in0[11:0];



  assign Unary_Minus81_in0 =  - ({Switch107_out1_10[11], Switch107_out1_10});
  assign Unary_Minus8_out1 = Unary_Minus81_in0[11:0];



  assign CT34_out1_2 = Switch139_out1 == 7'b0010010;



  assign CT27_out1_2 = Switch139_out1 == 7'b0010001;



  assign Data_Type_Conversion22_out1 = {{8{Q_ref_b16[15]}}, Q_ref_b16};



  assign CT4_out1_3 = Switch139_out1 == 7'b0000001;



  assign Unary_Minus141_in0 =  - ({ILimit_b12[11], ILimit_b12});
  assign Unary_Minus14_out1 = Unary_Minus141_in0[11:0];



  assign Cmp14_out1_1 = Switch139_out1 == 7'b0011101;



  assign Cmp12_out1_1 = Switch139_out1 == 7'b0010011;



  always @(posedge g_clk)
    begin : Unit_Delay751_process
      if (Rst_n == 1'b0) begin
        Unit_Delay75_out1_1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay75_out1_1 <= Switch159_out1_1;
      end
    end



  assign bit_shift_out1_1 = Unit_Delay75_out1_1 >> 8'd1;



  assign Switch159_out1_1 = (Cmp12_out1_1 == 1'b0 ? bit_shift_out1_1 :
              12'b010000000000);



  assign Cmp13_out1_1 = Switch139_out1 == 7'b0010011;



  assign CT89_out1_2 = Switch139_out1 == 7'b0010010;



  assign CT16_out1_2 = Switch139_out1 == 7'b0001110;



  assign Unary_Minus18_in0 =  - ({ILimit_b12[11], ILimit_b12});
  assign Unary_Minus1_out1_1 = Unary_Minus18_in0[11:0];



  assign Cmp17_out1 = Switch139_out1_1 == 7'b0001111;



  assign Cmp15_out1 = Switch139_out1_1 == 7'b0000101;



  always @(posedge g_clk)
    begin : Unit_Delay78_process
      if (Rst_n == 1'b0) begin
        Unit_Delay78_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay78_out1 <= Switch163_out1;
      end
    end



  assign bit_shift2_out1 = Unit_Delay78_out1 >> 8'd1;



  assign Switch163_out1 = (Cmp15_out1 == 1'b0 ? bit_shift2_out1 :
              12'b010000000000);



  assign Cmp16_out1 = Switch139_out1_1 == 7'b0000101;



  assign CT91_out1_2 = Switch139_out1_1 == 7'b0000100;



  assign Bit_Slice15_out1_1 = Um_ref_b12[11:3];



  assign Data_Type_S38_out1 = Bit_Slice15_out1_1;



  assign Bit_Slice16_out1 = Um_ref_b12[11:4];



  assign Data_Type_S40_out1 = {1'b0, Bit_Slice16_out1};



  assign Cmp3_out1 = Switch139_out1 == 7'b0011110;



  assign Cmp1_out1 = Switch139_out1 == 7'b0010100;



  always @(posedge g_clk)
    begin : Unit_Delay211_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay21_out1 <= Switch59_out1;
      end
    end



  assign bit_shift1_out1 = Unit_Delay21_out1 >> 8'd1;



  assign Switch59_out1 = (Cmp1_out1 == 1'b0 ? bit_shift1_out1 :
              12'b010000000000);



  assign Cmp2_out1 = Switch139_out1 == 7'b0010100;



  assign CT24_out1_4 = Switch139_out1 == 7'b0010011;



  assign CT62_out1_3 = Unit_Delay7_out1_4 == 2'b00;



  assign Add1_out1_6 = 2'b01 + Unit_Delay7_out1_5;



  always @(posedge g_clk)
    begin : Unit_Delay73_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_5 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_5 <= Add1_out1_6;
      end
    end



  assign CT60_out1_5 = Unit_Delay7_out1_5 == 2'b11;



  assign CT12_out1_4 = Unit_Delay7_out1_5 == 2'b00;



  assign Bit_Slice6_out1_1 = Bit_Slice5_out1_1[4:0];



  always @(posedge g_clk)
    begin : Unit_Delay5410_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_5 <= 5'b00000;
      end
      else begin
        Unit_Delay54_out1_5 <= Bit_Slice6_out1_1;
      end
    end



  assign Relational_Operator8_relop1 = Bit_Slice6_out1_1 < Unit_Delay54_out1_5;



  assign Switch20_out1_4 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_6 :
              1'b1);



  assign Switch17_out1_4 = (CT12_out1_4 == 1'b0 ? Switch20_out1_4 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay543_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_6 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_6 <= Switch17_out1_4;
      end
    end



  assign Or3_out1_6 = Relational_Operator8_relop1 | Unit_Delay54_out1_6;



  always @(posedge g_clk)
    begin : Unit_Delay552_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_4 <= Switch208_out1_4;
      end
    end



  assign Switch208_out1_4 = (CT12_out1_4 == 1'b0 ? Unit_Delay55_out1_4 :
              Or3_out1_6);



  assign CT70_out1_5 = Unit_Delay7_out1_5 == 2'b00;



  assign Or2_out1_6 = Switch208_out1_4 & CT70_out1_5;



  assign Switch83_out1_3 = (Switch208_out1_4 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1_4 = Switch83_out1_3 + Unit_Delay32_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay323_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_3 <= 7'b0000000;
      end
      else begin
        Unit_Delay32_out1_3 <= Add11_out1_4;
      end
    end



  assign Ro102_relop1 = Unit_Delay32_out1_3 > Add11_out1_4;



  assign Switch49_out1_4 = (Ro102_relop1 == 1'b0 ? Unit_Delay57_out1_4 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay572_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_4 <= Switch49_out1_4;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay112_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_3 <= Switch105_out1_4;
      end
    end



  assign Switch105_out1_4 = (Or2_out1_6 == 1'b0 ? Unit_Delay1_out1_3 :
              Unit_Delay57_out1_4);



  assign switch_compare_1_11 = Switch105_out1_4 > 1'b0;



  assign CT55_out1_5 = Unit_Delay7_out1_5 == 2'b00;



  assign CT57_out1_5 = Unit_Delay7_out1_5 == 2'b01;



  assign CT59_out1_5 = Unit_Delay7_out1_5 == 2'b10;



  assign CT61_out1_4 = Unit_Delay7_out1_5 == 2'b11;



  assign CT58_out1_4 = Unit_Delay7_out1_5 == 2'b10;



  assign CT56_out1_2 = Unit_Delay7_out1_5 == 2'b01;



  assign CT51_out1_5 = Unit_Delay7_out1_5 == 2'b00;



  assign switch_compare_1_12 = Switch105_out1_4 > 1'b0;



  assign Add1_out1_7 = 2'b01 + Unit_Delay7_out1_6;



  always @(posedge g_clk)
    begin : Unit_Delay74_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_6 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_6 <= Add1_out1_7;
      end
    end



  assign CT60_out1_6 = Unit_Delay7_out1_6 == 2'b11;



  assign CT12_out1_5 = Unit_Delay7_out1_6 == 2'b00;



  assign Switch20_out1_5 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_7 :
              1'b1);



  assign Switch17_out1_5 = (CT12_out1_5 == 1'b0 ? Switch20_out1_5 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay544_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_7 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_7 <= Switch17_out1_5;
      end
    end



  assign Or3_out1_7 = Relational_Operator8_relop1 | Unit_Delay54_out1_7;



  always @(posedge g_clk)
    begin : Unit_Delay553_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_5 <= Switch208_out1_5;
      end
    end



  assign Switch208_out1_5 = (CT12_out1_5 == 1'b0 ? Unit_Delay55_out1_5 :
              Or3_out1_7);



  assign CT70_out1_6 = Unit_Delay7_out1_6 == 2'b00;



  assign Or2_out1_7 = Switch208_out1_5 & CT70_out1_6;



  assign Switch83_out1_4 = (Switch208_out1_5 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  assign Add11_out1_5 = Switch83_out1_4 + Unit_Delay32_out1_4;



  always @(posedge g_clk)
    begin : Unit_Delay324_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_4 <= 8'b00000000;
      end
      else begin
        Unit_Delay32_out1_4 <= Add11_out1_5;
      end
    end



  assign Ro103_relop1 = Unit_Delay32_out1_4 > Add11_out1_5;



  assign Switch49_out1_5 = (Ro103_relop1 == 1'b0 ? Unit_Delay57_out1_5 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay573_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_5 <= Switch49_out1_5;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay113_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_4 <= Switch105_out1_5;
      end
    end



  assign Switch105_out1_5 = (Or2_out1_7 == 1'b0 ? Unit_Delay1_out1_4 :
              Unit_Delay57_out1_5);



  assign switch_compare_1_13 = Switch105_out1_5 > 1'b0;



  assign CT55_out1_6 = Unit_Delay7_out1_6 == 2'b00;



  assign CT57_out1_6 = Unit_Delay7_out1_6 == 2'b01;



  assign CT59_out1_6 = Unit_Delay7_out1_6 == 2'b10;



  assign CT61_out1_5 = Unit_Delay7_out1_6 == 2'b11;



  assign CT58_out1_5 = Unit_Delay7_out1_6 == 2'b10;



  assign CT56_out1_3 = Unit_Delay7_out1_6 == 2'b01;



  assign CT51_out1_6 = Unit_Delay7_out1_6 == 2'b00;



  assign switch_compare_1_14 = Switch105_out1_5 > 1'b0;



  assign CT72_out1_2 = Unit_Delay38_out1 == 7'b0011111;



  assign CT71_out1_2 = Unit_Delay38_out1 == 7'b0011101;



  assign Add12_out1_6 = Add11_out1_5 + 8'b00000001;



  assign Add12_out1_7 = Add11_out1_4 + 7'b0000001;



  assign Add1_out1_8 = 2'b01 + Unit_Delay7_out1_7;



  always @(posedge g_clk)
    begin : Unit_Delay710_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_7 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_7 <= Add1_out1_8;
      end
    end



  assign CT60_out1_7 = Unit_Delay7_out1_7 == 2'b11;



  assign CT12_out1_6 = Unit_Delay7_out1_7 == 2'b00;



  assign CT84_out1_2 = FilterFre_b16 >= 16'b1111111111111010;



  assign Switch138_out1_1 = (CT84_out1_2 == 1'b0 ? FilterFre_b16 :
              16'b1111111111111010);



  always @(posedge g_clk)
    begin : Unit_Delay613_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1_2 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1_2 <= Add14_out1_2;
      end
    end



  assign Add14_out1_2 = Switch138_out1_1 + Unit_Delay61_out1_2;



  assign Relational_Operator12_relop1 = Add14_out1_2 < Unit_Delay61_out1_2;



  assign Switch20_out1_6 = (Relational_Operator12_relop1 == 1'b0 ? Unit_Delay54_out1_8 :
              1'b1);



  assign Switch17_out1_6 = (CT12_out1_6 == 1'b0 ? Switch20_out1_6 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay547_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_8 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_8 <= Switch17_out1_6;
      end
    end



  assign Or3_out1_8 = Relational_Operator12_relop1 | Unit_Delay54_out1_8;



  always @(posedge g_clk)
    begin : Unit_Delay556_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_6 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_6 <= Switch208_out1_6;
      end
    end



  assign Switch208_out1_6 = (CT12_out1_6 == 1'b0 ? Unit_Delay55_out1_6 :
              Or3_out1_8);



  assign CT70_out1_7 = Unit_Delay7_out1_7 == 2'b00;



  assign Or2_out1_8 = Switch208_out1_6 & CT70_out1_7;



  assign Switch83_out1_5 = (Switch208_out1_6 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  assign Add11_out1_6 = Switch83_out1_5 + Unit_Delay32_out1_5;



  always @(posedge g_clk)
    begin : Unit_Delay326_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_5 <= 9'b000000000;
      end
      else begin
        Unit_Delay32_out1_5 <= Add11_out1_6;
      end
    end



  assign Ro106_relop1 = Unit_Delay32_out1_5 > Add11_out1_6;



  assign Switch49_out1_6 = (Ro106_relop1 == 1'b0 ? Unit_Delay57_out1_6 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay577_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_6 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_6 <= Switch49_out1_6;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay150_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_5 <= Switch105_out1_6;
      end
    end



  assign Switch105_out1_6 = (Or2_out1_8 == 1'b0 ? Unit_Delay1_out1_5 :
              Unit_Delay57_out1_6);



  assign switch_compare_1_15 = Switch105_out1_6 > 1'b0;



  assign switch_compare_1_16 = Switch105_out1_6 > 1'b0;



  assign CT55_out1_7 = Unit_Delay7_out1_7 == 2'b00;



  assign CT57_out1_7 = Unit_Delay7_out1_7 == 2'b01;



  assign CT59_out1_7 = Unit_Delay7_out1_7 == 2'b10;



  assign CT61_out1_6 = Unit_Delay7_out1_7 == 2'b11;



  assign Add12_out1_8 = Add11_out1_6 + 9'b000000001;



  assign CT58_out1_6 = Unit_Delay7_out1_7 == 2'b10;



  assign CT56_out1_4 = Unit_Delay7_out1_7 == 2'b01;



  assign CT51_out1_7 = Unit_Delay7_out1_7 == 2'b00;



  assign CT115_out1_2 = Unit_Delay43_out1_1 == 7'b0011101;



  assign CT113_out1_3 = Unit_Delay43_out1_1 == 7'b0011100;



  assign CT111_out1_3 = Unit_Delay43_out1_1 == 7'b0011011;



  assign CT109_out1_1 = Unit_Delay43_out1_1 == 7'b0011010;



  assign CT8_out1_2 = Unit_Delay43_out1_1 == 7'b0000010;



  assign CT2_out1_2 = Unit_Delay43_out1_1 == 7'b0000001;



  assign Constant9_out1_dtc = 13'sb0011111111111;



  assign Constant10_out1_dtc = 13'sb1100000000001;



  assign CT130_out1_1 = Unit_Delay38_out1 == 7'b0000000;



  assign CT129_out1 = Unit_Delay38_out1 == 7'b0110100;



  assign CT128_out1_1 = Unit_Delay38_out1 == 7'b0110010;



  assign CT127_out1 = Unit_Delay38_out1 == 7'b0110000;



  assign CT126_out1 = Unit_Delay38_out1 == 7'b0101110;



  assign CT108_out1_2 = Unit_Delay43_out1_1 == 7'b0001111;



  assign CT107_out1_1 = Unit_Delay43_out1_1 == 7'b0001110;



  assign Or_out1_1 = ILoop_En | UdcLoop_En;



  assign OR1_out1_5 = Or_out1_1 & CtlLoop_On;



  assign CT80_out1_2 = Unit_Delay43_out1_1 == 7'b0000111;



  assign CT26_out1_4 = Unit_Delay43_out1_1 == 7'b0000011;



  assign CT74_out1_2 = Unit_Delay43_out1_1 == 7'b0000110;



  assign CT25_out1_2 = Unit_Delay43_out1_1 == 7'b0000010;



  assign CT40_out1_2 = Unit_Delay43_out1_1 == 7'b0000101;



  assign CT17_out1_2 = Unit_Delay43_out1_1 == 7'b0000001;



  assign CT39_out1_2 = Unit_Delay43_out1_1 == 7'b0000100;



  assign CT16_out1_3 = Unit_Delay43_out1_1 == 7'b0000000;



  assign CT9_out1_3 = Unit_Delay43_out1_1 == 7'b0001010;



  assign CT19_out1_3 = Unit_Delay43_out1_1 == 7'b0001011;



  assign CT44_out1_2 = Unit_Delay43_out1_1 == 7'b0001100;



  assign CT42_out1_2 = Unit_Delay43_out1_1 == 7'b0001101;



  assign CT96_out1_1 = Unit_Delay43_out1_1 == 7'b0001101;



  assign CT94_out1_2 = Unit_Delay43_out1_1 == 7'b0001100;



  assign CT99_out1_2 = Unit_Delay43_out1_1 == 7'b0001011;



  assign CT98_out1_3 = Unit_Delay43_out1_1 == 7'b0001010;



  assign CT5_out1_3 = Unit_Delay43_out1_1 == 7'b0000000;



  assign CT1_out1_2 = Unit_Delay43_out1_1 == 7'b0000001;



  assign CT7_out1_2 = Unit_Delay43_out1_1 == 7'b0000010;



  assign CT3_out1_3 = Unit_Delay43_out1_1 == 7'b0000011;



  assign CT23_out1_3 = Unit_Delay43_out1_1 == 7'b0000100;



  assign CT14_out1_2 = Unit_Delay43_out1_1 == 7'b0000101;



  assign CT29_out1_2 = Unit_Delay43_out1_1 == 7'b0000110;



  assign CT21_out1_2 = Unit_Delay43_out1_1 == 7'b0000111;



  assign OR5_out1_1 =  ~ Excite_On;



  assign OR3_out1_9 = OR1_out1_5 & OR5_out1_1;



  assign signal2_19 = (CT116_out1_2 == 1'b0 ? Rsnc_co_b16 :
              Rsnc_co_b16);



  assign s_17 = signal2_19;

  assign signal2_20 = (CT114_out1_2 == 1'b0 ? s_17 :
              Rsnc_co_b16);



  assign s_18 = signal2_20;

  assign signal2_21 = (CT112_out1_3 == 1'b0 ? s_18 :
              Rsnc_co_b16);



  assign s_19 = signal2_21;

  assign signal2_22 = (CT110_out1_1 == 1'b0 ? s_19 :
              Rsnc_co_b16);



  assign s_20 = signal2_22;

  assign signal2_23 = (CT93_out1_1 == 1'b0 ? s_20 :
              Rsnc_co_b16);



  assign s_21 = signal2_23;

  assign signal2_24 = (CT91_out1_1 == 1'b0 ? s_21 :
              Rsnc_co_b16);



  assign s_22 = signal2_24;

  assign signal2_25 = (CT89_out1_1 == 1'b0 ? s_22 :
              Rsnc_co_b16);



  assign s_23 = signal2_25;

  assign signal2_26 = (CT87_out1_2 == 1'b0 ? s_23 :
              Rsnc_co_b16);



  assign s_24 = signal2_26;

  assign signal2_27 = (CT58_out1 == 1'b0 ? s_24 :
              InLoopKi_b16);



  assign s_25 = signal2_27;

  assign signal2_28 = (CT59_out1_2 == 1'b0 ? s_25 :
              InLoopKi_b16);



  assign s_26 = signal2_28;

  assign signal2_29 = (CT55_out1_2 == 1'b0 ? s_26 :
              InLoopKi_b16);



  assign s_27 = signal2_29;

  assign signal2_30 = (CT60_out1_1 == 1'b0 ? s_27 :
              InLoopKi_b16);



  assign s_28 = signal2_30;

  assign signal2_31 = (CT50_out1_2 == 1'b0 ? s_28 :
              InLoopKp_b16);



  assign s_29 = signal2_31;

  assign signal2_32 = (CT51_out1_3 == 1'b0 ? s_29 :
              InLoopKp_b16);



  assign s_30 = signal2_32;

  assign signal2_33 = (CT47_out1_3 == 1'b0 ? s_30 :
              InLoopKp_b16);



  assign s_31 = signal2_33;

  assign signal2_34 = (CT52_out1_1 == 1'b0 ? s_31 :
              InLoopKp_b16);



  assign signal2_35 = signal2_34;

  assign DTC4_out1 = {{8{signal2_35[15]}}, signal2_35};



  assign Compare_To_Constant4_out1 = Switch139_out1_1 == 7'b0010100;



  assign Compare_To_Constant2_out1 = Switch139_out1_1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay512_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay51_out1_1 <= Switch84_out1_1;
      end
    end



  assign bit_shift1_out1_1 = Unit_Delay51_out1_1 >> 8'd1;



  assign Switch84_out1_1 = (Compare_To_Constant2_out1 == 1'b0 ? bit_shift1_out1_1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant3_out1 = Switch139_out1_1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay3934_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_11 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_11 <= Switch107_out1_11;
      end
    end



  assign Switch107_out1_11 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_11 :
              Udc_b12);



  always @(posedge g_clk)
    begin : Unit_Delay503_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay50_out1 <= Switch86_out1;
      end
    end



  assign Switch122_out1 = (Compare_To_Constant3_out1 == 1'b0 ? Unit_Delay50_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator1_out1 = Switch84_out1_1 | Switch122_out1;



  assign Product11_1 = {1'b0, Bitwise_Operator1_out1};
  assign Product11_mul_temp = Product11_1 * Switch107_out1_11;
  assign Product1_out1 = Product11_mul_temp[35:0];



  assign Compare_To_Constant1_out1 = Product1_out1 <= 36'sh0003FF001;



  assign Switch86_out1 = (Compare_To_Constant1_out1 == 1'b0 ? Switch122_out1 :
              Bitwise_Operator1_out1);



  assign Switch87_out1_1 = (Compare_To_Constant4_out1 == 1'b0 ? Unit_Delay38_out1_1 :
              Switch86_out1);



  always @(posedge g_clk)
    begin : Unit_Delay382_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay38_out1_1 <= Switch87_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3939_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_12 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay39_out1_12 <= Switch107_out1_12;
      end
    end



  assign Switch107_out1_12 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_12 :
              Unit_Delay38_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay3967_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_13 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay39_out1_13 <= Switch107_out1_13;
      end
    end



  assign Switch107_out1_13 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_13 :
              Switch107_out1_12);



  assign DTC3_out1 = Switch107_out1_13;



  assign signal2_36 = (CT42_out1_2 == 1'b0 ? DTC3_out1 :
              DTC3_out1);



  assign s_32 = signal2_36;

  assign DTC2_out1 = Switch107_out1_13;



  assign signal2_37 = (CT44_out1_2 == 1'b0 ? s_32 :
              DTC2_out1);



  assign s_33 = signal2_37;

  assign DTC1_out1 = Switch107_out1_13;



  assign signal2_38 = (CT19_out1_3 == 1'b0 ? s_33 :
              DTC1_out1);



  assign s_34 = signal2_38;

  assign DTC_out1 = Switch107_out1_13;



  assign signal2_39 = (CT9_out1_3 == 1'b0 ? s_34 :
              DTC_out1);



  assign s_35 = signal2_39;

  assign signal2_40 = (CT62_out1_2 == 1'b0 ? DTC4_out1 :
              s_35);



  assign s_36 = signal2_40;

  assign signal2_41 = (CT21_out1_2 == 1'b0 ? Uin_co_b13 :
              Uin_co_b13);



  assign s_37 = signal2_41;

  assign signal2_42 = (CT29_out1_2 == 1'b0 ? s_37 :
              Uin_co_b13);



  assign s_38 = signal2_42;

  assign signal2_43 = (CT14_out1_2 == 1'b0 ? s_38 :
              Uin_co_b13);



  assign s_39 = signal2_43;

  assign signal2_44 = (CT23_out1_3 == 1'b0 ? s_39 :
              Uin_co_b13);



  assign s_40 = signal2_44;

  assign Constant2_out1_dtc = 13'sb0000000000000;



  assign Switch5_out1 = (Excite_On == 1'b0 ? L_co_b13 :
              Constant2_out1_dtc);



  assign signal2_45 = (CT3_out1_3 == 1'b0 ? s_40 :
              Switch5_out1);



  assign s_41 = signal2_45;

  assign signal2_46 = (CT7_out1_2 == 1'b0 ? s_41 :
              Switch5_out1);



  assign s_42 = signal2_46;

  assign signal2_47 = (CT1_out1_2 == 1'b0 ? s_42 :
              Switch5_out1);



  assign s_43 = signal2_47;

  assign signal2_48 = (CT5_out1_3 == 1'b0 ? s_43 :
              Switch5_out1);



  assign signal2_49 = signal2_48;

  assign DTC5_out1 = {{11{signal2_49[12]}}, signal2_49};



  assign signal2_50 = (CT61_out1_1 == 1'b0 ? s_36 :
              DTC5_out1);



  assign signal2_51 = signal2_50;

  assign CT20_out1_2 = Unit_Delay43_out1_1 == 7'b0001100;



  assign CT11_out1_1 = Unit_Delay43_out1_1 == 7'b0001011;



  assign CT10_out1_1 = Unit_Delay43_out1_1 == 7'b0001010;



  assign Logical_Operator2_out1_1 =  ~ UOpenLoop_En;



  assign Logical_Operator3_out1 =  ~ Excite_On;



  assign OR6_out1_3 = Logical_Operator3_out1 & (CtlLoop_On & Logical_Operator2_out1_1);



  assign CT49_out1_4 = Unit_Delay43_out1_1 == 7'b0010001;



  assign CT48_out1_3 = Unit_Delay43_out1_1 == 7'b0010000;



  assign CT46_out1_3 = Unit_Delay43_out1_1 == 7'b0001111;



  assign CT45_out1_1 = Unit_Delay43_out1_1 == 7'b0001110;



  assign signal4_3 = (CT76_out1_2 == 1'b0 ? 12'sb011111111111 :
              12'sb011111111111);



  assign s_44 = signal4_3;

  assign signal4_4 = (CT71_out1 == 1'b0 ? s_44 :
              12'sb011111111111);



  assign s_45 = signal4_4;

  assign signal4_5 = (CT68_out1_2 == 1'b0 ? s_45 :
              12'sb011111111111);



  assign s_46 = signal4_5;

  assign signal4_6 = (CT65_out1_3 == 1'b0 ? s_46 :
              12'sb011111111111);



  assign signal4_7 = signal4_6;

  assign signal4_8 = signal4_7;

  assign signal4_dtc_1 = {{10{signal4_8[11]}}, signal4_8};



  assign signal5_3 = (CT76_out1_2 == 1'b0 ? 12'sb100000000001 :
              12'sb100000000001);



  assign s_47 = signal5_3;

  assign signal5_4 = (CT71_out1 == 1'b0 ? s_47 :
              12'sb100000000001);



  assign s_48 = signal5_4;

  assign signal5_5 = (CT68_out1_2 == 1'b0 ? s_48 :
              12'sb100000000001);



  assign s_49 = signal5_5;

  assign signal5_6 = (CT65_out1_3 == 1'b0 ? s_49 :
              12'sb100000000001);



  assign signal5_7 = signal5_6;

  assign signal5_8 = signal5_7;

  assign Add1_out1_9 = 7'sb1111111 + Switch20_out1_7;



  assign CT12_out1_7 = Add1_out1_9 <= 7'sb0000000;



  assign Switch17_out1_7 = (CT12_out1_7 == 1'b0 ? Add1_out1_9 :
              7'sb0000000);



  always @(posedge g_clk)
    begin : Unit_Delay712_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_8 <= 7'sb0000000;
      end
      else begin
        Unit_Delay7_out1_8 <= Switch17_out1_7;
      end
    end



  assign Switch20_out1_7 = (Pulse_4096Hz == 1'b0 ? Unit_Delay7_out1_8 :
              7'sb0011010);



  assign CT13_out1_1 = Switch20_out1_7 > 7'sb0000000;



  assign Logical_Operator_out1_3 =  ~ UOpenLoop_En;



  assign Logical_Operator1_out1_2 =  ~ Excite_On;



  assign OR2_out1_9 = Logical_Operator1_out1_2 & (CtlLoop_On & Logical_Operator_out1_3);



  assign OR4_out1_3 = CT13_out1_1 & OR2_out1_9;



  assign switch_compare_1_17 = OR4_out1_3 > 1'b0;



  assign CT57_out1_8 = Unit_Delay43_out1_1 == 7'b0010101;



  assign CT56_out1_5 = Unit_Delay43_out1_1 == 7'b0010100;



  assign CT54_out1_2 = Unit_Delay43_out1_1 == 7'b0010011;



  assign CT53_out1_1 = Unit_Delay43_out1_1 == 7'b0010010;



  assign CT72_out1_3 = Unit_Delay43_out1_1 == 7'b0011001;



  assign switch_compare_1_18 = OR2_out1_9 > 1'b0;



  assign CT69_out1_2 = Unit_Delay43_out1_1 == 7'b0011000;



  assign CT66_out1_4 = Unit_Delay43_out1_1 == 7'b0010111;



  assign CT63_out1_2 = Unit_Delay43_out1_1 == 7'b0010110;



  assign CT70_out1_8 = Unit_Delay43_out1_1 == 7'b0011000;



  assign CT67_out1_2 = Unit_Delay43_out1_1 == 7'b0010111;



  assign CT64_out1_3 = Unit_Delay43_out1_1 == 7'b0010110;



  assign Add17_out1_1 = 3'b001 + Unit_Delay44_out1;



  assign CT78_out1_2 = Add17_out1_1 >= 3'b010;



  assign Switch106_out1 = (CT78_out1_2 == 1'b0 ? Add17_out1_1 :
              3'b000);



  always @(posedge g_clk)
    begin : Unit_Delay445_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1 <= 3'b000;
      end
      else begin
        Unit_Delay44_out1 <= Switch106_out1;
      end
    end



  assign CT68_out1_4 = Unit_Delay44_out1 == 3'b000;



  assign Logical_Operator_out1_4 = UOpenLoop_En & CtlLoop_On;



  assign CT66_out1_5 = Unit_Delay44_out1 == 3'b000;



  assign CT80_out1_3 = Unit_Delay44_out1 == 3'b000;



  assign CT81_out1_4 = UacSoftFre_b16 >= 16'b0111111111111000;



  assign Switch123_out1_1 = (CT81_out1_4 == 1'b0 ? UacSoftFre_b16 :
              16'b0111111111111000);



  always @(posedge g_clk)
    begin : Unit_Delay495_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay49_out1 <= Add14_out1_3;
      end
    end



  assign Add14_out1_3 = Switch123_out1_1 + Unit_Delay49_out1;



  assign Relational_Operator91_relop1 = Add14_out1_3 < Unit_Delay49_out1;



  assign CT79_out1_4 = Unit_Delay44_out1 == 3'b000;



  assign Switch122_out1_1 = (Relational_Operator91_relop1 == 1'b0 ? Unit_Delay50_out1_1 :
              1'b1);



  assign Switch121_out1 = (CT79_out1_4 == 1'b0 ? Switch122_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay505_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay50_out1_1 <= Switch121_out1;
      end
    end



  assign Or2_out1_10 = Relational_Operator91_relop1 | Unit_Delay50_out1_1;



  assign And8_out1 = CT80_out1_3 & Or2_out1_10;



  assign Add13_out1 = 4'sb1111 + Switch105_out1_7;



  assign CT70_out1_9 = Add13_out1 <= 4'sb0000;



  assign Switch104_out1 = (CT70_out1_9 == 1'b0 ? Add13_out1 :
              4'sb0000);



  always @(posedge g_clk)
    begin : Unit_Delay485_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1 <= 4'sb0000;
      end
      else begin
        Unit_Delay48_out1 <= Switch104_out1;
      end
    end



  assign Switch105_out1_7 = (And8_out1 == 1'b0 ? Unit_Delay48_out1 :
              4'sb0010);



  assign CT71_out1_3 = Switch105_out1_7 > 4'sb0000;



  assign signal1_17 = (CT66_out1_5 == 1'b0 ? Um_ref_b12 :
              Um_ref_b12);



  assign signal1_18 = signal1_17;

  assign signal1_19 = signal1_18;

  assign CT43_out1_3 = Unit_Delay38_out1 == 7'b0010011;



  assign CT41_out1_1 = Unit_Delay38_out1 == 7'b0010010;



  assign CT39_out1_3 = Unit_Delay38_out1 == 7'b0010001;



  assign CT45_out1_2 = Unit_Delay38_out1 == 7'b0010000;



  assign CT33_out1_3 = Unit_Delay38_out1 == 7'b0001110;



  assign CT31_out1_3 = Unit_Delay38_out1 == 7'b0001101;



  assign CT29_out1_3 = Unit_Delay38_out1 == 7'b0001100;



  assign CT89_out1_3 = Unit_Delay38_out1 == 7'b0001011;



  assign CT12_out1_8 = Unit_Delay38_out1 == 7'b0000010;



  assign CT11_out1_2 = Unit_Delay38_out1 == 7'b0000001;



  assign CT10_out1_2 = Unit_Delay38_out1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay3912_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_14 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_14 <= Switch107_out1_14;
      end
    end



  assign Switch107_out1_14 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_14 :
              Uwu_b12);



  always @(posedge g_clk)
    begin : Unit_Delay391_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_15 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_15 <= Switch107_out1_15;
      end
    end



  assign Switch107_out1_15 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_15 :
              Uvw_b12);



  always @(posedge g_clk)
    begin : Unit_Delay39_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_16 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_16 <= Switch107_out1_16;
      end
    end



  assign Switch107_out1_16 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_16 :
              Uuv_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3925_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_17 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_17 <= Switch107_out1_17;
      end
    end



  assign Switch107_out1_17 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_17 :
              nCoswt_b12);



  assign signal2_52 = (CT125_out1_1 == 1'b0 ? Switch107_out1_17 :
              Switch107_out1_17);



  assign s_50 = signal2_52;

  always @(posedge g_clk)
    begin : Unit_Delay3924_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_18 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_18 <= Switch107_out1_18;
      end
    end



  assign Switch107_out1_18 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_18 :
              nSinwt_b12);



  assign Unary_Minus16_in0 =  - ({Switch107_out1_18[11], Switch107_out1_18});
  assign Unary_Minus16_out1 = Unary_Minus16_in0[11:0];



  assign signal2_53 = (CT124_out1 == 1'b0 ? s_50 :
              Unary_Minus16_out1);



  assign s_51 = signal2_53;

  assign signal2_54 = (CT123_out1_1 == 1'b0 ? s_51 :
              Switch107_out1_18);



  assign s_52 = signal2_54;

  assign signal2_55 = (CT122_out1 == 1'b0 ? s_52 :
              Switch107_out1_17);



  assign s_53 = signal2_55;

  always @(posedge g_clk)
    begin : Unit_Delay393_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_19 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_19 <= Switch107_out1_19;
      end
    end



  assign Switch107_out1_19 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_19 :
              Coswt_b12);



  assign signal2_56 = (CT121_out1_1 == 1'b0 ? s_53 :
              Switch107_out1_19);



  assign s_54 = signal2_56;

  always @(posedge g_clk)
    begin : Unit_Delay392_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_20 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_20 <= Switch107_out1_20;
      end
    end



  assign Switch107_out1_20 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_20 :
              Sinwt_b12);



  assign Unary_Minus15_in0 =  - ({Switch107_out1_20[11], Switch107_out1_20});
  assign Unary_Minus15_out1 = Unary_Minus15_in0[11:0];



  assign signal2_57 = (CT120_out1 == 1'b0 ? s_54 :
              Unary_Minus15_out1);



  assign s_55 = signal2_57;

  assign signal2_58 = (CT119_out1 == 1'b0 ? s_55 :
              Switch107_out1_20);



  assign s_56 = signal2_58;

  assign signal2_59 = (CT118_out1 == 1'b0 ? s_56 :
              Switch107_out1_19);



  assign s_57 = signal2_59;

  assign signal2_60 = (CT94_out1_1 == 1'b0 ? s_57 :
              12'sb100100010010);



  assign s_58 = signal2_60;

  assign signal2_61 = (CT93_out1 == 1'b0 ? s_58 :
              12'sb110000000000);



  assign s_59 = signal2_61;

  assign signal2_62 = (CT92_out1_1 == 1'b0 ? s_59 :
              12'sb011011101110);



  assign s_60 = signal2_62;

  assign signal2_63 = (CT91_out1 == 1'b0 ? s_60 :
              12'sb110000000000);



  assign s_61 = signal2_63;

  assign signal2_64 = (CT82_out1_1 == 1'b0 ? s_61 :
              Switch107_out1_17);



  assign s_62 = signal2_64;

  assign signal2_65 = (CT81_out1 == 1'b0 ? s_62 :
              Switch107_out1_18);



  assign s_63 = signal2_65;

  assign Unary_Minus9_in0 =  - ({Switch107_out1_18[11], Switch107_out1_18});
  assign Unary_Minus9_out1 = Unary_Minus9_in0[11:0];



  assign signal2_66 = (CT80_out1 == 1'b0 ? s_63 :
              Unary_Minus9_out1);



  assign s_64 = signal2_66;

  assign signal2_67 = (CT79_out1_1 == 1'b0 ? s_64 :
              Switch107_out1_17);



  assign s_65 = signal2_67;

  assign signal2_68 = (CT76_out1_1 == 1'b0 ? s_65 :
              Switch107_out1_19);



  assign s_66 = signal2_68;

  assign signal2_69 = (CT75_out1 == 1'b0 ? s_66 :
              Switch107_out1_20);



  assign s_67 = signal2_69;

  assign Unary_Minus8_in0 =  - ({Switch107_out1_20[11], Switch107_out1_20});
  assign Unary_Minus8_out1_1 = Unary_Minus8_in0[11:0];



  assign signal2_70 = (CT74_out1_1 == 1'b0 ? s_67 :
              Unary_Minus8_out1_1);



  assign s_68 = signal2_70;

  assign signal2_71 = (CT73_out1_2 == 1'b0 ? s_68 :
              Switch107_out1_19);



  assign s_69 = signal2_71;

  assign signal2_72 = (CT68_out1_1 == 1'b0 ? s_69 :
              Switch107_out1_17);



  assign s_70 = signal2_72;

  assign Unary_Minus5_in0 =  - ({Switch107_out1_18[11], Switch107_out1_18});
  assign Unary_Minus5_out1 = Unary_Minus5_in0[11:0];



  assign signal2_73 = (CT67_out1_1 == 1'b0 ? s_70 :
              Unary_Minus5_out1);



  assign s_71 = signal2_73;

  assign signal2_74 = (CT66_out1_2 == 1'b0 ? s_71 :
              Switch107_out1_18);



  assign s_72 = signal2_74;

  assign signal2_75 = (CT65_out1_2 == 1'b0 ? s_72 :
              Switch107_out1_17);



  assign s_73 = signal2_75;

  assign signal2_76 = (CT64_out1_2 == 1'b0 ? s_73 :
              Switch107_out1_19);



  assign s_74 = signal2_76;

  assign Unary_Minus6_in0 =  - ({Switch107_out1_20[11], Switch107_out1_20});
  assign Unary_Minus6_out1 = Unary_Minus6_in0[11:0];



  assign signal2_77 = (CT63_out1 == 1'b0 ? s_74 :
              Unary_Minus6_out1);



  assign s_75 = signal2_77;

  assign signal2_78 = (CT62_out1_1 == 1'b0 ? s_75 :
              Switch107_out1_20);



  assign s_76 = signal2_78;

  assign signal2_79 = (CT61_out1 == 1'b0 ? s_76 :
              Switch107_out1_19);



  assign s_77 = signal2_79;

  assign signal2_80 = (CT54_out1_1 == 1'b0 ? s_77 :
              Switch107_out1_17);



  assign s_78 = signal2_80;

  assign Unary_Minus17_in0 =  - ({Switch107_out1_18[11], Switch107_out1_18});
  assign Unary_Minus17_out1 = Unary_Minus17_in0[11:0];



  assign signal2_81 = (CT53_out1 == 1'b0 ? s_78 :
              Unary_Minus17_out1);



  assign s_79 = signal2_81;

  assign signal2_82 = (CT52_out1 == 1'b0 ? s_79 :
              Switch107_out1_18);



  assign s_80 = signal2_82;

  assign signal2_83 = (CT51_out1_2 == 1'b0 ? s_80 :
              Switch107_out1_17);



  assign s_81 = signal2_83;

  assign signal2_84 = (CT50_out1_1 == 1'b0 ? s_81 :
              Switch107_out1_19);



  assign s_82 = signal2_84;

  assign Unary_Minus4_in0 =  - ({Switch107_out1_20[11], Switch107_out1_20});
  assign Unary_Minus4_out1_1 = Unary_Minus4_in0[11:0];



  assign signal2_85 = (CT49_out1_2 == 1'b0 ? s_82 :
              Unary_Minus4_out1_1);



  assign s_83 = signal2_85;

  assign signal2_86 = (CT48_out1_1 == 1'b0 ? s_83 :
              Switch107_out1_20);



  assign s_84 = signal2_86;

  assign signal2_87 = (CT47_out1_2 == 1'b0 ? s_84 :
              Switch107_out1_19);



  assign s_85 = signal2_87;

  assign signal2_88 = (CT22_out1_3 == 1'b0 ? s_85 :
              12'sb101101100010);



  assign s_86 = signal2_88;

  assign signal2_89 = (CT21_out1_1 == 1'b0 ? s_86 :
              12'sb010010011110);



  assign s_87 = signal2_89;

  assign signal2_90 = (CT19_out1_1 == 1'b0 ? s_87 :
              12'sb110101010101);



  assign s_88 = signal2_90;

  assign signal2_91 = (CT18_out1 == 1'b0 ? s_88 :
              12'sb110101010101);



  assign s_89 = signal2_91;

  assign signal2_92 = (CT17_out1_1 == 1'b0 ? s_89 :
              12'sb010101010101);



  assign s_90 = signal2_92;

  assign signal2_93 = (CT104_out1 == 1'b0 ? s_90 :
              12'sb101101100010);



  assign s_91 = signal2_93;

  assign signal2_94 = (CT103_out1_1 == 1'b0 ? s_91 :
              12'sb010010011110);



  assign s_92 = signal2_94;

  assign signal2_95 = (CT101_out1_1 == 1'b0 ? s_92 :
              12'sb110101010101);



  assign s_93 = signal2_95;

  assign signal2_96 = (CT15_out1 == 1'b0 ? s_93 :
              12'sb110101010101);



  assign s_94 = signal2_96;

  assign signal2_97 = (CT14_out1_1 == 1'b0 ? s_94 :
              12'sb010101010101);



  assign s_95 = signal2_97;

  assign Switch106_out1_1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb000000000000);



  assign signal2_98 = (CT4_out1_1 == 1'b0 ? s_95 :
              Switch106_out1_1);



  assign s_96 = signal2_98;

  assign Switch105_out1_8 = (DY11_En == 1'b0 ? 12'sb001100010100 :
              12'sb001010101011);



  assign signal2_99 = (CT7_out1_1 == 1'b0 ? s_96 :
              Switch105_out1_8);



  assign s_97 = signal2_99;

  assign Switch104_out1_1 = (DY11_En == 1'b0 ? 12'sb111001110110 :
              12'sb110101010101);



  assign signal2_100 = (CT2_out1_1 == 1'b0 ? s_97 :
              Switch104_out1_1);



  assign s_98 = signal2_100;

  assign Switch103_out1 = (DY11_En == 1'b0 ? 12'sb110101010101 :
              12'sb110011101100);



  assign signal2_101 = (CT3_out1_2 == 1'b0 ? s_98 :
              Switch103_out1);



  assign s_99 = signal2_101;

  assign Switch102_out1 = (DY11_En == 1'b0 ? 12'sb000000000000 :
              12'sb000110001010);



  assign signal2_102 = (CT1_out1_1 == 1'b0 ? s_99 :
              Switch102_out1);



  assign s_100 = signal2_102;

  assign Switch101_out1 = (DY11_En == 1'b0 ? 12'sb001010101011 :
              12'sb000110001010);



  assign signal3_3 = (CT125_out1_1 == 1'b0 ? 1'b0 :
              1'b0);



  assign s_101 = signal3_3;

  assign signal3_4 = (CT124_out1 == 1'b0 ? s_101 :
              1'b1);



  assign s_102 = signal3_4;

  assign signal3_5 = (CT123_out1_1 == 1'b0 ? s_102 :
              1'b0);



  assign s_103 = signal3_5;

  assign signal3_6 = (CT122_out1 == 1'b0 ? s_103 :
              1'b1);



  assign s_104 = signal3_6;

  assign signal3_7 = (CT121_out1_1 == 1'b0 ? s_104 :
              1'b0);



  assign s_105 = signal3_7;

  assign signal3_8 = (CT120_out1 == 1'b0 ? s_105 :
              1'b1);



  assign s_106 = signal3_8;

  assign signal3_9 = (CT119_out1 == 1'b0 ? s_106 :
              1'b0);



  assign s_107 = signal3_9;

  assign signal3_10 = (CT118_out1 == 1'b0 ? s_107 :
              1'b1);



  assign s_108 = signal3_10;

  assign signal3_11 = (CT94_out1_1 == 1'b0 ? s_108 :
              1'b0);



  assign s_109 = signal3_11;

  assign signal3_12 = (CT93_out1 == 1'b0 ? s_109 :
              1'b1);



  assign s_110 = signal3_12;

  assign signal3_13 = (CT92_out1_1 == 1'b0 ? s_110 :
              1'b0);



  assign s_111 = signal3_13;

  assign signal3_14 = (CT91_out1 == 1'b0 ? s_111 :
              1'b1);



  assign s_112 = signal3_14;

  assign signal3_15 = (CT82_out1_1 == 1'b0 ? s_112 :
              1'b0);



  assign s_113 = signal3_15;

  assign signal3_16 = (CT81_out1 == 1'b0 ? s_113 :
              1'b1);



  assign s_114 = signal3_16;

  assign signal3_17 = (CT80_out1 == 1'b0 ? s_114 :
              1'b0);



  assign s_115 = signal3_17;

  assign signal3_18 = (CT79_out1_1 == 1'b0 ? s_115 :
              1'b1);



  assign s_116 = signal3_18;

  assign signal3_19 = (CT76_out1_1 == 1'b0 ? s_116 :
              1'b0);



  assign s_117 = signal3_19;

  assign signal3_20 = (CT75_out1 == 1'b0 ? s_117 :
              1'b1);



  assign s_118 = signal3_20;

  assign signal3_21 = (CT74_out1_1 == 1'b0 ? s_118 :
              1'b0);



  assign s_119 = signal3_21;

  assign signal3_22 = (CT73_out1_2 == 1'b0 ? s_119 :
              1'b1);



  assign s_120 = signal3_22;

  assign signal3_23 = (CT68_out1_1 == 1'b0 ? s_120 :
              1'b0);



  assign s_121 = signal3_23;

  assign signal3_24 = (CT67_out1_1 == 1'b0 ? s_121 :
              1'b1);



  assign s_122 = signal3_24;

  assign signal3_25 = (CT66_out1_2 == 1'b0 ? s_122 :
              1'b0);



  assign s_123 = signal3_25;

  assign signal3_26 = (CT65_out1_2 == 1'b0 ? s_123 :
              1'b1);



  assign s_124 = signal3_26;

  assign signal3_27 = (CT64_out1_2 == 1'b0 ? s_124 :
              1'b0);



  assign s_125 = signal3_27;

  assign signal3_28 = (CT63_out1 == 1'b0 ? s_125 :
              1'b1);



  assign s_126 = signal3_28;

  assign signal3_29 = (CT62_out1_1 == 1'b0 ? s_126 :
              1'b0);



  assign s_127 = signal3_29;

  assign signal3_30 = (CT61_out1 == 1'b0 ? s_127 :
              1'b1);



  assign s_128 = signal3_30;

  assign signal3_31 = (CT54_out1_1 == 1'b0 ? s_128 :
              1'b0);



  assign s_129 = signal3_31;

  assign signal3_32 = (CT53_out1 == 1'b0 ? s_129 :
              1'b1);



  assign s_130 = signal3_32;

  assign signal3_33 = (CT52_out1 == 1'b0 ? s_130 :
              1'b0);



  assign s_131 = signal3_33;

  assign signal3_34 = (CT51_out1_2 == 1'b0 ? s_131 :
              1'b1);



  assign s_132 = signal3_34;

  assign signal3_35 = (CT50_out1_1 == 1'b0 ? s_132 :
              1'b0);



  assign s_133 = signal3_35;

  assign signal3_36 = (CT49_out1_2 == 1'b0 ? s_133 :
              1'b1);



  assign s_134 = signal3_36;

  assign signal3_37 = (CT48_out1_1 == 1'b0 ? s_134 :
              1'b0);



  assign s_135 = signal3_37;

  assign signal3_38 = (CT47_out1_2 == 1'b0 ? s_135 :
              1'b1);



  assign s_136 = signal3_38;

  assign signal3_39 = (CT22_out1_3 == 1'b0 ? s_136 :
              1'b0);



  assign s_137 = signal3_39;

  assign signal3_40 = (CT21_out1_1 == 1'b0 ? s_137 :
              1'b1);



  assign s_138 = signal3_40;

  assign signal3_41 = (CT19_out1_1 == 1'b0 ? s_138 :
              1'b0);



  assign s_139 = signal3_41;

  assign signal3_42 = (CT18_out1 == 1'b0 ? s_139 :
              1'b0);



  assign s_140 = signal3_42;

  assign signal3_43 = (CT17_out1_1 == 1'b0 ? s_140 :
              1'b1);



  assign s_141 = signal3_43;

  assign signal3_44 = (CT104_out1 == 1'b0 ? s_141 :
              1'b0);



  assign s_142 = signal3_44;

  assign signal3_45 = (CT103_out1_1 == 1'b0 ? s_142 :
              1'b1);



  assign s_143 = signal3_45;

  assign signal3_46 = (CT101_out1_1 == 1'b0 ? s_143 :
              1'b0);



  assign s_144 = signal3_46;

  assign signal3_47 = (CT15_out1 == 1'b0 ? s_144 :
              1'b0);



  assign s_145 = signal3_47;

  assign signal3_48 = (CT14_out1_1 == 1'b0 ? s_145 :
              1'b1);



  assign s_146 = signal3_48;

  assign signal3_49 = (CT4_out1_1 == 1'b0 ? s_146 :
              1'b0);



  assign s_147 = signal3_49;

  assign signal3_50 = (CT7_out1_1 == 1'b0 ? s_147 :
              1'b0);



  assign s_148 = signal3_50;

  assign signal3_51 = (CT2_out1_1 == 1'b0 ? s_148 :
              1'b1);



  assign s_149 = signal3_51;

  assign signal3_52 = (CT3_out1_2 == 1'b0 ? s_149 :
              1'b0);



  assign s_150 = signal3_52;

  assign signal3_53 = (CT1_out1_1 == 1'b0 ? s_150 :
              1'b0);



  assign s_151 = signal3_53;

  assign signal3_54 = (CT5_out1_2 == 1'b0 ? s_151 :
              1'b1);



  assign signal3_55 = signal3_54;

  assign signal3_56 = signal3_55;

  assign signal2_103 = (CT5_out1_2 == 1'b0 ? s_100 :
              Switch101_out1);



  assign signal2_104 = signal2_103;

  assign signal2_105 = signal2_104;

  assign Constant9_out1_dtc_1 = 25'sb0000000000000000000000000;



  assign Constant2_out1_dtc_1 = 25'sb0001111111111111111111111;



  assign Constant1_out1_dtc_2 = 25'sb1110000000000000000000001;



  assign CT29_out1_4 = Unit_Delay7_out1 == 2'b00;



  assign CT81_out1_5 = UacSoftFre_b16 >= 16'b1111111111111010;



  assign Switch130_out1_2 = (CT81_out1_5 == 1'b0 ? UacSoftFre_b16 :
              16'b1111111111111010);



  always @(posedge g_clk)
    begin : Unit_Delay612_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1_3 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay61_out1_3 <= Add14_out1_4;
      end
    end



  assign Add14_out1_4 = Switch130_out1_2 + Unit_Delay61_out1_3;



  assign Relational_Operator11_relop1 = Add14_out1_4 < Unit_Delay61_out1_3;



  assign Switch214_out1_2 = (Relational_Operator11_relop1 == 1'b0 ? Unit_Delay36_out1_2 :
              1'b1);



  assign Switch213_out1_2 = (CT29_out1_4 == 1'b0 ? Switch214_out1_2 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay362_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay36_out1_2 <= Switch213_out1_2;
      end
    end



  assign Or6_out1_4 = Relational_Operator11_relop1 | Unit_Delay36_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay372_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay37_out1_2 <= Switch83_out1_6;
      end
    end



  assign Switch83_out1_6 = (CT29_out1_4 == 1'b0 ? Unit_Delay37_out1_2 :
              Or6_out1_4);



  assign CT61_out1_7 = Switch139_out1_1 == 7'b0101001;



  assign CT63_out1_3 = Switch139_out1_1 == 7'b0101001;



  assign CT52_out1_3 = Unit_Delay7_out1 == 2'b01;



  assign CT51_out1_8 = Unit_Delay7_out1 == 2'b00;



  assign CT99_out1_3 = Switch139_out1_1 == 7'b0010100;



  assign CT122_out1_1 = Switch139_out1_1 == 7'b0001100;



  assign CT110_out1_2 = Switch139_out1_1 == 7'b0001010;



  assign CT102_out1_2 = Switch139_out1_1 == 7'b0001000;



  assign RO_1_relop1 = Uab_RMS <= Ubc_RMS;



  assign SW_1_out1 = (RO_1_relop1 == 1'b0 ? Ubc_RMS :
              Uab_RMS);



  assign RO_2_relop1 = SW_1_out1 <= Uca_RMS;



  assign SW_2_out1 = (RO_2_relop1 == 1'b0 ? Uca_RMS :
              SW_1_out1);



  assign RO_3_relop1 = Uab_RMS >= Ubc_RMS;



  assign SW_3_out1 = (RO_3_relop1 == 1'b0 ? Ubc_RMS :
              Uab_RMS);



  assign RO_4_relop1 = SW_3_out1 >= Uca_RMS;



  assign SW_4_out1 = (RO_4_relop1 == 1'b0 ? Uca_RMS :
              SW_3_out1);



  assign CT11_out1_3 = Switch139_out1_1 == 7'b0011100;



  assign CT10_out1_3 = Switch139_out1_1 == 7'b0011011;



  assign CT8_out1_3 = Switch139_out1_1 == 7'b0011010;



  assign CT6_out1_3 = Switch139_out1_1 == 7'b0011001;



  assign Bit_Slice8_out1 = Um_ref_b12[11:1];



  assign Data_Type_S13_out1 = Bit_Slice8_out1;



  assign Data_Type_S14_out1 = {Data_Type_S13_out1[10], Data_Type_S13_out1};



  assign Bit_Slice7_out1 = Um_ref_b12[11:3];



  assign Data_Type_S11_out1_1 = Bit_Slice7_out1;



  assign Data_Type_S12_out1_1 = {{3{Data_Type_S11_out1_1[8]}}, Data_Type_S11_out1_1};



  assign CT104_out1_2 = Switch139_out1_1 == 7'b0001001;



  assign CT126_out1_1 = Switch139_out1_1 == 7'b0001111;



  assign CT172_out1 = Switch139_out1_1 == 7'b0101100;



  assign CT127_out1_1 = Switch139_out1_1 == 7'b0001111;



  assign CT16_out1_4 = Switch139_out1_1 == 7'b0100011;



  assign CT18_out1_2 = Switch139_out1_1 == 7'b0100100;



  assign CT20_out1_3 = Switch139_out1_1 == 7'b0100101;



  assign CT25_out1_3 = Switch139_out1_1 == 7'b0100110;



  assign CT27_out1_3 = Switch139_out1_1 == 7'b0100111;



  assign CT173_out1 = Switch139_out1_1 == 7'b0101100;



  assign CT185_out1 = Switch139_out1_1 == 7'b0101011;



  assign CT109_out1_2 = Switch139_out1_1 == 7'b0001010;



  assign CT124_out1_1 = Switch139_out1_1 == 7'b0001110;



  assign CT129_out1_1 = Switch139_out1_1 == 7'b0010000;



  assign CT19_out1_4 = Switch139_out1_1 == 7'b0100101;



  assign RO171_relop1 = Udq_Add_b12 > 12'sb000001100100;



  assign Switch290_out1 = (RO171_relop1 == 1'b0 ? Udq_Add_b12 :
              12'sb000001100100);



  assign RO161_relop1 = Switch290_out1 < 12'sb111110011100;



  assign Switch289_out1 = (RO161_relop1 == 1'b0 ? Switch290_out1 :
              12'sb111110011100);



  assign Switch291_out1 = (SycGen_En == 1'b0 ? 12'sb000000000000 :
              Switch289_out1);



  assign CT17_out1_3 = Switch139_out1_1 == 7'b0100100;



  assign Compare_To_Constant24_out1 = Switch139_out1_1 == 7'b0100010;



  assign Compare_To_Constant22_out1 = Switch139_out1_1 == 7'b0001110;



  always @(posedge g_clk)
    begin : Unit_Delay1411_process
      if (Rst_n == 1'b0) begin
        Unit_Delay141_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay141_out1 <= Switch294_out1;
      end
    end



  assign bit_shift9_out1 = Unit_Delay141_out1 >> 8'd1;



  assign Switch294_out1 = (Compare_To_Constant22_out1 == 1'b0 ? bit_shift9_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant23_out1 = Switch139_out1_1 == 7'b0001110;



  assign Compare_To_Constant16_out1 = Switch139_out1_1 == 7'b0100100;



  assign Compare_To_Constant14_out1 = Switch139_out1_1 == 7'b0010000;



  always @(posedge g_clk)
    begin : Unit_Delay921_process
      if (Rst_n == 1'b0) begin
        Unit_Delay92_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay92_out1 <= Switch182_out1;
      end
    end



  assign bit_shift5_out1 = Unit_Delay92_out1 >> 8'd1;



  assign Switch182_out1 = (Compare_To_Constant14_out1 == 1'b0 ? bit_shift5_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant15_out1 = Switch139_out1_1 == 7'b0010000;



  assign Compare_To_Constant8_out1 = Switch139_out1_1 == 7'b0100010;



  assign Compare_To_Constant6_out1 = Switch139_out1_1 == 7'b0001110;



  always @(posedge g_clk)
    begin : Unit_Delay89_process
      if (Rst_n == 1'b0) begin
        Unit_Delay89_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay89_out1 <= Switch178_out1;
      end
    end



  assign bit_shift3_out1 = Unit_Delay89_out1 >> 8'd1;



  assign Switch178_out1 = (Compare_To_Constant6_out1 == 1'b0 ? bit_shift3_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant7_out1 = Switch139_out1_1 == 7'b0001110;



  assign Compare_To_Constant11_out1 = Switch139_out1_1 == 7'b0010100;



  assign Compare_To_Constant9_out1 = Switch139_out1_1 == 7'b0000000;



  always @(posedge g_clk)
    begin : Unit_Delay106_process
      if (Rst_n == 1'b0) begin
        Unit_Delay106_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay106_out1 <= Switch218_out1;
      end
    end



  assign bit_shift8_out1 = Unit_Delay106_out1 >> 8'd1;



  assign Switch218_out1 = (Compare_To_Constant9_out1 == 1'b0 ? bit_shift8_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant10_out1 = Switch139_out1_1 == 7'b0000000;



  assign CT71_out1_4 = Switch139_out1_1 == 7'b0001010;



  assign Constant35_out1_dtc = 37'sh00000007FF;



  assign Constant36_out1_dtc = 37'sh1FFFFFF801;



  assign CT21_out1_3 = Switch139_out1_1 == 7'b0100110;



  assign Add2_out1_3 = Add11_out1_1 + 7'b0000001;



  assign CT30_out1_3 = Unit_Delay7_out1 == 2'b10;



  assign CT56_out1_6 = Unit_Delay7_out1 == 2'b01;



  assign CT28_out1_3 = Unit_Delay7_out1 == 2'b00;



  assign CT105_out1_1 = Switch139_out1_1 == 7'b0000000;



  assign CT40_out1_3 = Unit_Delay7_out1 == 2'b00;



  assign CT120_out1_1 = Unit_Delay7_out1 == 2'b00;



  assign Switch81_out1_1 = (Pulse50x256_Hz1 == 1'b0 ? Unit_Delay34_out1 :
              1'b1);



  assign Switch212_out1 = (CT120_out1_1 == 1'b0 ? Switch81_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay345_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 1'b0;
      end
      else begin
        Unit_Delay34_out1 <= Switch212_out1;
      end
    end



  assign Or5_out1_2 = Pulse50x256_Hz1 | Unit_Delay34_out1;



  always @(posedge g_clk)
    begin : Unit_Delay355_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1 <= 1'b0;
      end
      else begin
        Unit_Delay35_out1 <= Switch211_out1;
      end
    end



  assign Switch211_out1 = (CT120_out1_1 == 1'b0 ? Unit_Delay35_out1 :
              Or5_out1_2);



  assign switch_compare_1_19 = Switch211_out1 > 1'b0;



  assign CT41_out1_2 = Unit_Delay7_out1 == 2'b00;



  assign CT44_out1_3 = Unit_Delay7_out1 == 2'b01;



  assign CT58_out1_7 = Unit_Delay7_out1 == 2'b10;



  assign CT45_out1_3 = Unit_Delay7_out1 == 2'b10;



  assign CT42_out1_3 = Unit_Delay7_out1 == 2'b01;



  assign Switch59_out1_1 = (Switch211_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  always @(posedge g_clk)
    begin : Unit_Delay213_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1_1 <= 8'b00000000;
      end
      else begin
        Unit_Delay21_out1_1 <= Add18_out1;
      end
    end



  assign Add18_out1 = Switch59_out1_1 + Unit_Delay21_out1_1;



  assign Constant20_out1 = 1'b1;



  assign Add20_out1 = Add18_out1 + 8'b00000001;



  assign CT107_out1_2 = Switch139_out1_1 == 7'b0000001;



  assign CT37_out1_3 = Unit_Delay7_out1 == 2'b01;



  assign CT34_out1_3 = Unit_Delay7_out1 < 2'b10;



  assign CT13_out1_2 = Unit_Delay7_out1 == 2'b00;



  assign Switch209_out1_1 = (Pulse50x16_Hz == 1'b0 ? Unit_Delay32_out1_6 :
              1'b1);



  assign Switch82_out1_1 = (CT13_out1_2 == 1'b0 ? Switch209_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay325_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_6 <= 1'b0;
      end
      else begin
        Unit_Delay32_out1_6 <= Switch82_out1_1;
      end
    end



  assign Or4_out1_4 = Pulse50x16_Hz | Unit_Delay32_out1_6;



  always @(posedge g_clk)
    begin : Unit_Delay562_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1_1 <= Switch210_out1_1;
      end
    end



  assign Switch210_out1_1 = (CT13_out1_2 == 1'b0 ? Unit_Delay56_out1_1 :
              Or4_out1_4);



  assign CT78_out1_3 = Unit_Delay7_out1 == 2'b00;



  assign Or8_out1 = Switch210_out1_1 & CT78_out1_3;



  assign CT36_out1_2 = Unit_Delay7_out1 == 2'b00;



  assign CT38_out1_2 = Unit_Delay7_out1 == 2'b01;



  assign CT35_out1_3 = Unit_Delay7_out1 == 2'b00;



  assign Constant15_out1 = 1'b1;



  assign Add17_out1_2 = 3'b001 + Unit_Delay44_out1_1;



  assign CT78_out1_4 = Add17_out1_2 >= 3'b010;



  assign Switch106_out1_2 = (CT78_out1_4 == 1'b0 ? Add17_out1_2 :
              3'b000);



  always @(posedge g_clk)
    begin : Unit_Delay442_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1_1 <= 3'b000;
      end
      else begin
        Unit_Delay44_out1_1 <= Switch106_out1_2;
      end
    end



  assign CT68_out1_5 = Unit_Delay44_out1_1 == 3'b000;



  assign Logical_Operator4_out1_1 =  ~ Excite_On;



  assign CT66_out1_6 = Unit_Delay44_out1_1 == 3'b000;



  assign B30_out1_signal2 = Switch107_out1_11;

  assign B30_out1_signal2_1 = Switch107_out1_11;

  assign signal2_106 = (CT66_out1_6 == 1'b0 ? B30_out1_signal2 :
              B30_out1_signal2_1);



  assign signal2_107 = signal2_106;

  assign signal2_108 = signal2_107;

  assign CT80_out1_4 = Unit_Delay44_out1_1 == 3'b000;



  assign CT81_out1_6 = UdcSoftFre_b16 >= 16'b0111111111111000;



  assign Switch123_out1_2 = (CT81_out1_6 == 1'b0 ? UdcSoftFre_b16 :
              16'b0111111111111000);



  always @(posedge g_clk)
    begin : Unit_Delay492_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1_1 <= 16'b0000000000000000;
      end
      else begin
        Unit_Delay49_out1_1 <= Add14_out1_5;
      end
    end



  assign Add14_out1_5 = Switch123_out1_2 + Unit_Delay49_out1_1;



  assign Relational_Operator9_relop1 = Add14_out1_5 < Unit_Delay49_out1_1;



  assign CT79_out1_5 = Unit_Delay44_out1_1 == 3'b000;



  assign Switch122_out1_2 = (Relational_Operator9_relop1 == 1'b0 ? Unit_Delay50_out1_2 :
              1'b1);



  assign Switch121_out1_1 = (CT79_out1_5 == 1'b0 ? Switch122_out1_2 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay502_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay50_out1_2 <= Switch121_out1_1;
      end
    end



  assign Or2_out1_11 = Relational_Operator9_relop1 | Unit_Delay50_out1_2;



  assign And8_out1_1 = CT80_out1_4 & Or2_out1_11;



  assign Add13_out1_1 = 4'sb1111 + Switch105_out1_9;



  assign CT70_out1_10 = Add13_out1_1 <= 4'sb0000;



  assign Switch104_out1_2 = (CT70_out1_10 == 1'b0 ? Add13_out1_1 :
              4'sb0000);



  always @(posedge g_clk)
    begin : Unit_Delay482_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1_1 <= 4'sb0000;
      end
      else begin
        Unit_Delay48_out1_1 <= Switch104_out1_2;
      end
    end



  assign Switch105_out1_9 = (And8_out1_1 == 1'b0 ? Unit_Delay48_out1_1 :
              4'sb0010);



  assign CT71_out1_5 = Switch105_out1_9 > 4'sb0000;



  assign signal1_20 = (CT66_out1_6 == 1'b0 ? Udc_Ref_b12 :
              Udc_Ref_b12);



  assign signal1_21 = signal1_20;

  assign signal1_22 = signal1_21;

  assign CT83_out1_3 = Switch139_out1 == 7'b0000110;



  assign CT85_out1_3 = Switch139_out1 == 7'b0000111;



  assign CT17_out1_4 = Switch139_out1 == 7'b0001110;



  assign CT20_out1_4 = Switch139_out1 == 7'b0001111;



  assign CT44_out1_4 = Switch139_out1 == 7'b0100000;



  assign CT36_out1_3 = Switch139_out1 == 7'b0011110;



  assign CT78_out1_5 = Switch139_out1 == 7'b0000011;



  assign CT15_out1_3 = Switch139_out1 == 7'b0001110;



  assign CT107_out1_3 = Switch139_out1 == 7'b0001011;



  assign CT110_out1_3 = Switch139_out1 == 7'b0001101;



  assign CT18_out1_3 = Switch139_out1 == 7'b0001110;



  assign CT2_out1_3 = Switch139_out1 == 7'b0001101;



  assign CT10_out1_4 = Switch139_out1 == 7'b0000011;



  assign CT94_out1_3 = Switch139_out1 == 7'b0001011;



  assign CT88_out1_1 = Switch139_out1 == 7'b0001001;



  assign CT109_out1_3 = Switch139_out1 == 7'b0001101;



  assign CT38_out1_3 = Switch139_out1 == 7'b0011111;



  assign CT123_out1_2 = Switch139_out1 == 7'b0000000;



  assign Switch124_out1_1 = (Pulse_4096Hz == 1'b0 ? Unit_Delay52_out1_2 :
              1'b1);



  assign Switch123_out1_3 = (CT123_out1_2 == 1'b0 ? Switch124_out1_1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay521_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay52_out1_2 <= Switch123_out1_3;
      end
    end



  assign Or1_out1_6 = Pulse_4096Hz | Unit_Delay52_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay531_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1_3 <= Switch125_out1_1;
      end
    end



  assign Switch125_out1_1 = (CT123_out1_2 == 1'b0 ? Unit_Delay53_out1_3 :
              Or1_out1_6);



  assign switch_compare_1_20 = Switch125_out1_1 > 1'b0;



  assign CT11_out1_4 = Switch139_out1 == 7'b0000100;



  assign CT96_out1_2 = Switch139_out1 == 7'b0001100;



  assign CT92_out1_2 = Switch139_out1 == 7'b0001010;



  assign CT14_out1_3 = Switch139_out1 == 7'b0001110;



  assign CT108_out1_3 = Switch139_out1 == 7'b0001101;



  assign CT105_out1_2 = Switch139_out1 == 7'b0001011;



  assign CT106_out1_3 = Switch139_out1 == 7'b0001011;



  assign CT1_out1_3 = Switch139_out1 == 7'b0001101;



  assign CT53_out1_2 = Switch139_out1 == 7'b0000101;



  assign CT75_out1_2 = Switch139_out1 == 7'b0000010;



  assign CT9_out1_4 = Switch139_out1 == 7'b0000011;



  assign CT13_out1_3 = Switch139_out1 == 7'b0000100;



  assign CT87_out1_3 = Switch139_out1 == 7'b0001001;



  assign CT91_out1_3 = Switch139_out1 == 7'b0001010;



  assign CT93_out1_2 = Switch139_out1 == 7'b0001011;



  assign CT95_out1_1 = Switch139_out1 == 7'b0001100;



  assign CT104_out1_3 = Switch139_out1 == 7'b0001001;



  assign CT102_out1_3 = Switch139_out1 == 7'b0001000;



  assign CT7_out1_3 = Switch139_out1 == 7'b0000010;



  assign CT41_out1_3 = Switch139_out1 == 7'b0100001;



  assign Compare_To_Constant20_out1 = Switch139_out1_1 == 7'b0100101;



  assign Compare_To_Constant18_out1 = Switch139_out1_1 == 7'b0010001;



  always @(posedge g_clk)
    begin : Unit_Delay95_process
      if (Rst_n == 1'b0) begin
        Unit_Delay95_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay95_out1 <= Switch186_out1;
      end
    end



  assign bit_shift7_out1 = Unit_Delay95_out1 >> 8'd1;



  assign Switch186_out1 = (Compare_To_Constant18_out1 == 1'b0 ? bit_shift7_out1 :
              24'b001000000000000000000000);



  assign Compare_To_Constant19_out1 = Switch139_out1_1 == 7'b0010001;



  assign CT97_out1_4 = Switch139_out1_1 == 7'b0010000;



  assign Data_Type_Conversion27_out1 = Unit_Delay38_out1_1;



  assign B37_out1_signal2 = Data_Type_Conversion27_out1;

  assign Data_Type_Conversion23_out1 = Unit_Delay38_out1_1;



  assign B36_out1_signal2 = Data_Type_Conversion23_out1;

  assign signal2_109 = (CT1_out1_3 == 1'b0 ? Pdc2ac_co_b16 :
              Pdc2ac_co_b16);



  assign signal2_110 = signal2_109;

  assign Data_Type_Conversion13_out1 = {{8{signal2_110[15]}}, signal2_110};



  assign signal2_111 = (CT95_out1_1 == 1'b0 ? Idc_Ki_b16 :
              Idc_Ki_b16);



  assign s_152 = signal2_111;

  assign signal2_112 = (CT93_out1_2 == 1'b0 ? s_152 :
              Idc_Kp_b16);



  assign s_153 = signal2_112;

  assign signal2_113 = (CT91_out1_3 == 1'b0 ? s_153 :
              Idc_Ki_b16);



  assign s_154 = signal2_113;

  assign signal2_114 = (CT87_out1_3 == 1'b0 ? s_154 :
              Idc_Kp_b16);



  assign s_155 = signal2_114;

  assign signal2_115 = (CT13_out1_3 == 1'b0 ? s_155 :
              Udc_Ki_b16);



  assign s_156 = signal2_115;

  assign signal2_116 = (CT9_out1_4 == 1'b0 ? s_156 :
              Udc_Kp_b16);



  assign s_157 = signal2_116;

  assign CT166_out1 = Switch139_out1_1 == 7'b0010110;



  assign CT164_out1 = Switch139_out1_1 == 7'b0010101;



  assign CT151_out1 = Switch139_out1_1 == 7'b0010010;



  assign Cmp20_out1 = Switch139_out1_1 == 7'b0010001;



  assign Cmp18_out1 = Switch139_out1_1 == 7'b0000111;



  always @(posedge g_clk)
    begin : Unit_Delay811_process
      if (Rst_n == 1'b0) begin
        Unit_Delay81_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay81_out1 <= Switch167_out1;
      end
    end



  assign bit_shift4_out1 = Unit_Delay81_out1 >> 8'd1;



  assign Switch167_out1 = (Cmp18_out1 == 1'b0 ? bit_shift4_out1 :
              12'b010000000000);



  assign Cmp19_out1 = Switch139_out1_1 == 7'b0000111;



  assign CT93_out1_3 = Switch139_out1_1 == 7'b0000110;



  assign CT160_out1 = Switch139_out1_1 == 7'b0001111;



  assign CT158_out1 = Switch139_out1_1 == 7'b0001110;



  assign CT80_out1_5 = Switch139_out1_1 == 7'b0001011;



  assign CT86_out1_2 = Switch139_out1_1 == 7'b0000110;



  assign CT82_out1_3 = Switch139_out1_1 == 7'b0000100;



  assign CT69_out1_3 = Switch139_out1_1 == 7'b0000010;



  assign CT53_out1_3 = Switch139_out1_1 == 7'b0000000;



  assign CT168_out1 = Switch139_out1_1 == 7'b0010111;



  assign CT157_out1 = Switch139_out1_1 == 7'b0010101;



  assign CT155_out1 = Switch139_out1_1 == 7'b0010100;



  assign CT153_out1 = Switch139_out1_1 == 7'b0010011;



  assign Cmp23_out1 = Switch139_out1_1 == 7'b0010011;



  assign Cmp21_out1 = Switch139_out1_1 == 7'b0001001;



  always @(posedge g_clk)
    begin : Unit_Delay84_process
      if (Rst_n == 1'b0) begin
        Unit_Delay84_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay84_out1 <= Switch171_out1;
      end
    end



  assign bit_shift6_out1 = Unit_Delay84_out1 >> 8'd1;



  assign Switch171_out1 = (Cmp21_out1 == 1'b0 ? bit_shift6_out1 :
              12'b010000000000);



  assign Cmp22_out1 = Switch139_out1_1 == 7'b0001001;



  assign CT95_out1_2 = Switch139_out1_1 == 7'b0001000;



  assign CT149_out1 = Switch139_out1_1 == 7'b0010001;



  assign CT147_out1 = Switch139_out1_1 == 7'b0001110;



  assign CT145_out1 = Switch139_out1_1 == 7'b0001101;



  assign CT88_out1_2 = Switch139_out1_1 == 7'b0000111;



  assign CT84_out1_3 = Switch139_out1_1 == 7'b0000101;



  assign CT75_out1_3 = Switch139_out1_1 == 7'b0000011;



  assign CT67_out1_3 = Switch139_out1_1 == 7'b0000001;



  assign Switch133_out1 = (CT67_out1_3 == 1'b0 ? Unit_Delay48_out1_2 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay483_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay48_out1_2 <= Switch133_out1;
      end
    end



  assign Switch137_out1_1 = (CT75_out1_3 == 1'b0 ? Unit_Delay64_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay641_process
      if (Rst_n == 1'b0) begin
        Unit_Delay64_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay64_out1 <= Switch137_out1_1;
      end
    end



  assign Switch142_out1 = (CT84_out1_3 == 1'b0 ? Unit_Delay66_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay661_process
      if (Rst_n == 1'b0) begin
        Unit_Delay66_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay66_out1 <= Switch142_out1;
      end
    end



  assign Switch146_out1 = (CT88_out1_2 == 1'b0 ? Unit_Delay68_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay681_process
      if (Rst_n == 1'b0) begin
        Unit_Delay68_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay68_out1 <= Switch146_out1;
      end
    end



  assign Switch252_out1 = (CT145_out1 == 1'b0 ? Unit_Delay124_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay124_process
      if (Rst_n == 1'b0) begin
        Unit_Delay124_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay124_out1 <= Switch252_out1;
      end
    end



  assign Switch261_out1 = (CT147_out1 == 1'b0 ? Unit_Delay125_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay125_process
      if (Rst_n == 1'b0) begin
        Unit_Delay125_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay125_out1 <= Switch261_out1;
      end
    end



  assign Data_Type_S23_out1 = {{12{Unit_Delay77_out1[11]}}, Unit_Delay77_out1};



  assign Switch263_out1 = (CT149_out1 == 1'b0 ? Unit_Delay126_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay126_process
      if (Rst_n == 1'b0) begin
        Unit_Delay126_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay126_out1 <= Switch263_out1;
      end
    end



  assign Switch156_out1 = (CT95_out1_2 == 1'b0 ? Unit_Delay72_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay721_process
      if (Rst_n == 1'b0) begin
        Unit_Delay72_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay72_out1 <= Switch156_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay821_process
      if (Rst_n == 1'b0) begin
        Unit_Delay82_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay82_out1 <= Switch170_out1;
      end
    end



  assign Switch173_out1 = (Cmp22_out1 == 1'b0 ? Unit_Delay82_out1 :
              12'b000000000000);



  assign Bitwise_Operator9_out1 = Switch171_out1 | Switch173_out1;



  assign Product10_out1 = Bitwise_Operator9_out1 * Bitwise_Operator9_out1;



  assign RO341_1_1 = {1'b0, Product10_out1};
  assign RO341_1_2 = {Unit_Delay72_out1[23], Unit_Delay72_out1};
  assign RO341_relop1 = RO341_1_1 < RO341_1_2;



  assign Switch170_out1 = (RO341_relop1 == 1'b0 ? Switch173_out1 :
              Bitwise_Operator9_out1);



  assign Data_Type_Conversion29_out1 = Switch170_out1;



  assign Switch172_out1 = (Cmp23_out1 == 1'b0 ? Unit_Delay83_out1 :
              Data_Type_Conversion29_out1);



  always @(posedge g_clk)
    begin : Unit_Delay83_process
      if (Rst_n == 1'b0) begin
        Unit_Delay83_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay83_out1 <= Switch172_out1;
      end
    end



  assign Data_Type_S25_out1 = {{12{Unit_Delay83_out1[11]}}, Unit_Delay83_out1};



  assign Switch269_out1 = (CT153_out1 == 1'b0 ? Unit_Delay128_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay128_process
      if (Rst_n == 1'b0) begin
        Unit_Delay128_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay128_out1 <= Switch269_out1;
      end
    end



  assign Unary_Minus110_in0 =  - ({Unit_Delay128_out1[23], Unit_Delay128_out1});
  assign Unary_Minus1_out1_2 = Unary_Minus110_in0[23:0];



  assign Switch271_out1 = (CT155_out1 == 1'b0 ? Unit_Delay129_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay129_process
      if (Rst_n == 1'b0) begin
        Unit_Delay129_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay129_out1 <= Switch271_out1;
      end
    end



  assign Unary_Minus22_in0 =  - ({Unit_Delay129_out1[23], Unit_Delay129_out1});
  assign Unary_Minus2_out1_2 = Unary_Minus22_in0[23:0];



  assign Switch273_out1 = (CT157_out1 == 1'b0 ? Unit_Delay130_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay130_process
      if (Rst_n == 1'b0) begin
        Unit_Delay130_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay130_out1 <= Switch273_out1;
      end
    end



  assign Switch285_out1 = (CT168_out1 == 1'b0 ? Unit_Delay136_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay136_process
      if (Rst_n == 1'b0) begin
        Unit_Delay136_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay136_out1 <= Switch285_out1;
      end
    end



  assign signal2_117 = (CT139_out1 == 1'b0 ? Unit_Delay136_out1 :
              Unit_Delay136_out1);



  assign s_158 = signal2_117;

  assign signal2_118 = (CT169_out1 == 1'b0 ? s_158 :
              Unit_Delay130_out1);



  assign s_159 = signal2_118;

  assign signal2_119 = (CT167_out1 == 1'b0 ? s_159 :
              Unary_Minus2_out1_2);



  assign s_160 = signal2_119;

  assign signal2_120 = (CT165_out1 == 1'b0 ? s_160 :
              Unary_Minus1_out1_2);



  assign s_161 = signal2_120;

  assign signal2_121 = (CT100_out1 == 1'b0 ? s_161 :
              Data_Type_S25_out1);



  assign s_162 = signal2_121;

  assign signal2_122 = (CT163_out1 == 1'b0 ? s_162 :
              Unit_Delay126_out1);



  assign s_163 = signal2_122;

  assign signal2_123 = (CT98_out1 == 1'b0 ? s_163 :
              Data_Type_S23_out1);



  assign s_164 = signal2_123;

  assign signal2_124 = (CT161_out1 == 1'b0 ? s_164 :
              Unit_Delay125_out1);



  assign s_165 = signal2_124;

  assign signal2_125 = (CT159_out1 == 1'b0 ? s_165 :
              Unit_Delay124_out1);



  assign s_166 = signal2_125;

  assign signal2_126 = (CT96_out1 == 1'b0 ? s_166 :
              Unit_Delay68_out1);



  assign s_167 = signal2_126;

  assign signal2_127 = (CT94_out1 == 1'b0 ? s_167 :
              Unit_Delay66_out1);



  assign s_168 = signal2_127;

  assign signal2_128 = (CT92_out1 == 1'b0 ? s_168 :
              Unit_Delay64_out1);



  assign s_169 = signal2_128;

  assign signal2_129 = (CT90_out1 == 1'b0 ? s_169 :
              Unit_Delay48_out1_2);



  assign signal2_130 = signal2_129;

  assign Switch103_out1_1 = (CT53_out1_3 == 1'b0 ? Unit_Delay47_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay472_process
      if (Rst_n == 1'b0) begin
        Unit_Delay47_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay47_out1 <= Switch103_out1_1;
      end
    end



  assign Switch135_out1 = (CT69_out1_3 == 1'b0 ? Unit_Delay63_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay631_process
      if (Rst_n == 1'b0) begin
        Unit_Delay63_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay63_out1 <= Switch135_out1;
      end
    end



  assign Switch140_out1_1 = (CT82_out1_3 == 1'b0 ? Unit_Delay65_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay651_process
      if (Rst_n == 1'b0) begin
        Unit_Delay65_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay65_out1 <= Switch140_out1_1;
      end
    end



  assign Switch144_out1 = (CT86_out1_2 == 1'b0 ? Unit_Delay67_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay671_process
      if (Rst_n == 1'b0) begin
        Unit_Delay67_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay67_out1 <= Switch144_out1;
      end
    end



  assign Switch127_out1 = (CT80_out1_5 == 1'b0 ? Unit_Delay115_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1151_process
      if (Rst_n == 1'b0) begin
        Unit_Delay115_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay115_out1 <= Switch127_out1;
      end
    end



  assign Switch275_out1 = (CT158_out1 == 1'b0 ? Unit_Delay131_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1311_process
      if (Rst_n == 1'b0) begin
        Unit_Delay131_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay131_out1 <= Switch275_out1;
      end
    end



  assign Data_Type_S22_out1 = {{12{Unit_Delay74_out1[11]}}, Unit_Delay74_out1};



  assign Switch277_out1 = (CT160_out1 == 1'b0 ? Unit_Delay132_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1321_process
      if (Rst_n == 1'b0) begin
        Unit_Delay132_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay132_out1 <= Switch277_out1;
      end
    end



  assign Switch154_out1 = (CT93_out1_3 == 1'b0 ? Unit_Delay71_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay711_process
      if (Rst_n == 1'b0) begin
        Unit_Delay71_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay71_out1 <= Switch154_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay79_process
      if (Rst_n == 1'b0) begin
        Unit_Delay79_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay79_out1 <= Switch166_out1;
      end
    end



  assign Switch169_out1 = (Cmp19_out1 == 1'b0 ? Unit_Delay79_out1 :
              12'b000000000000);



  assign Bitwise_Operator8_out1 = Switch167_out1 | Switch169_out1;



  assign Product9_out1 = Bitwise_Operator8_out1 * Bitwise_Operator8_out1;



  assign RO331_1_1 = {1'b0, Product9_out1};
  assign RO331_1_2 = {Unit_Delay71_out1[23], Unit_Delay71_out1};
  assign RO331_relop1 = RO331_1_1 < RO331_1_2;



  assign Switch166_out1 = (RO331_relop1 == 1'b0 ? Switch169_out1 :
              Bitwise_Operator8_out1);



  assign Data_Type_Conversion28_out1 = Switch166_out1;



  assign Switch168_out1 = (Cmp20_out1 == 1'b0 ? Unit_Delay80_out1 :
              Data_Type_Conversion28_out1);



  always @(posedge g_clk)
    begin : Unit_Delay80_process
      if (Rst_n == 1'b0) begin
        Unit_Delay80_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay80_out1 <= Switch168_out1;
      end
    end



  assign Data_Type_S24_out1 = {{12{Unit_Delay80_out1[11]}}, Unit_Delay80_out1};



  assign Switch267_out1 = (CT151_out1 == 1'b0 ? Unit_Delay127_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay127_process
      if (Rst_n == 1'b0) begin
        Unit_Delay127_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay127_out1 <= Switch267_out1;
      end
    end



  assign Switch281_out1 = (CT164_out1 == 1'b0 ? Unit_Delay134_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay134_process
      if (Rst_n == 1'b0) begin
        Unit_Delay134_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay134_out1 <= Switch281_out1;
      end
    end



  assign Switch283_out1 = (CT166_out1 == 1'b0 ? Unit_Delay135_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay135_process
      if (Rst_n == 1'b0) begin
        Unit_Delay135_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay135_out1 <= Switch283_out1;
      end
    end



  assign Bit_Slice8_out1_1 = Unit_Delay69_out1[22:7];



  assign Data_Type_Conversion20_out1 = Bit_Slice8_out1_1;



  assign B34_out1_signal2 = Data_Type_Conversion20_out1;

  assign signal2_131 = (CT75_out1_2 == 1'b0 ? s_157 :
              B34_out1_signal2);



  assign signal2_132 = signal2_131;

  assign Data_Type_Conversion11_out1 = {{8{signal2_132[15]}}, signal2_132};



  assign Data_Type_Conversion16_out1 = Unit_Delay87_out1;



  assign Data_Type_Conversion17_out1 = Unit_Delay87_out1;



  assign Switch174_out1 = (CT97_out1_4 == 1'b0 ? Unit_Delay85_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay85_process
      if (Rst_n == 1'b0) begin
        Unit_Delay85_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay85_out1 <= Switch174_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay94_process
      if (Rst_n == 1'b0) begin
        Unit_Delay94_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay94_out1 <= Switch187_out1;
      end
    end



  assign Switch189_out1 = (Compare_To_Constant19_out1 == 1'b0 ? Unit_Delay94_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator12_out1 = Switch186_out1 | Switch189_out1;



  assign Product13_1 = {1'b0, Bitwise_Operator12_out1};
  assign Product13_mul_temp = Product13_1 * Unit_Delay85_out1;
  assign Product13_out1 = Product13_mul_temp[35:0];



  assign Compare_To_Constant17_out1 = Product13_out1 <= 36'sh0003FF001;



  assign Switch187_out1 = (Compare_To_Constant17_out1 == 1'b0 ? Switch189_out1 :
              Bitwise_Operator12_out1);



  assign Switch188_out1 = (Compare_To_Constant20_out1 == 1'b0 ? Unit_Delay93_out1 :
              Switch187_out1);



  always @(posedge g_clk)
    begin : Unit_Delay93_process
      if (Rst_n == 1'b0) begin
        Unit_Delay93_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay93_out1 <= Switch188_out1;
      end
    end



  assign Data_Type_Conversion18_out1 = Unit_Delay93_out1;



  assign signal2_133 = (CT44_out1_4 == 1'b0 ? Data_Type_Conversion18_out1 :
              Data_Type_Conversion18_out1);



  assign s_170 = signal2_133;

  assign signal2_134 = (CT20_out1_4 == 1'b0 ? s_170 :
              Data_Type_Conversion17_out1);



  assign s_171 = signal2_134;

  assign signal2_135 = (CT17_out1_4 == 1'b0 ? s_171 :
              Data_Type_Conversion16_out1);



  assign s_172 = signal2_135;

  assign signal2_136 = (CT85_out1_3 == 1'b0 ? s_172 :
              B37_out1_signal2);



  assign s_173 = signal2_136;

  assign signal2_137 = (CT83_out1_3 == 1'b0 ? s_173 :
              B36_out1_signal2);



  assign s_174 = signal2_137;

  assign Switch78_out1 = (CT41_out1_3 == 1'b0 ? Unit_Delay25_out1 :
              Data_Type_Conversion3_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay251_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1 <= Switch78_out1;
      end
    end



  assign Logical_Operator2_out1_2 = OR9_out1_2 & (Or9_out1 & LVRT_UnblcCmp_En);



  assign Switch81_out1_2 = (Logical_Operator2_out1_2 == 1'b0 ? Switch69_out1 :
              Unit_Delay25_out1);



  assign signal2_138 = (CT51_out1 == 1'b0 ? Unit_Delay26_out1 :
              Unit_Delay26_out1);



  assign s_175 = signal2_138;

  assign signal2_139 = (CT49_out1 == 1'b0 ? s_175 :
              Unit_Delay26_out1);



  assign s_176 = signal2_139;

  assign signal2_140 = (CT47_out1 == 1'b0 ? s_176 :
              Switch81_out1_2);



  assign s_177 = signal2_140;

  assign signal2_141 = (CT33_out1 == 1'b0 ? s_177 :
              Switch66_out1);



  assign s_178 = signal2_141;

  assign signal2_142 = (CT31_out1 == 1'b0 ? s_178 :
              Switch81_out1_2);



  assign s_179 = signal2_142;

  assign signal2_143 = (CT28_out1 == 1'b0 ? s_179 :
              Switch66_out1);



  assign s_180 = signal2_143;

  assign signal2_144 = (CT37_out1 == 1'b0 ? s_180 :
              Unit_Delay74_out1);



  assign s_181 = signal2_144;

  assign signal2_145 = (CT35_out1 == 1'b0 ? s_181 :
              Unit_Delay77_out1);



  assign s_182 = signal2_145;

  assign signal2_146 = (CT23_out1 == 1'b0 ? s_182 :
              Switch181_out1);



  assign s_183 = signal2_146;

  assign signal2_147 = (CT21_out1 == 1'b0 ? s_183 :
              Unit_Delay114_out1);



  assign s_184 = signal2_147;

  assign signal2_148 = (CT22_out1 == 1'b0 ? s_184 :
              ILimit_b12);



  assign s_185 = signal2_148;

  assign signal2_149 = (CT43_out1 == 1'b0 ? s_185 :
              Switch107_out1_10);



  assign s_186 = signal2_149;

  assign signal2_150 = (CT3_out1 == 1'b0 ? s_186 :
              Unit_Delay46_out1);



  assign s_187 = signal2_150;

  assign signal2_151 = (CT5_out1 == 1'b0 ? s_187 :
              Switch107_out1_11);



  assign signal2_152 = signal2_151;

  assign Data_Type_Conversion9_out1 = {{12{signal2_152[11]}}, signal2_152};



  assign signal2_153 = (Logical_Operator6_out1 == 1'b0 ? Data_Type_Conversion9_out1 :
              s_174);



  assign s_188 = signal2_153;

  assign signal2_154 = (CT64_out1 == 1'b0 ? s_188 :
              Data_Type_Conversion13_out1);



  assign s_189 = signal2_154;

  assign signal2_155 = (Logical_Operator5_out1 == 1'b0 ? s_189 :
              Data_Type_Conversion11_out1);



  assign signal2_156 = signal2_155;

  assign Bit_Slice12_out1 = Add4_out1_2[24:7];



  assign Data_Type_S13_out1_1 = Bit_Slice12_out1;



  assign RO42_relop1 = Data_Type_S13_out1_1 > 18'sb000000011111111111;



  assign Switch157_out1 = (RO42_relop1 == 1'b0 ? Data_Type_S13_out1_1 :
              18'sb000000011111111111);



  assign RO41_relop1 = Switch157_out1 < 18'sb111111100000000001;



  assign Switch162_out1 = (RO41_relop1 == 1'b0 ? Switch157_out1 :
              18'sb111111100000000001);



  assign Data_Type_Conversion28_out1_1 = Switch162_out1[11:0];



  assign Switch7_out1 = (CT7_out1_3 == 1'b0 ? Unit_Delay4_out1 :
              Data_Type_Conversion28_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay410_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch7_out1;
      end
    end



  assign Switch168_out1_1 = (CT102_out1_3 == 1'b0 ? Unit_Delay63_out1_1 :
              Data_Type_Conversion3_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay63_process
      if (Rst_n == 1'b0) begin
        Unit_Delay63_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay63_out1_1 <= Switch168_out1_1;
      end
    end



  assign Switch170_out1_1 = (CT104_out1_3 == 1'b0 ? Unit_Delay64_out1_1 :
              Data_Type_Conversion3_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay64_process
      if (Rst_n == 1'b0) begin
        Unit_Delay64_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay64_out1_1 <= Switch170_out1_1;
      end
    end



  assign signal1_23 = (CT95_out1_1 == 1'b0 ? Unit_Delay64_out1_1 :
              Unit_Delay64_out1_1);



  assign s_190 = signal1_23;

  assign signal1_24 = (CT93_out1_2 == 1'b0 ? s_190 :
              Unit_Delay64_out1_1);



  assign s_191 = signal1_24;

  assign signal1_25 = (CT91_out1_3 == 1'b0 ? s_191 :
              Unit_Delay63_out1_1);



  assign s_192 = signal1_25;

  assign signal1_26 = (CT87_out1_3 == 1'b0 ? s_192 :
              Unit_Delay63_out1_1);



  assign s_193 = signal1_26;

  assign signal1_27 = (CT13_out1_3 == 1'b0 ? s_193 :
              Unit_Delay4_out1);



  assign s_194 = signal1_27;

  assign signal1_28 = (CT9_out1_4 == 1'b0 ? s_194 :
              Unit_Delay4_out1);



  assign s_195 = signal1_28;

  assign signal1_29 = (CT75_out1_2 == 1'b0 ? s_195 :
              C_co_b12);



  assign signal1_30 = signal1_29;

  assign Data_Type_Conversion10_out1 = {{4{signal1_30[11]}}, signal1_30};



  assign Switch103_out1_2 = (CT53_out1_2 == 1'b0 ? Unit_Delay47_out1_1 :
              Data_Type_Conversion6_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay471_process
      if (Rst_n == 1'b0) begin
        Unit_Delay47_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay47_out1_1 <= Switch103_out1_2;
      end
    end



  assign signal1_31 = (CT1_out1_3 == 1'b0 ? Unit_Delay47_out1_1 :
              Unit_Delay47_out1_1);



  assign signal1_32 = signal1_31;

  assign Data_Type_S20_out1 = {{7{Add13_out1_2[16]}}, Add13_out1_2};



  assign Data_Type_S20_out1_dtc = Data_Type_S20_out1[15:0];



  assign Switch164_out1_dtc = Switch164_out1[15:0];



  assign signal5_10 = signal5_9;

  assign Add131_1 = {{5{signal5_10[15]}}, signal5_10};
  assign Add131_2 = {Data_Type_S18_out1[19], Data_Type_S18_out1};
  assign Add131_sub_temp = Add131_1 - Add131_2;
  assign Add13_out1_2 = Add131_sub_temp[16:0];



  assign Data_Type_S21_out1 = {{7{Add17_out1_3[16]}}, Add17_out1_3};



  assign In25_out1_dtc = {{3{Data_Type_S14_out1_1[26]}}, Data_Type_S14_out1_1};



  assign Unary_Minus51_in0 =  - ({Unit_Delay23_out1[15], Unit_Delay23_out1});
  assign Unary_Minus5_out1_1 = Unary_Minus51_in0[15:0];



  assign Switch173_out1_1 = (CT106_out1_3 == 1'b0 ? Unit_Delay66_out1_1 :
              Data_Type_S16_out1);

  wire [15:0] Switch173_out1_1_t;
   LmtB16_V1 LmtB16_V1_INST_Charge (
   .In_b16( Switch173_out1_1 ), .LmtPos_b16( 0 ), .LmtNeg_b16( ACChargePLimit_b16 ), .Out_b16( Switch173_out1_1_t ) );

  always @(posedge g_clk)
    begin : Unit_Delay66_process
      if (Rst_n == 1'b0) begin
        Unit_Delay66_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        //Unit_Delay66_out1_1 <= Switch173_out1_1;
		Unit_Delay66_out1_1 <= Switch173_out1_1_t;
      end
    end



  assign RO25_relop1 = Unit_Delay66_out1_1 > Unary_Minus5_out1_1;



  assign Switch117_out1 = (RO25_relop1 == 1'b0 ? Unary_Minus5_out1_1 :
              Unit_Delay66_out1_1);



  assign signal5_11 = (CT18_out1_3 == 1'b0 ? Switch117_out1 :
              Switch117_out1);



  assign s_196 = signal5_11;

  //assign signal5_12 = (CT110_out1_3 == 1'b0 ? s_196 :
              //16'sb0000000000000000);
  assign signal5_12 = (CT110_out1_3 == 1'b0 ? s_196 :
              ACChargePLimit_b16);


  assign s_197 = signal5_12;

  assign signal5_9 = (CT107_out1_3 == 1'b0 ? s_197 :
              ACChargePLimit_b16);



  assign signal5_13 = signal5_9;

  assign signal5_14 = signal5_13;

  assign Data_Type_S23_out1_1 = {signal5_14[15], signal5_14};



  assign Bit_Concat4_out1 = {Data_Type_S23_out1_1, 10'b0000000000};



  assign Data_Type_S14_out1_1 = Bit_Concat4_out1;



  assign In24_out1_dtc = {{3{Data_Type_S15_out1[26]}}, Data_Type_S15_out1};



  assign signal4_10 = signal4_9;

  assign signal4_11 = signal4_10;

  assign Data_Type_S22_out1_1 = {signal4_11[15], signal4_11};



  assign Bit_Concat2_out1 = {Data_Type_S22_out1_1, 10'b0000000000};



  assign Data_Type_S15_out1 = Bit_Concat2_out1;



  assign Switch172_out1_1 = (CT105_out1_2 == 1'b0 ? Unit_Delay65_out1_1 :
              Switch163_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay65_process
      if (Rst_n == 1'b0) begin
        Unit_Delay65_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay65_out1_1 <= Switch172_out1_1;
      end
    end



  assign s_198 = Unit_Delay65_out1_1;

  assign Switch175_out1 = (CT108_out1_3 == 1'b0 ? Unit_Delay67_out1_1 :
              Switch163_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay67_process
      if (Rst_n == 1'b0) begin
        Unit_Delay67_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay67_out1_1 <= Switch175_out1;
      end
    end



  assign s_199 = Unit_Delay67_out1_1;

  assign Logical_Operator11_out1 =  ~ Switch234_out1;



  assign Logical_Operator10_out1 = Or4_out1_2 & Logical_Operator11_out1;



  assign Switch163_out1_1 = (Logical_Operator10_out1 == 1'b0 ? 30'sb000000000000000000000000000000 :
              Switch179_out1);



  assign Switch18_out1 = (CT14_out1_3 == 1'b0 ? Unit_Delay8_out1 :
              Switch163_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay81_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch18_out1;
      end
    end



  assign signal6 = (CT18_out1_3 == 1'b0 ? Unit_Delay8_out1 :
              Unit_Delay8_out1);



  assign s_200 = signal6;

  assign signal6_1 = (CT110_out1_3 == 1'b0 ? s_200 :
              s_199);



  assign s_201 = signal6_1;

  assign signal6_2 = (CT107_out1_3 == 1'b0 ? s_201 :
              s_198);



  assign signal6_3 = signal6_2;

  assign signal6_4 = signal6_3;

  assign Switch152_out1 = (CT92_out1_2 == 1'b0 ? Unit_Delay50_out1_3 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay501_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1_3 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay50_out1_3 <= Switch152_out1;
      end
    end



  assign s_202 = Unit_Delay50_out1_3;

  assign Switch156_out1_1 = (CT96_out1_2 == 1'b0 ? Unit_Delay56_out1_2 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay561_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay56_out1_2 <= Switch156_out1_1;
      end
    end



  assign s_203 = Unit_Delay56_out1_2;

  assign Switch12_out1 = (CT11_out1_4 == 1'b0 ? Unit_Delay6_out1_1 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay61_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay6_out1_1 <= Switch12_out1;
      end
    end



  assign signal2_157 = (CT18_out1_3 == 1'b0 ? Unit_Delay6_out1_1 :
              Unit_Delay6_out1_1);



  assign s_204 = signal2_157;

  assign signal2_158 = (CT110_out1_3 == 1'b0 ? s_204 :
              s_203);



  assign s_205 = signal2_158;

  assign signal2_159 = (CT107_out1_3 == 1'b0 ? s_205 :
              s_202);



  assign signal2_160 = signal2_159;

  assign signal2_161 = signal2_160;

  assign Switch180_out1 = (switch_compare_1_20 == 1'b0 ? 28'sb0000000000000000000000000000 :
              signal2_161);



  assign Add181_1 = {{3{Switch180_out1[27]}}, Switch180_out1};
  assign Add181_2 = {signal6_4[29], signal6_4};
  assign Add181_add_temp = Add181_1 + Add181_2;
  assign Add18_out1_1 = Add181_add_temp[29:0];



  assign RO43_1_1 = {{3{Data_Type_S15_out1[26]}}, Data_Type_S15_out1};
  assign RO43_relop1 = Add18_out1_1 > RO43_1_1;



  assign Switch178_out1_1 = (RO43_relop1 == 1'b0 ? Add18_out1_1 :
              In24_out1_dtc);



  assign RO44_1_1 = {{3{Data_Type_S14_out1_1[26]}}, Data_Type_S14_out1_1};
  assign RO44_relop1 = Switch178_out1_1 < RO44_1_1;



  assign Switch179_out1 = (RO44_relop1 == 1'b0 ? Switch178_out1_1 :
              In25_out1_dtc);



  assign Bit_Slice13_out1 = Switch179_out1[29:10];



  assign Data_Type_S18_out1 = Bit_Slice13_out1;



  assign Switch74_out1 = (CT38_out1_3 == 1'b0 ? Unit_Delay23_out1 :
              Data_Type_Conversion6_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay231_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay23_out1 <= Switch74_out1;
      end
    end



  assign Switch176_out1 = (CT109_out1_3 == 1'b0 ? Unit_Delay68_out1_1 :
              Data_Type_S16_out1);
  
  wire [15:0] Switch176_out1_t;
  LmtB16_V1 LmtB16_V1_INST_Discharge (
   .In_b16( Switch176_out1 ), .LmtPos_b16( ACDischgPLimit_b16 ), .LmtNeg_b16( 0 ), .Out_b16( Switch176_out1_t ) );

  always @(posedge g_clk)
    begin : Unit_Delay68_process
      if (Rst_n == 1'b0) begin
        Unit_Delay68_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        //Unit_Delay68_out1_1 <= Switch176_out1;
		Unit_Delay68_out1_1 <= Switch176_out1_t;
      end
    end



  assign RO3_relop1 = Unit_Delay68_out1_1 < Unit_Delay23_out1;



  assign Switch116_out1 = (RO3_relop1 == 1'b0 ? Unit_Delay23_out1 :
              Unit_Delay68_out1_1);



  assign signal4_12 = (CT18_out1_3 == 1'b0 ? Switch116_out1 :
              Switch116_out1);



  assign s_206 = signal4_12;

  assign signal4_13 = (CT110_out1_3 == 1'b0 ? s_206 :
              ACDischgPLimit_b16);



  assign s_207 = signal4_13;

  //assign signal4_9 = (CT107_out1_3 == 1'b0 ? s_207 :
              //16'sb0000000000000000);
  assign signal4_9 = (CT107_out1_3 == 1'b0 ? s_207 :
              ACDischgPLimit_b16);


  assign signal4_14 = signal4_9;

  assign Add171_1 = {{5{signal4_14[15]}}, signal4_14};
  assign Add171_2 = {Data_Type_S18_out1[19], Data_Type_S18_out1};
  assign Add171_sub_temp = Add171_1 - Add171_2;
  assign Add17_out1_3 = Add171_sub_temp[16:0];



  assign Switch146_out1_1 = (CT88_out1_1 == 1'b0 ? Unit_Delay49_out1_2 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay491_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay49_out1_2 <= Switch146_out1_1;
      end
    end



  assign Bit_Slice11_out1 = Unit_Delay49_out1_2[27:5];



  assign Data_Type_S12_out1_2 = Bit_Slice11_out1;



  assign s_208 = Data_Type_S12_out1_2;

  assign Switch154_out1_1 = (CT94_out1_3 == 1'b0 ? Unit_Delay51_out1_2 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay511_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay51_out1_2 <= Switch154_out1_1;
      end
    end



  assign Bit_Slice10_out1 = Unit_Delay51_out1_2[27:5];



  assign Data_Type_S11_out1_2 = Bit_Slice10_out1;



  assign s_209 = Data_Type_S11_out1_2;

  assign RO24_relop1 = Product6_out1 > 40'sh0003FFFFFF;



  assign Switch113_out1 = (RO24_relop1 == 1'b0 ? Product6_out1 :
              40'sh0003FFFFFF);



  assign RO23_relop1 = Switch113_out1 < 40'shFFFC000001;



  assign Switch114_out1 = (RO23_relop1 == 1'b0 ? Switch113_out1 :
              40'shFFFC000001);



  assign Data_Type_Conversion5_out1_1 = Switch114_out1[27:0];



  assign Switch9_out1_1 = (CT10_out1_4 == 1'b0 ? Unit_Delay5_out1_1 :
              Data_Type_Conversion5_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay58_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay5_out1_1 <= Switch9_out1_1;
      end
    end



  assign Bit_Slice2_out1 = Unit_Delay5_out1_1[27:5];



  assign Data_Type_S3_out1 = Bit_Slice2_out1;



  assign signal1_33 = (CT18_out1_3 == 1'b0 ? Data_Type_S3_out1 :
              Data_Type_S3_out1);



  assign s_210 = signal1_33;

  assign signal1_34 = (CT110_out1_3 == 1'b0 ? s_210 :
              s_209);



  assign s_211 = signal1_34;

  assign signal1_35 = (CT107_out1_3 == 1'b0 ? s_211 :
              s_208);



  assign signal1_36 = signal1_35;

  assign signal1_37 = signal1_36;

  assign Switch1_out1 = (CT2_out1_3 == 1'b0 ? Unit_Delay1_out1_6 :
              Data_Type_Conversion6_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay114_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_6 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay1_out1_6 <= Switch1_out1;
      end
    end



  assign signal3_57 = (CT18_out1_3 == 1'b0 ? Unit_Delay1_out1_6 :
              Unit_Delay1_out1_6);



  assign s_212 = signal3_57;

  assign signal3_58 = (CT110_out1_3 == 1'b0 ? s_212 :
              ACDischgPLimit_b16);



  assign s_213 = signal3_58;

  assign signal3_59 = (CT107_out1_3 == 1'b0 ? s_213 :
              ACChargePLimit_b16);



  assign signal3_60 = signal3_59;

  assign signal3_61 = signal3_60;

  assign Add161_1 = {{8{signal3_61[15]}}, signal3_61};
  assign Add161_2 = {signal1_37[22], signal1_37};
  assign Add16_out1_1 = Add161_1 + Add161_2;



  assign RO45_1_1 = {{7{Add17_out1_3[16]}}, Add17_out1_3};
  assign RO45_relop1 = Add16_out1_1 > RO45_1_1;



  assign Switch164_out1 = (RO45_relop1 == 1'b0 ? Add16_out1_1 :
              Data_Type_S21_out1);



  assign RO46_1_1 = {{7{Add13_out1_2[16]}}, Add13_out1_2};
  assign RO46_relop1 = Switch164_out1 < RO46_1_1;



  assign Switch177_out1 = (RO46_relop1 == 1'b0 ? Switch164_out1_dtc :
              Data_Type_S20_out1_dtc);



  assign Add32_1 = {{5{Switch177_out1[15]}}, Switch177_out1};
  assign Add32_2 = {Data_Type_S18_out1[19], Data_Type_S18_out1};
  assign Add3_out1_3 = Add32_1 + Add32_2;



  assign Data_Type_S16_out1 = Add3_out1_3[15:0];



  assign Switch19_out1 = (CT15_out1_3 == 1'b0 ? Unit_Delay9_out1 :
              Data_Type_S16_out1);



  always @(posedge g_clk)
    begin : Unit_Delay91_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch19_out1;
      end
    end



  assign Switch25_out1_1 = (Or4_out1_2 == 1'b0 ? P_ref_b16 :
              Unit_Delay9_out1);



  assign RO38_relop1 = Add4_out1_2 > 25'sb0000000000111111111111111;



  assign Switch137_out1_2 = (RO38_relop1 == 1'b0 ? Add4_out1_2 :
              25'sb0000000000111111111111111);



  assign RO37_relop1 = Switch137_out1_2 < 25'sb1111111111000000000000001;



  assign Switch138_out1_2 = (RO37_relop1 == 1'b0 ? Switch137_out1_2 :
              25'sb1111111111000000000000001);



  assign Data_Type_Conversion19_out1 = Switch138_out1_2[15:0];



  assign Switch135_out1_1 = (CT78_out1_5 == 1'b0 ? Unit_Delay41_out1 :
              Data_Type_Conversion19_out1);



  always @(posedge g_clk)
    begin : Unit_Delay411_process
      if (Rst_n == 1'b0) begin
        Unit_Delay41_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay41_out1 <= Switch135_out1_1;
      end
    end



  assign Bit_Slice5_out1_2 = Product6_out1[39:7];



  assign Data_Type_S5_out1 = Bit_Slice5_out1_2;



  assign RO32_relop1 = Data_Type_S5_out1 > 33'sh000007FFF;



  assign Switch115_out1 = (RO32_relop1 == 1'b0 ? Data_Type_S5_out1 :
              33'sh000007FFF);



  assign RO26_relop1 = Switch115_out1 < 33'sh1FFFF8001;



  assign Switch118_out1 = (RO26_relop1 == 1'b0 ? Switch115_out1 :
              33'sh1FFFF8001);



  assign Data_Type_Conversion6_out1_1 = Switch118_out1[15:0];



  assign Switch72_out1 = (CT36_out1_3 == 1'b0 ? Unit_Delay22_out1 :
              Data_Type_Conversion6_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay221_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay22_out1 <= Switch72_out1;
      end
    end



  assign signal1_38 = (CT44_out1_4 == 1'b0 ? Unit_Delay22_out1 :
              Unit_Delay22_out1);



  assign s_214 = signal1_38;

  assign signal1_39 = (CT20_out1_4 == 1'b0 ? s_214 :
              Unit_Delay41_out1);



  assign s_215 = signal1_39;

  assign signal1_40 = (CT17_out1_4 == 1'b0 ? s_215 :
              Switch25_out1_1);



  assign s_216 = signal1_40;

  assign signal1_41 = (CT85_out1_3 == 1'b0 ? s_216 :
              PdcDischgLimit_b16);



  assign s_217 = signal1_41;

  assign signal1_42 = (CT83_out1_3 == 1'b0 ? s_217 :
              PdcChgLimit_b16);



  assign s_218 = signal1_42;

  assign RO241_relop1 = signal1_22 < signal3_62;



  assign Switch114_out1_1 = (RO241_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign B30_out1_signal3 = Unit_Delay46_out1;

  assign B30_out1_signal3_1 = Unit_Delay46_out1;

  assign signal3_63 = (CT66_out1_6 == 1'b0 ? B30_out1_signal3_1 :
              B30_out1_signal3);



  assign signal3_64 = signal3_63;

  assign signal3_62 = signal3_64;

  assign RO231_relop1 = signal1_22 > signal3_62;



  assign Switch113_out1_1 = (RO231_relop1 == 1'b0 ? Switch114_out1_1 :
              12'sb000000000001);



  assign Switch115_out1_1 = (CT71_out1_5 == 1'b0 ? 12'sb000000000000 :
              Switch113_out1_1);



  assign Add15_out1 = Switch115_out1_1 + signal3_62;



  assign Logical_Operator3_out1_1 =  ~ Switch234_out1;



  assign Logical_Operator1_out1_3 = Logical_Operator4_out1_1 & (UdcLoop_En & Logical_Operator3_out1_1);



  assign Logical_Operator_out1_5 = Logical_Operator1_out1_3 & CtlLoop_On;



  assign Switch112_out1 = (Logical_Operator_out1_5 == 1'b0 ? signal2_108 :
              Add15_out1);



  assign Switch102_out1_1 = (CT68_out1_5 == 1'b0 ? Unit_Delay46_out1 :
              Switch112_out1);



  always @(posedge g_clk)
    begin : Unit_Delay462_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1 <= Switch102_out1_1;
      end
    end



  assign Switch70_out1 = (Or9_out1 == 1'b0 ? ILimit_b12 :
              Switch128_out1);



  assign Switch56_out1 = (Switch77_out1 == 1'b0 ? Data_Type_S2_out1 :
              Unit_Delay17_out1);



  assign Add19_out1_1 = Add16_out1_2 + 7'b0000001;



  always @(posedge g_clk)
    begin : Unit_Delay162_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1_1 <= 7'b0000000;
      end
      else begin
        Unit_Delay16_out1_1 <= Add16_out1_2;
      end
    end



  assign Switch50_out1_1 = (And1_out1 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add16_out1_2 = Switch50_out1_1 + Unit_Delay16_out1_1;



  assign Bit_Slice1_out1_1 = Unit_Delay30_out1_1[16:5];



  assign Data_Type_S2_out1 = Bit_Slice1_out1_1;



  assign signal1_43 = (CT38_out1_2 == 1'b0 ? Data_Type_S15_out1_1 :
              Data_Type_S15_out1_1);



  assign s_219 = signal1_43;

  assign signal1_44 = (CT36_out1_2 == 1'b0 ? s_219 :
              Data_Type_S2_out1);



  assign signal1_45 = signal1_44;

  assign signal1_46 = signal1_45;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram   (.g_clk(g_clk),
                                                       .wr_din(signal1_46),
                                                       .wr_addr(Add16_out1_2),
                                                       .wr_en(Constant15_out1),
                                                       .rd_addr(Add19_out1_1),
                                                       .rd_dout(UVctDelay_Ram_out1)
                                                       );

  assign Switch52_out1 = (CT35_out1_3 == 1'b0 ? Unit_Delay17_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay172_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1 <= Switch52_out1;
      end
    end



  assign signal2_162 = (CT38_out1_2 == 1'b0 ? Unit_Delay20_out1 :
              Unit_Delay20_out1);



  assign s_220 = signal2_162;

  assign signal2_163 = (CT36_out1_2 == 1'b0 ? s_220 :
              Unit_Delay17_out1);



  assign signal2_164 = signal2_163;

  assign signal2_165 = signal2_164;

  always @(posedge g_clk)
    begin : Unit_Delay601_process
      if (Rst_n == 1'b0) begin
        Unit_Delay60_out1 <= 1'b0;
      end
      else begin
        Unit_Delay60_out1 <= Switch128_out1_1;
      end
    end



  assign Switch128_out1_1 = (Or8_out1 == 1'b0 ? Unit_Delay60_out1 :
              Switch77_out1);



  assign And3_out1 =  ~ Switch128_out1_1;



  assign And1_out1 = And3_out1 & (CT34_out1_3 & Switch210_out1_1);



  assign Switch215_out1 = (And1_out1 == 1'b0 ? signal2_165 :
              UVctDelay_Ram_out1);



  assign Switch54_out1 = (CT37_out1_3 == 1'b0 ? Unit_Delay20_out1 :
              Switch215_out1);



  always @(posedge g_clk)
    begin : Unit_Delay202_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1 <= Switch54_out1;
      end
    end



  assign Bit_Slice10_out1_1 = Unit_Delay33_out1_1[16:5];



  assign Data_Type_S15_out1_1 = Bit_Slice10_out1_1;



  always @(posedge g_clk)
    begin : Unit_Delay252_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay25_out1_1 <= Switch77_out1;
      end
    end



  assign Switch198_out1 = (CT107_out1_2 == 1'b0 ? Unit_Delay99_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay99_process
      if (Rst_n == 1'b0) begin
        Unit_Delay99_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay99_out1 <= Switch198_out1;
      end
    end



  assign Ro9_relop1 = Unit_Delay74_out1 <= Unit_Delay99_out1;



  assign Switch78_out1_1 = (Ro9_relop1 == 1'b0 ? Unit_Delay25_out1_1 :
              1'b1);



  assign Ro4_relop1 = Unit_Delay74_out1 <= Unit_Delay22_out1_1;



  assign Switch73_out1 = (Ro4_relop1 == 1'b0 ? Unit_Delay22_out1_1 :
              Unit_Delay74_out1);



  assign Ro5_relop1 = Switch73_out1 <= Unit_Delay23_out1_1;



  assign Switch74_out1_1 = (Ro5_relop1 == 1'b0 ? Unit_Delay23_out1_1 :
              Switch73_out1);



  assign Ro6_relop1 = Switch74_out1_1 <= Unit_Delay24_out1_1;



  assign Switch75_out1 = (Ro6_relop1 == 1'b0 ? Unit_Delay24_out1_1 :
              Switch74_out1_1);



  assign signal1_47 = (CT58_out1_7 == 1'b0 ? Unit_Delay23_out1_1 :
              Unit_Delay23_out1_1);



  assign s_221 = signal1_47;

  assign signal1_48 = (CT44_out1_3 == 1'b0 ? s_221 :
              Unit_Delay22_out1_1);



  assign s_222 = signal1_48;

  assign signal1_49 = (CT41_out1_2 == 1'b0 ? s_222 :
              Unit_Delay74_out1);



  assign signal1_50 = signal1_49;

  assign signal1_51 = signal1_50;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_WavingDelay_Ram   (.g_clk(g_clk),
                                                         .wr_din(signal1_51),
                                                         .wr_addr(Add18_out1),
                                                         .wr_en(Constant20_out1),
                                                         .rd_addr(Add20_out1),
                                                         .rd_dout(WavingDelay_Ram_out1)
                                                         );

  assign Switch63_out1 = (CT42_out1_3 == 1'b0 ? Unit_Delay23_out1_1 :
              Switch58_out1);



  always @(posedge g_clk)
    begin : Unit_Delay232_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1_1 <= Switch63_out1;
      end
    end



  assign Switch65_out1 = (CT45_out1_3 == 1'b0 ? Unit_Delay24_out1_1 :
              Switch58_out1);



  always @(posedge g_clk)
    begin : Unit_Delay242_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1_1 <= Switch65_out1;
      end
    end



  assign signal2_166 = (CT58_out1_7 == 1'b0 ? Unit_Delay24_out1_1 :
              Unit_Delay24_out1_1);



  assign s_223 = signal2_166;

  assign signal2_167 = (CT44_out1_3 == 1'b0 ? s_223 :
              Unit_Delay23_out1_1);



  assign s_224 = signal2_167;

  assign signal2_168 = (CT41_out1_2 == 1'b0 ? s_224 :
              Unit_Delay22_out1_1);



  assign signal2_169 = signal2_168;

  assign signal2_170 = signal2_169;

  assign Switch58_out1 = (switch_compare_1_19 == 1'b0 ? signal2_170 :
              WavingDelay_Ram_out1);



  assign Switch61_out1 = (CT40_out1_3 == 1'b0 ? Unit_Delay22_out1_1 :
              Switch58_out1);



  always @(posedge g_clk)
    begin : Unit_Delay222_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1_1 <= Switch61_out1;
      end
    end



  assign Ro1_relop1 = Unit_Delay74_out1 >= Unit_Delay22_out1_1;



  assign Switch70_out1_1 = (Ro1_relop1 == 1'b0 ? Unit_Delay22_out1_1 :
              Unit_Delay74_out1);



  assign Ro2_relop1 = Switch70_out1_1 >= Unit_Delay23_out1_1;



  assign Switch71_out1 = (Ro2_relop1 == 1'b0 ? Unit_Delay23_out1_1 :
              Switch70_out1_1);



  assign Ro3_relop1_1 = Switch71_out1 >= Unit_Delay24_out1_1;



  assign Switch72_out1_1 = (Ro3_relop1_1 == 1'b0 ? Unit_Delay24_out1_1 :
              Switch71_out1);



  assign Add211_1 = {Switch72_out1_1[11], Switch72_out1_1};
  assign Add211_2 = {Switch75_out1[11], Switch75_out1};
  assign Add211_sub_temp = Add211_1 - Add211_2;
  assign Add21_out1 = Add211_sub_temp[7:0];



  assign Ro7_1_1 = {4'b0, Add21_out1};
  assign Ro7_relop1 = Ro7_1_1 >= LVRT_WaveThr_b12;



  assign Logical_Operator3_out1_2 =  ~ Ro7_relop1;



  assign Switch196_out1 = (CT105_out1_1 == 1'b0 ? Unit_Delay98_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay98_process
      if (Rst_n == 1'b0) begin
        Unit_Delay98_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay98_out1 <= Switch196_out1;
      end
    end



  assign Ro8_relop1 = Unit_Delay74_out1 >= Unit_Delay98_out1;



  assign Logical_Operator2_out1_3 = Ro8_relop1 & Logical_Operator3_out1_2;



  assign Switch77_out1 = (Logical_Operator2_out1_3 == 1'b0 ? Switch78_out1_1 :
              1'b0);



  assign Switch57_out1 = (Switch77_out1 == 1'b0 ? Data_Type_S15_out1_1 :
              Unit_Delay20_out1);



  assign Bit_Slice13_out1_1 = Unit_Delay14_out1[16:5];



  assign Data_Type_S18_out1_1 = Bit_Slice13_out1_1;



  assign Switch30_out1_1 = (CT28_out1_3 == 1'b0 ? Unit_Delay30_out1_1 :
              Switch29_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay306_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_1 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay30_out1_1 <= Switch30_out1_1;
      end
    end



  assign Switch34_out1 = (CT56_out1_6 == 1'b0 ? Unit_Delay33_out1_1 :
              Switch29_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay336_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_1 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay33_out1_1 <= Switch34_out1;
      end
    end



  assign Switch27_out1 = (CT30_out1_3 == 1'b0 ? Unit_Delay14_out1 :
              Switch29_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay142_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay14_out1 <= Switch27_out1;
      end
    end



  assign signal2_171 = (CT33_out1_1 == 1'b0 ? Unit_Delay15_out1 :
              Unit_Delay15_out1);



  assign s_225 = signal2_171;

  assign signal2_172 = (CT31_out1_1 == 1'b0 ? s_225 :
              Unit_Delay14_out1);



  assign s_226 = signal2_172;

  assign signal2_173 = (CT57_out1_1 == 1'b0 ? s_226 :
              Unit_Delay33_out1_1);



  assign s_227 = signal2_173;

  assign signal2_174 = (CT55_out1_1 == 1'b0 ? s_227 :
              Unit_Delay30_out1_1);



  assign signal2_175 = signal2_174;

  assign signal2_176 = signal2_175;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Filter_Ram   (.g_clk(g_clk),
                                                    .wr_din(Switch32_out1),
                                                    .wr_addr(Add11_out1_1),
                                                    .wr_en(Switch208_out1_1),
                                                    .rd_addr(Add2_out1_3),
                                                    .rd_dout(Filter_Ram_out1)
                                                    );

  assign Switch45_out1 = (Switch208_out1_1 == 1'b0 ? 12'sb000000000000 :
              Filter_Ram_out1);



  assign Switch24_out1_1 = (CT21_out1_3 == 1'b0 ? Unit_Delay12_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay122_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1 <= Switch24_out1_1;
      end
    end



  assign Switch51_out1 = (CT71_out1_4 == 1'b0 ? Unit_Delay62_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay621_process
      if (Rst_n == 1'b0) begin
        Unit_Delay62_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay62_out1 <= Switch51_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay105_process
      if (Rst_n == 1'b0) begin
        Unit_Delay105_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay105_out1 <= Switch219_out1;
      end
    end



  assign Switch221_out1 = (Compare_To_Constant10_out1 == 1'b0 ? Unit_Delay105_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator2_out1 = Switch218_out1 | Switch221_out1;



  assign Product2_1 = {1'b0, Bitwise_Operator2_out1};
  assign Product2_mul_temp = Product2_1 * Unit_Delay62_out1;
  assign Product2_out1 = Product2_mul_temp[35:0];



  assign Compare_To_Constant5_out1 = Product2_out1 <= 36'sh0003FF001;



  assign Switch219_out1 = (Compare_To_Constant5_out1 == 1'b0 ? Switch221_out1 :
              Bitwise_Operator2_out1);



  assign Switch220_out1 = (Compare_To_Constant11_out1 == 1'b0 ? Unit_Delay104_out1 :
              Switch219_out1);



  always @(posedge g_clk)
    begin : Unit_Delay104_process
      if (Rst_n == 1'b0) begin
        Unit_Delay104_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay104_out1 <= Switch220_out1;
      end
    end



  assign Data_Type_S34_out1 = Unit_Delay104_out1;



  assign Data_Type_S29_out1 = Unit_Delay87_out1;



  assign Data_Type_S30_out1 = Unit_Delay87_out1;



  always @(posedge g_clk)
    begin : Unit_Delay88_process
      if (Rst_n == 1'b0) begin
        Unit_Delay88_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay88_out1 <= Switch179_out1_1;
      end
    end



  assign Switch181_out1_1 = (Compare_To_Constant7_out1 == 1'b0 ? Unit_Delay88_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator10_out1 = Switch178_out1 | Switch181_out1_1;



  assign Product111_1 = {1'b0, Bitwise_Operator10_out1};
  assign Product111_mul_temp = Product111_1 * Unit_Delay74_out1;
  assign Product11_out1 = Product111_mul_temp[35:0];



  assign Compare_To_Constant12_out1 = Product11_out1 <= 36'sh0003FF001;



  assign Switch179_out1_1 = (Compare_To_Constant12_out1 == 1'b0 ? Switch181_out1_1 :
              Bitwise_Operator10_out1);



  assign Switch180_out1_1 = (Compare_To_Constant8_out1 == 1'b0 ? Unit_Delay87_out1 :
              Switch179_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay87_process
      if (Rst_n == 1'b0) begin
        Unit_Delay87_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay87_out1 <= Switch180_out1_1;
      end
    end



  assign Data_Type_S31_out1 = Unit_Delay87_out1;



  assign Data_Type_S32_out1 = Unit_Delay90_out1;



  always @(posedge g_clk)
    begin : Unit_Delay911_process
      if (Rst_n == 1'b0) begin
        Unit_Delay91_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay91_out1 <= Switch183_out1;
      end
    end



  assign Switch185_out1 = (Compare_To_Constant15_out1 == 1'b0 ? Unit_Delay91_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator11_out1 = Switch182_out1 | Switch185_out1;



  assign Product12_1 = {1'b0, Bitwise_Operator11_out1};
  assign Product12_mul_temp = Product12_1 * Unit_Delay77_out1;
  assign Product12_out1_1 = Product12_mul_temp[35:0];



  assign Compare_To_Constant13_out1 = Product12_out1_1 <= 36'sh0003FF001;



  assign Switch183_out1 = (Compare_To_Constant13_out1 == 1'b0 ? Switch185_out1 :
              Bitwise_Operator11_out1);



  assign Switch184_out1 = (Compare_To_Constant16_out1 == 1'b0 ? Unit_Delay90_out1 :
              Switch183_out1);



  always @(posedge g_clk)
    begin : Unit_Delay90_process
      if (Rst_n == 1'b0) begin
        Unit_Delay90_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay90_out1 <= Switch184_out1;
      end
    end



  assign Data_Type_S33_out1 = Unit_Delay90_out1;



  always @(posedge g_clk)
    begin : Unit_Delay140_process
      if (Rst_n == 1'b0) begin
        Unit_Delay140_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay140_out1 <= Switch295_out1;
      end
    end



  assign Switch297_out1 = (Compare_To_Constant23_out1 == 1'b0 ? Unit_Delay140_out1 :
              24'b000000000000000000000000);



  assign Bitwise_Operator3_out1 = Switch294_out1 | Switch297_out1;



  assign Product3_1 = {1'b0, Bitwise_Operator3_out1};
  assign Product3_mul_temp = Product3_1 * SA_1_out1;
  assign Product3_out1 = Product3_mul_temp[35:0];



  assign Compare_To_Constant21_out1 = Product3_out1 <= 36'sh0003FF001;



  assign Switch295_out1 = (Compare_To_Constant21_out1 == 1'b0 ? Switch297_out1 :
              Bitwise_Operator3_out1);



  assign Switch296_out1 = (Compare_To_Constant24_out1 == 1'b0 ? Unit_Delay139_out1 :
              Switch295_out1);



  always @(posedge g_clk)
    begin : Unit_Delay139_process
      if (Rst_n == 1'b0) begin
        Unit_Delay139_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay139_out1 <= Switch296_out1;
      end
    end



  assign Data_Type_S43_out1 = Unit_Delay139_out1;



  assign signal2_177 = (CT173_out1 == 1'b0 ? Data_Type_S43_out1 :
              Data_Type_S43_out1);



  assign s_228 = signal2_177;

  assign signal2_178 = (CT27_out1_3 == 1'b0 ? s_228 :
              Data_Type_S33_out1);



  assign s_229 = signal2_178;

  assign signal2_179 = (CT25_out1_3 == 1'b0 ? s_229 :
              Data_Type_S32_out1);



  assign s_230 = signal2_179;

  assign signal2_180 = (CT20_out1_3 == 1'b0 ? s_230 :
              Data_Type_S31_out1);



  assign s_231 = signal2_180;

  assign signal2_181 = (CT18_out1_2 == 1'b0 ? s_231 :
              Data_Type_S30_out1);



  assign s_232 = signal2_181;

  assign signal2_182 = (CT16_out1_4 == 1'b0 ? s_232 :
              Data_Type_S29_out1);



  assign s_233 = signal2_182;

  assign signal2_183 = (CT127_out1_1 == 1'b0 ? s_233 :
              Data_Type_S34_out1);



  assign s_234 = signal2_183;

  always @(posedge g_clk)
    begin : Unit_Delay422_process
      if (Rst_n == 1'b0) begin
        Unit_Delay42_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay42_out1 <= Switch91_out1;
      end
    end



  assign Switch19_out1_1 = (CT17_out1_3 == 1'b0 ? Unit_Delay9_out1_1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay92_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1_1 <= Switch19_out1_1;
      end
    end



  assign Switch89_out1 = (Or11_out1 == 1'b0 ? Unit_Delay9_out1_1 :
              12'sb011111111111);



  assign Switch91_out1 = (OR2_out1_2 == 1'b0 ? Switch89_out1 :
              Unit_Delay42_out1);



  always @(posedge g_clk)
    begin : Unit_Delay443_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay44_out1_2 <= Switch92_out1;
      end
    end



  assign Switch22_out1 = (CT19_out1_4 == 1'b0 ? Unit_Delay10_out1_1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay102_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1_1 <= Switch22_out1;
      end
    end



  assign Or11_out1 = RO201_relop1 | SycGen_En;



  assign Switch90_out1 = (Or11_out1 == 1'b0 ? Unit_Delay10_out1_1 :
              Switch291_out1);



  assign Switch92_out1 = (OR2_out1_2 == 1'b0 ? Switch90_out1 :
              Unit_Delay44_out1_2);



  assign Switch228_out1 = (CT129_out1_1 == 1'b0 ? Unit_Delay109_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay109_process
      if (Rst_n == 1'b0) begin
        Unit_Delay109_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay109_out1 <= Switch228_out1;
      end
    end



  assign signal2_184 = (CT178_out1 == 1'b0 ? Unit_Delay109_out1 :
              Unit_Delay109_out1);



  assign s_235 = signal2_184;

  assign signal2_185 = (CT171_out1 == 1'b0 ? s_235 :
              12'sb010011100110);



  assign s_236 = signal2_185;

  assign signal2_186 = (CT62_out1 == 1'b0 ? s_236 :
              Switch92_out1);



  assign s_237 = signal2_186;

  assign signal2_187 = (CT60_out1 == 1'b0 ? s_237 :
              Switch91_out1);



  assign s_238 = signal2_187;

  assign signal2_188 = (CT14_out1 == 1'b0 ? s_238 :
              Switch107_out1_21);



  assign s_239 = signal2_188;

  assign signal2_189 = (CT9_out1 == 1'b0 ? s_239 :
              Switch107_out1_22);



  assign s_240 = signal2_189;

  assign signal2_190 = (CT7_out1 == 1'b0 ? s_240 :
              Switch107_out1_23);



  assign s_241 = signal2_190;

  assign signal2_191 = (CT5_out1_1 == 1'b0 ? s_241 :
              Switch107_out1_24);



  assign s_242 = signal2_191;

  assign signal2_192 = (CT179_out1 == 1'b0 ? s_242 :
              12'sb000110011001);



  assign s_243 = signal2_192;

  assign signal2_193 = (CT3_out1_1 == 1'b0 ? s_243 :
              Rco_Ki_b12);



  assign s_244 = signal2_193;

  assign signal2_194 = (CT1_out1 == 1'b0 ? s_244 :
              Rco_Kp_b12);



  assign s_245 = signal2_194;

  assign signal2_195 = (CT156_out1 == 1'b0 ? s_245 :
              Switch107_out1_21);



  assign s_246 = signal2_195;

  assign signal2_196 = (CT154_out1 == 1'b0 ? s_246 :
              Switch107_out1_22);



  assign s_247 = signal2_196;

  assign signal2_197 = (CT152_out1 == 1'b0 ? s_247 :
              Switch107_out1_23);



  assign s_248 = signal2_197;

  assign signal2_198 = (CT150_out1 == 1'b0 ? s_248 :
              Switch107_out1_24);



  assign s_249 = signal2_198;

  assign signal2_199 = (CT148_out1 == 1'b0 ? s_249 :
              Switch107_out1_21);



  assign s_250 = signal2_199;

  assign signal2_200 = (CT128_out1 == 1'b0 ? s_250 :
              ILimit_b12);



  assign s_251 = signal2_200;

  assign signal2_201 = (CT146_out1 == 1'b0 ? s_251 :
              Switch107_out1_22);



  assign s_252 = signal2_201;

  assign signal2_202 = (CT140_out1 == 1'b0 ? s_252 :
              Switch107_out1_23);



  assign s_253 = signal2_202;

  assign signal2_203 = (CT121_out1 == 1'b0 ? s_253 :
              12'sb011100110011);



  assign s_254 = signal2_203;

  assign signal2_204 = (CT79_out1 == 1'b0 ? s_254 :
              Switch107_out1_24);



  assign s_255 = signal2_204;

  assign signal2_205 = (CT39_out1_1 == 1'b0 ? s_255 :
              12'sb010110011001);



  assign s_256 = signal2_205;

  assign signal2_206 = (CT103_out1 == 1'b0 ? s_256 :
              Switch107_out1_24);



  assign s_257 = signal2_206;

  assign signal2_207 = (CT101_out1 == 1'b0 ? s_257 :
              Switch107_out1_23);



  assign s_258 = signal2_207;

  assign signal2_208 = (CT87_out1 == 1'b0 ? s_258 :
              Switch107_out1_21);



  assign s_259 = signal2_208;

  assign signal2_209 = (CT85_out1 == 1'b0 ? s_259 :
              Switch107_out1_22);



  assign s_260 = signal2_209;

  assign signal2_210 = (CT83_out1 == 1'b0 ? s_260 :
              Switch107_out1_23);



  assign s_261 = signal2_210;

  assign signal2_211 = (CT76_out1 == 1'b0 ? s_261 :
              Switch107_out1_24);



  assign s_262 = signal2_211;

  assign signal2_212 = (CT74_out1 == 1'b0 ? s_262 :
              Switch107_out1_25);



  assign s_263 = signal2_212;

  assign signal2_213 = (CT68_out1 == 1'b0 ? s_263 :
              Switch107_out1_26);



  assign s_264 = signal2_213;

  assign signal2_214 = (CT54_out1 == 1'b0 ? s_264 :
              Switch107_out1_27);



  assign s_265 = signal2_214;

  assign signal2_215 = (CT43_out1_1 == 1'b0 ? s_265 :
              Switch107_out1_28);



  assign signal2_216 = signal2_215;

  assign Data_Type_S21_out1_1 = {{12{signal2_216[11]}}, signal2_216};



  assign signal2_217 = (Lo1_out1 == 1'b0 ? Data_Type_S21_out1_1 :
              s_234);



  assign signal2_218 = signal2_217;

  assign Switch222_out1 = (CT124_out1_1 == 1'b0 ? Unit_Delay107_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay107_process
      if (Rst_n == 1'b0) begin
        Unit_Delay107_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay107_out1 <= Switch222_out1;
      end
    end



  assign RO10_relop1 = 1'b0;



  assign Switch224_out1 = (RO10_relop1 == 1'b0 ? Unit_Delay107_out1 :
              12'sb011111111111);



  assign RO9_relop1_1 = Switch224_out1 < 12'sb000000000000;



  assign Switch225_out1 = (RO9_relop1_1 == 1'b0 ? Switch224_out1 :
              12'sb000000000000);



  assign Data_Type_S35_out1 = {{12{Switch225_out1[11]}}, Switch225_out1};



  assign RO361_relop1 = Add10_out1 > 25'sb0001111111111111111111111;



  assign Switch194_out1 = (RO361_relop1 == 1'b0 ? Add10_out1 :
              25'sb0001111111111111111111111);



  assign RO351_relop1 = Switch194_out1 < 25'sb1110000000000000000000001;



  assign Switch195_out1 = (RO351_relop1 == 1'b0 ? Switch194_out1 :
              25'sb1110000000000000000000001);



  assign Data_Type_Conversion30_out1 = Switch195_out1[23:0];



  assign Switch200_out1 = (CT109_out1_2 == 1'b0 ? Unit_Delay100_out1 :
              Data_Type_Conversion30_out1);



  always @(posedge g_clk)
    begin : Unit_Delay100_process
      if (Rst_n == 1'b0) begin
        Unit_Delay100_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay100_out1 <= Switch200_out1;
      end
    end



  assign Data_Type_S5_out1_1 = {{12{Switch107_out1_28[11]}}, Switch107_out1_28};



  assign Data_Type_S7_out1 = {{12{Switch107_out1_27[11]}}, Switch107_out1_27};



  assign Data_Type_S8_out1 = {{12{Switch107_out1_26[11]}}, Switch107_out1_26};



  assign Data_Type_S9_out1 = {{12{Switch107_out1_25[11]}}, Switch107_out1_25};



  assign Switch315_out1 = (CT185_out1 == 1'b0 ? Unit_Delay149_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay149_process
      if (Rst_n == 1'b0) begin
        Unit_Delay149_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay149_out1 <= Switch315_out1;
      end
    end



  assign Data_Type_S44_out1 = {{12{Unit_Delay149_out1[11]}}, Unit_Delay149_out1};



  assign signal1_52 = (CT173_out1 == 1'b0 ? Data_Type_S44_out1 :
              Data_Type_S44_out1);



  assign s_266 = signal1_52;

  assign signal1_53 = (CT27_out1_3 == 1'b0 ? s_266 :
              Data_Type_S9_out1);



  assign s_267 = signal1_53;

  assign signal1_54 = (CT25_out1_3 == 1'b0 ? s_267 :
              Data_Type_S8_out1);



  assign s_268 = signal1_54;

  assign signal1_55 = (CT20_out1_3 == 1'b0 ? s_268 :
              Data_Type_S7_out1);



  assign s_269 = signal1_55;

  assign signal1_56 = (CT18_out1_2 == 1'b0 ? s_269 :
              Data_Type_S5_out1_1);



  assign s_270 = signal1_56;

  assign signal1_57 = (CT16_out1_4 == 1'b0 ? s_270 :
              Unit_Delay100_out1);



  assign s_271 = signal1_57;

  assign signal1_58 = (CT127_out1_1 == 1'b0 ? s_271 :
              Data_Type_S35_out1);



  assign s_272 = signal1_58;

  always @(posedge g_clk)
    begin : Unit_Delay3951_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_21 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_21 <= Switch107_out1_22;
      end
    end



  assign Switch107_out1_22 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_21 :
              Switch107_out1_29);



  always @(posedge g_clk)
    begin : Unit_Delay3952_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_22 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_22 <= Switch107_out1_21;
      end
    end



  assign Switch107_out1_21 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_22 :
              Switch107_out1_30);



  assign Switch299_out1 = (CT172_out1 == 1'b0 ? Unit_Delay142_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1421_process
      if (Rst_n == 1'b0) begin
        Unit_Delay142_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay142_out1 <= Switch299_out1;
      end
    end



  assign Switch227_out1 = (CT126_out1_1 == 1'b0 ? Unit_Delay108_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay108_process
      if (Rst_n == 1'b0) begin
        Unit_Delay108_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay108_out1 <= Switch227_out1;
      end
    end



  assign Switch300_out1 = (BelgiumVrt == 1'b0 ? Unit_Delay108_out1 :
              Unit_Delay142_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3947_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_23 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_23 <= Switch107_out1_25;
      end
    end



  assign Switch107_out1_25 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_23 :
              Switch107_out1_31);



  assign s_273 = Switch207_out1;

  assign Switch192_out1 = (CT104_out1_2 == 1'b0 ? Unit_Delay97_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay97_process
      if (Rst_n == 1'b0) begin
        Unit_Delay97_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay97_out1 <= Switch192_out1;
      end
    end



  assign signal2_219 = (CT110_out1_2 == 1'b0 ? Unit_Delay97_out1 :
              Unit_Delay97_out1);



  assign s_274 = signal2_219;

  assign Switch5_out1_1 = (CT6_out1_3 == 1'b0 ? Unit_Delay3_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay311_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch5_out1_1;
      end
    end



  assign Switch7_out1_1 = (CT8_out1_3 == 1'b0 ? Unit_Delay4_out1_1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay412_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1_1 <= Switch7_out1_1;
      end
    end



  assign Switch9_out1_2 = (CT10_out1_3 == 1'b0 ? Unit_Delay5_out1_2 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay510_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1_2 <= Switch9_out1_2;
      end
    end



  assign Switch12_out1_1 = (CT11_out1_3 == 1'b0 ? Unit_Delay6_out1_2 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay62_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1_2 <= Switch12_out1_1;
      end
    end



  assign RO_5_relop1 = SW_2_out1 <= SA_1_out1;



  assign SW_5_out1 = (RO_5_relop1 == 1'b0 ? SW_4_out1 :
              SW_2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay574_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay57_out1_7 <= SW_5_out1;
      end
    end



  assign signal2_220 = (CT186_out1 == 1'b0 ? Unit_Delay57_out1_7 :
              Unit_Delay57_out1_7);



  assign s_275 = signal2_220;

  assign signal2_221 = (CT176_out1 == 1'b0 ? s_275 :
              12'sb000000000000);



  assign s_276 = signal2_221;

  assign signal2_222 = (CT64_out1_1 == 1'b0 ? s_276 :
              Switch109_out1);



  assign s_277 = signal2_222;

  assign signal2_223 = (CT184_out1 == 1'b0 ? s_277 :
              LVRT_DeltaIn_b12);



  assign s_278 = signal2_223;

  assign signal2_224 = (CT182_out1 == 1'b0 ? s_278 :
              LVRT_DeltaOut_b12);



  assign s_279 = signal2_224;

  assign signal2_225 = (CT117_out1 == 1'b0 ? s_279 :
              Unit_Delay6_out1_2);



  assign s_280 = signal2_225;

  assign signal2_226 = (CT116_out1 == 1'b0 ? s_280 :
              Unit_Delay5_out1_2);



  assign s_281 = signal2_226;

  assign signal2_227 = (CT114_out1 == 1'b0 ? s_281 :
              Unit_Delay4_out1_1);



  assign s_282 = signal2_227;

  assign signal2_228 = (CT113_out1 == 1'b0 ? s_282 :
              Unit_Delay3_out1);



  assign s_283 = signal2_228;

  assign signal2_229 = (CT112_out1_1 == 1'b0 ? s_283 :
              ILimit_b12);



  assign s_284 = signal2_229;

  assign signal2_230 = (CT134_out1 == 1'b0 ? s_284 :
              LVRT_DeltaIn_b12);



  assign s_285 = signal2_230;

  assign signal2_231 = (CT125_out1 == 1'b0 ? s_285 :
              Unit_Delay74_out1);



  assign s_286 = signal2_231;

  assign signal2_232 = (CT132_out1 == 1'b0 ? s_286 :
              LVRT_DeltaOut_b12);



  assign s_287 = signal2_232;

  assign signal2_233 = (CT108_out1 == 1'b0 ? s_287 :
              Data_Type_S14_out1);



  assign s_288 = signal2_233;

  assign signal2_234 = (CT106_out1 == 1'b0 ? s_288 :
              Data_Type_S12_out1_1);



  assign signal2_235 = signal2_234;

  assign Data_Type_S27_out1 = {{12{signal2_235[11]}}, signal2_235};



  assign signal2_236 = (CT48_out1 == 1'b0 ? Data_Type_S27_out1 :
              s_274);



  assign signal2_237 = signal2_236;

  assign Switch190_out1 = (CT102_out1_2 == 1'b0 ? Unit_Delay96_out1 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay96_process
      if (Rst_n == 1'b0) begin
        Unit_Delay96_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay96_out1 <= Switch190_out1;
      end
    end



  assign signal1_59 = (CT110_out1_2 == 1'b0 ? Unit_Delay96_out1 :
              Unit_Delay96_out1);



  assign s_289 = signal1_59;

  assign s_290 = Unit_Delay103_out1;

  assign Switch216_out1 = (CT122_out1_1 == 1'b0 ? Unit_Delay103_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay103_process
      if (Rst_n == 1'b0) begin
        Unit_Delay103_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay103_out1 <= Switch216_out1;
      end
    end



  assign s_291 = Unit_Delay103_out1;

  assign RO82_relop1 = Add4_out1_3 > 25'sb0000000000000011111111111;



  assign Switch76_out1 = (RO82_relop1 == 1'b0 ? Add4_out1_3 :
              25'sb0000000000000011111111111);



  assign RO72_relop1 = Switch76_out1 < 25'sb1111111111111100000000001;



  assign Switch79_out1_1 = (RO72_relop1 == 1'b0 ? Switch76_out1 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion3_out1_1 = Switch79_out1_1[11:0];



  assign Switch176_out1_1 = (CT99_out1_3 == 1'b0 ? Unit_Delay86_out1 :
              Data_Type_Conversion3_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay86_process
      if (Rst_n == 1'b0) begin
        Unit_Delay86_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay86_out1 <= Switch176_out1_1;
      end
    end



  assign RO221_relop1 = signal1_60 < signal3_65;



  assign Switch95_out1 = (RO221_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign Switch101_out1_1 = (CT51_out1_8 == 1'b0 ? Unit_Delay45_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay452_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1 <= Switch101_out1_1;
      end
    end



  assign Switch102_out1_2 = (CT52_out1_3 == 1'b0 ? Unit_Delay46_out1_1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay463_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_1 <= Switch102_out1_2;
      end
    end



  assign signal3_66 = (CT65_out1_1 == 1'b0 ? Unit_Delay29_out1 :
              Unit_Delay29_out1);



  assign s_292 = signal3_66;

  assign signal3_67 = (CT50_out1 == 1'b0 ? s_292 :
              Unit_Delay46_out1_1);



  assign s_293 = signal3_67;

  assign signal3_68 = (CT49_out1_1 == 1'b0 ? s_293 :
              Unit_Delay45_out1);



  assign signal3_69 = signal3_68;

  assign signal3_65 = signal3_69;

  assign Switch110_out1 = (CT63_out1_3 == 1'b0 ? Unit_Delay28_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay282_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay28_out1 <= Switch110_out1;
      end
    end



  assign Switch317_out1 = (SycGen_En == 1'b0 ? Unit_Delay28_out1 :
              Um_ref_b12);

  assign Um_ref_out_b12=Switch317_out1;

  assign Switch106_out1_3 = (CT61_out1_7 == 1'b0 ? Unit_Delay27_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay272_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay27_out1 <= Switch106_out1_3;
      end
    end



  assign Switch107_out1_32 = (Data_Type_S37_out1 == 1'b0 ? 12'sb000000000000 :
              Unm_ref_b12);



  assign RO4_relop1_1 = Switch107_out1_32 > Um_ref_b12;



  assign Switch108_out1 = (RO4_relop1_1 == 1'b0 ? Switch107_out1_32 :
              Um_ref_b12);



  assign RO310_relop1 = Switch108_out1 < 12'sb000000000000;



  assign Switch109_out1 = (RO310_relop1 == 1'b0 ? Switch108_out1 :
              12'sb000000000000);



  assign signal1_61 = (CT65_out1_1 == 1'b0 ? Switch109_out1 :
              Switch109_out1);



  assign s_294 = signal1_61;

  assign signal1_62 = (CT50_out1 == 1'b0 ? s_294 :
              Unit_Delay27_out1);



  assign s_295 = signal1_62;

  assign signal1_63 = (CT49_out1_1 == 1'b0 ? s_295 :
              Switch317_out1);



  assign signal1_64 = signal1_63;

  assign signal1_60 = signal1_64;

  assign RO212_relop1 = signal1_60 > signal3_65;



  assign Switch94_out1 = (RO212_relop1 == 1'b0 ? Switch95_out1 :
              12'sb000000000001);



  assign Switch96_out1 = (Switch83_out1_6 == 1'b0 ? 12'sb000000000000 :
              Switch94_out1);



  assign Add7_out1_1 = Switch96_out1 + signal3_65;



  always @(posedge g_clk)
    begin : Unit_Delay3945_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_24 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_24 <= Switch107_out1_28;
      end
    end



  assign Switch107_out1_28 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_24 :
              Switch107_out1_33);



  always @(posedge g_clk)
    begin : Unit_Delay3948_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_25 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_25 <= Switch107_out1_27;
      end
    end



  assign Switch107_out1_27 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_25 :
              Switch107_out1_34);



  always @(posedge g_clk)
    begin : Delay16_process
      if (Rst_n == 1'b0) begin
        Delay16_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        Delay16_out1 <= Add_out1;
      end
    end



  assign Switch13_out1 = (signal3_56 == 1'b0 ? Delay16_out1 :
              Constant9_out1_dtc_1);



  assign Switch10_out1 = (CT10_out1_2 == 1'b0 ? Unit_Delay1_out1_7 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_7 <= Switch10_out1;
      end
    end



  assign Switch11_out1 = (CT11_out1_2 == 1'b0 ? Unit_Delay2_out1_1 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1_1 <= Switch11_out1;
      end
    end



  assign Switch12_out1_2 = (CT12_out1_8 == 1'b0 ? Unit_Delay3_out1_1 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1_1 <= Switch12_out1_2;
      end
    end



  assign Switch150_out1 = (CT89_out1_3 == 1'b0 ? Unit_Delay69_out1_1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay69_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay69_out1_1 <= Switch150_out1;
      end
    end



  assign Switch29_out1_2 = (CT29_out1_3 == 1'b0 ? Unit_Delay11_out1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1 <= Switch29_out1_2;
      end
    end



  assign Switch31_out1_2 = (CT31_out1_3 == 1'b0 ? Unit_Delay12_out1_1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1_1 <= Switch31_out1_2;
      end
    end



  assign Switch33_out1 = (CT33_out1_3 == 1'b0 ? Unit_Delay13_out1_2 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1_2 <= Switch33_out1;
      end
    end



  assign Switch35_out1 = (CT45_out1_2 == 1'b0 ? Unit_Delay19_out1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay19_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1 <= Switch35_out1;
      end
    end



  assign Switch37_out1 = (CT39_out1_3 == 1'b0 ? Unit_Delay14_out1_1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1_1 <= Switch37_out1;
      end
    end



  assign Switch39_out1 = (CT41_out1_1 == 1'b0 ? Unit_Delay15_out1_1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay15_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay15_out1_1 <= Switch39_out1;
      end
    end



  assign Switch43_out1 = (CT43_out1_3 == 1'b0 ? Unit_Delay18_out1 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay18_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay18_out1 <= Switch43_out1;
      end
    end



  assign RO243_relop1 = signal1_19 < signal3_70;



  assign Switch114_out1_2 = (RO243_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign signal3_71 = (CT66_out1_5 == 1'b0 ? Unit_Delay46_out1_2 :
              Unit_Delay46_out1_2);



  assign signal3_72 = signal3_71;

  assign signal3_70 = signal3_72;

  assign RO233_relop1 = signal1_19 > signal3_70;



  assign Switch113_out1_2 = (RO233_relop1 == 1'b0 ? Switch114_out1_2 :
              12'sb000000000001);



  assign Switch115_out1_2 = (CT71_out1_3 == 1'b0 ? 12'sb000000000000 :
              Switch113_out1_2);



  assign Add15_out1_1 = Switch115_out1_2 + signal3_70;



  assign signal2_238 = (CT66_out1_5 == 1'b0 ? Data_Type_S11_out1_3 :
              Data_Type_S11_out1_3);



  assign signal2_239 = signal2_238;

  assign signal2_240 = signal2_239;

  assign Switch112_out1_1 = (Logical_Operator_out1_4 == 1'b0 ? signal2_240 :
              Add15_out1_1);



  assign Switch102_out1_3 = (CT68_out1_4 == 1'b0 ? Unit_Delay46_out1_2 :
              Switch112_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay466_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_2 <= Switch102_out1_3;
      end
    end



  assign Switch88_out1 = (CT64_out1_3 == 1'b0 ? Unit_Delay32_out1_7 :
              Data_Type_S4_out1);



  always @(posedge g_clk)
    begin : Unit_Delay327_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay32_out1_7 <= Switch88_out1;
      end
    end



  //assign Switch103_out1_3 = (UOpenLoop_En == 1'b0 ? Unit_Delay32_out1_7 :
   //           Unit_Delay46_out1_2);
wire [11:0] Switch103_out1_3_t;
assign Switch103_out1_3_t = (UOpenLoop_En == 1'b0 ? Unit_Delay32_out1_7 :
              Unit_Delay46_out1_2);
assign Switch103_out1_3 = MdpOut;



  always @(posedge g_clk)
    begin : Unit_Delay3968_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_26 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_26 <= Switch107_out1_35;
      end
    end



  assign Switch107_out1_35 = (CT79_out1_2 == 1'b0 ? Unit_Delay39_out1_26 :
              Switch103_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay3928_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_27 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_27 <= Switch107_out1_36;
      end
    end



  assign Switch107_out1_36 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_27 :
              Switch107_out1_35);



  assign Switch96_out1_1 = (CT67_out1_2 == 1'b0 ? Unit_Delay34_out1_1 :
              Data_Type_S4_out1);



  always @(posedge g_clk)
    begin : Unit_Delay347_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay34_out1_1 <= Switch96_out1_1;
      end
    end



  //assign Switch104_out1_3 = (UOpenLoop_En == 1'b0 ? Unit_Delay34_out1_1 :
   //           12'sb000000000000);
  wire [11:0] Switch104_out1_3_t;
  assign Switch104_out1_3_t = (UOpenLoop_En == 1'b0 ? Unit_Delay34_out1_1 :
              12'sb000000000000);
  assign Switch104_out1_3 = MqpOut;



  always @(posedge g_clk)
    begin : Unit_Delay3958_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_28 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_28 <= Switch107_out1_37;
      end
    end



  assign Switch107_out1_37 = (CT79_out1_2 == 1'b0 ? Unit_Delay39_out1_28 :
              Switch104_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay3929_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_29 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_29 <= Switch107_out1_38;
      end
    end



  assign Switch107_out1_38 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_29 :
              Switch107_out1_37);



  assign Switch99_out1 = (CT70_out1_8 == 1'b0 ? Unit_Delay36_out1_3 :
              Data_Type_S4_out1);



  always @(posedge g_clk)
    begin : Unit_Delay363_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay36_out1_3 <= Switch99_out1;
      end
    end



  //assign Switch105_out1_10 = (UOpenLoop_En == 1'b0 ? Unit_Delay36_out1_3 :
  //            12'sb000000000000);
  wire [11:0] Switch105_out1_10_t;
assign Switch105_out1_10_t = (UOpenLoop_En == 1'b0 ? Unit_Delay36_out1_3 :
              12'sb000000000000);
assign Switch105_out1_10 = MdnOut;



  always @(posedge g_clk)
    begin : Unit_Delay3959_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_30 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_30 <= Switch107_out1_39;
      end
    end



  assign Switch107_out1_39 = (CT79_out1_2 == 1'b0 ? Unit_Delay39_out1_30 :
              Switch105_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay3930_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_31 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_31 <= Switch107_out1_40;
      end
    end



  assign Switch107_out1_40 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_31 :
              Switch107_out1_39);



  assign In8_out1_dtc = {{3{Data_Type_S2_out1_1[26]}}, Data_Type_S2_out1_1};



  assign Add25_1 = {signal5_8[11], signal5_8};
  assign Add25_2 = {Switch90_out1_1[11], Switch90_out1_1};
  assign Add2_out1_4 = Add25_1 - Add25_2;



  assign Bit_Concat3_out1 = {Add2_out1_4, 14'b00000000000000};



  assign Data_Type_S2_out1_1 = Bit_Concat3_out1;



  assign In7_out1_dtc = {{3{Data_Type_S19_out1[26]}}, Data_Type_S19_out1};



  assign Add61_1 = {signal4_8[11], signal4_8};
  assign Add61_2 = {Switch90_out1_1[11], Switch90_out1_1};
  assign Add6_out1 = Add61_1 - Add61_2;



  assign Bit_Concat1_out1 = {Add6_out1, 14'b00000000000000};



  assign Data_Type_S19_out1 = Bit_Concat1_out1;



  assign Switch87_out1_2 = (CT63_out1_2 == 1'b0 ? Unit_Delay31_out1 :
              Switch107_out1_41);



  always @(posedge g_clk)
    begin : Unit_Delay314_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay31_out1 <= Switch87_out1_2;
      end
    end



  assign Switch95_out1_1 = (CT66_out1_4 == 1'b0 ? Unit_Delay33_out1_2 :
              Switch107_out1_41);



  always @(posedge g_clk)
    begin : Unit_Delay338_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_2 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay33_out1_2 <= Switch95_out1_1;
      end
    end



  assign Switch98_out1_1 = (CT69_out1_2 == 1'b0 ? Unit_Delay35_out1_1 :
              Switch107_out1_41);



  always @(posedge g_clk)
    begin : Unit_Delay357_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay35_out1_1 <= Switch98_out1_1;
      end
    end



  assign Switch107_out1_41 = (switch_compare_1_18 == 1'b0 ? 30'sb000000000000000000000000000000 :
              Switch92_out1_1);



  assign Switch101_out1_2 = (CT72_out1_3 == 1'b0 ? Unit_Delay37_out1_3 :
              Switch107_out1_41);



  always @(posedge g_clk)
    begin : Unit_Delay373_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1_3 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay37_out1_3 <= Switch101_out1_2;
      end
    end



  assign signal6_5 = (CT76_out1_2 == 1'b0 ? Unit_Delay37_out1_3 :
              Unit_Delay37_out1_3);



  assign s_296 = signal6_5;

  assign signal6_6 = (CT71_out1 == 1'b0 ? s_296 :
              Unit_Delay35_out1_1);



  assign s_297 = signal6_6;

  assign signal6_7 = (CT68_out1_2 == 1'b0 ? s_297 :
              Unit_Delay33_out1_2);



  assign s_298 = signal6_7;

  assign signal6_8 = (CT65_out1_3 == 1'b0 ? s_298 :
              Unit_Delay31_out1);



  assign signal6_9 = signal6_8;

  assign signal6_10 = signal6_9;

  assign Switch73_out1_1 = (CT53_out1_1 == 1'b0 ? Unit_Delay29_out1_1 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay293_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay29_out1_1 <= Switch73_out1_1;
      end
    end



  assign Switch75_out1_1 = (CT54_out1_2 == 1'b0 ? Unit_Delay30_out1_2 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay308_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay30_out1_2 <= Switch75_out1_1;
      end
    end



  assign Switch79_out1_2 = (CT56_out1_5 == 1'b0 ? Unit_Delay27_out1_1 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay273_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay27_out1_1 <= Switch79_out1_2;
      end
    end



  assign Switch81_out1_3 = (CT57_out1_8 == 1'b0 ? Unit_Delay28_out1_1 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay283_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay28_out1_1 <= Switch81_out1_3;
      end
    end



  assign signal2_241 = (CT76_out1_2 == 1'b0 ? Unit_Delay28_out1_1 :
              Unit_Delay28_out1_1);



  assign s_299 = signal2_241;

  assign signal2_242 = (CT71_out1 == 1'b0 ? s_299 :
              Unit_Delay27_out1_1);



  assign s_300 = signal2_242;

  assign signal2_243 = (CT68_out1_2 == 1'b0 ? s_300 :
              Unit_Delay30_out1_2);



  assign s_301 = signal2_243;

  assign signal2_244 = (CT65_out1_3 == 1'b0 ? s_301 :
              Unit_Delay29_out1_1);



  assign signal2_245 = signal2_244;

  assign signal2_246 = signal2_245;

  assign Switch93_out1_1 = (switch_compare_1_17 == 1'b0 ? 28'sb0000000000000000000000000000 :
              signal2_246);



  assign Add81_1 = {{3{Switch93_out1_1[27]}}, Switch93_out1_1};
  assign Add81_2 = {signal6_10[29], signal6_10};
  assign Add81_add_temp = Add81_1 + Add81_2;
  assign Add8_out1_1 = Add81_add_temp[29:0];



  assign RO52_1_1 = {{3{Data_Type_S19_out1[26]}}, Data_Type_S19_out1};
  assign RO52_relop1 = Add8_out1_1 > RO52_1_1;



  assign Switch91_out1_1 = (RO52_relop1 == 1'b0 ? Add8_out1_1 :
              In7_out1_dtc);



  assign RO62_1_1 = {{3{Data_Type_S2_out1_1[26]}}, Data_Type_S2_out1_1};
  assign RO62_relop1 = Switch91_out1_1 < RO62_1_1;



  assign Switch92_out1_1 = (RO62_relop1 == 1'b0 ? Switch91_out1_1 :
              In8_out1_dtc);



  assign Bit_Slice9_out1 = Switch92_out1_1[29:14];



  assign Data_Type_S6_out1 = Bit_Slice9_out1;



  assign Switch89_out1_dtc = Switch89_out1_1[11:0];



  assign Switch59_out1_2 = (CT45_out1_1 == 1'b0 ? Unit_Delay18_out1_1 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay183_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay18_out1_1 <= Switch59_out1_2;
      end
    end



  assign Bit_Slice2_out1_1 = Unit_Delay18_out1_1[27:7];



  assign Data_Type_S3_out1_1 = Bit_Slice2_out1_1;



  assign Switch67_out1 = (CT46_out1_3 == 1'b0 ? Unit_Delay26_out1_1 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay263_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1_1 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay26_out1_1 <= Switch67_out1;
      end
    end



  assign Bit_Slice4_out1 = Unit_Delay26_out1_1[27:7];



  assign Data_Type_S5_out1_2 = Bit_Slice4_out1;



  assign Switch69_out1_1 = (CT48_out1_3 == 1'b0 ? Unit_Delay15_out1_2 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay154_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay15_out1_2 <= Switch69_out1_1;
      end
    end



  assign Bit_Slice5_out1_3 = Unit_Delay15_out1_2[27:7];



  assign Data_Type_S7_out1_1 = Bit_Slice5_out1_3;



  assign Bit_Slice1_out1_2 = Product_out1_1[27:0];



  assign Data_Type_S1_out1 = Bit_Slice1_out1_2;



  assign Switch71_out1_1 = (CT49_out1_4 == 1'b0 ? Unit_Delay16_out1_2 :
              Data_Type_S1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay163_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1_2 <= 28'sb0000000000000000000000000000;
      end
      else begin
        Unit_Delay16_out1_2 <= Switch71_out1_1;
      end
    end



  assign Bit_Slice6_out1_2 = Unit_Delay16_out1_2[27:7];



  assign Data_Type_S9_out1_1 = Bit_Slice6_out1_2;



  assign signal1_65 = (CT76_out1_2 == 1'b0 ? Data_Type_S9_out1_1 :
              Data_Type_S9_out1_1);



  assign s_302 = signal1_65;

  assign signal1_66 = (CT71_out1 == 1'b0 ? s_302 :
              Data_Type_S7_out1_1);



  assign s_303 = signal1_66;

  assign signal1_67 = (CT68_out1_2 == 1'b0 ? s_303 :
              Data_Type_S5_out1_2);



  assign s_304 = signal1_67;

  assign signal1_68 = (CT65_out1_3 == 1'b0 ? s_304 :
              Data_Type_S3_out1_1);



  assign signal1_69 = signal1_68;

  assign signal1_70 = signal1_69;

  assign Switch108_out1_1 = (OR6_out1_3 == 1'b0 ? 21'sb000000000000000000000 :
              signal1_70);



  assign Switch36_out1 = (CT10_out1_1 == 1'b0 ? Unit_Delay5_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay513_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1_3 <= Switch36_out1;
      end
    end



  assign Switch44_out1 = (CT11_out1_1 == 1'b0 ? Unit_Delay6_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay610_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1_3 <= Switch44_out1;
      end
    end



  assign Switch46_out1 = (CT20_out1_2 == 1'b0 ? Unit_Delay10_out1_2 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1010_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1_2 <= Switch46_out1;
      end
    end



  assign Switch13_out1_1 = (OR1_out1_5 == 1'b0 ? Switch107_out1_42 :
              Switch107_out1_43);



  assign Switch14_out1 = (OR1_out1_5 == 1'b0 ? Switch107_out1_44 :
              Switch107_out1_45);



  assign Switch15_out1 = (OR1_out1_5 == 1'b0 ? Switch107_out1_46 :
              Switch107_out1_9);



  assign Switch18_out1_1 = (OR1_out1_5 == 1'b0 ? Switch107_out1_47 :
              Switch107_out1_8);



  assign Switch19_out1_3 = (OR3_out1_9 == 1'b0 ? Switch19_out1_2 :
              Switch107_out1_48);



  assign s_305 = Switch19_out1_3;

  assign Switch21_out1_1 = (OR3_out1_9 == 1'b0 ? Switch2_out1 :
              Switch107_out1_49);



  assign s_306 = Switch21_out1_1;

  assign Switch28_out1 = (OR3_out1_9 == 1'b0 ? Switch3_out1 :
              Switch107_out1_50);



  assign s_307 = Switch28_out1;

  assign s_308 = Switch29_out1_3;

  assign Switch29_out1_3 = (OR3_out1_9 == 1'b0 ? Switch4_out1 :
              Switch107_out1_51);



  assign s_309 = Switch29_out1_3;

  assign signal1_71 = (CT21_out1_2 == 1'b0 ? s_309 :
              s_308);



  assign s_310 = signal1_71;

  assign signal1_72 = (CT29_out1_2 == 1'b0 ? s_310 :
              s_307);



  assign s_311 = signal1_72;

  assign signal1_73 = (CT14_out1_2 == 1'b0 ? s_311 :
              s_306);



  assign s_312 = signal1_73;

  assign signal1_74 = (CT23_out1_3 == 1'b0 ? s_312 :
              s_305);



  assign s_313 = signal1_74;

  assign signal1_75 = (CT3_out1_3 == 1'b0 ? s_313 :
              Switch18_out1_1);



  assign s_314 = signal1_75;

  assign signal1_76 = (CT7_out1_2 == 1'b0 ? s_314 :
              Switch15_out1);



  assign s_315 = signal1_76;

  assign signal1_77 = (CT1_out1_2 == 1'b0 ? s_315 :
              Switch14_out1);



  assign s_316 = signal1_77;

  assign signal1_78 = (CT5_out1_3 == 1'b0 ? s_316 :
              Switch13_out1_1);



  assign signal1_79 = signal1_78;

  assign s_317 = signal1_79;

  assign Switch127_out1_1 = (CT98_out1_3 == 1'b0 ? Unit_Delay47_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay473_process
      if (Rst_n == 1'b0) begin
        Unit_Delay47_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay47_out1_2 <= Switch127_out1_1;
      end
    end



  assign Switch128_out1_2 = (CT99_out1_2 == 1'b0 ? Unit_Delay48_out1_3 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay484_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay48_out1_3 <= Switch128_out1_2;
      end
    end



  assign Switch123_out1_4 = (CT94_out1_2 == 1'b0 ? Unit_Delay45_out1_1 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay453_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1_1 <= Switch123_out1_4;
      end
    end



  assign Switch125_out1_2 = (CT96_out1_1 == 1'b0 ? Unit_Delay46_out1_3 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay464_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_3 <= Switch125_out1_2;
      end
    end



  assign signal1_80 = (CT42_out1_2 == 1'b0 ? Unit_Delay46_out1_3 :
              Unit_Delay46_out1_3);



  assign s_318 = signal1_80;

  assign signal1_81 = (CT44_out1_2 == 1'b0 ? s_318 :
              Unit_Delay45_out1_1);



  assign s_319 = signal1_81;

  assign signal1_82 = (CT19_out1_3 == 1'b0 ? s_319 :
              Unit_Delay48_out1_3);



  assign s_320 = signal1_82;

  assign signal1_83 = (CT9_out1_3 == 1'b0 ? s_320 :
              Unit_Delay47_out1_2);



  assign s_321 = signal1_83;

  assign s_322 = Switch30_out1_2;

  assign s_323 = Switch31_out1_3;

  assign s_324 = Switch34_out1_1;

  assign s_325 = Switch35_out1_1;

  assign Switch16_out1 = (CT16_out1_3 == 1'b0 ? Unit_Delay17_out1_1 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay173_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1_1 <= Switch16_out1;
      end
    end



  assign Switch47_out1 = (CT39_out1_2 == 1'b0 ? Unit_Delay44_out1_3 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay444_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay44_out1_3 <= Switch47_out1;
      end
    end



  assign Switch30_out1_2 = (OR1_out1_5 == 1'b0 ? Unit_Delay44_out1_3 :
              Unit_Delay17_out1_1);



  assign s_326 = Switch30_out1_2;

  assign Switch24_out1_2 = (CT17_out1_2 == 1'b0 ? Unit_Delay9_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay910_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1_2 <= Switch24_out1_2;
      end
    end



  assign Switch49_out1_7 = (CT40_out1_2 == 1'b0 ? Unit_Delay55_out1_7 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay557_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay55_out1_7 <= Switch49_out1_7;
      end
    end



  assign Switch31_out1_3 = (OR1_out1_5 == 1'b0 ? Unit_Delay55_out1_7 :
              Unit_Delay9_out1_2);



  assign s_327 = Switch31_out1_3;

  assign Switch39_out1_1 = (CT25_out1_2 == 1'b0 ? Unit_Delay14_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1410_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1_2 <= Switch39_out1_1;
      end
    end



  assign Switch63_out1_1 = (CT74_out1_2 == 1'b0 ? Unit_Delay25_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay253_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1_2 <= Switch63_out1_1;
      end
    end



  assign Switch34_out1_1 = (OR1_out1_5 == 1'b0 ? Unit_Delay25_out1_2 :
              Unit_Delay14_out1_2);



  assign s_328 = Switch34_out1_1;

  assign Switch40_out1 = (CT26_out1_4 == 1'b0 ? Unit_Delay19_out1_1 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay193_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1_1 <= Switch40_out1;
      end
    end



  assign Switch64_out1 = (CT80_out1_2 == 1'b0 ? Unit_Delay51_out1_3 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay514_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay51_out1_3 <= Switch64_out1;
      end
    end



  assign Switch35_out1_1 = (OR1_out1_5 == 1'b0 ? Unit_Delay51_out1_3 :
              Unit_Delay19_out1_1);



  assign s_329 = Switch35_out1_1;

  assign Switch135_out1_2 = (CT107_out1_1 == 1'b0 ? Unit_Delay52_out1_3 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay523_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay52_out1_3 <= Switch135_out1_2;
      end
    end



  assign Switch140_out1_2 = (SncCmp_En == 1'b0 ? 12'sb000000000000 :
              Unit_Delay52_out1_3);



  assign s_330 = Switch140_out1_2;

  assign Switch136_out1 = (CT108_out1_2 == 1'b0 ? Unit_Delay53_out1_4 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay533_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay53_out1_4 <= Switch136_out1;
      end
    end



  assign Switch141_out1_1 = (SncCmp_En == 1'b0 ? 12'sb000000000000 :
              Unit_Delay53_out1_4);



  assign s_331 = Switch141_out1_1;

  assign s_332 = Switch142_out1_1;

  assign s_333 = Switch142_out1_1;

  assign Switch133_out1_1 = (CT126_out1 == 1'b0 ? Unit_Delay47_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay47_process
      if (Rst_n == 1'b0) begin
        Unit_Delay47_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay47_out1_3 <= Switch133_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3919_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_32 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_32 <= Switch107_out1_52;
      end
    end



  assign Switch107_out1_52 = (CT130_out1_1 == 1'b0 ? Unit_Delay39_out1_32 :
              Unit_Delay47_out1_3);



  assign s_334 = Switch107_out1_52;

  assign Switch134_out1 = (CT127_out1 == 1'b0 ? Unit_Delay48_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay48_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay48_out1_4 <= Switch134_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3920_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_33 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_33 <= Switch107_out1_53;
      end
    end



  assign Switch107_out1_53 = (CT130_out1_1 == 1'b0 ? Unit_Delay39_out1_33 :
              Unit_Delay48_out1_4);



  assign s_335 = Switch107_out1_53;

  assign Switch135_out1_3 = (CT128_out1_1 == 1'b0 ? Unit_Delay49_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay49_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay49_out1_3 <= Switch135_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3921_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_34 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_34 <= Switch107_out1_54;
      end
    end



  assign Switch107_out1_54 = (CT130_out1_1 == 1'b0 ? Unit_Delay39_out1_34 :
              Unit_Delay49_out1_3);



  assign s_336 = Switch107_out1_54;

  assign Switch136_out1_1 = (CT129_out1 == 1'b0 ? Unit_Delay50_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay50_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay50_out1_4 <= Switch136_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3922_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_35 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_35 <= Switch107_out1_55;
      end
    end



  assign Switch107_out1_55 = (CT130_out1_1 == 1'b0 ? Unit_Delay39_out1_35 :
              Unit_Delay50_out1_4);



  assign s_337 = Switch107_out1_55;

  assign Bit_Slice6_out1_3 = Unit_Delay30_out1_3[12:1];



  assign Data_Type_S11_out1_4 = Bit_Slice6_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay3963_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_36 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_36 <= Switch107_out1_42;
      end
    end



  assign Switch107_out1_42 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_36 :
              Data_Type_S11_out1_4);



  assign Bit_Slice1_out1_3 = Unit_Delay33_out1_3[12:1];



  assign Data_Type_S12_out1_3 = Bit_Slice1_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay3964_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_37 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_37 <= Switch107_out1_44;
      end
    end



  assign Switch107_out1_44 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_37 :
              Data_Type_S12_out1_3);



  assign Bit_Slice2_out1_2 = Unit_Delay34_out1_2[12:1];



  assign Data_Type_S13_out1_2 = Bit_Slice2_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay3965_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_38 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_38 <= Switch107_out1_46;
      end
    end



  assign Switch107_out1_46 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_38 :
              Data_Type_S13_out1_2);



  assign Switch1_out1_1 = (CT2_out1_2 == 1'b0 ? Unit_Delay1_out1_8 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay153_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_8 <= Switch1_out1_1;
      end
    end



  assign Switch4_out1_1 = (CT8_out1_2 == 1'b0 ? Unit_Delay4_out1_2 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay414_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1_2 <= Switch4_out1_1;
      end
    end



  assign Switch111_out1 = (CT109_out1_1 == 1'b0 ? Unit_Delay54_out1_9 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay548_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_9 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay54_out1_9 <= Switch111_out1;
      end
    end



  assign Switch113_out1_3 = (CT111_out1_3 == 1'b0 ? Unit_Delay56_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay563_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay56_out1_3 <= Switch113_out1_3;
      end
    end



  assign Switch144_out1_1 = (CT113_out1_3 == 1'b0 ? Unit_Delay57_out1_8 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay578_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay57_out1_8 <= Switch144_out1_1;
      end
    end



  assign Switch146_out1_2 = (CT115_out1_2 == 1'b0 ? Unit_Delay58_out1_2 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay583_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay58_out1_2 <= Switch146_out1_2;
      end
    end



  assign Bit_Slice6_out1_4 = Unit_Delay30_out1_4[18:7];



  assign Data_Type_S11_out1_5 = Bit_Slice6_out1_4;



  assign Bit_Slice1_out1_4 = Unit_Delay33_out1_4[18:7];



  assign Data_Type_S12_out1_4 = Bit_Slice1_out1_4;



  assign Bit_Slice2_out1_3 = Unit_Delay34_out1_3[18:7];



  assign Data_Type_S13_out1_3 = Bit_Slice2_out1_3;



  assign Switch80_out1_1 = (CT51_out1_7 == 1'b0 ? Unit_Delay30_out1_4 :
              Switch79_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay307_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_4 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay30_out1_4 <= Switch80_out1_1;
      end
    end



  assign Switch87_out1_3 = (CT56_out1_4 == 1'b0 ? Unit_Delay33_out1_4 :
              Switch79_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay337_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_4 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay33_out1_4 <= Switch87_out1_3;
      end
    end



  assign Switch89_out1_2 = (CT58_out1_6 == 1'b0 ? Unit_Delay34_out1_3 :
              Switch79_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay346_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_3 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay34_out1_3 <= Switch89_out1_2;
      end
    end



  assign signal2_247 = (CT61_out1_6 == 1'b0 ? Unit_Delay35_out1_2 :
              Unit_Delay35_out1_2);



  assign s_338 = signal2_247;

  assign signal2_248 = (CT59_out1_7 == 1'b0 ? s_338 :
              Unit_Delay34_out1_3);



  assign s_339 = signal2_248;

  assign signal2_249 = (CT57_out1_7 == 1'b0 ? s_339 :
              Unit_Delay33_out1_4);



  assign s_340 = signal2_249;

  assign signal2_250 = (CT55_out1_7 == 1'b0 ? s_340 :
              Unit_Delay30_out1_4);



  assign signal2_251 = signal2_250;

  assign signal2_252 = signal2_251;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(9),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_1   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_2),
                                                                 .wr_addr(Add11_out1_6),
                                                                 .wr_en(Switch208_out1_6),
                                                                 .rd_addr(Add12_out1_8),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_1)
                                                                 );

  assign Switch98_out1_2 = (Switch208_out1_6 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_1);



  assign signal1_84 = (CT61_out1_6 == 1'b0 ? Switch107_out1_51 :
              Switch107_out1_51);



  assign s_341 = signal1_84;

  assign signal1_85 = (CT59_out1_7 == 1'b0 ? s_341 :
              Switch107_out1_50);



  assign s_342 = signal1_85;

  assign signal1_86 = (CT57_out1_7 == 1'b0 ? s_342 :
              Switch107_out1_49);



  assign s_343 = signal1_86;

  assign signal1_87 = (CT55_out1_7 == 1'b0 ? s_343 :
              Switch107_out1_48);



  assign signal1_88 = signal1_87;

  assign signal1_89 = signal1_88;

  assign Switch84_out1_2 = (switch_compare_1_16 == 1'b0 ? 12'sb000000000000 :
              signal1_89);



  assign Switch97_out1_1 = (Switch208_out1_6 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_2);



  assign Add7_stage22_1 = {{8{Switch97_out1_1[11]}}, Switch97_out1_1};
  assign Add7_stage22_2 = {{8{Switch98_out1_2[11]}}, Switch98_out1_2};
  assign Add7_op_stage2_1 = Add7_stage22_1 - Add7_stage22_2;



  assign Add7_stage32_1 = {signal2_252[18], signal2_252};
  assign Add7_stage32_add_temp = Add7_op_stage2_1 + Add7_stage32_1;
  assign Add7_out1_2 = Add7_stage32_add_temp[18:0];



  assign Switch79_out1_3 = (switch_compare_1_15 == 1'b0 ? 19'sb0000000000000000000 :
              Add7_out1_2);



  assign Switch91_out1_2 = (CT60_out1_7 == 1'b0 ? Unit_Delay35_out1_2 :
              Switch79_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay356_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay35_out1_2 <= Switch91_out1_2;
      end
    end



  assign Bit_Slice3_out1_1 = Unit_Delay35_out1_2[18:7];



  assign Data_Type_S15_out1_2 = Bit_Slice3_out1_1;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_2   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_3),
                                                                 .wr_addr(Add11_out1_4),
                                                                 .wr_en(Switch208_out1_4),
                                                                 .rd_addr(Add12_out1_7),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_2)
                                                                 );

  assign Switch98_out1_3 = (Switch208_out1_4 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_2);



  assign Bit_Slice6_out1_5 = Unit_Delay30_out1_5[12:1];



  assign Data_Type_S11_out1_6 = Bit_Slice6_out1_5;



  assign Bit_Slice1_out1_5 = Unit_Delay33_out1_5[12:1];



  assign Data_Type_S12_out1_5 = Bit_Slice1_out1_5;



  assign Bit_Slice2_out1_4 = Unit_Delay34_out1_4[12:1];



  assign Data_Type_S13_out1_4 = Bit_Slice2_out1_4;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_3   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_4),
                                                                 .wr_addr(Add11_out1_5),
                                                                 .wr_en(Switch208_out1_5),
                                                                 .rd_addr(Add12_out1_6),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_3)
                                                                 );

  assign Switch98_out1_4 = (Switch208_out1_5 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_3);



  assign Switch72_out1_2 = (CT71_out1_2 == 1'b0 ? Unit_Delay27_out1_2 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay27_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay27_out1_2 <= Switch72_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3910_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_39 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_39 <= Switch107_out1_29;
      end
    end



  assign Switch107_out1_29 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_39 :
              Unit_Delay27_out1_2);



  assign Switch73_out1_2 = (CT72_out1_2 == 1'b0 ? Unit_Delay28_out1_2 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay28_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay28_out1_2 <= Switch73_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3911_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_40 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_40 <= Switch107_out1_30;
      end
    end



  assign Switch107_out1_30 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_40 :
              Unit_Delay28_out1_2);



  assign signal1_90 = (CT61_out1_5 == 1'b0 ? Switch107_out1_30 :
              Switch107_out1_30);



  assign s_344 = signal1_90;

  assign signal1_91 = (CT59_out1_6 == 1'b0 ? s_344 :
              Switch107_out1_29);



  assign s_345 = signal1_91;

  assign signal1_92 = (CT57_out1_6 == 1'b0 ? s_345 :
              Switch107_out1_56);



  assign s_346 = signal1_92;

  assign signal1_93 = (CT55_out1_6 == 1'b0 ? s_346 :
              Switch107_out1_57);



  assign signal1_94 = signal1_93;

  assign signal1_95 = signal1_94;

  assign Switch84_out1_4 = (switch_compare_1_14 == 1'b0 ? 12'sb000000000000 :
              signal1_95);



  assign Switch97_out1_2 = (Switch208_out1_5 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_4);



  assign Add71_1 = {Switch97_out1_2[11], Switch97_out1_2};
  assign Add71_2 = {Switch98_out1_4[11], Switch98_out1_4};
  assign Add7_out1_3 = Add71_1 + Add71_2;



  assign Switch80_out1_2 = (CT51_out1_6 == 1'b0 ? Unit_Delay30_out1_5 :
              Switch79_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay304_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_5 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay30_out1_5 <= Switch80_out1_2;
      end
    end



  assign Switch87_out1_4 = (CT56_out1_3 == 1'b0 ? Unit_Delay33_out1_5 :
              Switch79_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay334_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_5 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay33_out1_5 <= Switch87_out1_4;
      end
    end



  assign Switch89_out1_3 = (CT58_out1_5 == 1'b0 ? Unit_Delay34_out1_4 :
              Switch79_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay343_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_4 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay34_out1_4 <= Switch89_out1_3;
      end
    end



  assign signal2_253 = (CT61_out1_5 == 1'b0 ? Unit_Delay35_out1_3 :
              Unit_Delay35_out1_3);



  assign s_347 = signal2_253;

  assign signal2_254 = (CT59_out1_6 == 1'b0 ? s_347 :
              Unit_Delay34_out1_4);



  assign s_348 = signal2_254;

  assign signal2_255 = (CT57_out1_6 == 1'b0 ? s_348 :
              Unit_Delay33_out1_5);



  assign s_349 = signal2_255;

  assign signal2_256 = (CT55_out1_6 == 1'b0 ? s_349 :
              Unit_Delay30_out1_5);



  assign signal2_257 = signal2_256;

  assign signal2_258 = signal2_257;

  assign Switch1_out1_2 = (Switch208_out1_5 == 1'b0 ? signal2_258 :
              Add7_out1_3);



  assign Switch79_out1_4 = (switch_compare_1_13 == 1'b0 ? 13'sb0000000000000 :
              Switch1_out1_2);



  assign Switch91_out1_3 = (CT60_out1_6 == 1'b0 ? Unit_Delay35_out1_3 :
              Switch79_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay353_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_3 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay35_out1_3 <= Switch91_out1_3;
      end
    end



  assign Bit_Slice3_out1_2 = Unit_Delay35_out1_3[12:1];



  assign Data_Type_S15_out1_3 = Bit_Slice3_out1_2;



  assign signal1_96 = (CT61_out1_4 == 1'b0 ? Data_Type_S15_out1_3 :
              Data_Type_S15_out1_3);



  assign s_350 = signal1_96;

  assign signal1_97 = (CT59_out1_5 == 1'b0 ? s_350 :
              Data_Type_S13_out1_4);



  assign s_351 = signal1_97;

  assign signal1_98 = (CT57_out1_5 == 1'b0 ? s_351 :
              Data_Type_S12_out1_5);



  assign s_352 = signal1_98;

  assign signal1_99 = (CT55_out1_5 == 1'b0 ? s_352 :
              Data_Type_S11_out1_6);



  assign signal1_100 = signal1_99;

  assign signal1_101 = signal1_100;

  assign Switch84_out1_3 = (switch_compare_1_12 == 1'b0 ? 12'sb000000000000 :
              signal1_101);



  assign Switch97_out1_3 = (Switch208_out1_4 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_3);



  assign Add7_1 = {Switch97_out1_3[11], Switch97_out1_3};
  assign Add7_2 = {Switch98_out1_3[11], Switch98_out1_3};
  assign Add7_out1_4 = Add7_1 + Add7_2;



  assign Switch80_out1_3 = (CT51_out1_5 == 1'b0 ? Unit_Delay30_out1_3 :
              Switch79_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay303_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_3 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay30_out1_3 <= Switch80_out1_3;
      end
    end



  assign Switch87_out1_5 = (CT56_out1_2 == 1'b0 ? Unit_Delay33_out1_3 :
              Switch79_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay333_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_3 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay33_out1_3 <= Switch87_out1_5;
      end
    end



  assign Switch89_out1_4 = (CT58_out1_4 == 1'b0 ? Unit_Delay34_out1_2 :
              Switch79_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay342_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_2 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay34_out1_2 <= Switch89_out1_4;
      end
    end



  assign signal2_259 = (CT61_out1_4 == 1'b0 ? Unit_Delay35_out1_4 :
              Unit_Delay35_out1_4);



  assign s_353 = signal2_259;

  assign signal2_260 = (CT59_out1_5 == 1'b0 ? s_353 :
              Unit_Delay34_out1_2);



  assign s_354 = signal2_260;

  assign signal2_261 = (CT57_out1_5 == 1'b0 ? s_354 :
              Unit_Delay33_out1_3);



  assign s_355 = signal2_261;

  assign signal2_262 = (CT55_out1_5 == 1'b0 ? s_355 :
              Unit_Delay30_out1_3);



  assign signal2_263 = signal2_262;

  assign signal2_264 = signal2_263;

  assign Switch1_out1_3 = (Switch208_out1_4 == 1'b0 ? signal2_264 :
              Add7_out1_4);



  assign Switch79_out1_5 = (switch_compare_1_11 == 1'b0 ? 13'sb0000000000000 :
              Switch1_out1_3);



  assign Switch91_out1_4 = (CT60_out1_5 == 1'b0 ? Unit_Delay35_out1_4 :
              Switch79_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay352_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_4 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay35_out1_4 <= Switch91_out1_4;
      end
    end



  assign Bit_Slice3_out1_3 = Unit_Delay35_out1_4[12:1];



  assign Data_Type_S15_out1_4 = Bit_Slice3_out1_3;



  always @(posedge g_clk)
    begin : Unit_Delay3966_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_41 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_41 <= Switch107_out1_47;
      end
    end



  assign Switch107_out1_47 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_41 :
              Data_Type_S15_out1_4);



  assign signal2_265 = (CT106_out1_2 == 1'b0 ? Switch107_out1_47 :
              Data_Type_S15_out1_2);



  assign s_356 = signal2_265;

  assign signal2_266 = (CT104_out1_1 == 1'b0 ? s_356 :
              Data_Type_S13_out1_3);



  assign s_357 = signal2_266;

  assign signal2_267 = (CT85_out1_2 == 1'b0 ? s_357 :
              Data_Type_S12_out1_4);



  assign s_358 = signal2_267;

  assign signal2_268 = (CT102_out1_1 == 1'b0 ? s_358 :
              Data_Type_S11_out1_5);



  assign s_359 = signal2_268;

  assign signal2_269 = (CT97_out1_3 == 1'b0 ? s_359 :
              Unit_Delay58_out1_2);



  assign s_360 = signal2_269;

  assign signal2_270 = (CT95_out1 == 1'b0 ? s_360 :
              Unit_Delay57_out1_8);



  assign s_361 = signal2_270;

  assign signal2_271 = (CT100_out1_2 == 1'b0 ? s_361 :
              Unit_Delay56_out1_3);



  assign s_362 = signal2_271;

  assign signal2_272 = (CT101_out1_2 == 1'b0 ? s_362 :
              Unit_Delay54_out1_9);



  assign s_363 = signal2_272;

  assign signal2_273 = (CT36_out1_1 == 1'b0 ? s_363 :
              Unit_Delay4_out1_2);



  assign s_364 = signal2_273;

  assign signal2_274 = (CT34_out1_1 == 1'b0 ? s_364 :
              Unit_Delay1_out1_8);



  assign s_365 = signal2_274;

  assign signal2_275 = (CT81_out1_1 == 1'b0 ? s_365 :
              Switch107_out1_51);



  assign s_366 = signal2_275;

  assign signal2_276 = (CT82_out1_2 == 1'b0 ? s_366 :
              Switch107_out1_50);



  assign s_367 = signal2_276;

  assign signal2_277 = (CT73_out1_3 == 1'b0 ? s_367 :
              Switch107_out1_49);



  assign s_368 = signal2_277;

  assign signal2_278 = (CT83_out1_2 == 1'b0 ? s_368 :
              Switch107_out1_48);



  assign s_369 = signal2_278;

  assign signal2_279 = (CT27_out1_1 == 1'b0 ? s_369 :
              Switch107_out1_47);



  assign s_370 = signal2_279;

  assign signal2_280 = (CT28_out1_2 == 1'b0 ? s_370 :
              Switch107_out1_46);



  assign s_371 = signal2_280;

  assign signal2_281 = (CT18_out1_1 == 1'b0 ? s_371 :
              Switch107_out1_44);



  assign s_372 = signal2_281;

  assign signal2_282 = (CT77_out1_2 == 1'b0 ? s_372 :
              Switch107_out1_42);



  assign signal2_283 = signal2_282;

  assign Switch110_out1_1 = (Or4_out1_2 == 1'b0 ? Unit_Delay45_out1_2 :
              Switch66_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3940_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_42 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_42 <= Switch107_out1_43;
      end
    end



  assign Switch107_out1_43 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_42 :
              Switch110_out1_1);
	/*assign Switch107_out1_43_temp = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_42 :
             Switch110_out1_1);
wire signed [11:0] Switch107_out1_43_temp;  // sfix12  


 Soft_V1 Soft_V1_INST
          ( 
			  .g_clk( g_clk ),
           .Rst_n( Rst_n ),
           .SoftFre_b16( IacSoftFre2_b16 ),
           .working( 1'b1 ),
           .IN0_b12( Switch107_out1_43_temp ),
           .IN1_b12(  ),
           .OUT0_b12( Switch107_out1_43 ),
           .OUT1_b12(  )
          );*/


  assign RO22_relop1 = signal1_102 < signal3_73;



  assign Switch95_out1_2 = (RO22_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign Switch107_out1_58 = (CT62_out1_3 == 1'b0 ? Unit_Delay45_out1_2 :
              Switch93_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay451_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1_2 <= Switch107_out1_58;
      end
    end



  assign signal3_74 = (CT61_out1_3 == 1'b0 ? Unit_Delay46_out1_4 :
              Unit_Delay46_out1_4);



  assign s_373 = signal3_74;

  assign signal3_75 = (CT60_out1_4 == 1'b0 ? s_373 :
              Unit_Delay45_out1_2);



  assign signal3_76 = signal3_75;

  assign signal3_73 = signal3_76;

  assign Unary_Minus31_in0 =  - ({Switch128_out1[11], Switch128_out1});
  assign Unary_Minus3_out1_1 = Unary_Minus31_in0[11:0];



  assign Switch56_out1_1 = (CT24_out1_4 == 1'b0 ? Unit_Delay18_out1_2 :
              Data_Type_Conversion25_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay181_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay18_out1_2 <= Switch56_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay191_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1_2 <= 12'b000000000000;
      end
      else begin
        Unit_Delay19_out1_2 <= Switch58_out1_1;
      end
    end



  assign Switch61_out1_1 = (Cmp2_out1 == 1'b0 ? Unit_Delay19_out1_2 :
              12'b000000000000);



  assign Bitwise_Operator1_out1_1 = Switch59_out1 | Switch61_out1_1;



  assign Product1_out1_1 = Bitwise_Operator1_out1_1 * Bitwise_Operator1_out1_1;



  assign RO16_1_1 = {1'b0, Product1_out1_1};
  assign RO16_1_2 = {Unit_Delay18_out1_2[23], Unit_Delay18_out1_2};
  assign RO16_relop1 = RO16_1_1 < RO16_1_2;



  assign Switch58_out1_1 = (RO16_relop1 == 1'b0 ? Switch61_out1_1 :
              Bitwise_Operator1_out1_1);



  assign Data_Type_Conversion4_out1_1 = Switch58_out1_1;



  assign Switch60_out1 = (Cmp3_out1 == 1'b0 ? Unit_Delay20_out1_1 :
              Data_Type_Conversion4_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay201_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1_1 <= Switch60_out1;
      end
    end



  assign Switch260_out1 = (RO181_relop1 == 1'b0 ? Unit_Delay123_out1 :
              1'b0);



  assign Switch257_out1 = (RO191_relop1 == 1'b0 ? Add13_out1_3 :
              12'sb000000001000);



  assign RO181_relop1 = Switch257_out1 <= 12'sb000000000000;



  assign Switch258_out1 = (RO181_relop1 == 1'b0 ? Switch257_out1 :
              12'sb000000000000);



  always @(posedge g_clk)
    begin : Unit_Delay1221_process
      if (Rst_n == 1'b0) begin
        Unit_Delay122_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay122_out1 <= Switch258_out1;
      end
    end



  assign RO251_1_1 = {{3{Data_Type_S40_out1[8]}}, Data_Type_S40_out1};
  assign RO251_relop1 = Unit_Delay77_out1 < RO251_1_1;



  assign Switch265_out1 = (RO251_relop1 == 1'b0 ? Unit_Delay102_out1 :
              1'b0);



  assign Switch152_out1_1 = (CT91_out1_2 == 1'b0 ? Unit_Delay70_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay70_process
      if (Rst_n == 1'b0) begin
        Unit_Delay70_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay70_out1 <= Switch152_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay761_process
      if (Rst_n == 1'b0) begin
        Unit_Delay76_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay76_out1 <= Switch162_out1_1;
      end
    end



  assign Switch165_out1 = (Cmp16_out1 == 1'b0 ? Unit_Delay76_out1 :
              12'b000000000000);



  assign Bitwise_Operator7_out1 = Switch163_out1 | Switch165_out1;



  assign Product8_out1 = Bitwise_Operator7_out1 * Bitwise_Operator7_out1;



  assign RO321_1_1 = {1'b0, Product8_out1};
  assign RO321_1_2 = {Unit_Delay70_out1[23], Unit_Delay70_out1};
  assign RO321_relop1 = RO321_1_1 < RO321_1_2;



  assign Switch162_out1_1 = (RO321_relop1 == 1'b0 ? Switch165_out1 :
              Bitwise_Operator7_out1);



  assign Data_Type_Conversion27_out1_1 = Switch162_out1_1;



  assign Switch164_out1_1 = (Cmp17_out1 == 1'b0 ? Unit_Delay77_out1 :
              Data_Type_Conversion27_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay77_process
      if (Rst_n == 1'b0) begin
        Unit_Delay77_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay77_out1 <= Switch164_out1_1;
      end
    end



  assign RO242_1_1 = {{3{Data_Type_S38_out1[8]}}, Data_Type_S38_out1};
  assign RO242_relop1 = Unit_Delay77_out1 > RO242_1_1;



  assign Switch264_out1 = (RO242_relop1 == 1'b0 ? Switch265_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay1021_process
      if (Rst_n == 1'b0) begin
        Unit_Delay102_out1 <= 1'b0;
      end
      else begin
        Unit_Delay102_out1 <= Switch264_out1;
      end
    end



  assign Switch255_out1 = (Unit_Delay102_out1 == 1'b0 ? 12'sb111111111111 :
              12'sb000000000001);



  assign Switch256_out1 = (Pulse_4096Hz == 1'b0 ? 12'sb000000000000 :
              Switch255_out1);



  assign Add13_out1_3 = Switch256_out1 + Unit_Delay122_out1;



  assign RO191_relop1 = Add13_out1_3 >= 12'sb000000001000;



  assign Switch259_out1 = (RO191_relop1 == 1'b0 ? Switch260_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay123_process
      if (Rst_n == 1'b0) begin
        Unit_Delay123_out1 <= 1'b0;
      end
      else begin
        Unit_Delay123_out1 <= Switch259_out1;
      end
    end



  assign OR9_out1_2 = Unit_Delay123_out1 & Switch234_out1;



  //assign Switch128_out1 = (OR9_out1_2 == 1'b0 ? Unit_Delay20_out1_1 :
              //12'sb000000000000);
  assign Switch128_out1 = Unit_Delay20_out1_1;  

  assign RO18_relop1 = Unit_Delay114_out1 > Switch128_out1;



  assign Switch62_out1 = (RO18_relop1 == 1'b0 ? Unit_Delay114_out1 :
              Switch128_out1);



  assign RO17_relop1 = Switch62_out1 < Unary_Minus3_out1_1;



  assign Switch63_out1_2 = (RO17_relop1 == 1'b0 ? Switch62_out1 :
              Unary_Minus3_out1_1);



  assign Switch24_out1_3 = (CT16_out1_2 == 1'b0 ? Unit_Delay10_out1_3 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay101_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1_3 <= Switch24_out1_3;
      end
    end



  assign RO13_relop1_1 = Unit_Delay10_out1_3 > ILimit_b12;



  assign Switch38_out1 = (RO13_relop1_1 == 1'b0 ? Unit_Delay10_out1_3 :
              ILimit_b12);



  assign RO12_relop1 = Switch38_out1 < Unary_Minus1_out1_1;



  assign Switch39_out1_2 = (RO12_relop1 == 1'b0 ? Switch38_out1 :
              Unary_Minus1_out1_1);



  assign RO35_relop1 = Switch39_out1_2 > Unit_Delay114_out1;



  assign Switch241_out1 = (RO35_relop1 == 1'b0 ? Unit_Delay114_out1 :
              Switch39_out1_2);



  assign OR5_out1_3 =  ~ Switch234_out1;



  assign Switch240_out1 = (OR5_out1_3 == 1'b0 ? Switch241_out1 :
              Switch39_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay1141_process
      if (Rst_n == 1'b0) begin
        Unit_Delay114_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay114_out1 <= Switch240_out1;
      end
    end


  //assign Switch66_out1 = (Or9_out1 == 1'b0 ? Unit_Delay114_out1 :
  //            Switch63_out1_2);
assign Switch66_out1_out = (Or9_out1 == 1'b0 ? Unit_Delay114_out1 :
              Switch63_out1_2);  
assign Switch66_out1 = Idp_ref_in_b12_LvrtLock;//

//assign Switch66_out1 = (LVRT_En == 1'b1) ? Idp_ref_in_b12_LvrtLock : Switch66_out1_temp;

  assign Unary_Minus41_in0 =  - ({Unit_Delay74_out1_1[11], Unit_Delay74_out1_1});
  assign Unary_Minus4_out1_2 = Unary_Minus41_in0[11:0];



  assign RO30_relop1 = Add4_out1_2 > 25'sb0001111111111111111111111;



  assign Switch148_out1 = (RO30_relop1 == 1'b0 ? Add4_out1_2 :
              25'sb0001111111111111111111111);



  assign RO29_relop1 = Switch148_out1 < 25'sb1110000000000000000000001;



  assign Switch149_out1 = (RO29_relop1 == 1'b0 ? Switch148_out1 :
              25'sb1110000000000000000000001);



  assign Data_Type_Conversion25_out1_1 = Switch149_out1[23:0];



  assign Switch150_out1_1 = (CT89_out1_2 == 1'b0 ? Unit_Delay69_out1_2 :
              Data_Type_Conversion25_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay691_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay69_out1_2 <= Switch150_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay731_process
      if (Rst_n == 1'b0) begin
        Unit_Delay73_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay73_out1 <= Switch158_out1;
      end
    end



  assign Switch161_out1 = (Cmp13_out1_1 == 1'b0 ? Unit_Delay73_out1 :
              12'b000000000000);



  assign Bitwise_Operator6_out1 = Switch159_out1_1 | Switch161_out1;



  assign Product7_out1 = Bitwise_Operator6_out1 * Bitwise_Operator6_out1;



  assign RO31_1_1 = {1'b0, Product7_out1};
  assign RO31_1_2 = {Unit_Delay69_out1_2[23], Unit_Delay69_out1_2};
  assign RO31_relop1 = RO31_1_1 < RO31_1_2;



  assign Switch158_out1 = (RO31_relop1 == 1'b0 ? Switch161_out1 :
              Bitwise_Operator6_out1);



  assign Data_Type_Conversion26_out1 = Switch158_out1;



  assign Switch160_out1 = (Cmp14_out1_1 == 1'b0 ? Unit_Delay74_out1_1 :
              Data_Type_Conversion26_out1);



  always @(posedge g_clk)
    begin : Unit_Delay741_process
      if (Rst_n == 1'b0) begin
        Unit_Delay74_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay74_out1_1 <= Switch160_out1;
      end
    end



  assign Switch3_out1_1 = (CT4_out1_3 == 1'b0 ? Unit_Delay2_out1_2 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay210_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay2_out1_2 <= Switch3_out1_1;
      end
    end



  assign Unary_Minus111_in0 =  - ({Unit_Delay2_out1_2[23], Unit_Delay2_out1_2});
  assign Unary_Minus11_out1_1 = Unary_Minus111_in0[23:0];



  assign Switch53_out1 = (CT27_out1_2 == 1'b0 ? Unit_Delay16_out1_3 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay161_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1_3 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay16_out1_3 <= Switch53_out1;
      end
    end



  assign Unary_Minus91_in0 =  - ({Unit_Delay16_out1_3[23], Unit_Delay16_out1_3});
  assign Unary_Minus9_out1_1 = Unary_Minus91_in0[23:0];



  assign Switch55_out1 = (CT34_out1_2 == 1'b0 ? Unit_Delay17_out1_2 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay171_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay17_out1_2 <= Switch55_out1;
      end
    end



  assign Unary_Minus101_in0 =  - ({Unit_Delay17_out1_2[23], Unit_Delay17_out1_2});
  assign Unary_Minus10_out1_1 = Unary_Minus101_in0[23:0];



  assign signal2_284 = (CT25_out1_1 == 1'b0 ? Unary_Minus10_out1_1 :
              Unary_Minus10_out1_1);



  assign s_374 = signal2_284;

  assign signal2_285 = (CT90_out1_2 == 1'b0 ? s_374 :
              Unary_Minus9_out1_1);



  assign s_375 = signal2_285;

  assign signal2_286 = (CT79_out1_3 == 1'b0 ? s_375 :
              Data_Type_Conversion22_out1);



  assign s_376 = signal2_286;

  assign signal2_287 = (CT8_out1_1 == 1'b0 ? s_376 :
              Unary_Minus11_out1_1);



  assign s_377 = signal2_287;

  assign Switch84_out1_5 = (CT45_out1 == 1'b0 ? Unit_Delay26_out1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay261_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1 <= Switch84_out1_5;
      end
    end



  assign Unary_Minus61_in0 =  - ({Unit_Delay26_out1[11], Unit_Delay26_out1});
  assign Unary_Minus6_out1_1 = Unary_Minus61_in0[11:0];



  assign Switch47_out1_1 = (CT48_out1_2 == 1'b0 ? Unit_Delay28_out1_3 :
              Data_Type_Conversion24_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay281_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay28_out1_3 <= Switch47_out1_1;
      end
    end



  assign Switch35_out1_2 = (CT46_out1_2 == 1'b0 ? Unit_Delay27_out1_3 :
              Data_Type_Conversion24_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay271_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay27_out1_3 <= Switch35_out1_2;
      end
    end



  assign signal2_288 = (CT113_out1_2 == 1'b0 ? Unit_Delay38_out1_2 :
              Unit_Delay38_out1_2);



  assign s_378 = signal2_288;

  assign signal2_289 = (CT57_out1_4 == 1'b0 ? s_378 :
              Unit_Delay27_out1_3);



  assign s_379 = signal2_289;

  assign signal2_290 = (CT55_out1_4 == 1'b0 ? s_379 :
              Unit_Delay28_out1_3);



  assign s_380 = signal2_290;

  assign signal2_291 = (CT42_out1_1 == 1'b0 ? s_380 :
              Unary_Minus6_out1_1);



  assign s_381 = signal2_291;

  assign signal2_292 = (CT103_out1_3 == 1'b0 ? s_381 :
              Unary_Minus13_out1);



  assign s_382 = signal2_292;

  assign signal2_293 = (CT101_out1_3 == 1'b0 ? s_382 :
              Unary_Minus8_out1);



  assign signal2_294 = signal2_293;

  assign Data_Type_Conversion15_out1 = {{12{signal2_294[11]}}, signal2_294};



  assign signal2_295 = (Logical_Operator7_out1 == 1'b0 ? Data_Type_Conversion15_out1 :
              s_377);



  assign signal2_296 = signal2_295;

  assign Switch4_out1_2 = (CT6_out1_2 == 1'b0 ? Unit_Delay3_out1_2 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay310_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay3_out1_2 <= Switch4_out1_2;
      end
    end



  assign Bit_Slice7_out1_1 = Product6_out1[39:11];



  assign Data_Type_S7_out1_2 = Bit_Slice7_out1_1;



  assign RO34_relop1 = Data_Type_S7_out1_2 > 29'sb00000000000000111111111111111;



  assign Switch133_out1_2 = (RO34_relop1 == 1'b0 ? Data_Type_S7_out1_2 :
              29'sb00000000000000111111111111111);



  assign RO33_relop1 = Switch133_out1_2 < 29'sb11111111111111000000000000000;



  assign Switch134_out1_1 = (RO33_relop1 == 1'b0 ? Switch133_out1_2 :
              29'sb11111111111111000000000000000);



  assign Data_Type_Conversion7_out1_2 = Switch134_out1_1[15:0];



  assign Switch120_out1 = (CT76_out1_3 == 1'b0 ? Unit_Delay40_out1 :
              Data_Type_Conversion7_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay401_process
      if (Rst_n == 1'b0) begin
        Unit_Delay40_out1 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay40_out1 <= Switch120_out1;
      end
    end



  assign Data_Type_Conversion21_out1 = {{8{Unit_Delay40_out1[15]}}, Unit_Delay40_out1};



  assign Switch51_out1_1 = (CT26_out1_3 == 1'b0 ? Unit_Delay12_out1_2 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay121_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay12_out1_2 <= Switch51_out1_1;
      end
    end



  assign signal1_103 = (CT25_out1_1 == 1'b0 ? Unit_Delay12_out1_2 :
              Unit_Delay12_out1_2);



  assign s_383 = signal1_103;

  assign signal1_104 = (CT90_out1_2 == 1'b0 ? s_383 :
              Unit_Delay12_out1_2);



  assign s_384 = signal1_104;

  assign signal1_105 = (CT79_out1_3 == 1'b0 ? s_384 :
              Data_Type_Conversion21_out1);



  assign s_385 = signal1_105;

  assign signal1_106 = (CT8_out1_1 == 1'b0 ? s_385 :
              Unit_Delay3_out1_2);



  assign s_386 = signal1_106;

  assign Switch142_out1_2 = (CT84_out1_1 == 1'b0 ? Unit_Delay44_out1_4 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay441_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay44_out1_4 <= Switch142_out1_2;
      end
    end



  assign RO39_relop1 = Unit_Delay44_out1_4 > IdcChgLimit_b12;



  assign Switch165_out1_1 = (RO39_relop1 == 1'b0 ? IdcChgLimit_b12 :
              Unit_Delay44_out1_4);



  assign Switch144_out1_2 = (CT86_out1_1 == 1'b0 ? Unit_Delay48_out1_5 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay481_process
      if (Rst_n == 1'b0) begin
        Unit_Delay48_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay48_out1_5 <= Switch144_out1_2;
      end
    end



  assign RO40_relop1 = Unit_Delay48_out1_5 < IdcDischgLimit_b12;



  assign Switch166_out1_1 = (RO40_relop1 == 1'b0 ? IdcDischgLimit_b12 :
              Unit_Delay48_out1_5);



  assign Switch28_out1_1 = (CT30_out1_2 == 1'b0 ? Unit_Delay14_out1_3 :
              Data_Type_Conversion24_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay141_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1_3 <= Switch28_out1_1;
      end
    end



  assign Bit_Slice6_out1_6 = Product6_out1[39:11];



  assign Data_Type_S10_out1 = Bit_Slice6_out1_6;



  assign RO28_relop1 = Data_Type_S10_out1 > 29'sb00000000000000000011111111111;



  assign Switch104_out1_4 = (RO28_relop1 == 1'b0 ? Data_Type_S10_out1 :
              29'sb00000000000000000011111111111);



  assign RO27_relop1 = Switch104_out1_4 < 29'sb11111111111111111100000000001;



  assign Switch131_out1 = (RO27_relop1 == 1'b0 ? Switch104_out1_4 :
              29'sb11111111111111111100000000001);



  assign Data_Type_Conversion24_out1_1 = Switch131_out1[11:0];



  assign Switch33_out1_1 = (CT32_out1_3 == 1'b0 ? Unit_Delay15_out1_3 :
              Data_Type_Conversion24_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay151_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay15_out1_3 <= Switch33_out1_1;
      end
    end



  assign Unary_Minus121_in0 =  - ({Unit_Delay15_out1_3[11], Unit_Delay15_out1_3});
  assign Unary_Minus12_out1_1 = Unary_Minus121_in0[11:0];



  assign signal1_107 = (CT113_out1_2 == 1'b0 ? Switch251_out1 :
              Switch251_out1);



  assign s_387 = signal1_107;

  assign signal1_108 = (CT57_out1_4 == 1'b0 ? s_387 :
              Unary_Minus12_out1_1);



  assign s_388 = signal1_108;

  assign signal1_109 = (CT55_out1_4 == 1'b0 ? s_388 :
              Unit_Delay14_out1_3);



  assign s_389 = signal1_109;

  assign signal1_110 = (CT42_out1_1 == 1'b0 ? s_389 :
              Switch69_out1);



  assign s_390 = signal1_110;

  assign signal1_111 = (CT103_out1_3 == 1'b0 ? s_390 :
              Switch166_out1_1);



  assign s_391 = signal1_111;

  assign signal1_112 = (CT101_out1_3 == 1'b0 ? s_391 :
              Switch165_out1_1);



  assign signal1_113 = signal1_112;

  assign Data_Type_Conversion14_out1 = {{12{signal1_113[11]}}, signal1_113};



  assign signal1_114 = (Logical_Operator7_out1 == 1'b0 ? Data_Type_Conversion14_out1 :
              s_386);



  assign signal1_115 = signal1_114;

  assign Add42_1 = {signal1_115[23], signal1_115};
  assign Add42_2 = {signal2_296[23], signal2_296};
  assign Add4_out1_2 = Add42_1 + Add42_2;



  assign RO81_relop1 = Add4_out1_2 > 25'sb0000000000000011111111111;



  assign Switch76_out1_1 = (RO81_relop1 == 1'b0 ? Add4_out1_2 :
              25'sb0000000000000011111111111);



  assign RO71_relop1 = Switch76_out1_1 < 25'sb1111111111111100000000001;



  assign Switch79_out1_6 = (RO71_relop1 == 1'b0 ? Switch76_out1_1 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion3_out1_2 = Switch79_out1_6[11:0];



  assign Switch183_out1_1 = (CT114_out1_3 == 1'b0 ? Unit_Delay60_out1_1 :
              Data_Type_Conversion3_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay60_process
      if (Rst_n == 1'b0) begin
        Unit_Delay60_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay60_out1_1 <= Switch183_out1_1;
      end
    end



  assign RO48_relop1 = Unit_Delay60_out1_1 > ILimit_b12;



  assign Switch184_out1_1 = (RO48_relop1 == 1'b0 ? Unit_Delay60_out1_1 :
              ILimit_b12);



  assign RO47_relop1 = Switch184_out1_1 < Unary_Minus14_out1;



  assign Switch185_out1_1 = (RO47_relop1 == 1'b0 ? Switch184_out1_1 :
              Unary_Minus14_out1);



  assign Switch243_out1 = (CT136_out1_1 == 1'b0 ? Unit_Delay116_out1 :
              Switch242_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1161_process
      if (Rst_n == 1'b0) begin
        Unit_Delay116_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay116_out1 <= Switch243_out1;
      end
    end



  assign signal2_297 = (CT143_out1 == 1'b0 ? Unit_Delay117_out1 :
              Unit_Delay117_out1);



  assign s_392 = signal2_297;

  assign signal2_298 = (CT141_out1_1 == 1'b0 ? s_392 :
              Unit_Delay116_out1);



  assign signal2_299 = signal2_298;

  assign signal2_300 = signal2_299;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_IFilter_Ram1   (.g_clk(g_clk),
                                                      .wr_din(Switch245_out1),
                                                      .wr_addr(Add17_out1),
                                                      .wr_en(Or10_out1),
                                                      .rd_addr(Add23_out1),
                                                      .rd_dout(IFilter_Ram1_out1)
                                                      );

  assign Switch250_out1 = (Or10_out1 == 1'b0 ? 12'sb000000000000 :
              IFilter_Ram1_out1);



  assign Bit_Slice3_out1_4 = Product6_out1_1[47:22];



  assign Data_Type_S17_out1 = Bit_Slice3_out1_4;



  assign RO61_relop1 = Data_Type_S17_out1 > 26'sb00000000000000011111111111;



  assign Switch67_out1_1 = (RO61_relop1 == 1'b0 ? Data_Type_S17_out1 :
              Constant25_out1_dtc);



  assign RO51_relop1 = Switch67_out1_1 < 26'sb11111111111111100000000001;



  assign Switch68_out1 = (RO51_relop1 == 1'b0 ? Switch67_out1_1 :
              Constant26_out1_dtc);



  assign Data_Type_Conversion2_out1_2 = Switch68_out1[11:0];



  assign Switch16_out1_1 = (CT15_out1_2 == 1'b0 ? Unit_Delay8_out1_1 :
              Data_Type_Conversion2_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay82_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_1 <= Switch16_out1_1;
      end
    end



  assign Bit_Slice17_out1 = Product6_out1_1[47:8];



  assign Data_Type_S45_out1 = Bit_Slice17_out1;



  assign RO261_relop1 = Data_Type_S45_out1 > 40'sh00000007FF;



  assign Switch306_out1 = (RO261_relop1 == 1'b0 ? Data_Type_S45_out1 :
              Constant110_out1_dtc);



  assign RO232_relop1 = Switch306_out1 < 40'shFFFFFFF801;



  assign Switch307_out1 = (RO232_relop1 == 1'b0 ? Switch306_out1 :
              Constant111_out1_dtc);



  assign Data_Type_Conversion4_out1_2 = Switch307_out1[11:0];



  assign Switch305_out1 = (CT177_out1 == 1'b0 ? Unit_Delay144_out1 :
              Data_Type_Conversion4_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay144_process
      if (Rst_n == 1'b0) begin
        Unit_Delay144_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay144_out1 <= Switch305_out1;
      end
    end



  assign signal1_116 = (CT143_out1 == 1'b0 ? Unit_Delay144_out1 :
              Unit_Delay144_out1);



  assign s_393 = signal1_116;

  assign signal1_117 = (CT141_out1_1 == 1'b0 ? s_393 :
              Unit_Delay8_out1_1);



  assign signal1_118 = signal1_117;

  assign signal1_119 = signal1_118;

  assign Switch245_out1 = (switch_compare_1_10 == 1'b0 ? 12'sb000000000000 :
              signal1_119);



  assign Switch249_out1 = (Or10_out1 == 1'b0 ? 12'sb000000000000 :
              Switch245_out1);



  assign Add22_stage2_1 = {{8{Switch249_out1[11]}}, Switch249_out1};
  assign Add22_stage2_2 = {{8{Switch250_out1[11]}}, Switch250_out1};
  assign Add22_op_stage2 = Add22_stage2_1 - Add22_stage2_2;



  assign Add22_stage3_1 = {signal2_300[18], signal2_300};
  assign Add22_stage3_add_temp = Add22_op_stage2 + Add22_stage3_1;
  assign Add22_out1 = Add22_stage3_add_temp[18:0];



  assign Switch242_out1 = (switch_compare_1_9 == 1'b0 ? 19'sb0000000000000000000 :
              Add22_out1);



  assign Switch247_out1 = (CT142_out1 == 1'b0 ? Unit_Delay117_out1 :
              Switch242_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1171_process
      if (Rst_n == 1'b0) begin
        Unit_Delay117_out1 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay117_out1 <= Switch247_out1;
      end
    end



  assign Bit_Slice12_out1_1 = Unit_Delay117_out1[18:7];



  assign Data_Type_S36_out1 = Bit_Slice12_out1_1;



  assign Unary_Minus19_in0 =  - ({Data_Type_S36_out1[11], Data_Type_S36_out1});
  assign Unary_Minus_out1 = Unary_Minus19_in0[11:0];



  assign Switch251_out1 = (OR1_out1_4 == 1'b0 ? 12'sb000000000000 :
              Unary_Minus_out1);



  assign Bit_Slice3_out1_5 = Product6_out1[39:15];



  assign Data_Type_S17_out1_1 = Bit_Slice3_out1_5;



  assign RO6_relop1_1 = Data_Type_S17_out1_1 > 25'sb0000000000000011111111111;



  assign Switch67_out1_2 = (RO6_relop1_1 == 1'b0 ? Data_Type_S17_out1_1 :
              25'sb0000000000000011111111111);



  assign RO5_relop1_1 = Switch67_out1_2 < 25'sb1111111111111100000000001;



  assign Switch68_out1_1 = (RO5_relop1_1 == 1'b0 ? Switch67_out1_2 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion2_out1_1 = Switch68_out1_1[11:0];



  assign Switch41_out1 = (CT19_out1_2 == 1'b0 ? Unit_Delay11_out1_1 :
              Data_Type_Conversion2_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay115_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1_1 <= Switch41_out1;
      end
    end



  assign RO15_relop1 = Unit_Delay11_out1_1 > ILimit_b12;



  assign Switch42_out1 = (RO15_relop1 == 1'b0 ? Unit_Delay11_out1_1 :
              ILimit_b12);



  assign RO14_relop1 = Switch42_out1 < Unary_Minus2_out1_1;



  assign Switch43_out1_1 = (RO14_relop1 == 1'b0 ? Switch42_out1 :
              Unary_Minus2_out1_1);



  assign RO36_relop1 = Switch43_out1_1 > Unit_Delay38_out1_2;



  assign Switch127_out1_2 = (RO36_relop1 == 1'b0 ? Unit_Delay38_out1_2 :
              Switch43_out1_1);



  assign OR1_out1_7 =  ~ Switch234_out1;



  assign Switch122_out1_3 = (OR1_out1_7 == 1'b0 ? Switch127_out1_2 :
              Switch43_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay381_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay38_out1_2 <= Switch122_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1121_process
      if (Rst_n == 1'b0) begin
        Unit_Delay112_out1 <= 1'b0;
      end
      else begin
        Unit_Delay112_out1 <= Switch234_out1;
      end
    end



  assign Switch232_out1 = (CT133_out1 == 1'b0 ? Unit_Delay111_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1111_process
      if (Rst_n == 1'b0) begin
        Unit_Delay111_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay111_out1 <= Switch232_out1;
      end
    end



  assign Ro12_relop1_1 = Unit_Delay74_out1 <= Unit_Delay111_out1;



  assign Switch235_out1 = (Ro12_relop1_1 == 1'b0 ? Unit_Delay112_out1 :
              1'b1);



  assign Switch230_out1 = (CT131_out1_1 == 1'b0 ? Unit_Delay110_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1101_process
      if (Rst_n == 1'b0) begin
        Unit_Delay110_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay110_out1 <= Switch230_out1;
      end
    end



  assign Ro11_relop1 = Unit_Delay74_out1 >= Unit_Delay110_out1;



  //assign Switch234_out1 = LVRT_En & (Ro11_relop1 == 1'b0 ? Switch235_out1 :
              //1'b0);
  assign Switch234_out1 = ((Ro11_relop1 == 1'b0 ? Switch235_out1 : 1'b0))&LVRT_En;


  assign And1_out1_1 = Or9_out1 & Switch234_out1;



  assign Switch48_out1_1 = (And1_out1_1 == 1'b0 ? Unit_Delay38_out1_2 :
              Switch251_out1);


	/*wire [11:0] Switch48_out1_1_lmt;
	Lmt_V1 Lmt_V1_inst
	(
           .Lmt_b12(ILimit_b12),
           .In_b12(Switch48_out1_1),
           .Out_b12(Switch48_out1_1_lmt)
          );*/
	assign Switch181_out1 = (BelgiumVrt == 1'b0 ? Switch48_out1_1 :
              Switch185_out1_1);
  //assign Switch181_out1 = (BelgiumVrt == 1'b0 ? Switch48_out1_1_lmt :
  //            Switch185_out1_1); 


  assign RO20_relop1 = Switch181_out1 > Unit_Delay74_out1_1;



  assign Switch64_out1_1 = (RO20_relop1 == 1'b0 ? Switch181_out1 :
              Unit_Delay74_out1_1);



  assign RO19_relop1 = Switch64_out1_1 < Unary_Minus4_out1_2;



  assign Switch65_out1_1 = (RO19_relop1 == 1'b0 ? Switch64_out1_1 :
              Unary_Minus4_out1_2);



  //assign Switch69_out1 = (Or9_out1 == 1'b0 ? Switch65_out1_1 :
              //Switch181_out1);
  assign Switch69_out1_out = (Or9_out1 == 1'b0 ? Switch65_out1_1 :
              Switch181_out1);
  assign Switch69_out1 = Iqp_ref_in_b12_LvrtLock;



  assign signal1_120 = (CT61_out1_3 == 1'b0 ? Switch69_out1 :
              Switch69_out1);



  assign s_394 = signal1_120;

  assign signal1_121 = (CT60_out1_4 == 1'b0 ? s_394 :
              Switch66_out1);



  assign signal1_122 = signal1_121;

  assign signal1_102 = signal1_122;

  assign RO211_relop1 = signal1_102 > signal3_73;



  assign Switch94_out1_1 = (RO211_relop1 == 1'b0 ? Switch95_out1_2 :
              12'sb000000000001);



  assign Switch96_out1_2 = (Switch83_out1_2 == 1'b0 ? 12'sb000000000000 :
              Switch94_out1_1);



  assign Add7_out1_5 = Switch96_out1_2 + signal3_73;



  always @(posedge g_clk)
    begin : Unit_Delay344_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay34_out1_5 <= Switch101_out1_3;
      end
    end



  assign Bit_Slice4_out1_1 = Unit_Delay116_out1_1[16:5];



  assign Data_Type_S39_out1 = Bit_Slice4_out1_1;



  assign Switch101_out1_3 = (Logical_Operator4_out1 == 1'b0 ? Data_Type_S39_out1 :
              Unit_Delay34_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay354_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay35_out1_5 <= Switch102_out1_4;
      end
    end



  assign Switch243_out1_1 = (CT136_out1 == 1'b0 ? Unit_Delay116_out1_1 :
              Switch29_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay116_process
      if (Rst_n == 1'b0) begin
        Unit_Delay116_out1_1 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay116_out1_1 <= Switch243_out1_1;
      end
    end



  assign signal2_301 = (CT59_out1_4 == 1'b0 ? Unit_Delay33_out1_6 :
              Unit_Delay33_out1_6);



  assign s_395 = signal2_301;

  assign signal2_302 = (CT141_out1 == 1'b0 ? s_395 :
              Unit_Delay116_out1_1);



  assign signal2_303 = signal2_302;

  assign signal2_304 = signal2_303;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Filter_Ram_1   (.g_clk(g_clk),
                                                      .wr_din(Switch32_out1_1),
                                                      .wr_addr(Add11_out1_3),
                                                      .wr_en(Constant10_out1),
                                                      .rd_addr(Add2_out1_2),
                                                      .rd_dout(Filter_Ram_out1_1)
                                                      );

  assign Switch45_out1_1 = (Switch208_out1_3 == 1'b0 ? 12'sb000000000000 :
              Filter_Ram_out1_1);



  assign Switch70_out1_2 = (CT69_out1 == 1'b0 ? Unit_Delay25_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay25_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1_3 <= Switch70_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay398_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_43 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_43 <= Switch107_out1_57;
      end
    end



  assign Switch107_out1_57 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_43 :
              Unit_Delay25_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay3949_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_44 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_44 <= Switch107_out1_24;
      end
    end



  assign Switch107_out1_24 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_44 :
              Switch107_out1_57);



  assign Switch71_out1_2 = (CT70_out1_4 == 1'b0 ? Unit_Delay26_out1_2 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay26_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1_2 <= Switch71_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay399_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_45 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_45 <= Switch107_out1_56;
      end
    end



  assign Switch107_out1_56 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_45 :
              Unit_Delay26_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay3950_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_46 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_46 <= Switch107_out1_23;
      end
    end



  assign Switch107_out1_23 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_46 :
              Switch107_out1_56);



  assign signal1_123 = (CT59_out1_4 == 1'b0 ? Switch107_out1_23 :
              Switch107_out1_23);



  assign s_396 = signal1_123;

  assign signal1_124 = (CT141_out1 == 1'b0 ? s_396 :
              Switch107_out1_24);



  assign signal1_125 = signal1_124;

  assign signal1_126 = signal1_125;

  assign Switch32_out1_1 = (switch_compare_1_8 == 1'b0 ? 12'sb000000000000 :
              signal1_126);



  assign Switch44_out1_1 = (Switch208_out1_3 == 1'b0 ? 12'sb000000000000 :
              Switch32_out1_1);



  assign Add15_stage2_1 = {{6{Switch44_out1_1[11]}}, Switch44_out1_1};
  assign Add15_stage2_2 = {{6{Switch45_out1_1[11]}}, Switch45_out1_1};
  assign Add15_op_stage2 = Add15_stage2_1 - Add15_stage2_2;



  assign Add15_stage3_1 = {signal2_304[16], signal2_304};
  assign Add15_stage3_add_temp = Add15_op_stage2 + Add15_stage3_1;
  assign Add15_out1_2 = Add15_stage3_add_temp[16:0];



  assign Switch29_out1_4 = (switch_compare_1_7 == 1'b0 ? 17'sb00000000000000000 :
              Add15_out1_2);



  assign Switch99_out1_1 = (CT58_out1_3 == 1'b0 ? Unit_Delay33_out1_6 :
              Switch29_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay335_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_6 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay33_out1_6 <= Switch99_out1_1;
      end
    end



  assign Bit_Slice1_out1_6 = Unit_Delay33_out1_6[16:5];



  assign Data_Type_S2_out1_2 = Bit_Slice1_out1_6;



  assign Switch102_out1_4 = (Logical_Operator4_out1 == 1'b0 ? Data_Type_S2_out1_2 :
              Unit_Delay35_out1_5);



  assign signal2_305 = (CT61_out1_3 == 1'b0 ? Switch102_out1_4 :
              Switch102_out1_4);



  assign s_397 = signal2_305;

  assign signal2_306 = (CT60_out1_4 == 1'b0 ? s_397 :
              Switch101_out1_3);



  assign signal2_307 = signal2_306;

  assign signal2_308 = signal2_307;

  assign Switch93_out1_2 = (Logical_Operator4_out1 == 1'b0 ? signal2_308 :
              Add7_out1_5);



  assign Switch108_out1_2 = (CT63_out1_1 == 1'b0 ? Unit_Delay46_out1_4 :
              Switch93_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay461_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_4 <= Switch108_out1_2;
      end
    end



  assign Switch111_out1_1 = (Or4_out1_2 == 1'b0 ? Unit_Delay46_out1_4 :
              Switch69_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3941_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_47 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_47 <= Switch107_out1_45;
      end
    end



  assign Switch107_out1_45 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_47 :
              Switch111_out1_1);



  assign Switch114_out1_3 = (CT77_out1_3 == 1'b0 ? Unit_Delay31_out1_1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay312_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay31_out1_1 <= Switch114_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3953_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_48 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_48 <= Switch107_out1_59;
      end
    end



  assign Switch107_out1_59 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_48 :
              Unit_Delay31_out1_1);



  assign Switch19_out1_2 = (Excite_On == 1'b0 ? Switch107_out1_59 :
              Unit_Delay45_out1_3);



  assign Switch116_out1_1 = (CT115_out1_1 == 1'b0 ? Unit_Delay40_out1_1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay402_process
      if (Rst_n == 1'b0) begin
        Unit_Delay40_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay40_out1_1 <= Switch116_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3954_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_49 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_49 <= Switch107_out1_60;
      end
    end



  assign Switch107_out1_60 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_49 :
              Unit_Delay40_out1_1);



  assign Switch2_out1 = (Excite_On == 1'b0 ? Switch107_out1_60 :
              Unit_Delay46_out1_5);



  assign Switch118_out1_1 = (CT119_out1_1 == 1'b0 ? Unit_Delay41_out1_1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay413_process
      if (Rst_n == 1'b0) begin
        Unit_Delay41_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay41_out1_1 <= Switch118_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3936_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_50 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_50 <= Switch107_out1_61;
      end
    end



  assign Switch107_out1_61 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_50 :
              Unit_Delay41_out1_1);



  assign Switch3_out1 = (Excite_On == 1'b0 ? Switch107_out1_61 :
              Unit_Delay29_out1_2);



  assign RO222_relop1 = signal1_127 < signal3_77;



  assign Switch95_out1_3 = (RO222_relop1 == 1'b0 ? 12'sb000000000000 :
              12'sb111111111111);



  assign Switch101_out1_4 = (CT9_out1_2 == 1'b0 ? Unit_Delay45_out1_3 :
              Switch93_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay454_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1_3 <= Switch101_out1_4;
      end
    end



  assign Switch102_out1_5 = (CT52_out1_2 == 1'b0 ? Unit_Delay46_out1_5 :
              Switch93_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay465_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_5 <= Switch102_out1_5;
      end
    end



  assign Switch112_out1_2 = (CT66_out1_3 == 1'b0 ? Unit_Delay29_out1_2 :
              Switch93_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay295_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1_2 <= Switch112_out1_2;
      end
    end



  assign signal3_78 = (CT10_out1 == 1'b0 ? Unit_Delay8_out1_2 :
              Unit_Delay8_out1_2);



  assign s_398 = signal3_78;

  assign signal3_79 = (CT65_out1_4 == 1'b0 ? s_398 :
              Unit_Delay29_out1_2);



  assign s_399 = signal3_79;

  assign signal3_80 = (CT50_out1_3 == 1'b0 ? s_399 :
              Unit_Delay46_out1_5);



  assign s_400 = signal3_80;

  assign signal3_81 = (CT49_out1_3 == 1'b0 ? s_400 :
              Unit_Delay45_out1_3);



  assign signal3_82 = signal3_81;

  assign signal3_77 = signal3_82;

  assign signal1_128 = (CT10_out1 == 1'b0 ? Data_Type_S15_out1_5 :
              Data_Type_S15_out1_5);



  assign s_401 = signal1_128;

  assign signal1_129 = (CT65_out1_4 == 1'b0 ? s_401 :
              Data_Type_S13_out1_5);



  assign s_402 = signal1_129;

  assign signal1_130 = (CT50_out1_3 == 1'b0 ? s_402 :
              Data_Type_S12_out1_6);



  assign s_403 = signal1_130;

  assign signal1_131 = (CT49_out1_3 == 1'b0 ? s_403 :
              Data_Type_S11_out1_3);



  assign signal1_132 = signal1_131;

  assign signal1_127 = signal1_132;

  assign RO219_relop1 = signal1_127 > signal3_77;



  assign Switch94_out1_2 = (RO219_relop1 == 1'b0 ? Switch95_out1_3 :
              12'sb000000000001);



  assign Switch96_out1_3 = (Switch9_out1 == 1'b0 ? 12'sb000000000000 :
              Switch94_out1_2);



  assign Add2_out1_5 = Switch96_out1_3 + signal3_77;



  assign Switch93_out1_3 = (OR1_out1_2 == 1'b0 ? signal2_18 :
              Add2_out1_5);



  assign Switch10_out1_1 = (CT11_out1 == 1'b0 ? Unit_Delay8_out1_2 :
              Switch93_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay815_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_2 <= Switch10_out1_1;
      end
    end



  assign Switch120_out1_1 = (CT118_out1_1 == 1'b0 ? Unit_Delay49_out1_4 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay493_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay49_out1_4 <= Switch120_out1_1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3937_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_51 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_51 <= Switch107_out1_62;
      end
    end



  assign Switch107_out1_62 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_51 :
              Unit_Delay49_out1_4);



  assign Switch4_out1 = (Excite_On == 1'b0 ? Switch107_out1_62 :
              Unit_Delay8_out1_2);



  assign Switch8_out1 = (CT24_out1_3 == 1'b0 ? Unit_Delay13_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1310_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1_3 <= Switch8_out1;
      end
    end



  assign Switch12_out1_3 = (CT22_out1_4 == 1'b0 ? Unit_Delay12_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1210_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1_3 <= Switch12_out1_3;
      end
    end



  assign Switch54_out1_1 = (CT33_out1_2 == 1'b0 ? Unit_Delay22_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay223_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1_2 <= Switch54_out1_1;
      end
    end



  assign Switch60_out1_1 = (CT37_out1_2 == 1'b0 ? Unit_Delay24_out1_2 :
              Data_Type_Conversion1_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay243_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1_2 <= Switch60_out1_1;
      end
    end



  assign Switch10_out1_2 = (CT6_out1_1 == 1'b0 ? Unit_Delay3_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay313_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1_3 <= Switch10_out1_2;
      end
    end



  assign Switch3_out1_2 = (CT4_out1_2 == 1'b0 ? Unit_Delay2_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay214_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1_3 <= Switch3_out1_2;
      end
    end



  assign signal2_309 = (CT32_out1_2 == 1'b0 ? Unit_Delay2_out1_3 :
              Unit_Delay2_out1_3);



  assign s_404 = signal2_309;

  assign signal2_310 = (CT38_out1_1 == 1'b0 ? s_404 :
              Unit_Delay3_out1_3);



  assign signal2_311 = signal2_310;

  assign Switch7_out1_2 = (CT15_out1_1 == 1'b0 ? Unit_Delay8_out1_3 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay810_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_3 <= Switch7_out1_2;
      end
    end



  assign Switch22_out1_1 = (CT30_out1_1 == 1'b0 ? Unit_Delay20_out1_2 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay203_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1_2 <= Switch22_out1_1;
      end
    end



  assign signal1_133 = (CT32_out1_2 == 1'b0 ? Unit_Delay20_out1_2 :
              Unit_Delay20_out1_2);



  assign s_405 = signal1_133;

  assign signal1_134 = (CT38_out1_1 == 1'b0 ? s_405 :
              Unit_Delay8_out1_3);



  assign signal1_135 = signal1_134;

  assign Add34_1 = {signal1_135[11], signal1_135};
  assign Add34_2 = {signal2_311[11], signal2_311};
  assign Add3_out1_4 = Add34_1 + Add34_2;



  assign RO213_relop1 = Add3_out1_4 > 13'sb0011111111111;



  assign Switch37_out1_1 = (RO213_relop1 == 1'b0 ? Add3_out1_4 :
              Constant3_out1_dtc_1);



  assign RO112_relop1 = Switch37_out1_1 < 13'sb1100000000001;



  assign Switch38_out1_1 = (RO112_relop1 == 1'b0 ? Switch37_out1_1 :
              Constant1_out1_dtc_1);



  assign Data_Type_Conversion1_out1_3 = Switch38_out1_1[11:0];



  assign Switch52_out1_1 = (CT31_out1_2 == 1'b0 ? Unit_Delay21_out1_2 :
              Data_Type_Conversion1_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay215_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1_2 <= Switch52_out1_1;
      end
    end



  assign Switch56_out1_2 = (CT35_out1_2 == 1'b0 ? Unit_Delay23_out1_2 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay233_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1_2 <= Switch56_out1_2;
      end
    end



  assign Bit_Slice6_out1_7 = Unit_Delay30_out1_6[18:7];



  assign Data_Type_S11_out1_3 = Bit_Slice6_out1_7;



  always @(posedge g_clk)
    begin : Unit_Delay3956_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_52 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_52 <= Switch107_out1_48;
      end
    end



  assign Switch107_out1_48 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_52 :
              Data_Type_S11_out1_3);



  assign Bit_Slice1_out1_7 = Unit_Delay33_out1_7[18:7];



  assign Data_Type_S12_out1_6 = Bit_Slice1_out1_7;



  always @(posedge g_clk)
    begin : Unit_Delay3957_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_53 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_53 <= Switch107_out1_49;
      end
    end



  assign Switch107_out1_49 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_53 :
              Data_Type_S12_out1_6);



  assign Bit_Slice2_out1_5 = Unit_Delay34_out1_6[18:7];



  assign Data_Type_S13_out1_5 = Bit_Slice2_out1_5;



  always @(posedge g_clk)
    begin : Unit_Delay3961_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_54 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_54 <= Switch107_out1_50;
      end
    end



  assign Switch107_out1_50 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_54 :
              Data_Type_S13_out1_5);



  assign Switch80_out1_4 = (CT51_out1_4 == 1'b0 ? Unit_Delay30_out1_6 :
              Switch79_out1_7);



  always @(posedge g_clk)
    begin : Unit_Delay302_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_6 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay30_out1_6 <= Switch80_out1_4;
      end
    end



  assign Switch87_out1_6 = (CT56_out1_1 == 1'b0 ? Unit_Delay33_out1_7 :
              Switch79_out1_7);



  always @(posedge g_clk)
    begin : Unit_Delay332_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_7 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay33_out1_7 <= Switch87_out1_6;
      end
    end



  assign Switch89_out1_5 = (CT58_out1_2 == 1'b0 ? Unit_Delay34_out1_6 :
              Switch79_out1_7);



  always @(posedge g_clk)
    begin : Unit_Delay341_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_6 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay34_out1_6 <= Switch89_out1_5;
      end
    end



  assign signal2_312 = (CT61_out1_2 == 1'b0 ? Unit_Delay35_out1_6 :
              Unit_Delay35_out1_6);



  assign s_406 = signal2_312;

  assign signal2_313 = (CT59_out1_3 == 1'b0 ? s_406 :
              Unit_Delay34_out1_6);



  assign s_407 = signal2_313;

  assign signal2_314 = (CT57_out1_2 == 1'b0 ? s_407 :
              Unit_Delay33_out1_7);



  assign s_408 = signal2_314;

  assign signal2_315 = (CT55_out1_3 == 1'b0 ? s_408 :
              Unit_Delay30_out1_6);



  assign signal2_316 = signal2_315;

  assign signal2_317 = signal2_316;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(9),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_4   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_6),
                                                                 .wr_addr(Add11_out1_2),
                                                                 .wr_en(Switch208_out1_2),
                                                                 .rd_addr(Add12_out1_5),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_4)
                                                                 );

  assign Switch98_out1_5 = (Switch208_out1_2 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_4);



  assign Switch58_out1_2 = (CT57_out1_3 == 1'b0 ? Unit_Delay21_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay21_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1_3 <= Switch58_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay394_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_55 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_55 <= Switch107_out1_33;
      end
    end



  assign Switch107_out1_33 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_55 :
              Unit_Delay21_out1_3);



  assign Switch59_out1_3 = (CT58_out1_1 == 1'b0 ? Unit_Delay22_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay22_process
      if (Rst_n == 1'b0) begin
        Unit_Delay22_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay22_out1_3 <= Switch59_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay395_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_56 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_56 <= Switch107_out1_34;
      end
    end



  assign Switch107_out1_34 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_56 :
              Unit_Delay22_out1_3);



  assign Switch61_out1_2 = (CT60_out1_3 == 1'b0 ? Unit_Delay24_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay24_process
      if (Rst_n == 1'b0) begin
        Unit_Delay24_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay24_out1_3 <= Switch61_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay397_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_57 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_57 <= Switch107_out1_31;
      end
    end



  assign Switch107_out1_31 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_57 :
              Unit_Delay24_out1_3);



  assign signal1_136 = (CT61_out1_2 == 1'b0 ? Switch107_out1_31 :
              Switch107_out1_31);



  assign s_409 = signal1_136;

  assign signal1_137 = (CT59_out1_3 == 1'b0 ? s_409 :
              Switch107_out1_63);



  assign s_410 = signal1_137;

  assign signal1_138 = (CT57_out1_2 == 1'b0 ? s_410 :
              Switch107_out1_34);



  assign s_411 = signal1_138;

  assign signal1_139 = (CT55_out1_3 == 1'b0 ? s_411 :
              Switch107_out1_33);



  assign signal1_140 = signal1_139;

  assign signal1_141 = signal1_140;

  assign Switch84_out1_6 = (switch_compare_1_6 == 1'b0 ? 12'sb000000000000 :
              signal1_141);



  assign Switch97_out1_4 = (Switch208_out1_2 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_6);



  assign Add7_stage21_1 = {{8{Switch97_out1_4[11]}}, Switch97_out1_4};
  assign Add7_stage21_2 = {{8{Switch98_out1_5[11]}}, Switch98_out1_5};
  assign Add7_op_stage2_2 = Add7_stage21_1 - Add7_stage21_2;



  assign Add7_stage31_1 = {signal2_317[18], signal2_317};
  assign Add7_stage31_add_temp = Add7_op_stage2_2 + Add7_stage31_1;
  assign Add7_out1_6 = Add7_stage31_add_temp[18:0];



  assign Switch79_out1_7 = (switch_compare_1_5 == 1'b0 ? 19'sb0000000000000000000 :
              Add7_out1_6);



  assign Switch91_out1_5 = (CT60_out1_2 == 1'b0 ? Unit_Delay35_out1_6 :
              Switch79_out1_7);



  always @(posedge g_clk)
    begin : Unit_Delay351_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_6 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay35_out1_6 <= Switch91_out1_5;
      end
    end



  assign Bit_Slice3_out1_6 = Unit_Delay35_out1_6[18:7];



  assign Data_Type_S15_out1_5 = Bit_Slice3_out1_6;



  always @(posedge g_clk)
    begin : Unit_Delay3962_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_58 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_58 <= Switch107_out1_51;
      end
    end



  assign Switch107_out1_51 = (CT78_out1_1 == 1'b0 ? Unit_Delay39_out1_58 :
              Data_Type_S15_out1_5);



  assign signal1_142 = (CT106_out1_2 == 1'b0 ? Switch107_out1_8 :
              Switch107_out1_51);



  assign s_412 = signal1_142;

  assign signal1_143 = (CT104_out1_1 == 1'b0 ? s_412 :
              Switch107_out1_50);



  assign s_413 = signal1_143;

  assign signal1_144 = (CT85_out1_2 == 1'b0 ? s_413 :
              Switch107_out1_49);



  assign s_414 = signal1_144;

  assign signal1_145 = (CT102_out1_1 == 1'b0 ? s_414 :
              Switch107_out1_48);



  assign s_415 = signal1_145;

  assign signal1_146 = (CT97_out1_3 == 1'b0 ? s_415 :
              Unit_Delay23_out1_2);



  assign s_416 = signal1_146;

  assign signal1_147 = (CT95_out1 == 1'b0 ? s_416 :
              Unit_Delay21_out1_2);



  assign s_417 = signal1_147;

  assign signal1_148 = (CT100_out1_2 == 1'b0 ? s_417 :
              Unit_Delay24_out1_2);



  assign s_418 = signal1_148;

  assign signal1_149 = (CT101_out1_2 == 1'b0 ? s_418 :
              Unit_Delay22_out1_2);



  assign s_419 = signal1_149;

  assign signal1_150 = (CT36_out1_1 == 1'b0 ? s_419 :
              Unit_Delay12_out1_3);



  assign s_420 = signal1_150;

  assign signal1_151 = (CT34_out1_1 == 1'b0 ? s_420 :
              Unit_Delay13_out1_3);



  assign s_421 = signal1_151;

  assign signal1_152 = (CT81_out1_1 == 1'b0 ? s_421 :
              Switch4_out1);



  assign s_422 = signal1_152;

  assign signal1_153 = (CT82_out1_2 == 1'b0 ? s_422 :
              Switch3_out1);



  assign s_423 = signal1_153;

  assign signal1_154 = (CT73_out1_3 == 1'b0 ? s_423 :
              Switch2_out1);



  assign s_424 = signal1_154;

  assign signal1_155 = (CT83_out1_2 == 1'b0 ? s_424 :
              Switch19_out1_2);



  assign s_425 = signal1_155;

  assign signal1_156 = (CT27_out1_1 == 1'b0 ? s_425 :
              Switch107_out1_8);



  assign s_426 = signal1_156;

  assign signal1_157 = (CT28_out1_2 == 1'b0 ? s_426 :
              Switch107_out1_9);



  assign s_427 = signal1_157;

  assign signal1_158 = (CT18_out1_1 == 1'b0 ? s_427 :
              Switch107_out1_45);



  assign s_428 = signal1_158;

  assign signal1_159 = (CT77_out1_2 == 1'b0 ? s_428 :
              Switch107_out1_43);



  assign signal1_160 = signal1_159;

  assign Add24_1 = {signal1_160[11], signal1_160};
  assign Add24_2 = {signal2_283[11], signal2_283};
  assign Add_out1_1 = Add24_1 - Add24_2;



  assign RO83_relop1 = Add_out1_1 > 13'sb0011111111111;



  assign Switch26_out1 = (RO83_relop1 == 1'b0 ? Add_out1_1 :
              Constant9_out1_dtc);



  assign RO73_relop1 = Switch26_out1 < 13'sb1100000000001;



  assign Switch27_out1_1 = (RO73_relop1 == 1'b0 ? Switch26_out1 :
              Constant10_out1_dtc);



  assign Data_Type_Conversion10_out1_1 = Switch27_out1_1[11:0];



  assign Switch131_out1_1 = (CT103_out1_2 == 1'b0 ? Unit_Delay49_out1_5 :
              Data_Type_Conversion10_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay494_process
      if (Rst_n == 1'b0) begin
        Unit_Delay49_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay49_out1_5 <= Switch131_out1_1;
      end
    end



  assign Switch142_out1_1 = (SncCmp_En == 1'b0 ? 12'sb000000000000 :
              Unit_Delay49_out1_5);



  assign s_429 = Switch142_out1_1;

  assign signal1_161 = (CT116_out1_2 == 1'b0 ? s_429 :
              s_337);



  assign s_430 = signal1_161;

  assign signal1_162 = (CT114_out1_2 == 1'b0 ? s_430 :
              s_336);



  assign s_431 = signal1_162;

  assign signal1_163 = (CT112_out1_3 == 1'b0 ? s_431 :
              s_335);



  assign s_432 = signal1_163;

  assign signal1_164 = (CT110_out1_1 == 1'b0 ? s_432 :
              s_334);



  assign s_433 = signal1_164;

  assign signal1_165 = (CT93_out1_1 == 1'b0 ? s_433 :
              s_333);



  assign s_434 = signal1_165;

  assign signal1_166 = (CT91_out1_1 == 1'b0 ? s_434 :
              s_332);



  assign s_435 = signal1_166;

  assign signal1_167 = (CT89_out1_1 == 1'b0 ? s_435 :
              s_331);



  assign s_436 = signal1_167;

  assign signal1_168 = (CT87_out1_2 == 1'b0 ? s_436 :
              s_330);



  assign s_437 = signal1_168;

  assign signal1_169 = (CT58_out1 == 1'b0 ? s_437 :
              s_329);



  assign s_438 = signal1_169;

  assign signal1_170 = (CT59_out1_2 == 1'b0 ? s_438 :
              s_328);



  assign s_439 = signal1_170;

  assign signal1_171 = (CT55_out1_2 == 1'b0 ? s_439 :
              s_327);



  assign s_440 = signal1_171;

  assign signal1_172 = (CT60_out1_1 == 1'b0 ? s_440 :
              s_326);



  assign s_441 = signal1_172;

  assign signal1_173 = (CT50_out1_2 == 1'b0 ? s_441 :
              s_325);



  assign s_442 = signal1_173;

  assign signal1_174 = (CT51_out1_3 == 1'b0 ? s_442 :
              s_324);



  assign s_443 = signal1_174;

  assign signal1_175 = (CT47_out1_3 == 1'b0 ? s_443 :
              s_323);



  assign s_444 = signal1_175;

  assign signal1_176 = (CT52_out1_1 == 1'b0 ? s_444 :
              s_322);



  assign signal1_177 = signal1_176;

  assign s_445 = signal1_177;

  assign signal1_178 = (CT62_out1_2 == 1'b0 ? s_445 :
              s_321);



  assign s_446 = signal1_178;

  assign signal1_179 = (CT61_out1_1 == 1'b0 ? s_446 :
              s_317);



  assign signal1_180 = signal1_179;

  assign Product_out1_1 = signal1_180 * signal2_51;



  assign Bit_Slice3_out1_7 = Product_out1_1[35:11];



  assign Data_Type_S10_out1_1 = Bit_Slice3_out1_7;



  assign RO113_relop1 = Data_Type_S10_out1_1 > 25'sb0000000000000011111111111;



  assign Switch109_out1_1 = (RO113_relop1 == 1'b0 ? Data_Type_S10_out1_1 :
              25'sb0000000000000011111111111);



  assign RO122_relop1 = Switch109_out1_1 < 25'sb1111111111111100000000001;



  assign Switch110_out1_2 = (RO122_relop1 == 1'b0 ? Switch109_out1_1 :
              25'sb1111111111111100000000001);



  assign Data_Type_S8_out1_1 = Switch110_out1_2[11:0];



  assign Switch51_out1_2 = (CT41_out1 == 1'b0 ? Unit_Delay11_out1_2 :
              Data_Type_S8_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1110_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1_2 <= Switch51_out1_2;
      end
    end



  assign signal3_83 = (CT76_out1_2 == 1'b0 ? Unit_Delay11_out1_2 :
              Unit_Delay11_out1_2);



  assign s_447 = signal3_83;

  assign signal3_84 = (CT71_out1 == 1'b0 ? s_447 :
              Unit_Delay10_out1_2);



  assign s_448 = signal3_84;

  assign signal3_85 = (CT68_out1_2 == 1'b0 ? s_448 :
              Unit_Delay6_out1_3);



  assign s_449 = signal3_85;

  assign signal3_86 = (CT65_out1_3 == 1'b0 ? s_449 :
              Unit_Delay5_out1_3);



  assign signal3_87 = signal3_86;

  assign signal3_88 = signal3_87;

  assign Add52_1 = {{10{signal3_88[11]}}, signal3_88};
  assign Add52_2 = {Switch108_out1_1[20], Switch108_out1_1};
  assign Add5_out1_1 = Add52_1 + Add52_2;



  assign RO312_1_1 = {{10{signal4_8[11]}}, signal4_8};
  assign RO312_relop1 = Add5_out1_1 > RO312_1_1;



  assign Switch89_out1_1 = (RO312_relop1 == 1'b0 ? Add5_out1_1 :
              signal4_dtc_1);



  assign RO49_1_1 = {{10{signal5_8[11]}}, signal5_8};
  assign RO49_relop1 = Switch89_out1_1 < RO49_1_1;



  assign Switch90_out1_1 = (RO49_relop1 == 1'b0 ? Switch89_out1_dtc :
              signal5_8);



  assign Add91_1 = {{5{Switch90_out1_1[11]}}, Switch90_out1_1};
  assign Add91_2 = {Data_Type_S6_out1[15], Data_Type_S6_out1};
  assign Add9_out1 = Add91_1 + Add91_2;



  assign Data_Type_S4_out1 = Add9_out1[11:0];



  assign Switch102_out1_6 = (CT75_out1_1 == 1'b0 ? Unit_Delay38_out1_3 :
              Data_Type_S4_out1);



  always @(posedge g_clk)
    begin : Unit_Delay383_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay38_out1_3 <= Switch102_out1_6;
      end
    end



 //assign Switch106_out1_4 = (UOpenLoop_En == 1'b0 ? Unit_Delay38_out1_3 :
  //            12'sb000000000000);
 wire [11:0] Switch106_out1_4_t;
 assign Switch106_out1_4_t = (UOpenLoop_En == 1'b0 ? Unit_Delay38_out1_3 :
              12'sb000000000000);
 assign Switch106_out1_4 = MqnOut;



  always @(posedge g_clk)
    begin : Unit_Delay3960_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_59 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_59 <= Switch107_out1_64;
      end
    end



  assign Switch107_out1_64 = (CT79_out1_2 == 1'b0 ? Unit_Delay39_out1_59 :
              Switch106_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay3931_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_60 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_60 <= Switch107_out1_65;
      end
    end



  assign Switch107_out1_65 = (CT98_out1_2 == 1'b0 ? Unit_Delay39_out1_60 :
              Switch107_out1_64);



  assign Switch89_out1_6 = (CT85_out1_1 == 1'b0 ? Unit_Delay34_out1_7 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay34_out1_7 <= Switch89_out1_6;
      end
    end



  assign RO2_relop1_1 = Add4_out1_4 > 25'sb0000000000000011111111111;



  assign Switch99_out1_2 = (RO2_relop1_1 == 1'b0 ? Add4_out1_4 :
              25'sb0000000000000011111111111);



  assign RO1_relop1_1 = Switch99_out1_2 < 25'sb1111111111111100000000001;



  assign Switch100_out1 = (RO1_relop1_1 == 1'b0 ? Switch99_out1_2 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion1_out1_1 = Switch100_out1[11:0];



  assign Switch91_out1_6 = (CT87_out1_1 == 1'b0 ? Unit_Delay35_out1_7 :
              Data_Type_Conversion1_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay35_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay35_out1_7 <= Switch91_out1_6;
      end
    end



  assign Switch116_out1_2 = (CT116_out1_1 == 1'b0 ? Unit_Delay46_out1_6 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay46_process
      if (Rst_n == 1'b0) begin
        Unit_Delay46_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay46_out1_6 <= Switch116_out1_2;
      end
    end



  assign Switch118_out1_2 = (CT110_out1 == 1'b0 ? Unit_Delay43_out1_3 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay43_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay43_out1_3 <= Switch118_out1_2;
      end
    end



  assign Switch120_out1_2 = (CT112_out1_2 == 1'b0 ? Unit_Delay44_out1_5 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay44_process
      if (Rst_n == 1'b0) begin
        Unit_Delay44_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay44_out1_5 <= Switch120_out1_2;
      end
    end



  assign Unary_Minus13_in0 =  - ({Unit_Delay42_out1_1[11], Unit_Delay42_out1_1});
  assign Unary_Minus13_out1_1 = Unary_Minus13_in0[11:0];



  assign signal1_181 = (CT109_out1 == 1'b0 ? Unit_Delay40_out1_2 :
              Unit_Delay40_out1_2);



  assign s_450 = signal1_181;

  assign signal1_182 = (CT107_out1 == 1'b0 ? s_450 :
              Unit_Delay39_out1_61);



  assign signal1_183 = signal1_182;

  assign signal1_184 = signal1_183;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram1   (.g_clk(g_clk),
                                                        .wr_din(signal1_184),
                                                        .wr_addr(Add3_out1_1),
                                                        .wr_en(Switch138_out1),
                                                        .rd_addr(Add5_out1),
                                                        .rd_dout(UVctDelay_Ram1_out1)
                                                        );

  assign Switch114_out1_4 = (CT108_out1_1 == 1'b0 ? Unit_Delay42_out1_1 :
              Switch139_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay42_process
      if (Rst_n == 1'b0) begin
        Unit_Delay42_out1_1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay42_out1_1 <= Switch114_out1_4;
      end
    end



  assign signal2_318 = (CT109_out1 == 1'b0 ? Unit_Delay42_out1_1 :
              Unit_Delay42_out1_1);



  assign s_451 = signal2_318;

  assign signal2_319 = (CT107_out1 == 1'b0 ? s_451 :
              Unit_Delay41_out1_2);



  assign signal2_320 = signal2_319;

  assign signal2_321 = signal2_320;

  assign Switch139_out1_2 = (Switch138_out1 == 1'b0 ? signal2_321 :
              UVctDelay_Ram1_out1);



  assign Switch112_out1_3 = (CT106_out1_1 == 1'b0 ? Unit_Delay41_out1_2 :
              Switch139_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay41_process
      if (Rst_n == 1'b0) begin
        Unit_Delay41_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay41_out1_2 <= Switch112_out1_3;
      end
    end



  assign Unary_Minus14_in0 =  - ({Unit_Delay41_out1_2[11], Unit_Delay41_out1_2});
  assign Unary_Minus14_out1_1 = Unary_Minus14_in0[11:0];



  assign Unary_Minus_in0 =  - ({Unit_Delay20_out1_3[11], Unit_Delay20_out1_3});
  assign Unary_Minus_out1_1 = Unary_Minus_in0[11:0];



  assign Unary_Minus1_in0 =  - ({Unit_Delay17_out1_3[11], Unit_Delay17_out1_3});
  assign Unary_Minus1_out1_3 = Unary_Minus1_in0[11:0];



  assign Unary_Minus2_in0 =  - ({Unit_Delay9_out1_3[11], Unit_Delay9_out1_3});
  assign Unary_Minus2_out1_3 = Unary_Minus2_in0[11:0];



  assign signal1_185 = (CT28_out1_1 == 1'b0 ? Unit_Delay7_out1_9 :
              Unit_Delay7_out1_9);



  assign s_452 = signal1_185;

  assign signal1_186 = (CT26_out1_2 == 1'b0 ? s_452 :
              Unit_Delay6_out1_4);



  assign s_453 = signal1_186;

  assign signal1_187 = (CT38_out1 == 1'b0 ? s_453 :
              Unit_Delay5_out1_4);



  assign s_454 = signal1_187;

  assign signal1_188 = (CT36_out1 == 1'b0 ? s_454 :
              Unit_Delay4_out1_3);



  assign signal1_189 = signal1_188;

  assign signal1_190 = signal1_189;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_UVctDelay_Ram_1   (.g_clk(g_clk),
                                                         .wr_din(signal1_190),
                                                         .wr_addr(Add16_out1),
                                                         .wr_en(Switch210_out1),
                                                         .rd_addr(Add19_out1),
                                                         .rd_dout(UVctDelay_Ram_out1_1)
                                                         );

  assign Switch52_out1_2 = (CT35_out1_1 == 1'b0 ? Unit_Delay17_out1_3 :
              Switch215_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay17_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1_3 <= Switch52_out1_2;
      end
    end



  assign Switch54_out1_2 = (CT37_out1_1 == 1'b0 ? Unit_Delay20_out1_3 :
              Switch215_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay20_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1_3 <= Switch54_out1_2;
      end
    end



  assign Switch27_out1_2 = (CT27_out1 == 1'b0 ? Unit_Delay9_out1_3 :
              Switch215_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1_3 <= Switch27_out1_2;
      end
    end



  assign signal2_322 = (CT28_out1_1 == 1'b0 ? Unit_Delay9_out1_3 :
              Unit_Delay9_out1_3);



  assign s_455 = signal2_322;

  assign signal2_323 = (CT26_out1_2 == 1'b0 ? s_455 :
              Unit_Delay8_out1_4);



  assign s_456 = signal2_323;

  assign signal2_324 = (CT38_out1 == 1'b0 ? s_456 :
              Unit_Delay20_out1_3);



  assign s_457 = signal2_324;

  assign signal2_325 = (CT36_out1 == 1'b0 ? s_457 :
              Unit_Delay17_out1_3);



  assign signal2_326 = signal2_325;

  assign signal2_327 = signal2_326;

  assign Switch215_out1_1 = (Switch210_out1 == 1'b0 ? signal2_327 :
              UVctDelay_Ram_out1_1);



  assign Switch25_out1_2 = (CT25_out1 == 1'b0 ? Unit_Delay8_out1_4 :
              Switch215_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_4 <= Switch25_out1_2;
      end
    end



  assign Unary_Minus3_in0 =  - ({Unit_Delay8_out1_4[11], Unit_Delay8_out1_4});
  assign Unary_Minus3_out1_2 = Unary_Minus3_in0[11:0];



  assign Switch87_out1_7 = (CT83_out1_1 == 1'b0 ? Unit_Delay31_out1_2 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay31_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay31_out1_2 <= Switch87_out1_7;
      end
    end



  assign Switch88_out1_1 = (CT84_out1 == 1'b0 ? Unit_Delay33_out1_8 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay33_out1_8 <= Switch88_out1_1;
      end
    end



  assign signal2_328 = (CT88_out1 == 1'b0 ? Unit_Delay33_out1_8 :
              Unit_Delay33_out1_8);



  assign s_458 = signal2_328;

  assign signal2_329 = (CT86_out1 == 1'b0 ? s_458 :
              Unit_Delay31_out1_2);



  assign s_459 = signal2_329;

  assign signal2_330 = (CT44_out1_1 == 1'b0 ? s_459 :
              Unary_Minus3_out1_2);



  assign s_460 = signal2_330;

  assign signal2_331 = (CT42_out1 == 1'b0 ? s_460 :
              Unit_Delay9_out1_3);



  assign s_461 = signal2_331;

  assign signal2_332 = (CT40_out1_1 == 1'b0 ? s_461 :
              Unit_Delay8_out1_4);



  assign s_462 = signal2_332;

  assign signal2_333 = (CT46_out1_1 == 1'b0 ? s_462 :
              Unary_Minus2_out1_3);



  assign s_463 = signal2_333;

  assign signal2_334 = (CT34_out1 == 1'b0 ? s_463 :
              Unary_Minus1_out1_3);



  assign s_464 = signal2_334;

  assign signal2_335 = (CT32_out1_1 == 1'b0 ? s_464 :
              Unit_Delay20_out1_3);



  assign s_465 = signal2_335;

  assign signal2_336 = (CT30_out1 == 1'b0 ? s_465 :
              Unit_Delay17_out1_3);



  assign s_466 = signal2_336;

  assign signal2_337 = (CT90_out1_1 == 1'b0 ? s_466 :
              Unary_Minus_out1_1);



  assign s_467 = signal2_337;

  assign signal2_338 = (CT115_out1 == 1'b0 ? s_467 :
              Unary_Minus14_out1_1);



  assign s_468 = signal2_338;

  assign signal2_339 = (CT113_out1_1 == 1'b0 ? s_468 :
              Unit_Delay42_out1_1);



  assign s_469 = signal2_339;

  assign signal2_340 = (CT111_out1_2 == 1'b0 ? s_469 :
              Unit_Delay41_out1_2);



  assign s_470 = signal2_340;

  assign signal2_341 = (CT117_out1_1 == 1'b0 ? s_470 :
              Unary_Minus13_out1_1);



  assign s_471 = signal2_341;

  assign signal2_342 = (CT9_out1_1 == 1'b0 ? s_471 :
              Unary_Minus12_out1);



  assign s_472 = signal2_342;

  assign signal2_343 = (CT8_out1 == 1'b0 ? s_472 :
              Unary_Minus11_out1);



  assign s_473 = signal2_343;

  assign signal2_344 = (CT6_out1 == 1'b0 ? s_473 :
              Unary_Minus10_out1);



  assign signal2_345 = signal2_344;

  assign Switch107_out1_66 = (CT102_out1 == 1'b0 ? Unit_Delay39_out1_61 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3932_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_61 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_61 <= Switch107_out1_66;
      end
    end



  assign Switch110_out1_3 = (CT105_out1 == 1'b0 ? Unit_Delay40_out1_2 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay40_process
      if (Rst_n == 1'b0) begin
        Unit_Delay40_out1_2 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay40_out1_2 <= Switch110_out1_3;
      end
    end



  assign Switch14_out1_1 = (CT13_out1 == 1'b0 ? Unit_Delay4_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1_3 <= Switch14_out1_1;
      end
    end



  assign Switch17_out1_8 = (CT16_out1_1 == 1'b0 ? Unit_Delay5_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1_4 <= Switch17_out1_8;
      end
    end



  assign Switch20_out1_8 = (CT20_out1_1 == 1'b0 ? Unit_Delay6_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1_4 <= Switch20_out1_8;
      end
    end



  assign Switch23_out1 = (CT23_out1_2 == 1'b0 ? Unit_Delay7_out1_9 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_9 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1_9 <= Switch23_out1;
      end
    end



  assign Switch80_out1_5 = (CT77_out1_1 == 1'b0 ? Unit_Delay29_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay29_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1_3 <= Switch80_out1_5;
      end
    end



  assign Switch81_out1_4 = (CT78_out1 == 1'b0 ? Unit_Delay30_out1_7 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay30_out1_7 <= Switch81_out1_4;
      end
    end



  assign signal1_191 = (CT88_out1 == 1'b0 ? Unit_Delay30_out1_7 :
              Unit_Delay30_out1_7);



  assign s_474 = signal1_191;

  assign signal1_192 = (CT86_out1 == 1'b0 ? s_474 :
              Unit_Delay29_out1_3);



  assign s_475 = signal1_192;

  assign signal1_193 = (CT44_out1_1 == 1'b0 ? s_475 :
              Unit_Delay7_out1_9);



  assign s_476 = signal1_193;

  assign signal1_194 = (CT42_out1 == 1'b0 ? s_476 :
              Unit_Delay6_out1_4);



  assign s_477 = signal1_194;

  assign signal1_195 = (CT40_out1_1 == 1'b0 ? s_477 :
              Unit_Delay7_out1_9);



  assign s_478 = signal1_195;

  assign signal1_196 = (CT46_out1_1 == 1'b0 ? s_478 :
              Unit_Delay6_out1_4);



  assign s_479 = signal1_196;

  assign signal1_197 = (CT34_out1 == 1'b0 ? s_479 :
              Unit_Delay5_out1_4);



  assign s_480 = signal1_197;

  assign signal1_198 = (CT32_out1_1 == 1'b0 ? s_480 :
              Unit_Delay4_out1_3);



  assign s_481 = signal1_198;

  assign signal1_199 = (CT30_out1 == 1'b0 ? s_481 :
              Unit_Delay5_out1_4);



  assign s_482 = signal1_199;

  assign signal1_200 = (CT90_out1_1 == 1'b0 ? s_482 :
              Unit_Delay4_out1_3);



  assign s_483 = signal1_200;

  assign signal1_201 = (CT115_out1 == 1'b0 ? s_483 :
              Unit_Delay40_out1_2);



  assign s_484 = signal1_201;

  assign signal1_202 = (CT113_out1_1 == 1'b0 ? s_484 :
              Unit_Delay39_out1_61);



  assign s_485 = signal1_202;

  assign signal1_203 = (CT111_out1_2 == 1'b0 ? s_485 :
              Unit_Delay40_out1_2);



  assign s_486 = signal1_203;

  assign signal1_204 = (CT117_out1_1 == 1'b0 ? s_486 :
              Unit_Delay39_out1_61);



  assign s_487 = signal1_204;

  assign signal1_205 = (CT9_out1_1 == 1'b0 ? s_487 :
              Switch107_out1_2);



  assign s_488 = signal1_205;

  assign signal1_206 = (CT8_out1 == 1'b0 ? s_488 :
              Switch107_out1_3);



  assign s_489 = signal1_206;

  assign signal1_207 = (CT6_out1 == 1'b0 ? s_489 :
              Switch107_out1_4);



  assign signal1_208 = signal1_207;

  assign Add4_1 = {signal1_208[11], signal1_208};
  assign Add4_2 = {signal2_345[11], signal2_345};
  assign Add4_add_temp = Add4_1 + Add4_2;
  assign Add4_out1_4 = {{12{Add4_add_temp[12]}}, Add4_add_temp};



  assign RO8_relop1_1 = Add4_out1_4 > 25'sb0000000000000111111111111;



  assign Switch76_out1_2 = (RO8_relop1_1 == 1'b0 ? Add4_out1_4 :
              25'sb0000000000000111111111111);



  assign RO7_relop1_1 = Switch76_out1_2 < 25'sb1111111111111000000000001;



  assign Switch79_out1_8 = (RO7_relop1_1 == 1'b0 ? Switch76_out1_2 :
              25'sb1111111111111000000000001);



  assign Bit_Slice2_out1_6 = Switch79_out1_8[24:1];



  assign Data_Type_Conversion3_out1_3 = $signed(Bit_Slice2_out1_6[11:0]);



  assign Switch122_out1_4 = (CT114_out1_1 == 1'b0 ? Unit_Delay45_out1_4 :
              Data_Type_Conversion3_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay45_process
      if (Rst_n == 1'b0) begin
        Unit_Delay45_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay45_out1_4 <= Switch122_out1_4;
      end
    end



  assign signal1_209 = (CT125_out1_1 == 1'b0 ? Unit_Delay45_out1_4 :
              Unit_Delay45_out1_4);



  assign s_490 = signal1_209;

  assign signal1_210 = (CT124_out1 == 1'b0 ? s_490 :
              Unit_Delay44_out1_5);



  assign s_491 = signal1_210;

  assign signal1_211 = (CT123_out1_1 == 1'b0 ? s_491 :
              Unit_Delay45_out1_4);



  assign s_492 = signal1_211;

  assign signal1_212 = (CT122_out1 == 1'b0 ? s_492 :
              Unit_Delay44_out1_5);



  assign s_493 = signal1_212;

  assign signal1_213 = (CT121_out1_1 == 1'b0 ? s_493 :
              Unit_Delay43_out1_3);



  assign s_494 = signal1_213;

  assign signal1_214 = (CT120_out1 == 1'b0 ? s_494 :
              Unit_Delay46_out1_6);



  assign s_495 = signal1_214;

  assign signal1_215 = (CT119_out1 == 1'b0 ? s_495 :
              Unit_Delay43_out1_3);



  assign s_496 = signal1_215;

  assign signal1_216 = (CT118_out1 == 1'b0 ? s_496 :
              Unit_Delay46_out1_6);



  assign s_497 = signal1_216;

  assign signal1_217 = (CT94_out1_1 == 1'b0 ? s_497 :
              Unit_Delay35_out1_7);



  assign s_498 = signal1_217;

  assign signal1_218 = (CT93_out1 == 1'b0 ? s_498 :
              Unit_Delay34_out1_7);



  assign s_499 = signal1_218;

  assign signal1_219 = (CT92_out1_1 == 1'b0 ? s_499 :
              Unit_Delay35_out1_7);



  assign s_500 = signal1_219;

  assign signal1_220 = (CT91_out1 == 1'b0 ? s_500 :
              Unit_Delay34_out1_7);



  assign s_501 = signal1_220;

  assign signal1_221 = (CT82_out1_1 == 1'b0 ? s_501 :
              Switch107_out1_65);



  assign s_502 = signal1_221;

  assign signal1_222 = (CT81_out1 == 1'b0 ? s_502 :
              Switch107_out1_40);



  assign s_503 = signal1_222;

  assign signal1_223 = (CT80_out1 == 1'b0 ? s_503 :
              Switch107_out1_65);



  assign s_504 = signal1_223;

  assign signal1_224 = (CT79_out1_1 == 1'b0 ? s_504 :
              Switch107_out1_40);



  assign s_505 = signal1_224;

  assign signal1_225 = (CT76_out1_1 == 1'b0 ? s_505 :
              Switch107_out1_38);



  assign s_506 = signal1_225;

  assign signal1_226 = (CT75_out1 == 1'b0 ? s_506 :
              Switch107_out1_36);



  assign s_507 = signal1_226;

  assign signal1_227 = (CT74_out1_1 == 1'b0 ? s_507 :
              Switch107_out1_38);



  assign s_508 = signal1_227;

  assign signal1_228 = (CT73_out1_2 == 1'b0 ? s_508 :
              Switch107_out1_36);



  assign s_509 = signal1_228;

  assign signal1_229 = (CT68_out1_1 == 1'b0 ? s_509 :
              Unit_Delay18_out1);



  assign s_510 = signal1_229;

  assign signal1_230 = (CT67_out1_1 == 1'b0 ? s_510 :
              Unit_Delay15_out1_1);



  assign s_511 = signal1_230;

  assign signal1_231 = (CT66_out1_2 == 1'b0 ? s_511 :
              Unit_Delay18_out1);



  assign s_512 = signal1_231;

  assign signal1_232 = (CT65_out1_2 == 1'b0 ? s_512 :
              Unit_Delay15_out1_1);



  assign s_513 = signal1_232;

  assign signal1_233 = (CT64_out1_2 == 1'b0 ? s_513 :
              Unit_Delay14_out1_1);



  assign s_514 = signal1_233;

  assign signal1_234 = (CT63_out1 == 1'b0 ? s_514 :
              Unit_Delay19_out1);



  assign s_515 = signal1_234;

  assign signal1_235 = (CT62_out1_1 == 1'b0 ? s_515 :
              Unit_Delay14_out1_1);



  assign s_516 = signal1_235;

  assign signal1_236 = (CT61_out1 == 1'b0 ? s_516 :
              Unit_Delay19_out1);



  assign s_517 = signal1_236;

  assign signal1_237 = (CT54_out1_1 == 1'b0 ? s_517 :
              Unit_Delay13_out1_2);



  assign s_518 = signal1_237;

  assign signal1_238 = (CT53_out1 == 1'b0 ? s_518 :
              Unit_Delay12_out1_1);



  assign s_519 = signal1_238;

  assign signal1_239 = (CT52_out1 == 1'b0 ? s_519 :
              Unit_Delay13_out1_2);



  assign s_520 = signal1_239;

  assign signal1_240 = (CT51_out1_2 == 1'b0 ? s_520 :
              Unit_Delay12_out1_1);



  assign s_521 = signal1_240;

  assign signal1_241 = (CT50_out1_1 == 1'b0 ? s_521 :
              Unit_Delay11_out1);



  assign s_522 = signal1_241;

  assign signal1_242 = (CT49_out1_2 == 1'b0 ? s_522 :
              Unit_Delay69_out1_1);



  assign s_523 = signal1_242;

  assign signal1_243 = (CT48_out1_1 == 1'b0 ? s_523 :
              Unit_Delay11_out1);



  assign s_524 = signal1_243;

  assign signal1_244 = (CT47_out1_2 == 1'b0 ? s_524 :
              Unit_Delay69_out1_1);



  assign s_525 = signal1_244;

  assign signal1_245 = (CT22_out1_3 == 1'b0 ? s_525 :
              Switch107_out1_2);



  assign s_526 = signal1_245;

  assign signal1_246 = (CT21_out1_1 == 1'b0 ? s_526 :
              Switch107_out1_3);



  assign s_527 = signal1_246;

  assign signal1_247 = (CT19_out1_1 == 1'b0 ? s_527 :
              Switch107_out1_2);



  assign s_528 = signal1_247;

  assign signal1_248 = (CT18_out1 == 1'b0 ? s_528 :
              Switch107_out1_3);



  assign s_529 = signal1_248;

  assign signal1_249 = (CT17_out1_1 == 1'b0 ? s_529 :
              Switch107_out1_4);



  assign s_530 = signal1_249;

  assign signal1_250 = (CT104_out1 == 1'b0 ? s_530 :
              Unit_Delay3_out1_1);



  assign s_531 = signal1_250;

  assign signal1_251 = (CT103_out1_1 == 1'b0 ? s_531 :
              Unit_Delay2_out1_1);



  assign s_532 = signal1_251;

  assign signal1_252 = (CT101_out1_1 == 1'b0 ? s_532 :
              Unit_Delay3_out1_1);



  assign s_533 = signal1_252;

  assign signal1_253 = (CT15_out1 == 1'b0 ? s_533 :
              Unit_Delay2_out1_1);



  assign s_534 = signal1_253;

  assign signal1_254 = (CT14_out1_1 == 1'b0 ? s_534 :
              Unit_Delay1_out1_7);



  assign s_535 = signal1_254;

  assign signal1_255 = (CT4_out1_1 == 1'b0 ? s_535 :
              Switch107_out1_14);



  assign s_536 = signal1_255;

  assign signal1_256 = (CT7_out1_1 == 1'b0 ? s_536 :
              Switch107_out1_15);



  assign s_537 = signal1_256;

  assign signal1_257 = (CT2_out1_1 == 1'b0 ? s_537 :
              Switch107_out1_16);



  assign s_538 = signal1_257;

  assign signal1_258 = (CT3_out1_2 == 1'b0 ? s_538 :
              Switch107_out1_14);



  assign s_539 = signal1_258;

  assign signal1_259 = (CT1_out1_1 == 1'b0 ? s_539 :
              Switch107_out1_15);



  assign s_540 = signal1_259;

  assign signal1_260 = (CT5_out1_2 == 1'b0 ? s_540 :
              Switch107_out1_16);



  assign signal1_261 = signal1_260;

  assign signal1_262 = signal1_261;

  assign Product_out1_2 = signal1_262 * signal2_105;



  assign Add_1 = {{2{Product_out1_2[23]}}, Product_out1_2};
  assign Add_2 = {Switch13_out1[24], Switch13_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1 = Add_add_temp[24:0];



  assign CT55_out1_8 = Add_out1 > 25'sb0001111111111111111111111;



  assign Switch41_out1_1 = (CT55_out1_8 == 1'b0 ? Add_out1 :
              Constant2_out1_dtc_1);



  assign CT56_out1_7 = Switch41_out1_1 < 25'sb1110000000000000000000001;



  assign Switch42_out1_1 = (CT56_out1_7 == 1'b0 ? Switch41_out1_1 :
              Constant1_out1_dtc_2);



  assign Bit_Slice1_out1_8 = Switch42_out1_1[24:11];



  assign Data_Type_Conversion2_out1 = $signed(Bit_Slice1_out1_8[11:0]);



  assign Switch60_out1_2 = (CT59_out1_1 == 1'b0 ? Unit_Delay23_out1_3 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay23_process
      if (Rst_n == 1'b0) begin
        Unit_Delay23_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay23_out1_3 <= Switch60_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay396_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_62 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_62 <= Switch107_out1_63;
      end
    end



  assign Switch107_out1_63 = (CT99_out1_1 == 1'b0 ? Unit_Delay39_out1_62 :
              Unit_Delay23_out1_3);



  always @(posedge g_clk)
    begin : Unit_Delay3946_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_63 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_63 <= Switch107_out1_26;
      end
    end



  assign Switch107_out1_26 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_63 :
              Switch107_out1_63);



  assign signal2_346 = (CT65_out1_1 == 1'b0 ? Switch107_out1_26 :
              Switch107_out1_26);



  assign s_541 = signal2_346;

  assign signal2_347 = (CT50_out1 == 1'b0 ? s_541 :
              Switch107_out1_27);



  assign s_542 = signal2_347;

  assign signal2_348 = (CT49_out1_1 == 1'b0 ? s_542 :
              Switch107_out1_28);



  assign signal2_349 = signal2_348;

  assign signal2_350 = signal2_349;

  assign Switch93_out1 = (OR2_out1_2 == 1'b0 ? signal2_350 :
              Add7_out1_1);



  assign Switch112_out1_4 = (CT66_out1_1 == 1'b0 ? Unit_Delay29_out1 :
              Switch93_out1);



  always @(posedge g_clk)
    begin : Unit_Delay292_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay29_out1 <= Switch112_out1_4;
      end
    end



  assign s_543 = Unit_Delay145_out1;

  assign Switch303_out1 = (CT180_out1 == 1'b0 ? Unit_Delay145_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay145_process
      if (Rst_n == 1'b0) begin
        Unit_Delay145_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay145_out1 <= Switch303_out1;
      end
    end



  assign s_544 = Unit_Delay145_out1;

  assign Switch97_out1_5 = (CT59_out1 == 1'b0 ? Unit_Delay26_out1_3 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay262_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1_3 <= Switch97_out1_5;
      end
    end



  assign Switch292_out1 = (CT170_out1 == 1'b0 ? Unit_Delay138_out1 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay138_process
      if (Rst_n == 1'b0) begin
        Unit_Delay138_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay138_out1 <= Switch292_out1;
      end
    end



  assign SA_1_out1 = Unit_Delay138_out1 <<< 8'd1;



  assign signal1_263 = (CT186_out1 == 1'b0 ? SA_1_out1 :
              SA_1_out1);



  assign s_545 = signal1_263;

  assign signal1_264 = (CT176_out1 == 1'b0 ? s_545 :
              12'sb011111111111);



  assign s_546 = signal1_264;

  assign signal1_265 = (CT64_out1_1 == 1'b0 ? s_546 :
              Unit_Delay26_out1_3);



  assign s_547 = signal1_265;

  assign signal1_266 = (CT184_out1 == 1'b0 ? s_547 :
              s_544);



  assign s_548 = signal1_266;

  assign signal1_267 = (CT182_out1 == 1'b0 ? s_548 :
              s_543);



  assign s_549 = signal1_267;

  assign signal1_268 = (CT117_out1 == 1'b0 ? s_549 :
              12'sb000000000000);



  assign s_550 = signal1_268;

  assign signal1_269 = (CT116_out1 == 1'b0 ? s_550 :
              Unit_Delay29_out1);



  assign s_551 = signal1_269;

  assign signal1_270 = (CT114_out1 == 1'b0 ? s_551 :
              Unit_Delay46_out1_1);



  assign s_552 = signal1_270;
//del ZJ 20211101 <UdpRefIn_Temp_b12(Um_soft)-Udp_drop_b12>
  assign signal1_271 = (CT113_out1 == 1'b0 ? s_552 :
               Unit_Delay45_out1);
//add ZJ 20211101  <Um_soft-Udp_drop_b12>
//  assign signal1_271 = (CT113_out1 == 1'b0 ? s_552 :
 //             Um_ref_new_b12);


  assign s_553 = signal1_271;

  assign signal1_272 = (CT112_out1_1 == 1'b0 ? s_553 :
              Unit_Delay86_out1);



  assign s_554 = signal1_272;

  assign signal1_273 = (CT134_out1 == 1'b0 ? s_554 :
              s_291);



  assign s_555 = signal1_273;

  assign signal1_274 = (CT125_out1 == 1'b0 ? s_555 :
              Unit_Delay103_out1);



  assign s_556 = signal1_274;

  assign signal1_275 = (CT132_out1 == 1'b0 ? s_556 :
              s_290);



  assign s_557 = signal1_275;

  assign signal1_276 = (CT108_out1 == 1'b0 ? s_557 :
              Um_ref_b12);



  assign s_558 = signal1_276;

  assign signal1_277 = (CT106_out1 == 1'b0 ? s_558 :
              Um_ref_b12);



  assign signal1_278 = signal1_277;

  assign Data_Type_S26_out1 = {{12{signal1_278[11]}}, signal1_278};



  assign signal1_279 = (CT48_out1 == 1'b0 ? Data_Type_S26_out1 :
              s_289);



  assign signal1_280 = signal1_279;

  assign Add10_1 = {signal1_280[23], signal1_280};
  assign Add10_2 = {signal2_237[23], signal2_237};
  assign Add10_out1 = Add10_1 - Add10_2;



  assign RO381_relop1 = Add10_out1 > 25'sb0000000000000011111111111;



  assign Switch202_out1 = (RO381_relop1 == 1'b0 ? Add10_out1 :
              25'sb0000000000000011111111111);



  assign RO371_relop1 = Switch202_out1 < 25'sb1111111111111100000000001;



  assign Switch203_out1 = (RO371_relop1 == 1'b0 ? Switch202_out1 :
              25'sb1111111111111100000000001);



  assign Data_Type_Conversion31_out1 = Switch203_out1[11:0];



  assign Switch204_out1 = (CT111_out1_1 == 1'b0 ? Unit_Delay101_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1011_process
      if (Rst_n == 1'b0) begin
        Unit_Delay101_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay101_out1 <= Switch204_out1;
      end
    end



  assign RO401_relop1 = 1'b0;



  assign Switch206_out1 = (RO401_relop1 == 1'b0 ? Unit_Delay101_out1 :
              12'sb011111111111);



  assign RO391_relop1 = Switch206_out1 < 12'sb111111111110;



  assign Switch207_out1 = (RO391_relop1 == 1'b0 ? Switch206_out1 :
              12'sb111111111110);



  assign s_559 = Switch207_out1;

  assign In8_out1_dtc_1 = {{9{Data_Type_S1_out1_1[20]}}, Data_Type_S1_out1_1};



  assign Add33_1 = {signal5_2[11], signal5_2};
  assign Add33_2 = {Switch40_out1_1[11], Switch40_out1_1};
  assign Add3_out1_5 = Add33_1 - Add33_2;



  assign Bit_Concat3_out1_1 = {Add3_out1_5, 8'b00000000};



  assign Data_Type_S1_out1_1 = Bit_Concat3_out1_1;



  assign In7_out1_dtc_1 = {{9{Data_Type_S19_out1_1[20]}}, Data_Type_S19_out1_1};



  assign Add6_1 = {signal4_2[11], signal4_2};
  assign Add6_2 = {Switch40_out1_1[11], Switch40_out1_1};
  assign Add6_out1_1 = Add6_1 - Add6_2;



  assign Bit_Concat1_out1_1 = {Add6_out1_1, 8'b00000000};



  assign Data_Type_S19_out1_1 = Bit_Concat1_out1_1;



  assign s_560 = Unit_Delay18_out1_3;

  assign Switch48_out1_2 = (CtlLoop_On == 1'b0 ? 30'sb000000000000000000000000000000 :
              Switch42_out1_2);



  assign Switch37_out1_2 = (CT22_out1_2 == 1'b0 ? Unit_Delay18_out1_3 :
              Switch48_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay182_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1_3 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay18_out1_3 <= Switch37_out1_2;
      end
    end



  assign s_561 = Unit_Delay18_out1_3;

  assign signal6_11 = (CT24_out1_1 == 1'b0 ? s_561 :
              s_560);



  assign signal6_12 = signal6_11;

  assign signal6_13 = signal6_12;

  assign s_562 = Unit_Delay2_out1_4;

  assign Switch3_out1_3 = (CT4_out1 == 1'b0 ? Unit_Delay2_out1_4 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay212_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay2_out1_4 <= Switch3_out1_3;
      end
    end



  assign s_563 = Unit_Delay2_out1_4;

  assign signal2_351 = (CT24_out1_1 == 1'b0 ? s_563 :
              s_562);



  assign signal2_352 = signal2_351;

  assign signal2_353 = signal2_352;

  assign Switch43_out1_2 = (switch_compare_1_4 == 1'b0 ? 24'sb000000000000000000000000 :
              signal2_353);



  assign Add8_1 = {{7{Switch43_out1_2[23]}}, Switch43_out1_2};
  assign Add8_2 = {signal6_13[29], signal6_13};
  assign Add8_add_temp = Add8_1 + Add8_2;
  assign Add8_out1_2 = Add8_add_temp[29:0];



  assign RO131_1_1 = {{9{Data_Type_S19_out1_1[20]}}, Data_Type_S19_out1_1};
  assign RO131_relop1 = Add8_out1_2 > RO131_1_1;



  assign Switch41_out1_2 = (RO131_relop1 == 1'b0 ? Add8_out1_2 :
              In7_out1_dtc_1);



  assign RO141_1_1 = {{9{Data_Type_S1_out1_1[20]}}, Data_Type_S1_out1_1};
  assign RO141_relop1 = Switch41_out1_2 < RO141_1_1;



  assign Switch42_out1_2 = (RO141_relop1 == 1'b0 ? Switch41_out1_2 :
              In8_out1_dtc_1);



  assign Bit_Slice9_out1_1 = Switch42_out1_2[29:8];



  assign Data_Type_S6_out1_1 = Bit_Slice9_out1_1;



  assign Switch39_out1_dtc = Switch39_out1_3[11:0];



  assign s_564 = Data_Type_S3_out1_2;

  assign RO210_relop1 = Product6_out1_1 > 48'sh0000003FFFFF;



  assign Switch13_out1_2 = (RO210_relop1 == 1'b0 ? Product6_out1_1 :
              Constant1_out1_dtc);



  assign RO110_relop1 = Switch13_out1_2 < 48'shFFFFFFC00001;



  assign Switch14_out1_2 = (RO110_relop1 == 1'b0 ? Switch13_out1_2 :
              Constant3_out1_dtc);



  assign Data_Type_Conversion1_out1 = Switch14_out1_2[23:0];



  assign Switch1_out1_4 = (CT2_out1 == 1'b0 ? Unit_Delay1_out1_9 :
              Data_Type_Conversion1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay117_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_9 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay1_out1_9 <= Switch1_out1_4;
      end
    end



  assign Bit_Slice2_out1_7 = Unit_Delay1_out1_9[23:8];



  assign Data_Type_S3_out1_2 = Bit_Slice2_out1_7;



  assign s_565 = Data_Type_S3_out1_2;

  assign signal1_281 = (CT24_out1_1 == 1'b0 ? s_565 :
              s_564);



  assign signal1_282 = signal1_281;

  assign signal1_283 = signal1_282;

  assign Add51_1 = {{5{signal3_2[11]}}, signal3_2};
  assign Add51_2 = {signal1_283[15], signal1_283};
  assign Add5_out1_2 = Add51_1 + Add51_2;



  assign RO111_1_1 = {{5{signal4_2[11]}}, signal4_2};
  assign RO111_relop1 = Add5_out1_2 > RO111_1_1;



  assign Switch39_out1_3 = (RO111_relop1 == 1'b0 ? Add5_out1_2 :
              signal4_dtc);



  assign RO121_1_1 = {{5{signal5_2[11]}}, signal5_2};
  assign RO121_relop1 = Switch39_out1_3 < RO121_1_1;



  assign Switch40_out1_1 = (RO121_relop1 == 1'b0 ? Switch39_out1_dtc :
              signal5_2);



  assign Add9_1 = {{11{Switch40_out1_1[11]}}, Switch40_out1_1};
  assign Add9_2 = {Data_Type_S6_out1_1[21], Data_Type_S6_out1_1};
  assign Add9_out1_1 = Add9_1 + Add9_2;



  assign Data_Type_S4_out1_1 = Add9_out1_1[11:0];



  assign Switch38_out1_2 = (CT23_out1_1 == 1'b0 ? Unit_Delay19_out1_3 :
              Data_Type_S4_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay192_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1_3 <= Switch38_out1_2;
      end
    end



  assign signal1_284 = (CT14_out1 == 1'b0 ? s_13 :
              Unit_Delay19_out1_3);



  assign s_566 = signal1_284;

  assign signal1_285 = (CT9_out1 == 1'b0 ? s_566 :
              Unit_Delay19_out1_3);



  assign s_567 = signal1_285;

  assign signal1_286 = (CT7_out1 == 1'b0 ? s_567 :
              Unit_Delay19_out1_3);



  assign s_568 = signal1_286;

  assign signal1_287 = (CT5_out1_1 == 1'b0 ? s_568 :
              Unit_Delay19_out1_3);



  assign s_569 = signal1_287;

  assign signal1_288 = (CT179_out1 == 1'b0 ? s_569 :
              Um_ref_b12);



  assign s_570 = signal1_288;

  assign signal1_289 = (CT3_out1_1 == 1'b0 ? s_570 :
              s_559);



  assign s_571 = signal1_289;

  assign signal1_290 = (CT1_out1 == 1'b0 ? s_571 :
              s_273);



  assign s_572 = signal1_290;

  assign signal1_291 = (CT156_out1 == 1'b0 ? s_572 :
              Switch107_out1_26);



  assign s_573 = signal1_291;

  assign signal1_292 = (CT154_out1 == 1'b0 ? s_573 :
              Switch107_out1_25);



  assign s_574 = signal1_292;

  assign signal1_293 = (CT152_out1 == 1'b0 ? s_574 :
              Switch107_out1_28);



  assign s_575 = signal1_293;

  assign signal1_294 = (CT150_out1 == 1'b0 ? s_575 :
              Switch107_out1_27);



  assign s_576 = signal1_294;

  assign signal1_295 = (CT148_out1 == 1'b0 ? s_576 :
              Switch107_out1_25);



  assign s_577 = signal1_295;

  assign signal1_296 = (CT128_out1 == 1'b0 ? s_577 :
              Switch300_out1);



  assign s_578 = signal1_296;

  assign signal1_297 = (CT146_out1 == 1'b0 ? s_578 :
              Switch107_out1_26);



  assign s_579 = signal1_297;

  assign signal1_298 = (CT140_out1 == 1'b0 ? s_579 :
              Switch107_out1_27);



  assign s_580 = signal1_298;

  assign signal1_299 = (CT121_out1 == 1'b0 ? s_580 :
              Um_ref_b12);



  assign s_581 = signal1_299;

  assign signal1_300 = (CT79_out1 == 1'b0 ? s_581 :
              Switch107_out1_28);



  assign s_582 = signal1_300;

  assign signal1_301 = (CT39_out1_1 == 1'b0 ? s_582 :
              Um_ref_b12);



  assign s_583 = signal1_301;

  assign signal1_302 = (CT103_out1 == 1'b0 ? s_583 :
              Switch107_out1_27);



  assign s_584 = signal1_302;

  assign signal1_303 = (CT101_out1 == 1'b0 ? s_584 :
              Switch107_out1_28);



  assign s_585 = signal1_303;

  assign signal1_304 = (CT87_out1 == 1'b0 ? s_585 :
              Switch107_out1_21);



  assign s_586 = signal1_304;

  assign signal1_305 = (CT85_out1 == 1'b0 ? s_586 :
              Switch107_out1_22);



  assign s_587 = signal1_305;

  assign signal1_306 = (CT83_out1 == 1'b0 ? s_587 :
              Switch107_out1_23);



  assign s_588 = signal1_306;

  assign signal1_307 = (CT76_out1 == 1'b0 ? s_588 :
              Switch107_out1_24);



  assign s_589 = signal1_307;

  assign signal1_308 = (CT74_out1 == 1'b0 ? s_589 :
              Switch107_out1_25);



  assign s_590 = signal1_308;

  assign signal1_309 = (CT68_out1 == 1'b0 ? s_590 :
              Switch107_out1_26);



  assign s_591 = signal1_309;

  assign signal1_310 = (CT54_out1 == 1'b0 ? s_591 :
              Switch107_out1_27);



  assign s_592 = signal1_310;

  assign signal1_311 = (CT43_out1_1 == 1'b0 ? s_592 :
              Switch107_out1_28);



  assign signal1_312 = signal1_311;

  assign Data_Type_S20_out1_1 = {{12{signal1_312[11]}}, signal1_312};



  assign signal1_313 = (Lo1_out1 == 1'b0 ? Data_Type_S20_out1_1 :
              s_272);



  assign signal1_314 = signal1_313;

  assign Product6_out1_1 = signal1_314 * signal2_218;



  assign Bit_Slice6_out1_8 = Product6_out1_1[47:11];



  assign Data_Type_S10_out1_2 = Bit_Slice6_out1_8;



  assign RO281_relop1 = Data_Type_S10_out1_2 > 37'sh00000007FF;



  assign Switch104_out1_5 = (RO281_relop1 == 1'b0 ? Data_Type_S10_out1_2 :
              Constant35_out1_dtc);



  assign RO271_relop1 = Switch104_out1_5 < 37'sh1FFFFFF801;



  assign Switch131_out1_2 = (RO271_relop1 == 1'b0 ? Switch104_out1_5 :
              Constant36_out1_dtc);



  assign Data_Type_Conversion24_out1 = Switch131_out1_2[11:0];



  assign Switch26_out1_1 = (CT26_out1_1 == 1'b0 ? Unit_Delay11_out1_3 :
              Data_Type_Conversion24_out1);



  always @(posedge g_clk)
    begin : Unit_Delay118_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1_3 <= Switch26_out1_1;
      end
    end



  assign signal1_315 = (CT33_out1_1 == 1'b0 ? Unit_Delay11_out1_3 :
              Unit_Delay11_out1_3);



  assign s_593 = signal1_315;

  assign signal1_316 = (CT31_out1_1 == 1'b0 ? s_593 :
              Unit_Delay12_out1);



  assign s_594 = signal1_316;

  assign signal1_317 = (CT57_out1_1 == 1'b0 ? s_594 :
              Unit_Delay10_out1_1);



  assign s_595 = signal1_317;

  assign signal1_318 = (CT55_out1_1 == 1'b0 ? s_595 :
              Unit_Delay9_out1_1);



  assign signal1_319 = signal1_318;

  assign signal1_320 = signal1_319;

  assign Switch32_out1 = (switch_compare_1_3 == 1'b0 ? 12'sb000000000000 :
              signal1_320);



  assign Switch44_out1_2 = (Switch208_out1_1 == 1'b0 ? 12'sb000000000000 :
              Switch32_out1);



  assign Add15_stage21_1 = {{6{Switch44_out1_2[11]}}, Switch44_out1_2};
  assign Add15_stage21_2 = {{6{Switch45_out1[11]}}, Switch45_out1};
  assign Add15_op_stage2_1 = Add15_stage21_1 - Add15_stage21_2;



  assign Add15_stage31_1 = {signal2_176[16], signal2_176};
  assign Add15_stage31_add_temp = Add15_op_stage2_1 + Add15_stage31_1;
  assign Add15_out1_3 = Add15_stage31_add_temp[16:0];



  assign Switch29_out1_1 = (switch_compare_1_2 == 1'b0 ? 17'sb00000000000000000 :
              Add15_out1_3);



  assign Switch46_out1_1 = (CT32_out1 == 1'b0 ? Unit_Delay15_out1 :
              Switch29_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay152_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1 <= 17'sb00000000000000000;
      end
      else begin
        Unit_Delay15_out1 <= Switch46_out1_1;
      end
    end



  assign Bit_Slice11_out1_1 = Unit_Delay15_out1[16:5];



  assign Data_Type_S16_out1_1 = Bit_Slice11_out1_1;



  assign signal1_321 = (CT51_out1 == 1'b0 ? Data_Type_S16_out1_1 :
              Data_Type_S16_out1_1);



  assign s_596 = signal1_321;

  assign signal1_322 = (CT49_out1 == 1'b0 ? s_596 :
              Data_Type_S18_out1_1);



  assign s_597 = signal1_322;

  assign signal1_323 = (CT47_out1 == 1'b0 ? s_597 :
              Switch57_out1);



  assign s_598 = signal1_323;

  assign signal1_324 = (CT33_out1 == 1'b0 ? s_598 :
              Switch57_out1);



  assign s_599 = signal1_324;

  assign signal1_325 = (CT31_out1 == 1'b0 ? s_599 :
              Switch56_out1);



  assign s_600 = signal1_325;

  assign signal1_326 = (CT28_out1 == 1'b0 ? s_600 :
              Switch56_out1);



  assign s_601 = signal1_326;

  assign signal1_327 = (CT37_out1 == 1'b0 ? s_601 :
              Switch70_out1);



  assign s_602 = signal1_327;

  assign signal1_328 = (CT35_out1 == 1'b0 ? s_602 :
              Switch69_out1);



  assign s_603 = signal1_328;

  assign signal1_329 = (CT23_out1 == 1'b0 ? s_603 :
              Switch181_out1);



  assign s_604 = signal1_329;

  assign signal1_330 = (CT21_out1 == 1'b0 ? s_604 :
              Unit_Delay114_out1);



  assign s_605 = signal1_330;

  assign signal1_331 = (CT22_out1 == 1'b0 ? s_605 :
              ILimit_b12);



  assign s_606 = signal1_331;

  assign signal1_332 = (CT43_out1 == 1'b0 ? s_606 :
              Switch107_out1_11);



  assign s_607 = signal1_332;

  assign signal1_333 = (CT3_out1 == 1'b0 ? s_607 :
              Unit_Delay46_out1);



  assign s_608 = signal1_333;

  assign signal1_334 = (CT5_out1 == 1'b0 ? s_608 :
              Switch107_out1_11);



  assign signal1_335 = signal1_334;

  assign Data_Type_Conversion8_out1_1 = {{4{signal1_335[11]}}, signal1_335};



  assign signal1_336 = (Logical_Operator6_out1 == 1'b0 ? Data_Type_Conversion8_out1_1 :
              s_218);



  assign s_609 = signal1_336;

  assign signal1_337 = (CT64_out1 == 1'b0 ? s_609 :
              signal1_32);



  assign s_610 = signal1_337;

  assign signal1_338 = (Logical_Operator5_out1 == 1'b0 ? s_610 :
              Data_Type_Conversion10_out1);



  assign signal1_339 = signal1_338;

  assign Product6_out1 = signal1_339 * signal2_156;



  assign RO21_relop1 = Product6_out1 > 40'sh00003FFFFF;



  assign Switch13_out1_3 = (RO21_relop1 == 1'b0 ? Product6_out1 :
              40'sh00003FFFFF);



  assign RO11_relop1_1 = Switch13_out1_3 < 40'shFFFFC00001;



  assign Switch14_out1_3 = (RO11_relop1_1 == 1'b0 ? Switch13_out1_3 :
              40'shFFFFC00001);



  assign Data_Type_Conversion1_out1_2 = Switch14_out1_3[23:0];



  assign Switch140_out1_3 = (CT82_out1 == 1'b0 ? Unit_Delay42_out1_2 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay421_process
      if (Rst_n == 1'b0) begin
        Unit_Delay42_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay42_out1_2 <= Switch140_out1_3;
      end
    end



  assign Bit_Slice14_out1 = Unit_Delay42_out1_2[23:4];



  assign Data_Type_S42_out1 = Bit_Slice14_out1;



  assign Data_Type_S41_out1 = {{4{Data_Type_S42_out1[19]}}, Data_Type_S42_out1};



  assign Unary_Minus32_in0 =  - ({Data_Type_S41_out1[23], Data_Type_S41_out1});
  assign Unary_Minus3_out1_3 = Unary_Minus32_in0[23:0];



  assign signal1_340 = (CT139_out1 == 1'b0 ? Unary_Minus3_out1_3 :
              Unary_Minus3_out1_3);



  assign s_611 = signal1_340;

  assign signal1_341 = (CT169_out1 == 1'b0 ? s_611 :
              Unit_Delay135_out1);



  assign s_612 = signal1_341;

  assign signal1_342 = (CT167_out1 == 1'b0 ? s_612 :
              Unit_Delay134_out1);



  assign s_613 = signal1_342;

  assign signal1_343 = (CT165_out1 == 1'b0 ? s_613 :
              Unit_Delay127_out1);



  assign s_614 = signal1_343;

  assign signal1_344 = (CT100_out1 == 1'b0 ? s_614 :
              Data_Type_S24_out1);



  assign s_615 = signal1_344;

  assign signal1_345 = (CT163_out1 == 1'b0 ? s_615 :
              Unit_Delay132_out1);



  assign s_616 = signal1_345;

  assign signal1_346 = (CT98_out1 == 1'b0 ? s_616 :
              Data_Type_S22_out1);



  assign s_617 = signal1_346;

  assign signal1_347 = (CT161_out1 == 1'b0 ? s_617 :
              Unit_Delay131_out1);



  assign s_618 = signal1_347;

  assign signal1_348 = (CT159_out1 == 1'b0 ? s_618 :
              Unit_Delay115_out1);



  assign s_619 = signal1_348;

  assign signal1_349 = (CT96_out1 == 1'b0 ? s_619 :
              Unit_Delay67_out1);



  assign s_620 = signal1_349;

  assign signal1_350 = (CT94_out1 == 1'b0 ? s_620 :
              Unit_Delay65_out1);



  assign s_621 = signal1_350;

  assign signal1_351 = (CT92_out1 == 1'b0 ? s_621 :
              Unit_Delay63_out1);



  assign s_622 = signal1_351;

  assign signal1_352 = (CT90_out1 == 1'b0 ? s_622 :
              Unit_Delay47_out1);



  assign signal1_353 = signal1_352;

  assign Add43_1 = {signal1_353[23], signal1_353};
  assign Add43_2 = {signal2_130[23], signal2_130};
  assign Add4_out1_3 = Add43_1 + Add43_2;



  assign RO301_relop1 = Add4_out1_3 > 25'sb0001111111111111111111111;



  assign Switch148_out1_1 = (RO301_relop1 == 1'b0 ? Add4_out1_3 :
              25'sb0001111111111111111111111);



  assign RO291_relop1 = Switch148_out1_1 < 25'sb1110000000000000000000001;



  assign Switch149_out1_1 = (RO291_relop1 == 1'b0 ? Switch148_out1_1 :
              25'sb1110000000000000000000001);



  assign Data_Type_Conversion25_out1 = Switch149_out1_1[23:0];



  assign From292_out1_dtc = Data_Type_Conversion25_out1;



  assign Switch150_out1_2 = (CT89_out1 == 1'b0 ? Unit_Delay69_out1 :
              From292_out1_dtc);



  always @(posedge g_clk)
    begin : Unit_Delay692_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay69_out1 <= Switch150_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay732_process
      if (Rst_n == 1'b0) begin
        Unit_Delay73_out1_1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay73_out1_1 <= Switch158_out1_1;
      end
    end



  assign Switch161_out1_1 = (Cmp13_out1 == 1'b0 ? Unit_Delay73_out1_1 :
              12'b000000000000);



  assign Bitwise_Operator6_out1_1 = Switch159_out1 | Switch161_out1_1;



  assign Product7_out1_1 = Bitwise_Operator6_out1_1 * Bitwise_Operator6_out1_1;



  assign RO311_relop1 = Product7_out1_1 < Unit_Delay69_out1;



  assign Switch158_out1_1 = (RO311_relop1 == 1'b0 ? Switch161_out1_1 :
              Bitwise_Operator6_out1_1);



  assign Data_Type_Conversion26_out1_1 = Switch158_out1_1;



  assign Switch160_out1_1 = (Cmp14_out1 == 1'b0 ? Unit_Delay74_out1 :
              Data_Type_Conversion26_out1_1);


  always @(posedge g_clk)
    begin : Unit_Delay742_process
      if (Rst_n == 1'b0) begin
        Unit_Delay74_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay74_out1 <= Switch160_out1_1;
      end
    end



  assign RO201_1_1 = {3'b0, Bit_Slice5_out1};
  assign RO201_relop1 = RO201_1_1 > Unit_Delay74_out1;



  assign Switch88_out1_2 = (Or12_out1 == 1'b0 ? RO201_relop1 :
              Data_Type_S37_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3955_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_64 <= 1'b0;
      end
      else begin
        Unit_Delay39_out1_64 <= Switch88_out1_2;
      end
    end



  assign Data_Type_S37_out1 = (Unit_Delay39_out1_64 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay3938_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_65 <= 1'b0;
      end
      else begin
        Unit_Delay39_out1_65 <= Switch107_out1_67;
      end
    end



  assign Switch107_out1_67 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_65 :
              Data_Type_S37_out1);



  assign First_VS = Switch107_out1_67;

  assign Bit_Slice4_out1_2 = Unit_Delay116_out1[18:7];



  assign Data_Type_S39_out1_1 = Bit_Slice4_out1_2;



  always @(posedge g_clk)
    begin : Unit_Delay3944_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_66 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_66 <= Switch107_out1_68;
      end
    end



  assign Switch107_out1_68 = (Logical_Operator_out1_2 == 1'b0 ? Unit_Delay39_out1_66 :
              Data_Type_S39_out1_1);



  assign Iq_Filtered_b12 = Switch107_out1_68;

  assign Lvrting = Switch234_out1;

  assign UnBlc = OR9_out1_2;

  assign CT162_out1 = Switch139_out1_1 == 7'b0010010;



  assign Switch279_out1 = (CT162_out1 == 1'b0 ? Unit_Delay133_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay133_process
      if (Rst_n == 1'b0) begin
        Unit_Delay133_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay133_out1 <= Switch279_out1;
      end
    end



  assign P_b24 = Unit_Delay133_out1;

  assign CT138_out1 = Switch139_out1_1 == 7'b0011000;



  assign Switch287_out1 = (CT138_out1 == 1'b0 ? Unit_Delay137_out1 :
              Data_Type_Conversion25_out1);



  always @(posedge g_clk)
    begin : Unit_Delay137_process
      if (Rst_n == 1'b0) begin
        Unit_Delay137_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay137_out1 <= Switch287_out1;
      end
    end



  assign Q_b24 = Unit_Delay137_out1;

  assign CT74_out1_3 = Switch139_out1 == 7'b0000101;



  assign Switch129_out1 = (CT74_out1_3 == 1'b0 ? Unit_Delay39_out1_67 :
              Data_Type_Conversion1_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay3933_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_67 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay39_out1_67 <= Switch129_out1;
      end
    end



  assign Pdc_b24 = Unit_Delay39_out1_67;

  assign PulseCarryx32_Hz = Relational_Operator3_relop1;

  assign Bit_Slice1_out1_9 = Bit_Slice5_out1_1[5:0];



  always @(posedge g_clk)
    begin : Unit_Delay525_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1_4 <= 6'b000000;
      end
      else begin
        Unit_Delay52_out1_4 <= Bit_Slice1_out1_9;
      end
    end



  assign Relational_Operator13_relop1 = Bit_Slice1_out1_9 < Unit_Delay52_out1_4;



  assign PulseCarryx64_Hz = Relational_Operator13_relop1;

  assign PulseCarryx128_Hz = Relational_Operator8_relop1;

  assign Not_out1 =  ~ InsOV_Block;



  //assign Or1_out1_8 = CtlLoop_On & Not_out1;
	assign Or1_out1_8 = CtlLoop_On;


  assign R6_relop1 = Unit_Delay2_out1 > Add8_out1;



  assign Switch93_out1_4 = (R6_relop1 == 1'b0 ? Unit_Delay56_out1_4 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay564_process
      if (Rst_n == 1'b0) begin
        Unit_Delay56_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay56_out1_4 <= Switch93_out1_4;
      end
    end



  assign Logical_Operator4_out1_2 =  ~ Unit_Delay56_out1_4;



  assign Constant11_out1_dtc = 35'sh000000000;



  assign Constant8_out1_dtc = 24'sb000000000000000000000000;



  assign Add102_1 = {Switch3_out1_4[36], Switch3_out1_4};
  assign Add102_add_temp = Add102_1 + 38'sh07FFFFFFFF;
  assign Add10_out1_1 = Add102_add_temp[34:0];



  assign Add10_out1_dtc = {2'b0, Add10_out1_1};



  assign Add93_1 = {Add_out1_2[36], Add_out1_2};
  assign Add93_sub_temp = Add93_1 - 38'sh07FFFFFFFF;
  assign Add9_out1_2 = Add93_sub_temp[34:0];



  assign Add9_out1_dtc = {2'b0, Add9_out1_2};



//  assign Bit_Slice4_out1_3 = Add1_out1_10[34:11];
  assign Bit_Slice4_out1_3 = Add1_out1_10[34:11];//xw



  assign Data_Type_Conversion4_out1_3 = Bit_Slice4_out1_3;



  assign R4_relop1 = Add5_out1_3 > Add1_out1_10;



  assign Data_Type_Conversion2_out1_3 = Unit_Delay3_out1_4[35:0];



  assign Switch4_out1_3 = (Cmp2_out1_1 == 1'b0 ? 36'sh000000000 :
              36'sh7FFFFFFFF);



  assign Add130_1 = {Switch4_out1_3[35], Switch4_out1_3};
  assign Add130_2 = {Data_Type_Conversion2_out1_3[35], Data_Type_Conversion2_out1_3};
  assign Add130_sub_temp = Add130_1 - Add130_2;
  assign Add1_out1_10 = Add130_sub_temp[34:0];



  assign Switch5_out1_2 = (CarrySync == 1'b0 ? Add5_out1_3 :
              Constant11_out1_dtc);



  always @(posedge g_clk)
    begin : Unit_Delay516_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_5 <= 35'sh000000000;
      end
      else begin
        Unit_Delay5_out1_5 <= Switch5_out1_2;
      end
    end



  assign Add53_1 = {{12{Switch8_out1_1[23]}}, Switch8_out1_1};
  assign Add53_2 = {Unit_Delay5_out1_5[34], Unit_Delay5_out1_5};
  assign Add53_add_temp = Add53_1 + Add53_2;
  assign Add5_out1_3 = Add53_add_temp[34:0];



  assign R3_relop1 = Add5_out1_3 < Add1_out1_10;



  assign Switch6_out1 = (CarrySync == 1'b0 ? Unit_Delay3_out1_4 :
              Unit_Delay7_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay316_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_4 <= 37'sh0000000000;
      end
      else begin
        Unit_Delay3_out1_4 <= Switch6_out1;
      end
    end



  assign Cmp2_out1_1 = Unit_Delay3_out1_4 >= 37'sh0400000000;



  assign Switch10_out1_3 = (Cmp2_out1_1 == 1'b0 ? R3_relop1 :
              R4_relop1);



  always @(posedge g_clk)
    begin : Unit_Delay614_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay6_out1_5 <= Switch10_out1_3;
      end
    end



  assign Cmp3_out1_1 = Unit_Delay6_out1_5 == 1'b0;



  assign Logical_Operator1_out1_4 = R6_relop1 & Cmp3_out1_1;



  assign Switch8_out1_1 = (Logical_Operator1_out1_4 == 1'b0 ? Constant8_out1_dtc :
              Data_Type_Conversion4_out1_3);

  //assign Switch8_out1_1 = Unit_Delay10_out1_4;//xw
  //assign Switch8_out1_1 = Data_Type_Conversion4_out1_3;//xw

  always @(posedge g_clk)
    begin : Unit_Delay158_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_10 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay1_out1_10 <= Switch8_out1_1;
      end
    end



  assign Add28_1 = {{8{Switch81_out1[29]}}, Switch81_out1};
  assign Add28_2 = {{14{Unit_Delay1_out1_10[23]}}, Unit_Delay1_out1_10};
  assign Add28_add_temp = Add28_1 + Add28_2;
  assign Add28_3 = {Unit_Delay7_out1_10[36], Unit_Delay7_out1_10};
  assign Add28_add_temp_1 = Add28_add_temp + Add28_3;
  assign Add_out1_2 = Add28_add_temp_1[36:0];



  assign Cmp4_out1 = Add_out1_2 > 37'sh07FFFFFFFF;



  assign Switch3_out1_4 = (Cmp4_out1 == 1'b0 ? Add_out1_2 :
              Add9_out1_dtc);



  assign Cmp5_out1 = Switch3_out1_4 >= 37'sh0000000000;



  assign Switch2_out1_1 = (Cmp5_out1 == 1'b0 ? Add10_out1_dtc :
              Switch3_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay715_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_10 <= 37'sh03FFFFFFF6;
      end
      else begin
        Unit_Delay7_out1_10 <= Switch2_out1_1;
      end
    end


  assign PWMsync = (Bit_Slice_out1<Bit_Slice_out1_r) ? 1'b1 : 1'b0;
//  assign PWMsync = (Bit_Slice_out1==12'b011111111111) ? 1'b1 : 1'b0;//xw
  assign Bit_Slice_out1 = Unit_Delay7_out1_10[34:23];
  
  reg [11:0] Bit_Slice_out1_r; 
 always @(posedge g_clk) begin
	Bit_Slice_out1_r <= Bit_Slice_out1;
end


  assign Add7_out1_7 = CarryShift_b12 + Bit_Slice_out1;



  assign Cmp1_out1_1 = Add7_out1_7 > 12'b011111111111;



  assign Add12_out1_9 = 6'b000001 + Unit_Delay41_out1_3;



  assign CT97_out1_5 = Add12_out1_9 >= 6'b100011;



  assign Switch126_out1_4 = (CT97_out1_5 == 1'b0 ? Add12_out1_9 :
              6'b000000);



  always @(posedge g_clk)
    begin : Unit_Delay418_process
      if (Rst_n == 1'b0) begin
        Unit_Delay41_out1_3 <= 6'b000000;
      end
      else begin
        Unit_Delay41_out1_3 <= Switch126_out1_4;
      end
    end



  assign CT76_out1_4 = Unit_Delay41_out1_3 == 6'b011111;



  assign CT7_out1_4 = Unit_Delay41_out1_3 == 6'b000000;



  assign CT6_out1_4 = Unit_Delay41_out1_3 == 6'b000001;



  assign CT10_out1_5 = Unit_Delay41_out1_3 == 6'b000011;



  assign CT12_out1_9 = Unit_Delay41_out1_3 == 6'b000100;



  assign CT14_out1_4 = Unit_Delay41_out1_3 == 6'b000101;



  assign CT17_out1_5 = Unit_Delay41_out1_3 == 6'b000110;



  assign CT20_out1_5 = Unit_Delay41_out1_3 == 6'b000111;



  assign CT22_out1_5 = Unit_Delay41_out1_3 == 6'b001000;



  assign CT24_out1_5 = Unit_Delay41_out1_3 == 6'b001001;



  assign CT26_out1_5 = Unit_Delay41_out1_3 == 6'b001010;



  assign CT28_out1_4 = Unit_Delay41_out1_3 == 6'b001011;



  assign CT37_out1_4 = Unit_Delay41_out1_3 == 6'b001100;



  assign CT39_out1_4 = Unit_Delay41_out1_3 == 6'b001101;



  assign CT41_out1_4 = Unit_Delay41_out1_3 == 6'b001110;



  assign CT45_out1_4 = Unit_Delay41_out1_3 == 6'b010000;



  assign CT55_out1_9 = Unit_Delay41_out1_3 == 6'b010001;



  assign CT57_out1_9 = Unit_Delay41_out1_3 == 6'b010010;



  assign CT61_out1_8 = Unit_Delay41_out1_3 == 6'b010011;



  assign CT63_out1_4 = Unit_Delay41_out1_3 == 6'b010100;



  assign CT73_out1_4 = Unit_Delay41_out1_3 == 6'b011110;



  assign CT75_out1_4 = Unit_Delay41_out1_3 == 6'b011111;



  assign CT77_out1_4 = Unit_Delay41_out1_3 == 6'b100000;



  assign CT79_out1_6 = Unit_Delay41_out1_3 == 6'b100001;



  assign CT1_out1_4 = Unit_Delay41_out1_3 == 6'b000000;



  assign Add4_out1_5 = 3'b001 + Unit_Delay43_out1_4;



  always @(posedge g_clk)
    begin : Unit_Delay434_process
      if (Rst_n == 1'b0) begin
        Unit_Delay43_out1_4 <= 3'b000;
      end
      else begin
        Unit_Delay43_out1_4 <= Add4_out1_5;
      end
    end



  assign CT13_out1_4 = Unit_Delay43_out1_4 == 3'b111;



  assign CT16_out1_5 = Unit_Delay43_out1_4 == 3'b000;



  assign CT1_out1_5 = Unit_Delay43_out1_4 == 3'b010;



  assign CT2_out1_4 = Unit_Delay43_out1_4 == 3'b011;



  assign CT3_out1_4 = Unit_Delay43_out1_4 == 3'b100;



  assign CT9_out1_5 = Unit_Delay43_out1_4 == 3'b101;



  assign CT12_out1_10 = Unit_Delay43_out1_4 == 3'b110;



  assign CT14_out1_5 = Unit_Delay43_out1_4 == 3'b111;



  assign CT6_out1_5 = Unit_Delay43_out1_4 == 3'b100;



  assign CT5_out1_4 = Unit_Delay43_out1_4 == 3'b011;



  assign CT4_out1_4 = Unit_Delay43_out1_4 == 3'b010;



  assign CT7_out1_5 = Unit_Delay43_out1_4 == 3'b000;



  assign CT2_out1_5 = Unit_Delay5_out1 == 7'b0000010;



  assign CT5_out1_5 = Unit_Delay5_out1 == 7'b0000000;



  assign CT3_out1_5 = Unit_Delay5_out1 == 7'b0000001;



  assign CT1_out1_6 = Unit_Delay5_out1 == 7'b0000010;



  assign CT34_out1_4 = Unit_Delay5_out1 == 7'b0000100;



  assign CT36_out1_4 = Unit_Delay5_out1 == 7'b0000110;



  assign CT29_out1_5 = Unit_Delay5_out1 == 7'b0000101;



  assign CT33_out1_4 = Unit_Delay5_out1 == 7'b0000011;



  assign CT30_out1_4 = Unit_Delay5_out1 == 7'b0000101;



  assign signal3_89 = (CT30_out1_4 == 1'b0 ? DC_Cmp_b_b16 :
              DC_Cmp_b_b16);



  assign s_623 = signal3_89;

  assign CT25_out1_4 = Unit_Delay5_out1 == 7'b0000011;



  assign RO313_relop1 = Product_out1 > 36'sh0003FFFFF;



  assign Constant9_out1_dtc_2 = 36'sh0003FFFFF;



  assign Switch12_out1_4 = (RO313_relop1 == 1'b0 ? Product_out1 :
              Constant9_out1_dtc_2);



  assign RO214_relop1 = Switch12_out1_4 < 36'shFFFC00001;



  assign Constant5_out1_dtc = 36'shFFFC00001;



  assign Switch11_out1_1 = (RO214_relop1 == 1'b0 ? Switch12_out1_4 :
              Constant5_out1_dtc);



  assign Data_Type_Conversion2_out1_4 = Switch11_out1_1[23:0];



  assign Switch38_out1_3 = (CT25_out1_4 == 1'b0 ? Unit_Delay12_out1_4 :
              Data_Type_Conversion2_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1212_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay12_out1_4 <= Switch38_out1_3;
      end
    end



  assign Bit_Slice3_out1_8 = Unit_Delay12_out1_4[23:12];



  assign Data_Type_S3_out1_3 = Bit_Slice3_out1_8;



  assign Data_Type_S13_out1_6 = {{6{Data_Type_S3_out1_3[11]}}, Data_Type_S3_out1_3};



  assign signal1_354 = (CT30_out1_4 == 1'b0 ? Data_Type_S13_out1_6 :
              Data_Type_S13_out1_6);



  assign s_624 = signal1_354;

  assign CT21_out1_4 = Unit_Delay5_out1 == 7'b0000001;



  assign Switch32_out1_2 = (CT21_out1_4 == 1'b0 ? Unit_Delay10_out1_4 :
              Data_Type_Conversion2_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1012_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay10_out1_4 <= Switch32_out1_2;
      end
    end



  assign Bit_Slice4_out1_4 = Unit_Delay10_out1_4[23:12];



  assign Data_Type_S5_out1_3 = Bit_Slice4_out1_4;



  assign Data_Type_S7_out1_3 = {{6{Data_Type_S5_out1_3[11]}}, Data_Type_S5_out1_3};



  assign signal3_90 = (CT33_out1_4 == 1'b0 ? s_623 :
              DC_Cmp_a_b16);



  assign signal3_91 = signal3_90;

  assign signal3_92 = signal3_91;

  assign signal1_355 = (CT33_out1_4 == 1'b0 ? s_624 :
              Data_Type_S7_out1_3);



  assign signal1_356 = signal1_355;

  assign signal1_357 = signal1_356;

  assign Add62_1 = {{3{signal3_92[15]}}, signal3_92};
  assign Add62_2 = {signal1_357[17], signal1_357};
  assign Add6_out1_2 = Add62_1 + Add62_2;



  assign signal4_15 = (CT30_out1_4 == 1'b0 ? DCCmp_UpLmt_b16 :
              DCCmp_UpLmt_b16);



  assign s_625 = signal4_15;

  assign signal4_16 = (CT33_out1_4 == 1'b0 ? s_625 :
              DCCmp_UpLmt_b16);



  assign signal4_17 = signal4_16;

  assign signal4_18 = signal4_17;

  assign RO53_1_1 = {{3{signal4_18[15]}}, signal4_18};
  assign RO53_relop1 = Add6_out1_2 > RO53_1_1;



  assign signal4_dtc_2 = {{3{signal4_18[15]}}, signal4_18};



  assign Switch22_out1_2 = (RO53_relop1 == 1'b0 ? Add6_out1_2 :
              signal4_dtc_2);



  assign signal5_15 = (CT30_out1_4 == 1'b0 ? DCCmp_LowLmt_b16 :
              DCCmp_LowLmt_b16);



  assign s_626 = signal5_15;

  assign signal5_16 = (CT33_out1_4 == 1'b0 ? s_626 :
              DCCmp_LowLmt_b16);



  assign signal5_17 = signal5_16;

  assign signal5_18 = signal5_17;

  assign RO91_1_1 = {{3{signal5_18[15]}}, signal5_18};
  assign RO91_relop1 = Switch22_out1_2 < RO91_1_1;



  assign Switch22_out1_dtc = Switch22_out1_2[15:0];



  assign Switch23_out1_1 = (RO91_relop1 == 1'b0 ? Switch22_out1_dtc :
              signal5_18);



  assign CT123_out1_3 = Unit_Delay5_out1 == 7'b0000000;



  assign Switch124_out1_2 = (Pulse_4096Hz == 1'b0 ? Unit_Delay52_out1_5 :
              1'b1);



  assign Switch123_out1_5 = (CT123_out1_3 == 1'b0 ? Switch124_out1_2 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay524_process
      if (Rst_n == 1'b0) begin
        Unit_Delay52_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay52_out1_5 <= Switch123_out1_5;
      end
    end



  assign Or1_out1_9 = Pulse_4096Hz | Unit_Delay52_out1_5;



  always @(posedge g_clk)
    begin : Unit_Delay534_process
      if (Rst_n == 1'b0) begin
        Unit_Delay53_out1_5 <= 1'b0;
      end
      else begin
        Unit_Delay53_out1_5 <= Switch125_out1_3;
      end
    end



  assign Switch125_out1_3 = (CT123_out1_3 == 1'b0 ? Unit_Delay53_out1_5 :
              Or1_out1_9);



  assign CT27_out1_4 = Unit_Delay5_out1 == 7'b0000100;



  assign Switch40_out1_2 = (CT27_out1_4 == 1'b0 ? Unit_Delay13_out1_4 :
              Data_Type_Conversion2_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1312_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay13_out1_4 <= Switch40_out1_2;
      end
    end



  assign signal2_354 = (CT30_out1_4 == 1'b0 ? Unit_Delay13_out1_4 :
              Unit_Delay13_out1_4);



  assign s_627 = signal2_354;

  assign CT23_out1_4 = Unit_Delay5_out1 == 7'b0000010;



  assign Switch34_out1_2 = (CT23_out1_4 == 1'b0 ? Unit_Delay11_out1_4 :
              Data_Type_Conversion2_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1112_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1_4 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay11_out1_4 <= Switch34_out1_2;
      end
    end



  assign switch_compare_1_21 = Switch125_out1_3 > 1'b0;



  assign signal2_355 = (CT33_out1_4 == 1'b0 ? s_627 :
              Unit_Delay11_out1_4);



  assign signal2_356 = signal2_355;

  assign signal2_357 = signal2_356;

  assign Switch37_out1_3 = (switch_compare_1_21 == 1'b0 ? 24'sb000000000000000000000000 :
              signal2_357);



  assign CT28_out1_5 = Unit_Delay5_out1 == 7'b0000101;



  assign CT31_out1_4 = Unit_Delay5_out1 == 7'b0000011;



  assign Add27_1 = {signal4_18[15], signal4_18};
  assign Add27_2 = {Switch23_out1_1[15], Switch23_out1_1};
  assign Add2_out1_6 = Add27_1 - Add27_2;



  assign Bit_Concat2_out1_1 = {Add2_out1_6, 21'b000000000000000000000};



  assign Data_Type_S11_out1_7 = Bit_Concat2_out1_1;



  assign signal7 = (CT30_out1_4 == 1'b0 ? Data_Type_S11_out1_7 :
              Data_Type_S11_out1_7);



  assign s_628 = signal7;

  assign signal7_1 = (CT33_out1_4 == 1'b0 ? s_628 :
              Data_Type_S11_out1_7);



  assign signal7_2 = signal7_1;

  assign signal7_3 = signal7_2;

  assign signal7_dtc = {signal7_3[37], signal7_3};



  assign Add129_1 = {signal5_18[15], signal5_18};
  assign Add129_2 = {Switch23_out1_1[15], Switch23_out1_1};
  assign Add1_out1_11 = Add129_1 - Add129_2;



  assign Bit_Concat4_out1_1 = {Add1_out1_11, 21'b000000000000000000000};



  assign Data_Type_S10_out1_3 = Bit_Concat4_out1_1;



  assign signal8 = (CT30_out1_4 == 1'b0 ? Data_Type_S10_out1_3 :
              Data_Type_S10_out1_3);



  assign s_629 = signal8;

  assign signal8_1 = (CT33_out1_4 == 1'b0 ? s_629 :
              Data_Type_S10_out1_3);



  assign signal8_2 = signal8_1;

  assign signal8_3 = signal8_2;

  assign Switch26_out1_dtc = Switch26_out1_2[37:0];



  assign Switch48_out1_3 = (CT31_out1_4 == 1'b0 ? Unit_Delay16_out1_4 :
              Switch36_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay164_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1_4 <= 38'sh0000000000;
      end
      else begin
        Unit_Delay16_out1_4 <= Switch48_out1_3;
      end
    end



  assign Switch45_out1_2 = (CT28_out1_5 == 1'b0 ? Unit_Delay14_out1_4 :
              Switch36_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1412_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1_4 <= 38'sh0000000000;
      end
      else begin
        Unit_Delay14_out1_4 <= Switch45_out1_2;
      end
    end



  assign signal6_14 = (CT30_out1_4 == 1'b0 ? Unit_Delay14_out1_4 :
              Unit_Delay14_out1_4);



  assign s_630 = signal6_14;

  assign signal6_15 = (CT33_out1_4 == 1'b0 ? s_630 :
              Unit_Delay16_out1_4);



  assign signal6_16 = signal6_15;

  assign signal6_17 = signal6_16;

  assign Add92_1 = {{15{Switch37_out1_3[23]}}, Switch37_out1_3};
  assign Add92_2 = {signal6_17[37], signal6_17};
  assign Add9_out1_3 = Add92_1 + Add92_2;



  assign RO101_1_2 = {signal7_3[37], signal7_3};
  assign RO101_relop1_1 = Add9_out1_3 > RO101_1_2;



  assign Switch26_out1_2 = (RO101_relop1_1 == 1'b0 ? Add9_out1_3 :
              signal7_dtc);



  assign RO114_1_1 = {signal8_3[37], signal8_3};
  assign RO114_relop1 = Switch26_out1_2 < RO114_1_1;



  assign Switch36_out1_1 = (RO114_relop1 == 1'b0 ? Switch26_out1_dtc :
              signal8_3);



  assign Bit_Slice5_out1_4 = Switch36_out1_1[37:21];



  assign Data_Type_S12_out1_7 = Bit_Slice5_out1_4;



  assign Data_Type_S8_out1_2 = {{7{Data_Type_S12_out1_7[16]}}, Data_Type_S12_out1_7};



  assign signal9 = (CT30_out1_4 == 1'b0 ? Data_Type_S8_out1_2 :
              Data_Type_S8_out1_2);



  assign s_631 = signal9;

  assign signal9_1 = (CT33_out1_4 == 1'b0 ? s_631 :
              Data_Type_S8_out1_2);



  assign signal9_2 = signal9_1;

  assign signal9_3 = signal9_2;

  assign Add101_1 = {{9{Switch23_out1_1[15]}}, Switch23_out1_1};
  assign Add101_2 = {signal9_3[23], signal9_3};
  assign Add101_add_temp = Add101_1 + Add101_2;
  assign Add10_out1_2 = {Add101_add_temp[24], Add101_add_temp};



  assign Switch46_out1_2 = (CT29_out1_5 == 1'b0 ? Unit_Delay15_out1_4 :
              Add10_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay157_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1_4 <= 26'sb00000000000000000000000000;
      end
      else begin
        Unit_Delay15_out1_4 <= Switch46_out1_2;
      end
    end



  assign Data_Type_S18_out1_2 = Unit_Delay15_out1_4[11:0];



  assign signal1_358 = (CT36_out1_4 == 1'b0 ? Data_Type_S18_out1_2 :
              Data_Type_S18_out1_2);



  assign s_632 = signal1_358;

  assign CT32_out1_4 = Unit_Delay5_out1 == 7'b0000011;



  assign Switch49_out1_8 = (CT32_out1_4 == 1'b0 ? Unit_Delay17_out1_4 :
              Add10_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay174_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_4 <= 26'sb00000000000000000000000000;
      end
      else begin
        Unit_Delay17_out1_4 <= Switch49_out1_8;
      end
    end



  assign Data_Type_S17_out1_2 = Unit_Delay17_out1_4[11:0];



  assign signal1_359 = (CT34_out1_4 == 1'b0 ? s_632 :
              Data_Type_S17_out1_2);



  assign s_633 = signal1_359;

  assign signal1_360 = (CT1_out1_6 == 1'b0 ? s_633 :
              12'sb000000000000);



  assign s_634 = signal1_360;

  assign signal1_361 = (CT3_out1_5 == 1'b0 ? s_634 :
              12'sb000000000000);



  assign s_635 = signal1_361;

  assign signal1_362 = (CT5_out1_5 == 1'b0 ? s_635 :
              12'sb000000000000);



  assign signal1_363 = signal1_362;

  assign signal1_364 = signal1_363;

  assign CT4_out1_5 = Unit_Delay5_out1 == 7'b0000001;



  assign CT6_out1_6 = Unit_Delay5_out1 == 7'b0000000;



  assign CT100_out1_3 = Unit_Delay38_out1 == 7'b0000000;



  assign CT96_out1_3 = Unit_Delay38_out1 == 7'b0101100;



  assign Switch98_out1_6 = (CT96_out1_3 == 1'b0 ? Unit_Delay37_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay37_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay37_out1_4 <= Switch98_out1_6;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3915_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_68 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_68 <= Switch107_out1_69;
      end
    end



  assign Switch107_out1_69 = (CT100_out1_3 == 1'b0 ? Unit_Delay39_out1_68 :
              Unit_Delay37_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay3974_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_69 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_69 <= Switch107_out1_70;
      end
    end



  assign Switch107_out1_70 = (CT44_out1 == 1'b0 ? Unit_Delay39_out1_69 :
              Switch107_out1_69);



  assign CT95_out1_3 = Unit_Delay38_out1 == 7'b0101010;



  assign Switch97_out1_6 = (CT95_out1_3 == 1'b0 ? Unit_Delay36_out1_4 :
              Data_Type_Conversion2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay36_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay36_out1_4 <= Switch97_out1_6;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3914_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_70 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_70 <= Switch107_out1_71;
      end
    end



  assign Switch107_out1_71 = (CT100_out1_3 == 1'b0 ? Unit_Delay39_out1_70 :
              Unit_Delay36_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay3973_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_71 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_71 <= Switch107_out1_72;
      end
    end



  assign Switch107_out1_72 = (CT44_out1 == 1'b0 ? Unit_Delay39_out1_71 :
              Switch107_out1_71);



  always @(posedge g_clk)
    begin : Unit_Delay3913_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_72 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_72 <= Switch107_out1_73;
      end
    end



  assign Switch107_out1_73 = (CT100_out1_3 == 1'b0 ? Unit_Delay39_out1_72 :
              Unit_Delay34_out1_7);



  always @(posedge g_clk)
    begin : Unit_Delay3972_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_73 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_73 <= Switch107_out1_74;
      end
    end



  assign Switch107_out1_74 = (CT44_out1 == 1'b0 ? Unit_Delay39_out1_73 :
              Switch107_out1_73);



  assign Constant27_out1_dtc = 13'sb0011111111111;



  assign Constant26_out1_dtc_1 = 13'sb1100000000001;



  assign Switch7_out1_3 = (CT6_out1_6 == 1'b0 ? Unit_Delay3_out1_5 :
              Data_Type_Conversion6_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay315_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1_5 <= Switch7_out1_3;
      end
    end



  assign Switch5_out1_3 = (CT4_out1_5 == 1'b0 ? Unit_Delay2_out1_5 :
              Data_Type_Conversion6_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay216_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1_5 <= Switch5_out1_3;
      end
    end



  assign signal2_358 = (CT36_out1_4 == 1'b0 ? Unit_Delay2_out1_5 :
              Unit_Delay2_out1_5);



  assign s_636 = signal2_358;

  assign signal2_359 = (CT34_out1_4 == 1'b0 ? s_636 :
              Unit_Delay3_out1_5);



  assign s_637 = signal2_359;

  assign signal2_360 = (CT1_out1_6 == 1'b0 ? s_637 :
              Switch107_out1_70);



  assign s_638 = signal2_360;

  assign signal2_361 = (CT3_out1_5 == 1'b0 ? s_638 :
              Switch107_out1_72);



  assign s_639 = signal2_361;

  assign signal2_362 = (CT5_out1_5 == 1'b0 ? s_639 :
              Switch107_out1_74);



  assign signal2_363 = signal2_362;

  assign signal2_364 = signal2_363;

  assign Add26_1 = {signal1_364[11], signal1_364};
  assign Add26_2 = {signal2_364[11], signal2_364};
  assign Add_out1_3 = Add26_1 + Add26_2;



  assign RO142_relop1 = Add_out1_3 > 13'sb0011111111111;



  assign Switch55_out1_1 = (RO142_relop1 == 1'b0 ? Add_out1_3 :
              Constant27_out1_dtc);



  assign RO132_relop1 = Switch55_out1_1 < 13'sb1100000000001;



  assign Switch54_out1_3 = (RO132_relop1 == 1'b0 ? Switch55_out1_1 :
              Constant26_out1_dtc_1);



  assign Data_Type_Conversion6_out1_2 = Switch54_out1_3[11:0];



  assign Switch3_out1_5 = (CT2_out1_5 == 1'b0 ? Unit_Delay1_out1_11 :
              Data_Type_Conversion6_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay156_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_11 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_11 <= Switch3_out1_5;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3980_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_74 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_74 <= Switch107_out1_75;
      end
    end



  assign Switch107_out1_75 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_74 :
              Unit_Delay1_out1_11);



  assign CT37_out1_5 = Unit_Delay5_out1 == 7'b0000110;



  assign Switch52_out1_3 = (CT37_out1_5 == 1'b0 ? Unit_Delay19_out1_4 :
              Data_Type_Conversion6_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay194_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1_4 <= Switch52_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3976_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_75 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_75 <= Switch107_out1_76;
      end
    end



  assign Switch107_out1_76 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_75 :
              Unit_Delay19_out1_4);



  assign CT35_out1_4 = Unit_Delay5_out1 == 7'b0000100;



  assign Switch50_out1_2 = (CT35_out1_4 == 1'b0 ? Unit_Delay18_out1_4 :
              Data_Type_Conversion6_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay184_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay18_out1_4 <= Switch50_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3975_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_76 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_76 <= Switch107_out1_77;
      end
    end



  assign Switch107_out1_77 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_76 :
              Unit_Delay18_out1_4);



  assign R0_relop1 = Switch107_out1_77 > Switch107_out1_76;



  assign Switch_out1 = (R0_relop1 == 1'b0 ? Switch107_out1_76 :
              Switch107_out1_77);



  assign R1_relop1 = Switch_out1 > Switch107_out1_75;



  assign Switch1_out1_5 = (R1_relop1 == 1'b0 ? Switch107_out1_75 :
              Switch_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3979_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_77 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_77 <= Switch107_out1_78;
      end
    end



  assign Switch107_out1_78 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_77 :
              Ic_b12);



  assign CT21_out1_5 = Switch107_out1_78 >= 12'sb000000000000;



  assign Unary_Minus62_in0 =  - ({DeadTmCp_b12[11], DeadTmCp_b12});
  assign Unary_Minus6_out1_2 = Unary_Minus62_in0[11:0];



  assign Switch27_out1_3 = (CT21_out1_5 == 1'b0 ? Unary_Minus6_out1_2 :
              DeadTmCp_b12);



  assign signal2_365 = (CT14_out1_5 == 1'b0 ? Switch27_out1_3 :
              Switch27_out1_3);



  assign s_640 = signal2_365;

  always @(posedge g_clk)
    begin : Unit_Delay3978_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_78 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_78 <= Switch107_out1_79;
      end
    end



  assign Switch107_out1_79 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_78 :
              Ib_b12);



  assign CT20_out1_6 = Switch107_out1_79 >= 12'sb000000000000;



  assign Unary_Minus52_in0 =  - ({DeadTmCp_b12[11], DeadTmCp_b12});
  assign Unary_Minus5_out1_2 = Unary_Minus52_in0[11:0];



  assign Switch26_out1_3 = (CT20_out1_6 == 1'b0 ? Unary_Minus5_out1_2 :
              DeadTmCp_b12);



  assign signal2_366 = (CT12_out1_10 == 1'b0 ? s_640 :
              Switch26_out1_3);



  assign s_641 = signal2_366;

  always @(posedge g_clk)
    begin : Unit_Delay3977_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_79 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_79 <= Switch107_out1_80;
      end
    end



  assign Switch107_out1_80 = (CT7_out1_5 == 1'b0 ? Unit_Delay39_out1_79 :
              Ia_b12);



  assign CT8_out1_4 = Switch107_out1_80 >= 12'sb000000000000;



  assign Unary_Minus113_in0 =  - ({DeadTmCp_b12[11], DeadTmCp_b12});
  assign Unary_Minus1_out1_4 = Unary_Minus113_in0[11:0];



  assign Switch12_out1_5 = (CT8_out1_4 == 1'b0 ? Unary_Minus1_out1_4 :
              DeadTmCp_b12);



  assign signal2_367 = (CT9_out1_5 == 1'b0 ? s_641 :
              Switch12_out1_5);



  assign s_642 = signal2_367;

  assign CT17_out1_6 = Unit_Delay43_out1_4 == 3'b000;



  assign R2_relop1 = Switch107_out1_77 < Switch107_out1_76;



  assign Switch2_out1_2 = (R2_relop1 == 1'b0 ? Switch107_out1_76 :
              Switch107_out1_77);



  assign R31_relop1 = Switch2_out1_2 < Switch107_out1_75;



  assign Switch3_out1_6 = (R31_relop1 == 1'b0 ? Switch107_out1_75 :
              Switch2_out1_2);



  assign Bit_Slice3_out1_9 = Add3_out1_6[12:1];



  assign Data_Type_Conversion4_out1_4 = Bit_Slice3_out1_9;



  assign Switch18_out1_2 = (CT17_out1_6 == 1'b0 ? Unit_Delay4_out1_4 :
              Data_Type_Conversion4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay416_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1_4 <= Switch18_out1_2;
      end
    end



  assign Unary_Minus20_in0 =  - ({Unit_Delay4_out1_4[11], Unit_Delay4_out1_4});
  assign Unary_Minus_out1_2 = Unary_Minus20_in0[11:0];



  assign signal2_368 = (CT3_out1_4 == 1'b0 ? s_642 :
              Unary_Minus_out1_2);



  assign s_643 = signal2_368;

  assign signal2_369 = (CT2_out1_4 == 1'b0 ? s_643 :
              Unary_Minus_out1_2);



  assign s_644 = signal2_369;

  assign signal2_370 = (CT1_out1_5 == 1'b0 ? s_644 :
              Unary_Minus_out1_2);



  assign s_645 = signal2_370;

  assign signal2_371 = (CT16_out1_5 == 1'b0 ? s_645 :
              Switch3_out1_6);



  assign signal2_372 = signal2_371;

  assign Switch7_out1_4 = (CT4_out1_4 == 1'b0 ? Unit_Delay1_out1_12 :
              Data_Type_Conversion5_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay1115_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_12 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_12 <= Switch7_out1_4;
      end
    end



  assign Switch8_out1_2 = (CT5_out1_4 == 1'b0 ? Unit_Delay2_out1_6 :
              Data_Type_Conversion5_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay236_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1_6 <= Switch8_out1_2;
      end
    end



  assign Product14_mul_temp = Add3_out1_6 * 13'sb0100100111100;
  assign Product1_out1_2 = Product14_mul_temp[24:0];



  assign Bit_Slice2_out1_8 = Product1_out1_2[24:11];



  assign Data_Type_Conversion1_out1_4 = Bit_Slice2_out1_8;



  assign RO315_relop1 = Data_Type_Conversion1_out1_4 > 14'sb00011111111111;



  assign Switch14_out1_4 = (RO315_relop1 == 1'b0 ? Data_Type_Conversion1_out1_4 :
              14'sb00011111111111);



  assign RO216_relop1 = Switch14_out1_4 < 14'sb11100000000001;



  assign Switch13_out1_4 = (RO216_relop1 == 1'b0 ? Switch14_out1_4 :
              14'sb11100000000001);



  assign Data_Type_Conversion5_out1_2 = Switch13_out1_4[11:0];



  assign Switch9_out1_3 = (CT6_out1_5 == 1'b0 ? Unit_Delay3_out1_6 :
              Data_Type_Conversion5_out1_2);



  always @(posedge g_clk)
    begin : Unit_Delay317_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1_6 <= Switch9_out1_3;
      end
    end



  assign signal1_365 = (CT14_out1_5 == 1'b0 ? Unit_Delay3_out1_6 :
              Unit_Delay3_out1_6);



  assign s_646 = signal1_365;

  assign signal1_366 = (CT12_out1_10 == 1'b0 ? s_646 :
              Unit_Delay2_out1_6);



  assign s_647 = signal1_366;

  assign signal1_367 = (CT9_out1_5 == 1'b0 ? s_647 :
              Unit_Delay1_out1_12);



  assign s_648 = signal1_367;

  assign signal1_368 = (CT3_out1_4 == 1'b0 ? s_648 :
              Switch107_out1_75);



  assign s_649 = signal1_368;

  assign signal1_369 = (CT2_out1_4 == 1'b0 ? s_649 :
              Switch107_out1_76);



  assign s_650 = signal1_369;

  assign signal1_370 = (CT1_out1_5 == 1'b0 ? s_650 :
              Switch107_out1_77);



  assign s_651 = signal1_370;

  assign signal1_371 = (CT16_out1_5 == 1'b0 ? s_651 :
              Switch1_out1_5);



  assign signal1_372 = signal1_371;

  assign Add36_1 = {signal1_372[11], signal1_372};
  assign Add36_2 = {signal2_372[11], signal2_372};
  assign Add3_out1_6 = Add36_1 + Add36_2;



  assign RO412_relop1 = Add3_out1_6 > 13'sb0011111111111;



  assign Switch11_out1_2 = (RO412_relop1 == 1'b0 ? Add3_out1_6 :
              13'sb0011111111111);



  assign RO116_relop1 = Switch11_out1_2 < 13'sb1100000000001;



  assign Switch10_out1_4 = (RO116_relop1 == 1'b0 ? Switch11_out1_2 :
              13'sb1100000000001);



  assign Data_Type_Conversion2_out1_5 = Switch10_out1_4[11:0];



  assign Switch22_out1_3 = (CT13_out1_4 == 1'b0 ? Unit_Delay8_out1_5 :
              Data_Type_Conversion2_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay813_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_5 <= Switch22_out1_3;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3983_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_80 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_80 <= Switch107_out1_81;
      end
    end



  //assign Switch107_out1_81 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_80 :
              //Unit_Delay8_out1_5);
  assign Switch107_out1_81 = (((CT1_out1_4 == 1'b0) &PwmLoadPluse) ? Unit_Delay39_out1_80 :
              Unit_Delay8_out1_5); //MC


  assign signal1_373 = (CT79_out1_6 == 1'b0 ? Switch107_out1_81 :
              Switch107_out1_81);



  assign s_652 = signal1_373;

  assign CT11_out1_5 = Unit_Delay43_out1_4 == 3'b110;



  assign Switch20_out1_9 = (CT11_out1_5 == 1'b0 ? Unit_Delay7_out1_11 :
              Data_Type_Conversion2_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay716_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_11 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1_11 <= Switch20_out1_9;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3982_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_81 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_81 <= Switch107_out1_82;
      end
    end



  //assign Switch107_out1_82 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_81 :
              //Unit_Delay7_out1_11);
  assign Switch107_out1_82 = (((CT1_out1_4 == 1'b0) &PwmLoadPluse) ? Unit_Delay39_out1_81 :
              Unit_Delay7_out1_11); //MB


  assign signal1_374 = (CT77_out1_4 == 1'b0 ? s_652 :
              Switch107_out1_82);



  assign s_653 = signal1_374;

  assign CT10_out1_6 = Unit_Delay43_out1_4 == 3'b101;



  assign Switch16_out1_2 = (CT10_out1_6 == 1'b0 ? Unit_Delay6_out1_6 :
              Data_Type_Conversion2_out1_5);



  always @(posedge g_clk)
    begin : Unit_Delay616_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1_6 <= Switch16_out1_2;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay3981_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_82 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_82 <= Switch107_out1_83;
      end
    end



  //assign Switch107_out1_83 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_82 :
              //Unit_Delay6_out1_6);
  assign Switch107_out1_83 = (((CT1_out1_4 == 1'b0) &PwmLoadPluse) ? Unit_Delay39_out1_82 :
              Unit_Delay6_out1_6); //MA


  assign signal1_375 = (CT75_out1_4 == 1'b0 ? s_653 :
              Switch107_out1_83);



  assign s_654 = signal1_375;

  assign CT72_out1_4 = Unit_Delay41_out1_3 == 6'b011101;



  assign CT59_out1_8 = Unit_Delay41_out1_3 == 6'b010101;



  assign CT71_out1_6 = Unit_Delay41_out1_3 == 6'b011101;



  assign CT21_out1_6 = Unit_Delay41_out1_3 == 6'b000111;



  assign Compare_To_Constant5_out1_1 = Unit_Delay41_out1_3 == 6'b011100;



  assign Compare_To_Constant3_out1_1 = Unit_Delay41_out1_3 == 6'b001000;



  always @(posedge g_clk)
    begin : Unit_Delay518_process
      if (Rst_n == 1'b0) begin
        Unit_Delay51_out1_4 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay51_out1_4 <= Switch84_out1_7;
      end
    end



  assign bit_shift_out1_2 = Unit_Delay51_out1_4 >> 8'd1;



  assign Switch84_out1_7 = (Compare_To_Constant3_out1_1 == 1'b0 ? bit_shift_out1_2 :
              24'b001000000000000000000000);



  assign Compare_To_Constant4_out1_1 = Unit_Delay41_out1_3 == 6'b001000;



  assign Compare_To_Constant9_out1_1 = Unit_Delay41_out1_3 == 6'b010100;



  assign Compare_To_Constant7_out1_1 = Unit_Delay41_out1_3 == 6'b000000;



  always @(posedge g_clk)
    begin : Unit_Delay294_process
      if (Rst_n == 1'b0) begin
        Unit_Delay29_out1_4 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay29_out1_4 <= Switch58_out1_3;
      end
    end



  assign bit_shift1_out1_2 = Unit_Delay29_out1_4 >> 8'd1;



  assign Switch58_out1_3 = (Compare_To_Constant7_out1_1 == 1'b0 ? bit_shift1_out1_2 :
              24'b001000000000000000000000);



  assign Compare_To_Constant8_out1_1 = Unit_Delay41_out1_3 == 6'b000000;



  always @(posedge g_clk)
    begin : Unit_Delay284_process
      if (Rst_n == 1'b0) begin
        Unit_Delay28_out1_4 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay28_out1_4 <= Switch59_out1_4;
      end
    end



  assign Switch57_out1_1 = (Compare_To_Constant8_out1_1 == 1'b0 ? Unit_Delay28_out1_4 :
              24'b000000000000000000000000);



  assign Bitwise_Operator2_out1_1 = Switch58_out1_3 | Switch57_out1_1;



  assign Product141_1 = {1'b0, Bitwise_Operator2_out1_1};
  assign Product141_mul_temp = Product141_1 * Pm2M0m_co_b12;
  assign Product14_out1 = Product141_mul_temp[35:0];



  assign Compare_To_Constant6_out1_1 = Product14_out1 <= 36'sh0003FF001;



  assign Switch59_out1_4 = (Compare_To_Constant6_out1_1 == 1'b0 ? Switch57_out1_1 :
              Bitwise_Operator2_out1_1);



  assign Switch60_out1_3 = (Compare_To_Constant9_out1_1 == 1'b0 ? Unit_Delay27_out1_4 :
              Switch59_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay274_process
      if (Rst_n == 1'b0) begin
        Unit_Delay27_out1_4 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay27_out1_4 <= Switch60_out1_3;
      end
    end



  assign Data_Type_Conversion3_out1_4 = Unit_Delay27_out1_4;



  assign CT46_out1_4 = Unit_Delay41_out1_3 == 6'b010000;



  assign CT58_out1_8 = Unit_Delay41_out1_3 == 6'b010010;



  assign CT68_out1_6 = Unit_Delay41_out1_3 == 6'b010101;



  assign CT2_out1_6 = Unit_Delay41_out1_3 == 6'b000010;



  assign CT47_out1_4 = Unit_Delay41_out1_3 == 6'b000011;



  assign CT49_out1_5 = Unit_Delay41_out1_3 == 6'b000110;



  assign CT51_out1_9 = Unit_Delay41_out1_3 == 6'b000111;



  assign CT53_out1_4 = Unit_Delay41_out1_3 == 6'b001000;



  assign CT31_out1_5 = Unit_Delay41_out1_3 == 6'b001001;



  assign CT33_out1_5 = Unit_Delay41_out1_3 == 6'b001011;



  assign CT35_out1_5 = Unit_Delay41_out1_3 == 6'b001100;



  assign CT43_out1_4 = Unit_Delay41_out1_3 == 6'b001111;



  assign CT67_out1_4 = Unit_Delay41_out1_3 == 6'b010101;



  assign CT69_out1_4 = Unit_Delay41_out1_3 == 6'b010110;



  assign RO_relop1 = Switch107_out1_83 > Switch107_out1_82;



  assign Switch31_out1_4 = (RO_relop1 == 1'b0 ? Switch107_out1_82 :
              Switch107_out1_83);



  assign RO119_relop1 = Switch31_out1_4 > Switch107_out1_81;



  assign max1_out1 = (RO119_relop1 == 1'b0 ? Switch31_out1_4 :
              Switch107_out1_81);



  assign Switch32_out1_3 = (RO_relop1 == 1'b0 ? Switch107_out1_83 :
              Switch107_out1_82);



  assign RO218_relop1 = max1_out1 > Switch32_out1_3;



  assign mid_out1 = (RO218_relop1 == 1'b0 ? Switch32_out1_3 :
              max1_out1);



  assign CT66_out1_7 = mid_out1 >= 12'sb000000000000;



  assign CT64_out1_4 = Unit_Delay41_out1_3 == 6'b010100;



  assign CT29_out1_6 = Unit_Delay41_out1_3 == 6'b001011;



  assign Unary_Minus132_in0 =  - ({mid_out1[11], mid_out1});
  assign Unary_Minus13_out1_2 = Unary_Minus132_in0[11:0];



  assign CT65_out1_5 = mid_out1 >= 12'sb000000000000;



  assign Unary_Minus115_in0 =  - ({mid_out1[11], mid_out1});
  assign Unary_Minus11_out1_2 = Unary_Minus115_in0[11:0];



  assign CT23_out1_5 = Unit_Delay41_out1_3 == 6'b001000;



  assign CT62_out1_4 = Unit_Delay41_out1_3 == 6'b010011;



  assign CT42_out1_4 = Unit_Delay41_out1_3 == 6'b001110;



  assign CT30_out1_5 = mid_out1 >= 12'sb000000000000;



  assign CT27_out1_5 = Unit_Delay41_out1_3 == 6'b001010;



  assign CT25_out1_5 = Unit_Delay41_out1_3 == 6'b001001;



  assign Add136_add_temp = 9'b000000001 + ({8'b0, Unit_Delay7_out1_12});
  assign Add1_out1_12 = Add136_add_temp[0];



  always @(posedge g_clk)
    begin : Unit_Delay719_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_12 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1_12 <= Add1_out1_12;
      end
    end



  assign CT51_out1_10 = Unit_Delay7_out1_12 == 1'b0;



  assign CT12_out1_11 = Unit_Delay7_out1_12 == 1'b0;



  assign Switch20_out1_10 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_10 :
              1'b1);



  assign Switch17_out1_9 = (CT12_out1_11 == 1'b0 ? Switch20_out1_10 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay5413_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_10 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_10 <= Switch17_out1_9;
      end
    end



  assign Or3_out1_10 = Relational_Operator8_relop1 | Unit_Delay54_out1_10;



  always @(posedge g_clk)
    begin : Unit_Delay5512_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_8 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_8 <= Switch208_out1_7;
      end
    end



  assign Switch208_out1_7 = (CT12_out1_11 == 1'b0 ? Unit_Delay55_out1_8 :
              Or3_out1_10);



  assign CT70_out1_11 = Unit_Delay7_out1_12 == 1'b0;



  assign Or2_out1_12 = Switch208_out1_7 & CT70_out1_11;



  assign Switch83_out1_7 = (Switch208_out1_7 == 1'b0 ? 7'b0000000 :
              7'b0000001);



  assign Add11_out1_7 = Switch83_out1_7 + Unit_Delay32_out1_8;



  always @(posedge g_clk)
    begin : Unit_Delay3211_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_8 <= 7'b0000000;
      end
      else begin
        Unit_Delay32_out1_8 <= Add11_out1_7;
      end
    end



  assign Ro1010_relop1 = Unit_Delay32_out1_8 > Add11_out1_7;



  assign Switch49_out1_9 = (Ro1010_relop1 == 1'b0 ? Unit_Delay57_out1_9 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay5713_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_9 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_9 <= Switch49_out1_9;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1118_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_13 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_13 <= Switch105_out1_11;
      end
    end



  assign Switch105_out1_11 = (Or2_out1_12 == 1'b0 ? Unit_Delay1_out1_13 :
              Unit_Delay57_out1_9);



  assign switch_compare_1_22 = Switch105_out1_11 > 1'b0;



  assign CT55_out1_10 = Unit_Delay7_out1_12 == 1'b0;



  assign CT2_out1_7 = Unit_Delay7_out1_12 == 1'b1;



  assign CT1_out1_7 = Unit_Delay7_out1_12 == 1'b1;



  assign switch_compare_1_23 = Switch105_out1_11 > 1'b0;



  assign Add135_add_temp = 9'b000000001 + ({8'b0, Unit_Delay7_out1_13});
  assign Add1_out1_13 = Add135_add_temp[0];



  always @(posedge g_clk)
    begin : Unit_Delay718_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_13 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1_13 <= Add1_out1_13;
      end
    end



  assign CT51_out1_11 = Unit_Delay7_out1_13 == 1'b0;



  assign CT12_out1_12 = Unit_Delay7_out1_13 == 1'b0;



  assign Switch20_out1_11 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_11 :
              1'b1);



  assign Switch17_out1_10 = (CT12_out1_12 == 1'b0 ? Switch20_out1_11 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay5412_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_11 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_11 <= Switch17_out1_10;
      end
    end



  assign Or3_out1_11 = Relational_Operator8_relop1 | Unit_Delay54_out1_11;



  always @(posedge g_clk)
    begin : Unit_Delay5511_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_9 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_9 <= Switch208_out1_8;
      end
    end



  assign Switch208_out1_8 = (CT12_out1_12 == 1'b0 ? Unit_Delay55_out1_9 :
              Or3_out1_11);



  assign CT70_out1_12 = Unit_Delay7_out1_13 == 1'b0;



  assign Or2_out1_13 = Switch208_out1_8 & CT70_out1_12;



  assign Switch83_out1_8 = (Switch208_out1_8 == 1'b0 ? 5'b00000 :
              5'b00001);



  assign Add11_out1_8 = Switch83_out1_8 + Unit_Delay32_out1_9;



  always @(posedge g_clk)
    begin : Unit_Delay3210_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_9 <= 5'b00000;
      end
      else begin
        Unit_Delay32_out1_9 <= Add11_out1_8;
      end
    end



  assign Ro109_relop1 = Unit_Delay32_out1_9 > Add11_out1_8;



  assign Switch49_out1_10 = (Ro109_relop1 == 1'b0 ? Unit_Delay57_out1_10 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay5712_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_10 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_10 <= Switch49_out1_10;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1117_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_14 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_14 <= Switch105_out1_12;
      end
    end



  assign Switch105_out1_12 = (Or2_out1_13 == 1'b0 ? Unit_Delay1_out1_14 :
              Unit_Delay57_out1_10);



  assign switch_compare_1_24 = Switch105_out1_12 > 1'b0;



  assign switch_compare_1_25 = Switch105_out1_12 > 1'b0;



  assign CT55_out1_11 = Unit_Delay7_out1_13 == 1'b0;



  assign CT9_out1_6 = Unit_Delay41_out1_3 == 6'b000001;



  assign Add12_out1_10 = Add11_out1_8 + 5'b00001;



  assign Add1114_add_temp = ({8'b0, Relational_Operator8_relop1}) + ({6'b0, Unit_Delay42_out1_3});
  assign Add11_out1_9 = Add1114_add_temp[2:0];



  always @(posedge g_clk)
    begin : Unit_Delay424_process
      if (Rst_n == 1'b0) begin
        Unit_Delay42_out1_3 <= 3'b000;
      end
      else begin
        Unit_Delay42_out1_3 <= Add11_out1_9;
      end
    end



  assign Add12_out1_11 = Add11_out1_7 + 7'b0000001;



  assign CT60_out1_8 = Unit_Delay41_out1_3 == 6'b010101;



  assign Add1_out1_14 = 2'b01 + Unit_Delay7_out1_14;



  always @(posedge g_clk)
    begin : Unit_Delay717_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_14 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1_14 <= Add1_out1_14;
      end
    end



  assign CT56_out1_8 = Unit_Delay7_out1_14 == 2'b01;



  assign CT12_out1_13 = Unit_Delay7_out1_14 == 2'b00;



  assign Switch20_out1_12 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_12 :
              1'b1);



  assign Switch17_out1_11 = (CT12_out1_13 == 1'b0 ? Switch20_out1_12 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay5411_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_12 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_12 <= Switch17_out1_11;
      end
    end



  assign Or3_out1_12 = Relational_Operator8_relop1 | Unit_Delay54_out1_12;



  always @(posedge g_clk)
    begin : Unit_Delay5510_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_10 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_10 <= Switch208_out1_9;
      end
    end



  assign Switch208_out1_9 = (CT12_out1_13 == 1'b0 ? Unit_Delay55_out1_10 :
              Or3_out1_12);



  assign CT70_out1_13 = Unit_Delay7_out1_14 == 2'b00;



  assign Or2_out1_14 = Switch208_out1_9 & CT70_out1_13;



  assign Switch83_out1_9 = (Switch208_out1_9 == 1'b0 ? 9'b000000000 :
              9'b000000001);



  assign Add11_out1_10 = Switch83_out1_9 + Unit_Delay32_out1_10;



  always @(posedge g_clk)
    begin : Unit_Delay329_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_10 <= 9'b000000000;
      end
      else begin
        Unit_Delay32_out1_10 <= Add11_out1_10;
      end
    end



  assign Ro108_relop1 = Unit_Delay32_out1_10 > Add11_out1_10;



  assign Switch49_out1_11 = (Ro108_relop1 == 1'b0 ? Unit_Delay57_out1_11 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay5711_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_11 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_11 <= Switch49_out1_11;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1116_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_15 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_15 <= Switch105_out1_13;
      end
    end



  assign Switch105_out1_13 = (Or2_out1_14 == 1'b0 ? Unit_Delay1_out1_15 :
              Unit_Delay57_out1_11);



  assign switch_compare_1_26 = Switch105_out1_13 > 1'b0;



  assign switch_compare_1_27 = Switch105_out1_13 > 1'b0;



  assign CT55_out1_12 = Unit_Delay7_out1_14 == 2'b00;



  assign CT57_out1_10 = Unit_Delay7_out1_14 == 2'b01;



  assign CT59_out1_9 = Unit_Delay7_out1_14 == 2'b10;



  assign CT61_out1_9 = Unit_Delay7_out1_14 == 2'b11;



  assign CT15_out1_4 = Unit_Delay41_out1_3 == 6'b000101;



  assign CT13_out1_5 = Unit_Delay41_out1_3 == 6'b000100;



  assign CT11_out1_6 = Unit_Delay41_out1_3 == 6'b000011;



  assign Add12_out1_12 = Add11_out1_10 + 9'b000000001;



  assign CT60_out1_9 = Unit_Delay7_out1_14 == 2'b11;



  assign CT58_out1_9 = Unit_Delay7_out1_14 == 2'b10;



  assign CT51_out1_12 = Unit_Delay7_out1_14 == 2'b00;



  assign CT70_out1_14 = Unit_Delay41_out1_3 == 6'b010110;



  assign min_out1 = (RO218_relop1 == 1'b0 ? max1_out1 :
              Switch32_out1_3);



  assign max_out1 = (RO119_relop1 == 1'b0 ? Switch107_out1_81 :
              Switch31_out1_4);



  assign CT56_out1_9 = Unit_Delay41_out1_3 == 6'b010001;



  assign CT44_out1_5 = Unit_Delay41_out1_3 == 6'b001111;



  assign Add13_add_temp = 9'b000000001 + ({8'b0, Unit_Delay7_out1_15});
  assign Add1_out1_15 = Add13_add_temp[0];



  always @(posedge g_clk)
    begin : Unit_Delay71_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_15 <= 1'b0;
      end
      else begin
        Unit_Delay7_out1_15 <= Add1_out1_15;
      end
    end



  assign CT51_out1_13 = Unit_Delay7_out1_15 == 1'b0;



  assign CT12_out1_14 = Unit_Delay7_out1_15 == 1'b0;



  assign Switch20_out1_13 = (Relational_Operator8_relop1 == 1'b0 ? Unit_Delay54_out1_13 :
              1'b1);



  assign Switch17_out1_12 = (CT12_out1_14 == 1'b0 ? Switch20_out1_13 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay541_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1_13 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1_13 <= Switch17_out1_12;
      end
    end



  assign Or3_out1_13 = Relational_Operator8_relop1 | Unit_Delay54_out1_13;



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1_11 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1_11 <= Switch208_out1_10;
      end
    end



  assign Switch208_out1_10 = (CT12_out1_14 == 1'b0 ? Unit_Delay55_out1_11 :
              Or3_out1_13);



  assign CT70_out1_15 = Unit_Delay7_out1_15 == 1'b0;



  assign Or2_out1_15 = Switch208_out1_10 & CT70_out1_15;



  assign Switch83_out1_10 = (Switch208_out1_10 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  assign Add11_out1_11 = Switch83_out1_10 + Unit_Delay32_out1_11;



  always @(posedge g_clk)
    begin : Unit_Delay321_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_11 <= 8'b00000000;
      end
      else begin
        Unit_Delay32_out1_11 <= Add11_out1_11;
      end
    end



  assign Ro10_relop1_1 = Unit_Delay32_out1_11 > Add11_out1_11;



  assign Switch49_out1_12 = (Ro10_relop1_1 == 1'b0 ? Unit_Delay57_out1_12 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_12 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_12 <= Switch49_out1_12;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay110_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_16 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_16 <= Switch105_out1_14;
      end
    end



  assign Switch105_out1_14 = (Or2_out1_15 == 1'b0 ? Unit_Delay1_out1_16 :
              Unit_Delay57_out1_12);



  assign CT55_out1_13 = Unit_Delay7_out1_15 == 1'b0;



  assign CT57_out1_11 = Unit_Delay7_out1_15 == 1'b1;



  assign signal1_376 = (CT57_out1_11 == 1'b0 ? UdcNeg_b12 :
              UdcNeg_b12);



  assign s_655 = signal1_376;

  assign switch_compare_1_28 = Switch105_out1_14 > 1'b0;



  assign signal1_377 = (CT55_out1_13 == 1'b0 ? s_655 :
              UdcPos_b12);



  assign signal1_378 = signal1_377;

  assign signal1_379 = signal1_378;

  assign Switch84_out1_8 = (switch_compare_1_28 == 1'b0 ? 12'sb000000000000 :
              signal1_379);



  assign Switch97_out1_7 = (Switch208_out1_10 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_8);



  assign Add12_out1_13 = Add11_out1_11 + 8'b00000001;



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_5   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_8),
                                                                 .wr_addr(Add11_out1_11),
                                                                 .wr_en(Switch208_out1_10),
                                                                 .rd_addr(Add12_out1_13),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_5)
                                                                 );

  assign switch_compare_1_29 = Switch105_out1_14 > 1'b0;



  assign Switch98_out1_7 = (Switch208_out1_10 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_5);



  assign Add7_stage2_1 = {{8{Switch97_out1_7[11]}}, Switch97_out1_7};
  assign Add7_stage2_2 = {{8{Switch98_out1_7[11]}}, Switch98_out1_7};
  assign Add7_op_stage2_3 = Add7_stage2_1 - Add7_stage2_2;



  assign CT56_out1_10 = Unit_Delay7_out1_15 == 1'b1;



  assign B23_out1_signal2_1 = Unit_Delay30_out1_8;

  assign B24_out1_signal2_2 = Unit_Delay33_out1_9;

  assign Switch87_out1_8 = (CT56_out1_10 == 1'b0 ? Unit_Delay33_out1_9 :
              Switch79_out1_9);



  always @(posedge g_clk)
    begin : Unit_Delay331_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_9 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay33_out1_9 <= Switch87_out1_8;
      end
    end



  assign B24_out1_signal2_3 = Unit_Delay33_out1_9;

  assign signal2_373 = (CT57_out1_11 == 1'b0 ? B24_out1_signal2_3 :
              B24_out1_signal2_2);



  assign s_656 = signal2_373;

  assign signal2_374 = (CT55_out1_13 == 1'b0 ? s_656 :
              B23_out1_signal2_1);



  assign signal2_375 = signal2_374;

  assign signal2_376 = signal2_375;

  assign Add7_stage3_1 = {signal2_376[18], signal2_376};
  assign Add7_stage3_add_temp = Add7_op_stage2_3 + Add7_stage3_1;
  assign Add7_out1_8 = Add7_stage3_add_temp[18:0];



  assign Switch79_out1_9 = (switch_compare_1_29 == 1'b0 ? 19'sb0000000000000000000 :
              Add7_out1_8);



  assign Switch80_out1_6 = (CT51_out1_13 == 1'b0 ? Unit_Delay30_out1_8 :
              Switch79_out1_9);



  always @(posedge g_clk)
    begin : Unit_Delay301_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_8 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay30_out1_8 <= Switch80_out1_6;
      end
    end



  assign Bit_Slice6_out1_9 = Unit_Delay30_out1_8[18:7];



  assign Data_Type_S11_out1_8 = Bit_Slice6_out1_9;



  always @(posedge g_clk)
    begin : Unit_Delay3987_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_83 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_83 <= Switch107_out1_84;
      end
    end



  assign Switch107_out1_84 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_83 :
              Data_Type_S11_out1_8);



  assign CT38_out1_4 = Unit_Delay41_out1_3 == 6'b001100;



  assign CT32_out1_5 = Unit_Delay41_out1_3 == 6'b001001;



  assign CT18_out1_4 = Unit_Delay41_out1_3 == 6'b000110;



  always @(posedge g_clk)
    begin : Unit_Delay3986_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_84 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_84 <= Switch107_out1_85;
      end
    end



  assign Switch107_out1_85 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_84 :
              Ic_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3985_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_85 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_85 <= Switch107_out1_86;
      end
    end



  assign Switch107_out1_86 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_85 :
              Ib_b12);



  always @(posedge g_clk)
    begin : Unit_Delay3984_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_86 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_86 <= Switch107_out1_87;
      end
    end



  assign Switch107_out1_87 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_86 :
              Ia_b12);



  assign CT8_out1_5 = Unit_Delay41_out1_3 == 6'b000000;



  assign CT74_out1_4 = Unit_Delay41_out1_3 == 6'b011110;



  assign CT48_out1_4 = Unit_Delay41_out1_3 == 6'b000011;



  assign Unary_Minus43_in0 =  - ({mid_out1[11], mid_out1});
  assign Unary_Minus4_out1_3 = Unary_Minus43_in0[11:0];



  assign CT40_out1_4 = Unit_Delay41_out1_3 == 6'b001101;



  assign Bit_Slice1_out1_10 = Unit_Delay33_out1_9[18:7];



  assign Data_Type_S1_out1_2 = Bit_Slice1_out1_10;



  always @(posedge g_clk)
    begin : Unit_Delay3988_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_87 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay39_out1_87 <= Switch107_out1_88;
      end
    end



  assign Switch107_out1_88 = (CT1_out1_4 == 1'b0 ? Unit_Delay39_out1_87 :
              Data_Type_S1_out1_2);



  assign Unary_Minus24_in0 =  - ({Switch107_out1_88[11], Switch107_out1_88});
  assign Unary_Minus2_out1_4 = Unary_Minus24_in0[11:0];



  assign CT36_out1_5 = Unit_Delay41_out1_3 == 6'b001100;



  assign CT34_out1_5 = Unit_Delay41_out1_3 == 6'b001011;



  assign Unary_Minus92_in0 =  - ({mid_out1[11], mid_out1});
  assign Unary_Minus9_out1_2 = Unary_Minus92_in0[11:0];



  assign Unary_Minus82_in0 =  - ({max_out1[11], max_out1});
  assign Unary_Minus8_out1_2 = Unary_Minus82_in0[11:0];



  assign CT16_out1_6 = mid_out1 >= 12'sb000000000000;



  assign CT5_out1_6 = Unit_Delay41_out1_3 == 6'b000010;



  assign Switch3_out1_7 = (CT5_out1_6 == 1'b0 ? Unit_Delay1_out1_17 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1119_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_17 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay1_out1_17 <= Switch3_out1_7;
      end
    end



  assign Unary_Minus114_in0 =  - ({Unit_Delay1_out1_17[11], Unit_Delay1_out1_17});
  assign Unary_Minus1_out1_5 = Unary_Minus114_in0[11:0];



  assign Unary_Minus63_in0 =  - ({mid1_out1[11], mid1_out1});
  assign Unary_Minus6_out1_3 = Unary_Minus63_in0[11:0];



  assign Switch12_out1_6 = (CT16_out1_6 == 1'b0 ? mid1_out1 :
              Unary_Minus6_out1_3);



  assign Switch31_out1_5 = (CT34_out1_5 == 1'b0 ? Unit_Delay14_out1_5 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1413_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay14_out1_5 <= Switch31_out1_5;
      end
    end



  assign Switch33_out1_2 = (CT36_out1_5 == 1'b0 ? Unit_Delay15_out1_5 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1510_process
      if (Rst_n == 1'b0) begin
        Unit_Delay15_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay15_out1_5 <= Switch33_out1_2;
      end
    end



  assign Switch38_out1_4 = (CT40_out1_4 == 1'b0 ? Unit_Delay17_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1710_process
      if (Rst_n == 1'b0) begin
        Unit_Delay17_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay17_out1_5 <= Switch38_out1_4;
      end
    end



  assign Unary_Minus34_in0 =  - ({Unit_Delay17_out1_5[11], Unit_Delay17_out1_5});
  assign Unary_Minus3_out1_4 = Unary_Minus34_in0[11:0];



  assign mid3_out1 = (N3thRestrain_En == 1'b0 ? 12'sb000000000000 :
              Unary_Minus3_out1_4);



  assign Abs3_y = (Data_Type_S12_out1_8 < 12'sb000000000000 ?  - ({Data_Type_S12_out1_8[11], Data_Type_S12_out1_8}) :
              {Data_Type_S12_out1_8[11], Data_Type_S12_out1_8});
  assign Abs3_out1 = Abs3_y[11:0];



  assign Abs4_y = (Data_Type_S13_out1_7 < 12'sb000000000000 ?  - ({Data_Type_S13_out1_7[11], Data_Type_S13_out1_7}) :
              {Data_Type_S13_out1_7[11], Data_Type_S13_out1_7});
  assign Abs4_out1 = Abs4_y[11:0];



  assign Bit_Slice2_out1_9 = Abs4_out1[11:1];



  assign Data_Type_Conversion2_out1_6 = Bit_Slice2_out1_9;



  assign Data_Type_Conversion8_out1_2 = {Data_Type_Conversion2_out1_6[10], Data_Type_Conversion2_out1_6};



  assign Switch46_out1_3 = (CT48_out1_4 == 1'b0 ? Unit_Delay21_out1_4 :
              Data_Type_Conversion35_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2110_process
      if (Rst_n == 1'b0) begin
        Unit_Delay21_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay21_out1_4 <= Switch46_out1_3;
      end
    end



  assign Unary_Minus151_in0 =  - ({Unit_Delay21_out1_4[11], Unit_Delay21_out1_4});
  assign Unary_Minus15_out1_1 = Unary_Minus151_in0[11:0];



  assign Bit_Slice1_out1_11 = Unit_Delay2_out1_7[12:1];



  assign Data_Type_S1_out1_3 = Bit_Slice1_out1_11;



  assign Switch74_out1_2 = (CT74_out1_4 == 1'b0 ? Unit_Delay36_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay364_process
      if (Rst_n == 1'b0) begin
        Unit_Delay36_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay36_out1_5 <= Switch74_out1_2;
      end
    end



  assign Add29_1 = {Unit_Delay36_out1_5[11], Unit_Delay36_out1_5};
  assign Add29_2 = {Data_Type_S1_out1_3[11], Data_Type_S1_out1_3};
  assign Add2_out1_7 = Add29_1 - Add29_2;



  assign Saturation3_out1_1 = (Add2_out1_7 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add2_out1_7 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add2_out1_7));



  assign Data_Type_Conversion6_out1_3 = Saturation3_out1_1[11:0];



  assign signal2_377 = (CT79_out1_6 == 1'b0 ? Data_Type_Conversion6_out1_3 :
              Data_Type_Conversion6_out1_3);



  assign s_657 = signal2_377;

  assign signal2_378 = (CT77_out1_4 == 1'b0 ? s_657 :
              Data_Type_Conversion6_out1_3);



  assign s_658 = signal2_378;

  assign signal2_379 = (CT75_out1_4 == 1'b0 ? s_658 :
              Data_Type_Conversion6_out1_3);



  assign s_659 = signal2_379;

  assign signal2_380 = (CT73_out1_4 == 1'b0 ? s_659 :
              Unary_Minus15_out1_1);



  assign s_660 = signal2_380;

  assign signal2_381 = (CT63_out1_4 == 1'b0 ? s_660 :
              Unary_Minus4_out1_3);



  assign s_661 = signal2_381;

  assign signal2_382 = (CT61_out1_8 == 1'b0 ? s_661 :
              Unary_Minus4_out1_3);



  assign s_662 = signal2_382;

  assign signal2_383 = (CT57_out1_9 == 1'b0 ? s_662 :
              Data_Type_Conversion8_out1_2);



  assign s_663 = signal2_383;

  assign signal2_384 = (CT55_out1_9 == 1'b0 ? s_663 :
              Abs3_out1);



  assign s_664 = signal2_384;

  assign signal2_385 = (CT45_out1_4 == 1'b0 ? s_664 :
              mid3_out1);



  assign s_665 = signal2_385;

  assign signal2_386 = (CT41_out1_4 == 1'b0 ? s_665 :
              Unary_Minus2_out1_4);



  assign s_666 = signal2_386;

  assign signal2_387 = (CT39_out1_4 == 1'b0 ? s_666 :
              Unit_Delay15_out1_5);



  assign s_667 = signal2_387;

  assign signal2_388 = (CT37_out1_4 == 1'b0 ? s_667 :
              Unit_Delay14_out1_5);



  assign s_668 = signal2_388;

  assign signal2_389 = (CT28_out1_4 == 1'b0 ? s_668 :
              12'sb011111111111);



  assign s_669 = signal2_389;

  assign signal2_390 = (CT26_out1_5 == 1'b0 ? s_669 :
              12'sb011111111111);



  assign s_670 = signal2_390;

  assign signal2_391 = (CT24_out1_5 == 1'b0 ? s_670 :
              Unary_Minus9_out1_2);



  assign s_671 = signal2_391;

  assign signal2_392 = (CT22_out1_5 == 1'b0 ? s_671 :
              Unary_Minus8_out1_2);



  assign s_672 = signal2_392;

  assign signal2_393 = (CT20_out1_5 == 1'b0 ? s_672 :
              min1_out1);



  assign s_673 = signal2_393;

  assign signal2_394 = (CT17_out1_5 == 1'b0 ? s_673 :
              Switch12_out1_6);



  assign s_674 = signal2_394;

  assign signal2_395 = (CT14_out1_4 == 1'b0 ? s_674 :
              Unary_Minus1_out1_5);



  assign s_675 = signal2_395;

  assign signal2_396 = (CT12_out1_9 == 1'b0 ? s_675 :
              Unary_Minus1_out1_5);



  assign s_676 = signal2_396;

  assign signal2_397 = (CT10_out1_5 == 1'b0 ? s_676 :
              Unary_Minus1_out1_5);



  assign s_677 = signal2_397;

  assign signal2_398 = (CT6_out1_4 == 1'b0 ? s_677 :
              Switch107_out1_85);



  assign s_678 = signal2_398;

  assign signal2_399 = (CT7_out1_4 == 1'b0 ? s_678 :
              Switch107_out1_86);



  assign signal2_400 = signal2_399;

  assign Switch16_out1_3 = (CT8_out1_5 == 1'b0 ? Unit_Delay5_out1_6 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay517_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1_6 <= Switch16_out1_3;
      end
    end



  assign Unary_Minus53_in0 =  - ({max2_out1[11], max2_out1});
  assign Unary_Minus5_out1_3 = Unary_Minus53_in0[11:0];



  assign Switch14_out1_5 = (CT18_out1_4 == 1'b0 ? Unit_Delay7_out1_16 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay720_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1_16 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1_16 <= Switch14_out1_5;
      end
    end



  assign Switch29_out1_5 = (CT32_out1_5 == 1'b0 ? Unit_Delay13_out1_5 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay1313_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay13_out1_5 <= Switch29_out1_5;
      end
    end



  assign Switch36_out1_2 = (CT38_out1_4 == 1'b0 ? Unit_Delay16_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1610_process
      if (Rst_n == 1'b0) begin
        Unit_Delay16_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay16_out1_5 <= Switch36_out1_2;
      end
    end



  assign Bit_Slice16_out1_1 = Product12_out1_2[22:7];



  assign Data_Type_Conversion36_out1 = Bit_Slice16_out1_1;



  assign Saturation16_out1 = (Data_Type_Conversion36_out1 > 16'sb0000011111111111 ? 16'sb0000011111111111 :
              (Data_Type_Conversion36_out1 < 16'sb1111100000000001 ? 16'sb1111100000000001 :
              Data_Type_Conversion36_out1));



  assign Data_Type_Conversion35_out1 = Saturation16_out1[11:0];



  assign Switch42_out1_3 = (CT44_out1_5 == 1'b0 ? Unit_Delay19_out1_5 :
              Data_Type_Conversion35_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1910_process
      if (Rst_n == 1'b0) begin
        Unit_Delay19_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay19_out1_5 <= Switch42_out1_3;
      end
    end



  assign Unary_Minus102_in0 =  - ({Unit_Delay19_out1_5[11], Unit_Delay19_out1_5});
  assign Unary_Minus10_out1_2 = Unary_Minus102_in0[11:0];



  assign Abs2_y = (Data_Type_S11_out1_9 < 12'sb000000000000 ?  - ({Data_Type_S11_out1_9[11], Data_Type_S11_out1_9}) :
              {Data_Type_S11_out1_9[11], Data_Type_S11_out1_9});
  assign Abs2_out1 = Abs2_y[11:0];



  assign Switch54_out1_4 = (CT56_out1_9 == 1'b0 ? Unit_Delay25_out1_4 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay254_process
      if (Rst_n == 1'b0) begin
        Unit_Delay25_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay25_out1_4 <= Switch54_out1_4;
      end
    end



  assign Bit_Slice3_out1_10 = Unit_Delay25_out1_4[11:1];



  assign Data_Type_Conversion9_out1_1 = Bit_Slice3_out1_10;



  assign Data_Type_Conversion10_out1_2 = {Data_Type_Conversion9_out1_1[10], Data_Type_Conversion9_out1_1};



  assign Switch70_out1_3 = (CT70_out1_14 == 1'b0 ? Unit_Delay34_out1_8 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay349_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay34_out1_8 <= Switch70_out1_3;
      end
    end



  assign Compare_To_Constant11_out1_1 = Unit_Delay34_out1_8 >= 12'sb111101101010;



  assign mid18_out1 = (Compare_To_Constant11_out1_1 == 1'b0 ? 12'sb111101101010 :
              Unit_Delay34_out1_8);



  assign max2_out1 = (RO119_relop1 == 1'b0 ? Data_Type_S13_out1_7 :
              Switch33_out1_3);



  assign mid1_out1 = (RO218_relop1 == 1'b0 ? Switch34_out1_3 :
              max3_out1);



  assign Switch34_out1_3 = (RO_relop1 == 1'b0 ? Data_Type_S11_out1_9 :
              Data_Type_S12_out1_8);



  assign Bit_Slice2_out1_10 = Unit_Delay34_out1_9[18:7];



  assign Data_Type_S13_out1_7 = Bit_Slice2_out1_10;



  assign Bit_Slice6_out1_10 = Unit_Delay30_out1_9[18:7];



  assign Data_Type_S11_out1_9 = Bit_Slice6_out1_10;



  assign Switch80_out1_7 = (CT51_out1_12 == 1'b0 ? Unit_Delay30_out1_9 :
              Switch79_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay3010_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_9 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay30_out1_9 <= Switch80_out1_7;
      end
    end



  assign Switch89_out1_7 = (CT58_out1_9 == 1'b0 ? Unit_Delay34_out1_9 :
              Switch79_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay348_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1_9 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay34_out1_9 <= Switch89_out1_7;
      end
    end



  assign Switch91_out1_7 = (CT60_out1_9 == 1'b0 ? Unit_Delay35_out1_8 :
              Switch79_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay358_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_8 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay35_out1_8 <= Switch91_out1_7;
      end
    end



  assign signal2_401 = (CT61_out1_9 == 1'b0 ? Unit_Delay35_out1_8 :
              Unit_Delay35_out1_8);



  assign s_679 = signal2_401;

  assign signal2_402 = (CT59_out1_9 == 1'b0 ? s_679 :
              Unit_Delay34_out1_9);



  assign s_680 = signal2_402;

  assign signal2_403 = (CT57_out1_10 == 1'b0 ? s_680 :
              Unit_Delay33_out1_10);



  assign s_681 = signal2_403;

  assign signal2_404 = (CT55_out1_12 == 1'b0 ? s_681 :
              Unit_Delay30_out1_9);



  assign signal2_405 = signal2_404;

  assign signal2_406 = signal2_405;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(9),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_6   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_9),
                                                                 .wr_addr(Add11_out1_10),
                                                                 .wr_en(Switch208_out1_9),
                                                                 .rd_addr(Add12_out1_12),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_6)
                                                                 );

  assign Switch98_out1_8 = (Switch208_out1_9 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_6);



  assign Switch7_out1_5 = (CT11_out1_6 == 1'b0 ? Unit_Delay3_out1_7 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay318_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1_7 <= Switch7_out1_5;
      end
    end



  assign Switch9_out1_4 = (CT13_out1_5 == 1'b0 ? Unit_Delay4_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay417_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1_5 <= Switch9_out1_4;
      end
    end



  assign Switch11_out1_3 = (CT15_out1_4 == 1'b0 ? Unit_Delay6_out1_7 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay617_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1_7 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1_7 <= Switch11_out1_3;
      end
    end



  assign signal1_380 = (CT61_out1_9 == 1'b0 ? Unit_Delay2_out1_8 :
              Unit_Delay2_out1_8);



  assign s_682 = signal1_380;

  assign signal1_381 = (CT59_out1_9 == 1'b0 ? s_682 :
              Unit_Delay6_out1_7);



  assign s_683 = signal1_381;

  assign signal1_382 = (CT57_out1_10 == 1'b0 ? s_683 :
              Unit_Delay4_out1_5);



  assign s_684 = signal1_382;

  assign signal1_383 = (CT55_out1_12 == 1'b0 ? s_684 :
              Unit_Delay3_out1_7);



  assign signal1_384 = signal1_383;

  assign signal1_385 = signal1_384;

  assign Switch84_out1_9 = (switch_compare_1_27 == 1'b0 ? 12'sb000000000000 :
              signal1_385);



  assign Switch97_out1_8 = (Switch208_out1_9 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_9);



  assign Add7_stage24_1 = {{8{Switch97_out1_8[11]}}, Switch97_out1_8};
  assign Add7_stage24_2 = {{8{Switch98_out1_8[11]}}, Switch98_out1_8};
  assign Add7_op_stage2_4 = Add7_stage24_1 - Add7_stage24_2;



  assign Add7_stage34_1 = {signal2_406[18], signal2_406};
  assign Add7_stage34_add_temp = Add7_op_stage2_4 + Add7_stage34_1;
  assign Add7_out1_9 = Add7_stage34_add_temp[18:0];



  assign Switch79_out1_10 = (switch_compare_1_26 == 1'b0 ? 19'sb0000000000000000000 :
              Add7_out1_9);



  assign Switch87_out1_9 = (CT56_out1_8 == 1'b0 ? Unit_Delay33_out1_10 :
              Switch79_out1_10);



  always @(posedge g_clk)
    begin : Unit_Delay3310_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_10 <= 19'sb0000000000000000000;
      end
      else begin
        Unit_Delay33_out1_10 <= Switch87_out1_9;
      end
    end



  assign Bit_Slice1_out1_12 = Unit_Delay33_out1_10[18:7];



  assign Data_Type_S12_out1_8 = Bit_Slice1_out1_12;



  assign Switch33_out1_3 = (RO_relop1 == 1'b0 ? Data_Type_S12_out1_8 :
              Data_Type_S11_out1_9);



  assign max3_out1 = (RO119_relop1 == 1'b0 ? Switch33_out1_3 :
              Data_Type_S13_out1_7);



  assign min1_out1 = (RO218_relop1 == 1'b0 ? max3_out1 :
              Switch34_out1_3);



  assign Switch62_out1_1 = (CT60_out1_8 == 1'b0 ? Unit_Delay30_out1_10 :
              Data_Type_Conversion37_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3013_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_10 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay30_out1_10 <= Switch62_out1_1;
      end
    end



  assign signal2_407 = (CT69_out1_4 == 1'b0 ? Unit_Delay30_out1_10 :
              Unit_Delay30_out1_10);



  assign s_685 = signal2_407;

  assign signal2_408 = (CT67_out1_4 == 1'b0 ? s_685 :
              Unit_Delay30_out1_10);



  assign s_686 = signal2_408;

  assign signal2_409 = (CT43_out1_4 == 1'b0 ? s_686 :
              UdcDelta2Uo_co_b12);



  assign s_687 = signal2_409;

  assign signal2_410 = (CT35_out1_5 == 1'b0 ? s_687 :
              min1_out1);



  assign s_688 = signal2_410;

  assign signal2_411 = (CT33_out1_5 == 1'b0 ? s_688 :
              mid1_out1);



  assign s_689 = signal2_411;

  assign signal2_412 = (CT31_out1_5 == 1'b0 ? s_689 :
              max2_out1);



  assign s_690 = signal2_412;

  assign signal2_413 = (CT53_out1_4 == 1'b0 ? s_690 :
              Data_Type_S13_out1_7);



  assign s_691 = signal2_413;

  assign signal2_414 = (CT51_out1_9 == 1'b0 ? s_691 :
              Data_Type_S12_out1_8);



  assign s_692 = signal2_414;

  assign signal2_415 = (CT49_out1_5 == 1'b0 ? s_692 :
              Data_Type_S11_out1_9);



  assign s_693 = signal2_415;

  assign signal2_416 = (CT47_out1_4 == 1'b0 ? s_693 :
              RCom_b12);



  assign s_694 = signal2_416;

  assign signal2_417 = (CT2_out1_6 == 1'b0 ? s_694 :
              12'sb001010101010);



  assign signal2_418 = signal2_417;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(7),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_7   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_10),
                                                                 .wr_addr(Add11_out1_7),
                                                                 .wr_en(Switch208_out1_7),
                                                                 .rd_addr(Add12_out1_11),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_7)
                                                                 );

  assign Switch98_out1_9 = (Switch208_out1_7 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_7);



  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(3),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_8   (.g_clk(g_clk),
                                                                 .wr_din(Data_Type_S11_out1_10),
                                                                 .wr_addr(Unit_Delay42_out1_3),
                                                                 .wr_en(Relational_Operator8_relop1),
                                                                 .rd_addr(Add11_out1_9),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_8)
                                                                 );

  assign signal2_419 = (CT55_out1_11 == 1'b0 ? Unit_Delay30_out1_11 :
              Unit_Delay30_out1_11);



  assign signal2_420 = signal2_419;

  assign signal2_421 = signal2_420;

  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(5),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2_9   (.g_clk(g_clk),
                                                                 .wr_din(Switch84_out1_11),
                                                                 .wr_addr(Add11_out1_8),
                                                                 .wr_en(Switch208_out1_8),
                                                                 .rd_addr(Add12_out1_10),
                                                                 .rd_dout(Simple_Dual_Port_RAM2_out1_9)
                                                                 );

  assign Switch98_out1_10 = (Switch208_out1_8 == 1'b0 ? 12'sb000000000000 :
              Simple_Dual_Port_RAM2_out1_9);



  assign Switch5_out1_4 = (CT9_out1_6 == 1'b0 ? Unit_Delay2_out1_8 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay238_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_8 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1_8 <= Switch5_out1_4;
      end
    end



  assign signal1_386 = (CT55_out1_11 == 1'b0 ? Unit_Delay2_out1_8 :
              Unit_Delay2_out1_8);



  assign signal1_387 = signal1_386;

  assign signal1_388 = signal1_387;

  assign Switch84_out1_11 = (switch_compare_1_25 == 1'b0 ? 12'sb000000000000 :
              signal1_388);



  assign Switch97_out1_9 = (Switch208_out1_8 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_11);



  assign Add7_stage25_1 = {{5{Switch97_out1_9[11]}}, Switch97_out1_9};
  assign Add7_stage25_2 = {{5{Switch98_out1_10[11]}}, Switch98_out1_10};
  assign Add7_op_stage2_5 = Add7_stage25_1 - Add7_stage25_2;



  assign Add7_stage35_1 = {signal2_421[15], signal2_421};
  assign Add7_stage35_add_temp = Add7_op_stage2_5 + Add7_stage35_1;
  assign Add7_out1_10 = Add7_stage35_add_temp[15:0];



  assign Switch79_out1_11 = (switch_compare_1_24 == 1'b0 ? 16'sb0000000000000000 :
              Add7_out1_10);



  assign Switch80_out1_8 = (CT51_out1_11 == 1'b0 ? Unit_Delay30_out1_11 :
              Switch79_out1_11);



  always @(posedge g_clk)
    begin : Unit_Delay3011_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_11 <= 16'sb0000000000000000;
      end
      else begin
        Unit_Delay30_out1_11 <= Switch80_out1_8;
      end
    end



  assign Bit_Slice6_out1_11 = Unit_Delay30_out1_11[15:4];



  assign Data_Type_S11_out1_10 = Bit_Slice6_out1_11;



  assign Add47_1 = {Data_Type_S11_out1_10[11], Data_Type_S11_out1_10};
  assign Add47_2 = {Simple_Dual_Port_RAM2_out1_8[11], Simple_Dual_Port_RAM2_out1_8};
  assign Add4_out1_6 = Add47_1 - Add47_2;



  assign Saturation4_out1 = (Add4_out1_6 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add4_out1_6 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add4_out1_6));



  assign Data_Type_Conversion7_out1_3 = Saturation4_out1[11:0];



  assign Product1_out1_3 = LCom_b12 * Data_Type_Conversion7_out1_3;



  assign Bit_Slice1_out1_13 = Product1_out1_3[22:7];



  assign Data_Type_Conversion5_out1_3 = Bit_Slice1_out1_13;



  assign Saturation2_out1_1 = (Data_Type_Conversion5_out1_3 > 16'sb0000011111111111 ? 16'sb0000011111111111 :
              (Data_Type_Conversion5_out1_3 < 16'sb1111100000000001 ? 16'sb1111100000000001 :
              Data_Type_Conversion5_out1_3));



  assign Data_Type_Conversion4_out1_5 = Saturation2_out1_1[11:0];



  assign signal1_389 = (CT2_out1_7 == 1'b0 ? Data_Type_Conversion4_out1_5 :
              Data_Type_Conversion4_out1_5);



  assign s_695 = signal1_389;

  assign signal1_390 = (CT55_out1_10 == 1'b0 ? s_695 :
              Unit_Delay2_out1_8);



  assign signal1_391 = signal1_390;

  assign signal1_392 = signal1_391;

  assign Switch84_out1_10 = (switch_compare_1_23 == 1'b0 ? 12'sb000000000000 :
              signal1_392);



  assign Switch97_out1_10 = (Switch208_out1_7 == 1'b0 ? 12'sb000000000000 :
              Switch84_out1_10);



  assign Add75_1 = {Switch97_out1_10[11], Switch97_out1_10};
  assign Add75_2 = {Switch98_out1_9[11], Switch98_out1_9};
  assign Add7_out1_11 = Add75_1 + Add75_2;



  assign Switch2_out1_3 = (CT1_out1_7 == 1'b0 ? Unit_Delay2_out1_7 :
              Switch79_out1_12);



  always @(posedge g_clk)
    begin : Unit_Delay237_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_7 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay2_out1_7 <= Switch2_out1_3;
      end
    end



  assign signal2_422 = (CT2_out1_7 == 1'b0 ? Unit_Delay2_out1_7 :
              Unit_Delay2_out1_7);



  assign s_696 = signal2_422;

  assign signal2_423 = (CT55_out1_10 == 1'b0 ? s_696 :
              Unit_Delay30_out1_12);



  assign signal2_424 = signal2_423;

  assign signal2_425 = signal2_424;

  assign Switch1_out1_6 = (Switch208_out1_7 == 1'b0 ? signal2_425 :
              Add7_out1_11);



  assign Switch79_out1_12 = (switch_compare_1_22 == 1'b0 ? 13'sb0000000000000 :
              Switch1_out1_6);



  assign Switch80_out1_9 = (CT51_out1_10 == 1'b0 ? Unit_Delay30_out1_12 :
              Switch79_out1_12);



  always @(posedge g_clk)
    begin : Unit_Delay3012_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1_12 <= 13'sb0000000000000;
      end
      else begin
        Unit_Delay30_out1_12 <= Switch80_out1_9;
      end
    end



  assign Bit_Slice6_out1_12 = Unit_Delay30_out1_12[12:1];



  assign Data_Type_S11_out1_11 = Bit_Slice6_out1_12;



  assign Switch22_out1_4 = (CT25_out1_5 == 1'b0 ? Unit_Delay10_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1013_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1_5 <= Switch22_out1_4;
      end
    end



  assign Switch24_out1_4 = (CT27_out1_5 == 1'b0 ? Unit_Delay11_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1120_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay11_out1_5 <= Switch24_out1_4;
      end
    end



  assign Switch27_out1_4 = (CT30_out1_5 == 1'b0 ? Unit_Delay11_out1_5 :
              Unit_Delay10_out1_5);



  assign Switch40_out1_3 = (CT42_out1_4 == 1'b0 ? Unit_Delay18_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1810_process
      if (Rst_n == 1'b0) begin
        Unit_Delay18_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay18_out1_5 <= Switch40_out1_3;
      end
    end



  assign Switch64_out1_2 = (CT62_out1_4 == 1'b0 ? Unit_Delay31_out1_3 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay319_process
      if (Rst_n == 1'b0) begin
        Unit_Delay31_out1_3 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay31_out1_3 <= Switch64_out1_2;
      end
    end



  assign Bit_Slice18_out1 = Unit_Delay31_out1_3[11:1];



  assign Data_Type_Conversion40_out1 = Bit_Slice18_out1;



  assign Data_Type_Conversion39_out1 = {Data_Type_Conversion40_out1[10], Data_Type_Conversion40_out1};



  assign RO86_relop1 = Data_Type_Conversion39_out1 < Unit_Delay9_out1_4;



  assign mid13_out1 = (RO86_relop1 == 1'b0 ? Unit_Delay9_out1_4 :
              Data_Type_Conversion39_out1);



  assign Switch20_out1_14 = (CT23_out1_5 == 1'b0 ? Unit_Delay9_out1_4 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay912_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1_4 <= Switch20_out1_14;
      end
    end



  assign RO76_relop1 = Unary_Minus11_out1_2 < Unit_Delay9_out1_4;



  assign mid12_out1 = (RO76_relop1 == 1'b0 ? Unit_Delay9_out1_4 :
              Unary_Minus11_out1_2);



  assign mid11_out1 = (CT65_out1_5 == 1'b0 ? mid12_out1 :
              mid13_out1);



  assign Unary_Minus142_in0 =  - ({Unit_Delay12_out1_5[11], Unit_Delay12_out1_5});
  assign Unary_Minus14_out1_2 = Unary_Minus142_in0[11:0];



  assign RO93_relop1 = Unary_Minus13_out1_2 > Unary_Minus14_out1_2;



  assign mid15_out1 = (RO93_relop1 == 1'b0 ? Unary_Minus14_out1_2 :
              Unary_Minus13_out1_2);



  assign Switch26_out1_4 = (CT29_out1_6 == 1'b0 ? Unit_Delay12_out1_5 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay1213_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1_5 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay12_out1_5 <= Switch26_out1_4;
      end
    end



  assign Unary_Minus122_in0 =  - ({Unit_Delay12_out1_5[11], Unit_Delay12_out1_5});
  assign Unary_Minus12_out1_2 = Unary_Minus122_in0[11:0];



  assign Switch66_out1_1 = (CT64_out1_4 == 1'b0 ? Unit_Delay32_out1_12 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3212_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1_12 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay32_out1_12 <= Switch66_out1_1;
      end
    end



  assign Bit_Slice19_out1 = Unit_Delay32_out1_12[11:1];



  assign Data_Type_Conversion41_out1 = Bit_Slice19_out1;



  assign Data_Type_Conversion42_out1 = {Data_Type_Conversion41_out1[10], Data_Type_Conversion41_out1};



  assign RO103_relop1_1 = Data_Type_Conversion42_out1 > Unary_Minus12_out1_2;



  assign mid16_out1 = (RO103_relop1_1 == 1'b0 ? Unary_Minus12_out1_2 :
              Data_Type_Conversion42_out1);



  assign mid14_out1 = (CT66_out1_7 == 1'b0 ? mid16_out1 :
              mid15_out1);



  assign signal1_393 = (CT69_out1_4 == 1'b0 ? mid14_out1 :
              mid14_out1);



  assign s_697 = signal1_393;

  assign signal1_394 = (CT67_out1_4 == 1'b0 ? s_697 :
              mid11_out1);



  assign s_698 = signal1_394;

  assign signal1_395 = (CT43_out1_4 == 1'b0 ? s_698 :
              Unit_Delay18_out1_5);



  assign s_699 = signal1_395;

  assign signal1_396 = (CT35_out1_5 == 1'b0 ? s_699 :
              Unit_Delay12_out1_5);



  assign s_700 = signal1_396;

  assign signal1_397 = (CT33_out1_5 == 1'b0 ? s_700 :
              Switch27_out1_4);



  assign s_701 = signal1_397;

  assign signal1_398 = (CT31_out1_5 == 1'b0 ? s_701 :
              Unit_Delay9_out1_4);



  assign s_702 = signal1_398;

  assign signal1_399 = (CT53_out1_4 == 1'b0 ? s_702 :
              Switch107_out1_81);



  assign s_703 = signal1_399;

  assign signal1_400 = (CT51_out1_9 == 1'b0 ? s_703 :
              Switch107_out1_82);



  assign s_704 = signal1_400;

  assign signal1_401 = (CT49_out1_5 == 1'b0 ? s_704 :
              Switch107_out1_83);



  assign s_705 = signal1_401;

  assign signal1_402 = (CT47_out1_4 == 1'b0 ? s_705 :
              Data_Type_S11_out1_11);



  assign s_706 = signal1_402;

  assign signal1_403 = (CT2_out1_6 == 1'b0 ? s_706 :
              Unit_Delay2_out1_8);



  assign signal1_404 = signal1_403;

  assign Product12_out1_2 = signal1_404 * signal2_418;



  assign Bit_Slice15_out1_2 = Product12_out1_2[22:11];



  assign Data_Type_Conversion34_out1_1 = Bit_Slice15_out1_2;



  assign Switch68_out1_2 = (CT68_out1_6 == 1'b0 ? Unit_Delay33_out1_11 :
              Data_Type_Conversion34_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay3311_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1_11 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay33_out1_11 <= Switch68_out1_2;
      end
    end



  assign Compare_To_Constant10_out1_1 = Unit_Delay33_out1_11 <= 12'sb000010010110;



  assign mid17_out1 = (Compare_To_Constant10_out1_1 == 1'b0 ? 12'sb000010010110 :
              Unit_Delay33_out1_11);



  assign Switch56_out1_3 = (CT58_out1_8 == 1'b0 ? Unit_Delay26_out1_4 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay264_process
      if (Rst_n == 1'b0) begin
        Unit_Delay26_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay26_out1_4 <= Switch56_out1_3;
      end
    end



  assign Abs_y = (Unit_Delay26_out1_4 < 12'sb000000000000 ?  - ({Unit_Delay26_out1_4[11], Unit_Delay26_out1_4}) :
              {Unit_Delay26_out1_4[11], Unit_Delay26_out1_4});
  assign Abs_out1 = Abs_y[11:0];



  assign RO117_relop1 = Pm2M0m_co_b12 < Abs_out1;



  assign mid1_out1_1 = (RO117_relop1 == 1'b0 ? Abs_out1 :
              Pm2M0m_co_b12);



  assign RO217_relop1 = mid1_out1_1 > 12'sb000000000000;



  assign mid10_out1 = (RO217_relop1 == 1'b0 ? 12'sb000000000000 :
              mid1_out1_1);



  assign Switch44_out1_3 = (CT46_out1_4 == 1'b0 ? Unit_Delay20_out1_4 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay204_process
      if (Rst_n == 1'b0) begin
        Unit_Delay20_out1_4 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay20_out1_4 <= Switch44_out1_3;
      end
    end



  assign signal2_426 = (CT71_out1_6 == 1'b0 ? Unit_Delay20_out1_4 :
              Unit_Delay20_out1_4);



  assign s_707 = signal2_426;

  assign signal2_427 = (CT59_out1_8 == 1'b0 ? s_707 :
              mid10_out1);



  assign signal2_428 = signal2_427;

  assign Abs1_y = (Unit_Delay8_out1_6 < 12'sb000000000000 ?  - ({Unit_Delay8_out1_6[11], Unit_Delay8_out1_6}) :
              {Unit_Delay8_out1_6[11], Unit_Delay8_out1_6});
  assign Abs1_out1 = Abs1_y[11:0];



  assign CT4_out1_6 = Abs1_out1 == 12'sb000000000000;



  assign Switch35_out1_3 = (CT4_out1_6 == 1'b0 ? Abs1_out1 :
              12'sb000000000001);



  always @(posedge g_clk)
    begin : Unit_Delay504_process
      if (Rst_n == 1'b0) begin
        Unit_Delay50_out1_5 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay50_out1_5 <= Switch86_out1_1;
      end
    end



  assign Switch122_out1_5 = (Compare_To_Constant4_out1_1 == 1'b0 ? Unit_Delay50_out1_5 :
              24'b000000000000000000000000);



  assign Bitwise_Operator1_out1_2 = Switch84_out1_7 | Switch122_out1_5;



  assign Product131_1 = {1'b0, Bitwise_Operator1_out1_2};
  assign Product131_mul_temp = Product131_1 * Switch35_out1_3;
  assign Product13_out1_1 = Product131_mul_temp[35:0];



  assign Compare_To_Constant2_out1_1 = Product13_out1_1 <= 36'sh0003FF001;



  assign Switch86_out1_1 = (Compare_To_Constant2_out1_1 == 1'b0 ? Switch122_out1_5 :
              Bitwise_Operator1_out1_2);



  assign Switch87_out1_10 = (Compare_To_Constant5_out1_1 == 1'b0 ? Unit_Delay38_out1_4 :
              Switch86_out1_1);



  always @(posedge g_clk)
    begin : Unit_Delay384_process
      if (Rst_n == 1'b0) begin
        Unit_Delay38_out1_4 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay38_out1_4 <= Switch87_out1_10;
      end
    end



  assign Data_Type_Conversion1_out1_5 = Unit_Delay38_out1_4;



  assign Unary_Minus71_in0 =  - ({Data_Type_Conversion1_out1_5[23], Data_Type_Conversion1_out1_5});
  assign Unary_Minus7_out1 = Unary_Minus71_in0[23:0];



  assign Switch18_out1_3 = (CT21_out1_6 == 1'b0 ? Unit_Delay8_out1_6 :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay814_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_6 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1_6 <= Switch18_out1_3;
      end
    end



  assign CT3_out1_6 = Unit_Delay8_out1_6 >= 12'sb000000000000;



  assign Switch1_out1_7 = (CT3_out1_6 == 1'b0 ? Unary_Minus7_out1 :
              Data_Type_Conversion1_out1_5);



  assign signal1_405 = (CT71_out1_6 == 1'b0 ? Switch1_out1_7 :
              Switch1_out1_7);



  assign s_708 = signal1_405;

  assign signal1_406 = (CT59_out1_8 == 1'b0 ? s_708 :
              Data_Type_Conversion3_out1_4);



  assign signal1_407 = signal1_406;

  assign Product15_out1 = signal1_407 * signal2_428;



  assign Bit_Slice17_out1_1 = Product15_out1[34:11];



  assign Data_Type_Conversion38_out1 = Bit_Slice17_out1_1;



  assign Saturation17_out1 = (Data_Type_Conversion38_out1 > 24'sb000000000000011111111111 ? 24'sb000000000000011111111111 :
              (Data_Type_Conversion38_out1 < 24'sb111111111111100000000001 ? 24'sb111111111111100000000001 :
              Data_Type_Conversion38_out1));



  assign Data_Type_Conversion37_out1 = Saturation17_out1[11:0];



  assign Switch72_out1_3 = (CT72_out1_4 == 1'b0 ? Unit_Delay35_out1_9 :
              Data_Type_Conversion37_out1);



  always @(posedge g_clk)
    begin : Unit_Delay359_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1_9 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay35_out1_9 <= Switch72_out1_3;
      end
    end



  assign RO118_relop1 = Unit_Delay35_out1_9 < mid17_out1;



  assign mid19_out1 = (RO118_relop1 == 1'b0 ? mid17_out1 :
              Unit_Delay35_out1_9);



  assign RO125_relop1 = mid19_out1 > mid18_out1;



  // assign mid20_out1 = (RO125_relop1 == 1'b0 ? mid18_out1 :
              // mid19_out1);
  assign mid20_out1_out = (RO125_relop1 == 1'b0 ? mid18_out1 :
              mid19_out1);
  assign mid20_out1 = mid20_out1_in;


  assign mid2_out1 = (BlcCtl_En == 1'b0 ? 12'sb000000000000 :
              mid20_out1);



  assign signal1_408 = (CT73_out1_4 == 1'b0 ? s_654 :
              mid2_out1);



  assign s_709 = signal1_408;

  assign signal1_409 = (CT63_out1_4 == 1'b0 ? s_709 :
              min_out1);



  assign s_710 = signal1_409;

  assign signal1_410 = (CT61_out1_8 == 1'b0 ? s_710 :
              max_out1);



  assign s_711 = signal1_410;

  assign signal1_411 = (CT57_out1_9 == 1'b0 ? s_711 :
              Data_Type_Conversion10_out1_2);



  assign s_712 = signal1_411;

  assign signal1_412 = (CT55_out1_9 == 1'b0 ? s_712 :
              Abs2_out1);



  assign s_713 = signal1_412;

  assign signal1_413 = (CT45_out1_4 == 1'b0 ? s_713 :
              Unary_Minus10_out1_2);



  assign s_714 = signal1_413;

  assign signal1_414 = (CT41_out1_4 == 1'b0 ? s_714 :
              Switch107_out1_84);



  assign s_715 = signal1_414;

  assign signal1_415 = (CT39_out1_4 == 1'b0 ? s_715 :
              Unit_Delay16_out1_5);



  assign s_716 = signal1_415;

  assign signal1_416 = (CT37_out1_4 == 1'b0 ? s_716 :
              Unit_Delay13_out1_5);



  assign s_717 = signal1_416;

  assign signal1_417 = (CT28_out1_4 == 1'b0 ? s_717 :
              min_out1);



  assign s_718 = signal1_417;

  assign signal1_418 = (CT26_out1_5 == 1'b0 ? s_718 :
              mid_out1);



  assign s_719 = signal1_418;

  assign signal1_419 = (CT24_out1_5 == 1'b0 ? s_719 :
              12'sb011111111111);



  assign s_720 = signal1_419;

  assign signal1_420 = (CT22_out1_5 == 1'b0 ? s_720 :
              12'sb011111111111);



  assign s_721 = signal1_420;

  assign signal1_421 = (CT20_out1_5 == 1'b0 ? s_721 :
              Unit_Delay7_out1_16);



  assign s_722 = signal1_421;

  assign signal1_422 = (CT17_out1_5 == 1'b0 ? s_722 :
              Unary_Minus5_out1_3);



  assign s_723 = signal1_422;

  assign signal1_423 = (CT14_out1_4 == 1'b0 ? s_723 :
              Switch107_out1_85);



  assign s_724 = signal1_423;

  assign signal1_424 = (CT12_out1_9 == 1'b0 ? s_724 :
              Switch107_out1_86);



  assign s_725 = signal1_424;

  assign signal1_425 = (CT10_out1_5 == 1'b0 ? s_725 :
              Switch107_out1_87);



  assign s_726 = signal1_425;

  assign signal1_426 = (CT6_out1_4 == 1'b0 ? s_726 :
              Unit_Delay5_out1_6);



  assign s_727 = signal1_426;

  assign signal1_427 = (CT7_out1_4 == 1'b0 ? s_727 :
              Switch107_out1_87);



  assign signal1_428 = signal1_427;

  assign Add37_1 = {signal1_428[11], signal1_428};
  assign Add37_2 = {signal2_400[11], signal2_400};
  assign Add3_out1_7 = Add37_1 + Add37_2;



  assign Saturation15_out1_1 = (Add3_out1_7 > 13'sb0011111111111 ? 13'sb0011111111111 :
              (Add3_out1_7 < 13'sb1100000000001 ? 13'sb1100000000001 :
              Add3_out1_7));



  assign Data_Type_Conversion33_out1 = Saturation15_out1_1[11:0];



  //assign Switch76_out1_3 = (CT76_out1_4 == 1'b0 ? Unit_Delay37_out1_5 :
              //Data_Type_Conversion33_out1);
  reg [11:0] Unit_Delay37_out1_5_t;
  assign Switch76_out1_3 = (CT76_out1_4 == 1'b0 ? Unit_Delay37_out1_5_t :
              Data_Type_Conversion33_out1);
			  
  always @(posedge g_clk)
    begin : Unit_Delay374_process
      if (Rst_n == 1'b0) begin
        Unit_Delay37_out1_5 <= 12'sb000000000000;
      end
      else begin
       // Unit_Delay37_out1_5_t <= Switch76_out1_3;
         Unit_Delay37_out1_5_t <= NewUn ? MaIn_b12_2 :Switch76_out1_3;
		Unit_Delay37_out1_5 <=  MA2;
      end
    end
	//assign MaIn_b12 = Unit_Delay37_out1_5; 
  //assign MbIn_b12 = Unit_Delay39_out1_88; 
 // assign McIn_b12 = Unit_Delay40_out1_3;
 
  // wire [11:0] Switch76_out1_3Limt;
  // Lmt_V1 Lmt_V1_InstMa
      // (  .Lmt_b12(12'd2000), .In_b12(Switch76_out1_3), .Out_b12(Switch76_out1_3Limt) );
  wire [11:0] MA2;
  wire [11:0] MB2;
  wire [11:0] MC2;
	LoadMabc_VZ3 LoadMabc_VZ1_1
          (
           .g_clk( g_clk ), .Rst_n( 1 ),.Carryb12( Bit_Slice_out1 ),
           .LoadMode( LoadMode[1] ), .direct(LoadMode[0]), .CarryLoad( PwmLoadPluse ),
           .MaIn_s12( Unit_Delay37_out1_5_t ),  
			  .MbIn_s12( Unit_Delay39_out1_88_t ),  
			  .McIn_s12( Unit_Delay40_out1_3_t ),
           .MaOut_s12( MA2 ), .MbOut_s12( MB2 ), .McOut_s12( MC2 )
          );

  assign Add4_out1_7 = 12'b111111111111 - Add7_out1_7;



  assign Switch1_out1_8 = (Cmp1_out1_1 == 1'b0 ? Add7_out1_7 :
              Add4_out1_7);



  assign Data_Type_Conversion1_out1_6 = Switch1_out1_8;



  assign Add6_out1_3 = Data_Type_Conversion1_out1_6 - 12'sb011111111111;



  assign RO411_relop1 = Unit_Delay37_out1_5 > Add6_out1_3;



  assign RO54_relop1 = Cmp1_out1_1 == RO411_relop1;



  assign Logical_Operator5_out1_1 = Logical_Operator4_out1_2 | RO54_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay584_process
      if (Rst_n == 1'b0) begin
        Unit_Delay58_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay58_out1_3 <= Data_Type_Conversion4_out1_6;
      end
    end



  assign Switch94_out1_3 = (Logical_Operator5_out1_1 == 1'b0 ? Unit_Delay58_out1_3 :
              RO411_relop1);



  assign Data_Type_Conversion4_out1_6 = (Switch94_out1_3 != 1'b0 ? 1'b1 :
              1'b0);



  assign Dy9_relop1 = DeadTime_b8 >= 8'b11111110;



  assign Switch3_out1_8 = (Dy9_relop1 == 1'b0 ? DeadTime_b8 :
              8'b11111110);



  assign Dy10_relop1 = Switch3_out1_8 <= 8'b00000001;



  assign Switch4_out1_4 = (Dy10_relop1 == 1'b0 ? Switch3_out1_8 :
              8'b00000001);



  assign Switch2_out1_4 = (Dy713_relop1 == 1'b0 ? Add6_out1_4 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay179_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_18 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_18 <= Switch2_out1_4;
      end
    end



  assign Switch1_out1_9 = (Data_Type_Conversion4_out1_6 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_18);



  assign Add616_add_temp = ({8'b0, Data_Type_Conversion4_out1_6}) + ({1'b0, Switch1_out1_9});
  assign Add6_out1_4 = Add616_add_temp[7:0];



  assign Dy713_relop1 = Add6_out1_4 > Switch4_out1_4;

  wire DeadPWM_A2 = 	Switch82_out1_2;
  //assign Switch82_out1_2 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy713_relop1); //A2
assign Switch82_out1_2 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy713_relop1))&(~PwmLockA); //A2			  
  //assign Switch82_out1_2 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy713_relop1); //A2


  assign Cmp_out1 = Bit_Slice_out1 > 12'b011111111111;



  assign Add3_out1_8 = 12'b111111111111 - Bit_Slice_out1;



  assign Switch_out1_1 = (Cmp_out1 == 1'b0 ? Bit_Slice_out1 :
              Add3_out1_8);



  assign Data_Type_Conversion3_out1_5 = Switch_out1_1;



  assign RO215_relop1 = Unit_Delay37_out1_5 > Data_Type_Conversion3_out1_5;



  assign RO314_relop1 = Cmp_out1 == RO215_relop1;



  assign Logical_Operator3_out1_3 = Logical_Operator4_out1_2 | RO314_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay5710_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1_13 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1_13 <= Data_Type_Conversion3_out1_6;
      end
    end



  assign Switch92_out1_2 = (Logical_Operator3_out1_3 == 1'b0 ? Unit_Delay57_out1_13 :
              RO215_relop1);



  assign Data_Type_Conversion3_out1_6 = (Switch92_out1_2 != 1'b0 ? 1'b1 :
              1'b0);



  assign Switch2_out1_5 = (Dy71_relop1 == 1'b0 ? Add6_out1_5 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay159_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_19 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_19 <= Switch2_out1_5;
      end
    end



  assign Switch1_out1_10 = (Data_Type_Conversion3_out1_6 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_19);



  assign Add64_add_temp = ({8'b0, Data_Type_Conversion3_out1_6}) + ({1'b0, Switch1_out1_10});
  assign Add6_out1_5 = Add64_add_temp[7:0];



  assign Dy71_relop1 = Add6_out1_5 > Switch4_out1_4;



  //assign Switch80_out1_10 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy71_relop1); //A1
assign Switch80_out1_10 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy71_relop1))&(~PwmLockA); //A1


  assign Logical_Operator2_out1_4 = Switch82_out1_2 & Switch80_out1_10;



  assign Switch1_out1_11 = (Logical_Operator2_out1_4 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Dy7_relop1 = BlockTime_b8 == 8'sb01111111;



  assign Switch1_out1_12 = (Dy7_relop1 == 1'b0 ? BlockTime_b8 :
              8'sb01111111);



  assign Dy8_relop1 = Switch1_out1_12 <= 8'sb00000001;



  assign Switch2_out1_6 = (Dy8_relop1 == 1'b0 ? Switch1_out1_12 :
              8'sb00000001);



  assign Switch3_out1_9 = (CT1_out1_8 == 1'b0 ? Add6_out1_6 :
              8'sb00000000);



  assign Dy730_relop1 = Switch3_out1_9 > Switch2_out1_6;



  assign Switch2_out1_7 = (Dy730_relop1 == 1'b0 ? Switch3_out1_9 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay1114_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_20 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_20 <= Switch2_out1_7;
      end
    end



  assign Add633_1 = {{6{Switch1_out1_11[2]}}, Switch1_out1_11};
  assign Add633_2 = {Unit_Delay1_out1_20[7], Unit_Delay1_out1_20};
  assign Add633_add_temp = Add633_1 + Add633_2;
  assign Add6_out1_6 = Add633_add_temp[7:0];



  assign CT1_out1_8 = Add6_out1_6 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay235_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_9 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_9 <= Data_Type_Conversion_out1;
      end
    end



  assign Switch33_out1_4 = (Dy730_relop1 == 1'b0 ? Unit_Delay2_out1_9 :
              1'b1);



  assign Switch34_out1_4 = (CT1_out1_8 == 1'b0 ? Switch33_out1_4 :
              1'b0);



  assign Data_Type_Conversion_out1 = (Switch34_out1_4 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMA_1_t = Data_Type_Conversion_out1;
  assign PWMA_1_t = Data_Type_Conversion_out1 & CtlLoop_On;

  assign Logical_Operator2_out1_5 = Switch82_out1_2;



  assign Switch1_out1_13 = (Logical_Operator2_out1_5 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_10 = (CT1_out1_9 == 1'b0 ? Add6_out1_7 :
              8'sb00000000);



  assign Dy76_relop1 = Switch3_out1_10 > Switch2_out1_6;



  assign Switch2_out1_8 = (Dy76_relop1 == 1'b0 ? Switch3_out1_10 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay168_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_21 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_21 <= Switch2_out1_8;
      end
    end



  assign Add69_1 = {{6{Switch1_out1_13[2]}}, Switch1_out1_13};
  assign Add69_2 = {Unit_Delay1_out1_21[7], Unit_Delay1_out1_21};
  assign Add69_add_temp = Add69_1 + Add69_2;
  assign Add6_out1_7 = Add69_add_temp[7:0];



  assign CT1_out1_9 = Add6_out1_7 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay219_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_10 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_10 <= Data_Type_Conversion_out1_1;
      end
    end



  assign Switch33_out1_5 = (Dy76_relop1 == 1'b0 ? Unit_Delay2_out1_10 :
              1'b1);



  assign Switch34_out1_5 = (CT1_out1_9 == 1'b0 ? Switch33_out1_5 :
              1'b0);



  assign Data_Type_Conversion_out1_1 = (Switch34_out1_5 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_6 =  ~ Data_Type_Conversion_out1;



  assign Switch1_out1_14 = (Logical_Operator2_out1_6 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_9 = (Dy724_relop1 == 1'b0 ? Switch3_out1_11 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1105_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_22 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_22 <= Switch2_out1_9;
      end
    end



  assign Add627_1 = {{7{Switch1_out1_14[2]}}, Switch1_out1_14};
  assign Add627_2 = {2'b0, Unit_Delay1_out1_22};
  assign Add627_add_temp = Add627_1 + Add627_2;
  assign Add6_out1_8 = Add627_add_temp[7:0];



  assign Switch3_out1_11 = (Data_Type_Conversion_out1 == 1'b0 ? Add6_out1_8 :
              8'b00000000);



  assign Dy724_relop1 = Switch3_out1_11 > Switch4_out1_4;



  assign Switch33_out1_6 = (Dy724_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_2 = (Switch33_out1_6 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay198_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_23 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_23 <= Switch1_out1_15;
      end
    end



  assign Switch4_out1_5 = (Data_Type_Conversion_out1_2 == 1'b0 ? Unit_Delay1_out1_23 :
              Data_Type_Conversion_out1_1);



  assign Switch1_out1_15 = (Data_Type_Conversion_out1_1 == 1'b0 ? Switch4_out1_5 :
              Data_Type_Conversion_out1_1);



  assign Data_Type_Conversion_out1_3 = (Switch1_out1_15 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMA_2_t = Data_Type_Conversion_out1_3;
  assign PWMA_2_t = Data_Type_Conversion_out1_1;

  assign Not1_out1 =  ~ Data_Type_Conversion3_out1_6;



  assign Switch2_out1_10 = (Dy72_relop1 == 1'b0 ? Add6_out1_9 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay160_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_24 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_24 <= Switch2_out1_10;
      end
    end



  assign Switch1_out1_16 = (Not1_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_24);



  assign Add65_add_temp = ({8'b0, Not1_out1}) + ({1'b0, Switch1_out1_16});
  assign Add6_out1_9 = Add65_add_temp[7:0];



  assign Dy72_relop1 = Add6_out1_9 > Switch4_out1_4;


  wire DeadPWM_A3 = Switch81_out1_5;
 // assign Switch81_out1_5 = (Or1_out1_8 == 1'b0 ? 1'b0 :
 //             Dy72_relop1); //A3
  //assign Switch81_out1_5 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy72_relop1); //A3
assign Switch81_out1_5 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy72_relop1))&(~PwmLockA); //A3

  assign Logical_Operator2_out1_7 = Switch81_out1_5;



  assign Switch1_out1_17 = (Logical_Operator2_out1_7 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_12 = (CT1_out1_10 == 1'b0 ? Add6_out1_10 :
              8'sb00000000);



  assign Dy75_relop1 = Switch3_out1_12 > Switch2_out1_6;



  assign Switch2_out1_11 = (Dy75_relop1 == 1'b0 ? Switch3_out1_12 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay167_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_25 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_25 <= Switch2_out1_11;
      end
    end



  assign Add68_1 = {{6{Switch1_out1_17[2]}}, Switch1_out1_17};
  assign Add68_2 = {Unit_Delay1_out1_25[7], Unit_Delay1_out1_25};
  assign Add68_add_temp = Add68_1 + Add68_2;
  assign Add6_out1_10 = Add68_add_temp[7:0];



  assign CT1_out1_10 = Add6_out1_10 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay218_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_11 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_11 <= Data_Type_Conversion_out1_4;
      end
    end



  assign Switch33_out1_7 = (Dy75_relop1 == 1'b0 ? Unit_Delay2_out1_11 :
              1'b1);



  assign Switch34_out1_6 = (CT1_out1_10 == 1'b0 ? Switch33_out1_7 :
              1'b0);



  assign Data_Type_Conversion_out1_4 = (Switch34_out1_6 != 1'b0 ? 1'b1 :
              1'b0);



  assign Not2_out1 =  ~ Data_Type_Conversion4_out1_6;



  assign Switch2_out1_12 = (Dy717_relop1 == 1'b0 ? Add6_out1_11 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay187_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_26 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_26 <= Switch2_out1_12;
      end
    end



  assign Switch1_out1_18 = (Not2_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_26);



  assign Add620_add_temp = ({8'b0, Not2_out1}) + ({1'b0, Switch1_out1_18});
  assign Add6_out1_11 = Add620_add_temp[7:0];



  assign Dy717_relop1 = Add6_out1_11 > Switch4_out1_4;



  //assign Switch83_out1_11 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy717_relop1); //A4
assign Switch83_out1_11 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy717_relop1))&(~PwmLockA); //A4


  assign Logical_Operator2_out1_8 = Switch81_out1_5 & Switch83_out1_11;



  assign Switch1_out1_19 = (Logical_Operator2_out1_8 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_13 = (CT1_out1_11 == 1'b0 ? Add6_out1_12 :
              8'sb00000000);



  assign Dy77_relop1 = Switch3_out1_13 > Switch2_out1_6;



  assign Switch2_out1_13 = (Dy77_relop1 == 1'b0 ? Switch3_out1_13 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay169_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_27 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_27 <= Switch2_out1_13;
      end
    end



  assign Add610_1 = {{6{Switch1_out1_19[2]}}, Switch1_out1_19};
  assign Add610_2 = {Unit_Delay1_out1_27[7], Unit_Delay1_out1_27};
  assign Add610_add_temp = Add610_1 + Add610_2;
  assign Add6_out1_12 = Add610_add_temp[7:0];



  assign CT1_out1_11 = Add6_out1_12 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay220_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_12 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_12 <= Data_Type_Conversion_out1_5;
      end
    end



  assign Switch33_out1_8 = (Dy77_relop1 == 1'b0 ? Unit_Delay2_out1_12 :
              1'b1);



  assign Switch34_out1_7 = (CT1_out1_11 == 1'b0 ? Switch33_out1_8 :
              1'b0);



  assign Data_Type_Conversion_out1_5 = (Switch34_out1_7 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_9 =  ~ Data_Type_Conversion_out1_5;



  assign Switch1_out1_20 = (Logical_Operator2_out1_9 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_14 = (Dy725_relop1 == 1'b0 ? Switch3_out1_14 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1106_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_28 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_28 <= Switch2_out1_14;
      end
    end



  assign Add628_1 = {{7{Switch1_out1_20[2]}}, Switch1_out1_20};
  assign Add628_2 = {2'b0, Unit_Delay1_out1_28};
  assign Add628_add_temp = Add628_1 + Add628_2;
  assign Add6_out1_13 = Add628_add_temp[7:0];



  assign Switch3_out1_14 = (Data_Type_Conversion_out1_5 == 1'b0 ? Add6_out1_13 :
              8'b00000000);



  assign Dy725_relop1 = Switch3_out1_14 > Switch4_out1_4;



  assign Switch33_out1_9 = (Dy725_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_6 = (Switch33_out1_9 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay199_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_29 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_29 <= Switch1_out1_21;
      end
    end



  assign Switch4_out1_6 = (Data_Type_Conversion_out1_6 == 1'b0 ? Unit_Delay1_out1_29 :
              Data_Type_Conversion_out1_4);



  assign Switch1_out1_21 = (Data_Type_Conversion_out1_4 == 1'b0 ? Switch4_out1_6 :
              Data_Type_Conversion_out1_4);



  assign Data_Type_Conversion_out1_7 = (Switch1_out1_21 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMA_3_t = Data_Type_Conversion_out1_7;
  assign PWMA_3_t = Data_Type_Conversion_out1_4;

  //assign PWMA_4_t = Data_Type_Conversion_out1_5;
  assign PWMA_4_t = Data_Type_Conversion_out1_5 & CtlLoop_On;
   

  assign CT78_out1_6 = Unit_Delay41_out1_3 == 6'b100000;



  reg [11:0]  Unit_Delay39_out1_88_t;
  //assign Switch78_out1_2 = (CT78_out1_6 == 1'b0 ? Unit_Delay39_out1_88 :
  //            Data_Type_Conversion33_out1);
  assign Switch78_out1_2 = (CT78_out1_6 == 1'b0 ? Unit_Delay39_out1_88_t :
              Data_Type_Conversion33_out1);


  always @(posedge g_clk)
    begin : Unit_Delay3989_process
      if (Rst_n == 1'b0) begin
        Unit_Delay39_out1_88 <= 12'sb000000000000;
      end
      else begin
       // Unit_Delay39_out1_88_t <= Switch78_out1_2;
        Unit_Delay39_out1_88_t <= NewUn ? MbIn_b12_2 : Switch78_out1_2;
		//Unit_Delay39_out1_88 <= Switch78_out1_2L	imt;
		Unit_Delay39_out1_88 <= MB2;
      end
    end
	 //assign MaIn_b12 = Unit_Delay37_out1_5; 
  //assign MbIn_b12 = Unit_Delay39_out1_88; 
 // assign McIn_b12 = Unit_Delay40_out1_3;
	// wire [11:0] Switch78_out1_2Limt;
	// Lmt_V1 Lmt_V1_InstMb
      // (  .Lmt_b12(12'd2000), .In_b12(Switch78_out1_2), .Out_b12( Switch78_out1_2Limt) );



  assign RO85_relop1 = Unit_Delay39_out1_88 > Add6_out1_3;



  assign RO92_relop1 = Cmp1_out1_1 == RO85_relop1;



  assign Logical_Operator7_out1_1 = Logical_Operator4_out1_2 | RO92_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay602_process
      if (Rst_n == 1'b0) begin
        Unit_Delay60_out1_2 <= 1'b0;
      end
      else begin
        Unit_Delay60_out1_2 <= Data_Type_Conversion6_out1_4;
      end
    end



  assign Switch96_out1_4 = (Logical_Operator7_out1_1 == 1'b0 ? Unit_Delay60_out1_2 :
              RO85_relop1);



  assign Data_Type_Conversion6_out1_4 = (Switch96_out1_4 != 1'b0 ? 1'b1 :
              1'b0);



  assign Switch2_out1_15 = (Dy720_relop1 == 1'b0 ? Add6_out1_14 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay190_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_30 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_30 <= Switch2_out1_15;
      end
    end



  assign Switch1_out1_22 = (Data_Type_Conversion6_out1_4 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_30);



  assign Add623_add_temp = ({8'b0, Data_Type_Conversion6_out1_4}) + ({1'b0, Switch1_out1_22});
  assign Add6_out1_14 = Add623_add_temp[7:0];



  assign Dy720_relop1 = Add6_out1_14 > Switch4_out1_4;


	wire DeadPWM_B2 = 	Switch86_out1_2;
  //assign Switch86_out1_2 = (Or1_out1_8 == 1'b0 ? 1'b0 :
  //            Dy720_relop1);//B2
  //assign Switch86_out1_2 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy720_relop1);//B2
assign Switch86_out1_2 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy720_relop1))&(~PwmLockB); //B2

  assign RO63_relop1 = Unit_Delay39_out1_88 > Data_Type_Conversion3_out1_5;



  assign RO75_relop1 = Cmp_out1 == RO63_relop1;



  assign Logical_Operator6_out1_1 = Logical_Operator4_out1_2 | RO75_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay593_process
      if (Rst_n == 1'b0) begin
        Unit_Delay59_out1_3 <= 1'b0;
      end
      else begin
        Unit_Delay59_out1_3 <= Data_Type_Conversion5_out1_4;
      end
    end



  assign Switch95_out1_4 = (Logical_Operator6_out1_1 == 1'b0 ? Unit_Delay59_out1_3 :
              RO63_relop1);



  assign Data_Type_Conversion5_out1_4 = (Switch95_out1_4 != 1'b0 ? 1'b1 :
              1'b0);



  assign Switch2_out1_16 = (Dy718_relop1 == 1'b0 ? Add6_out1_15 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay188_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_31 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_31 <= Switch2_out1_16;
      end
    end



  assign Switch1_out1_23 = (Data_Type_Conversion5_out1_4 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_31);



  assign Add621_add_temp = ({8'b0, Data_Type_Conversion5_out1_4}) + ({1'b0, Switch1_out1_23});
  assign Add6_out1_15 = Add621_add_temp[7:0];



  assign Dy718_relop1 = Add6_out1_15 > Switch4_out1_4;



  //assign Switch84_out1_12 = (Or1_out1_8 == 1'b0 ? 1'b0 :
  //            Dy718_relop1);//B1 
assign Switch84_out1_12 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy718_relop1))&(~PwmLockB); //B1

  assign Logical_Operator2_out1_10 = Switch86_out1_2 & Switch84_out1_12;



  assign Switch1_out1_24 = (Logical_Operator2_out1_10 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_15 = (CT1_out1_12 == 1'b0 ? Add6_out1_16 :
              8'sb00000000);



  assign Dy78_relop1 = Switch3_out1_15 > Switch2_out1_6;



  assign Switch2_out1_17 = (Dy78_relop1 == 1'b0 ? Switch3_out1_15 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay170_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_32 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_32 <= Switch2_out1_17;
      end
    end



  assign Add611_1 = {{6{Switch1_out1_24[2]}}, Switch1_out1_24};
  assign Add611_2 = {Unit_Delay1_out1_32[7], Unit_Delay1_out1_32};
  assign Add611_add_temp = Add611_1 + Add611_2;
  assign Add6_out1_16 = Add611_add_temp[7:0];



  assign CT1_out1_12 = Add6_out1_16 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay224_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_13 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_13 <= Data_Type_Conversion_out1_8;
      end
    end



  assign Switch33_out1_10 = (Dy78_relop1 == 1'b0 ? Unit_Delay2_out1_13 :
              1'b1);



  assign Switch34_out1_8 = (CT1_out1_12 == 1'b0 ? Switch33_out1_10 :
              1'b0);



  assign Data_Type_Conversion_out1_8 = (Switch34_out1_8 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMB_1_t = Data_Type_Conversion_out1_8;
  assign PWMB_1_t = Data_Type_Conversion_out1_8 & CtlLoop_On;

  assign Logical_Operator2_out1_11 = Switch86_out1_2;



  assign Switch1_out1_25 = (Logical_Operator2_out1_11 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_16 = (CT1_out1_13 == 1'b0 ? Add6_out1_17 :
              8'sb00000000);



  assign Dy710_relop1 = Switch3_out1_16 > Switch2_out1_6;



  assign Switch2_out1_18 = (Dy710_relop1 == 1'b0 ? Switch3_out1_16 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay176_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_33 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_33 <= Switch2_out1_18;
      end
    end



  assign Add613_1 = {{6{Switch1_out1_25[2]}}, Switch1_out1_25};
  assign Add613_2 = {Unit_Delay1_out1_33[7], Unit_Delay1_out1_33};
  assign Add613_add_temp = Add613_1 + Add613_2;
  assign Add6_out1_17 = Add613_add_temp[7:0];



  assign CT1_out1_13 = Add6_out1_17 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay226_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_14 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_14 <= Data_Type_Conversion_out1_9;
      end
    end



  assign Switch33_out1_11 = (Dy710_relop1 == 1'b0 ? Unit_Delay2_out1_14 :
              1'b1);



  assign Switch34_out1_9 = (CT1_out1_13 == 1'b0 ? Switch33_out1_11 :
              1'b0);



  assign Data_Type_Conversion_out1_9 = (Switch34_out1_9 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_12 =  ~ Data_Type_Conversion_out1_8;



  assign Switch1_out1_26 = (Logical_Operator2_out1_12 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_19 = (Dy726_relop1 == 1'b0 ? Switch3_out1_17 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1107_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_34 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_34 <= Switch2_out1_19;
      end
    end



  assign Add629_1 = {{7{Switch1_out1_26[2]}}, Switch1_out1_26};
  assign Add629_2 = {2'b0, Unit_Delay1_out1_34};
  assign Add629_add_temp = Add629_1 + Add629_2;
  assign Add6_out1_18 = Add629_add_temp[7:0];



  assign Switch3_out1_17 = (Data_Type_Conversion_out1_8 == 1'b0 ? Add6_out1_18 :
              8'b00000000);



  assign Dy726_relop1 = Switch3_out1_17 > Switch4_out1_4;



  assign Switch33_out1_12 = (Dy726_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_10 = (Switch33_out1_12 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1100_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_35 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_35 <= Switch1_out1_27;
      end
    end



  assign Switch4_out1_7 = (Data_Type_Conversion_out1_10 == 1'b0 ? Unit_Delay1_out1_35 :
              Data_Type_Conversion_out1_9);



  assign Switch1_out1_27 = (Data_Type_Conversion_out1_9 == 1'b0 ? Switch4_out1_7 :
              Data_Type_Conversion_out1_9);



  assign Data_Type_Conversion_out1_11 = (Switch1_out1_27 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMB_2_t = Data_Type_Conversion_out1_11;
  assign PWMB_2_t = Data_Type_Conversion_out1_9;

  assign Not3_out1 =  ~ Data_Type_Conversion5_out1_4;



  assign Switch2_out1_20 = (Dy719_relop1 == 1'b0 ? Add6_out1_19 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay189_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_36 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_36 <= Switch2_out1_20;
      end
    end



  assign Switch1_out1_28 = (Not3_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_36);



  assign Add622_add_temp = ({8'b0, Not3_out1}) + ({1'b0, Switch1_out1_28});
  assign Add6_out1_19 = Add622_add_temp[7:0];



  assign Dy719_relop1 = Add6_out1_19 > Switch4_out1_4;


	wire DeadPWM_B3 =  Switch85_out1;
  //assign Switch85_out1 = (Or1_out1_8 == 1'b0 ? 1'b0 :
  //            Dy719_relop1); //B3
  //assign Switch85_out1 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy719_relop1); //B3
assign Switch85_out1 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy719_relop1))&(~PwmLockB); //B3

  assign Logical_Operator2_out1_13 = Switch85_out1;



  assign Switch1_out1_29 = (Logical_Operator2_out1_13 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_18 = (CT1_out1_14 == 1'b0 ? Add6_out1_20 :
              8'sb00000000);



  assign Dy79_relop1 = Switch3_out1_18 > Switch2_out1_6;



  assign Switch2_out1_21 = (Dy79_relop1 == 1'b0 ? Switch3_out1_18 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay175_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_37 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_37 <= Switch2_out1_21;
      end
    end



  assign Add612_1 = {{6{Switch1_out1_29[2]}}, Switch1_out1_29};
  assign Add612_2 = {Unit_Delay1_out1_37[7], Unit_Delay1_out1_37};
  assign Add612_add_temp = Add612_1 + Add612_2;
  assign Add6_out1_20 = Add612_add_temp[7:0];



  assign CT1_out1_14 = Add6_out1_20 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay225_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_15 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_15 <= Data_Type_Conversion_out1_12;
      end
    end



  assign Switch33_out1_13 = (Dy79_relop1 == 1'b0 ? Unit_Delay2_out1_15 :
              1'b1);



  assign Switch34_out1_10 = (CT1_out1_14 == 1'b0 ? Switch33_out1_13 :
              1'b0);



  assign Data_Type_Conversion_out1_12 = (Switch34_out1_10 != 1'b0 ? 1'b1 :
              1'b0);



  assign Not4_out1 =  ~ Data_Type_Conversion6_out1_4;



  assign Switch2_out1_22 = (Dy721_relop1 == 1'b0 ? Add6_out1_21 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay195_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_38 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_38 <= Switch2_out1_22;
      end
    end



  assign Switch1_out1_30 = (Not4_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_38);



  assign Add624_add_temp = ({8'b0, Not4_out1}) + ({1'b0, Switch1_out1_30});
  assign Add6_out1_21 = Add624_add_temp[7:0];



  assign Dy721_relop1 = Add6_out1_21 > Switch4_out1_4;



  //assign Switch87_out1_11 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy721_relop1); //B4
assign Switch87_out1_11 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy721_relop1))&(~PwmLockB); //B4


  assign Logical_Operator2_out1_14 = Switch85_out1 & Switch87_out1_11;



  assign Switch1_out1_31 = (Logical_Operator2_out1_14 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_19 = (CT1_out1_15 == 1'b0 ? Add6_out1_22 :
              8'sb00000000);



  assign Dy711_relop1 = Switch3_out1_19 > Switch2_out1_6;



  assign Switch2_out1_23 = (Dy711_relop1 == 1'b0 ? Switch3_out1_19 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay177_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_39 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_39 <= Switch2_out1_23;
      end
    end



  assign Add614_1 = {{6{Switch1_out1_31[2]}}, Switch1_out1_31};
  assign Add614_2 = {Unit_Delay1_out1_39[7], Unit_Delay1_out1_39};
  assign Add614_add_temp = Add614_1 + Add614_2;
  assign Add6_out1_22 = Add614_add_temp[7:0];



  assign CT1_out1_15 = Add6_out1_22 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay227_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_16 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_16 <= Data_Type_Conversion_out1_13;
      end
    end



  assign Switch33_out1_14 = (Dy711_relop1 == 1'b0 ? Unit_Delay2_out1_16 :
              1'b1);



  assign Switch34_out1_11 = (CT1_out1_15 == 1'b0 ? Switch33_out1_14 :
              1'b0);



  assign Data_Type_Conversion_out1_13 = (Switch34_out1_11 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_15 =  ~ Data_Type_Conversion_out1_13;



  assign Switch1_out1_32 = (Logical_Operator2_out1_15 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_24 = (Dy727_relop1 == 1'b0 ? Switch3_out1_20 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1108_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_40 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_40 <= Switch2_out1_24;
      end
    end



  assign Add630_1 = {{7{Switch1_out1_32[2]}}, Switch1_out1_32};
  assign Add630_2 = {2'b0, Unit_Delay1_out1_40};
  assign Add630_add_temp = Add630_1 + Add630_2;
  assign Add6_out1_23 = Add630_add_temp[7:0];



  assign Switch3_out1_20 = (Data_Type_Conversion_out1_13 == 1'b0 ? Add6_out1_23 :
              8'b00000000);



  assign Dy727_relop1 = Switch3_out1_20 > Switch4_out1_4;



  assign Switch33_out1_15 = (Dy727_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_14 = (Switch33_out1_15 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1102_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_41 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_41 <= Switch1_out1_33;
      end
    end



  assign Switch4_out1_8 = (Data_Type_Conversion_out1_14 == 1'b0 ? Unit_Delay1_out1_41 :
              Data_Type_Conversion_out1_12);



  assign Switch1_out1_33 = (Data_Type_Conversion_out1_12 == 1'b0 ? Switch4_out1_8 :
              Data_Type_Conversion_out1_12);



  assign Data_Type_Conversion_out1_15 = (Switch1_out1_33 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMB_3_t = Data_Type_Conversion_out1_15;
  assign PWMB_3_t = Data_Type_Conversion_out1_12;

  //assign PWMB_4_t = Data_Type_Conversion_out1_13;
  assign PWMB_4_t = Data_Type_Conversion_out1_13 & CtlLoop_On;
  assign CT80_out1_6 = Unit_Delay41_out1_3 == 6'b100001;



  reg [11:0] Unit_Delay40_out1_3_t;
 
  // assign Switch80_out1_11 = (CT80_out1_6 == 1'b0 ? Unit_Delay40_out1_3 :
  //            Data_Type_Conversion33_out1);
  assign Switch80_out1_11 = (CT80_out1_6 == 1'b0 ? Unit_Delay40_out1_3_t :
              Data_Type_Conversion33_out1);



  always @(posedge g_clk)
    begin : Unit_Delay404_process
      if (Rst_n == 1'b0) begin
        Unit_Delay40_out1_3 <= 12'sb000000000000;
      end
      else begin
       //Unit_Delay40_out1_3_t <= Switch80_out1_11;
        Unit_Delay40_out1_3_t <= NewUn ? McIn_b12_2 : Switch80_out1_11;
		Unit_Delay40_out1_3 <= MC2;
      end
    end
	 //assign MaIn_b12 = Unit_Delay37_out1_5; 
  //assign MbIn_b12 = Unit_Delay39_out1_88; 
 // assign McIn_b12 = Unit_Delay40_out1_3;
	// wire [11:0] Switch80_out1_11Limt;
	// Lmt_V1 Lmt_V1_InstMc
      // (  .Lmt_b12(12'd2000), .In_b12(Switch80_out1_11), .Out_b12( Switch80_out1_11Limt) ); 



  assign RO124_relop1 = Unit_Delay40_out1_3 > Add6_out1_3;



  assign RO133_relop1 = Cmp1_out1_1 == RO124_relop1;



  assign Logical_Operator10_out1_1 = Logical_Operator4_out1_2 | RO133_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay622_process
      if (Rst_n == 1'b0) begin
        Unit_Delay62_out1_1 <= 1'b0;
      end
      else begin
        Unit_Delay62_out1_1 <= Data_Type_Conversion8_out1_3;
      end
    end



  assign Switch98_out1_11 = (Logical_Operator10_out1_1 == 1'b0 ? Unit_Delay62_out1_1 :
              RO124_relop1);



  assign Data_Type_Conversion8_out1_3 = (Switch98_out1_11 != 1'b0 ? 1'b1 :
              1'b0);



  assign Switch2_out1_25 = (Dy73_relop1 == 1'b0 ? Add6_out1_24 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay165_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_42 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_42 <= Switch2_out1_25;
      end
    end



  assign Switch1_out1_34 = (Data_Type_Conversion8_out1_3 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_42);



  assign Add66_add_temp = ({8'b0, Data_Type_Conversion8_out1_3}) + ({1'b0, Switch1_out1_34});
  assign Add6_out1_24 = Add66_add_temp[7:0];



  assign Dy73_relop1 = Add6_out1_24 > Switch4_out1_4;


wire DeadPWM_C2 =  Switch90_out1_2;  
  //assign Switch90_out1_2 = (Or1_out1_8 == 1'b0 ? 1'b0 :
  //            Dy73_relop1); //C2
  //assign Switch90_out1_2 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy73_relop1); //C2
assign Switch90_out1_2 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy73_relop1))&(~PwmLockC); //C2

  assign RO102_relop1_1 = Unit_Delay40_out1_3 > Data_Type_Conversion3_out1_5;



  assign RO115_relop1 = Cmp_out1 == RO102_relop1_1;



  assign Logical_Operator8_out1 = Logical_Operator4_out1_2 | RO115_relop1;



  always @(posedge g_clk)
    begin : Unit_Delay615_process
      if (Rst_n == 1'b0) begin
        Unit_Delay61_out1_4 <= 1'b0;
      end
      else begin
        Unit_Delay61_out1_4 <= Data_Type_Conversion7_out1_4;
      end
    end



  assign Switch97_out1_11 = (Logical_Operator8_out1 == 1'b0 ? Unit_Delay61_out1_4 :
              RO102_relop1_1);



  assign Data_Type_Conversion7_out1_4 = (Switch97_out1_11 != 1'b0 ? 1'b1 :
              1'b0);



  assign Switch2_out1_26 = (Dy722_relop1 == 1'b0 ? Add6_out1_25 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay196_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_43 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_43 <= Switch2_out1_26;
      end
    end



  assign Switch1_out1_35 = (Data_Type_Conversion7_out1_4 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_43);



  assign Add625_add_temp = ({8'b0, Data_Type_Conversion7_out1_4}) + ({1'b0, Switch1_out1_35});
  assign Add6_out1_25 = Add625_add_temp[7:0];



  assign Dy722_relop1 = Add6_out1_25 > Switch4_out1_4;



  //assign Switch88_out1_3 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy722_relop1); //C1 
assign Switch88_out1_3 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy722_relop1))&(~PwmLockC); //C1

  assign Logical_Operator2_out1_16 = Switch90_out1_2 & Switch88_out1_3;



  assign Switch1_out1_36 = (Logical_Operator2_out1_16 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_21 = (CT1_out1_16 == 1'b0 ? Add6_out1_26 :
              8'sb00000000);



  assign Dy712_relop1 = Switch3_out1_21 > Switch2_out1_6;



  assign Switch2_out1_27 = (Dy712_relop1 == 1'b0 ? Switch3_out1_21 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay178_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_44 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_44 <= Switch2_out1_27;
      end
    end



  assign Add615_1 = {{6{Switch1_out1_36[2]}}, Switch1_out1_36};
  assign Add615_2 = {Unit_Delay1_out1_44[7], Unit_Delay1_out1_44};
  assign Add615_add_temp = Add615_1 + Add615_2;
  assign Add6_out1_26 = Add615_add_temp[7:0];



  assign CT1_out1_16 = Add6_out1_26 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay228_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_17 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_17 <= Data_Type_Conversion_out1_16;
      end
    end



  assign Switch33_out1_16 = (Dy712_relop1 == 1'b0 ? Unit_Delay2_out1_17 :
              1'b1);



  assign Switch34_out1_12 = (CT1_out1_16 == 1'b0 ? Switch33_out1_16 :
              1'b0);



  assign Data_Type_Conversion_out1_16 = (Switch34_out1_12 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMC_1_t = Data_Type_Conversion_out1_16;
  assign PWMC_1_t = Data_Type_Conversion_out1_16 & CtlLoop_On;

  assign Logical_Operator2_out1_17 = Switch90_out1_2;



  assign Switch1_out1_37 = (Logical_Operator2_out1_17 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_22 = (CT1_out1_17 == 1'b0 ? Add6_out1_27 :
              8'sb00000000);



  assign Dy715_relop1 = Switch3_out1_22 > Switch2_out1_6;



  assign Switch2_out1_28 = (Dy715_relop1 == 1'b0 ? Switch3_out1_22 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay185_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_45 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_45 <= Switch2_out1_28;
      end
    end



  assign Add618_1 = {{6{Switch1_out1_37[2]}}, Switch1_out1_37};
  assign Add618_2 = {Unit_Delay1_out1_45[7], Unit_Delay1_out1_45};
  assign Add618_add_temp = Add618_1 + Add618_2;
  assign Add6_out1_27 = Add618_add_temp[7:0];



  assign CT1_out1_17 = Add6_out1_27 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay230_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_18 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_18 <= Data_Type_Conversion_out1_17;
      end
    end



  assign Switch33_out1_17 = (Dy715_relop1 == 1'b0 ? Unit_Delay2_out1_18 :
              1'b1);



  assign Switch34_out1_13 = (CT1_out1_17 == 1'b0 ? Switch33_out1_17 :
              1'b0);



  assign Data_Type_Conversion_out1_17 = (Switch34_out1_13 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_18 =  ~ Data_Type_Conversion_out1_16;



  assign Switch1_out1_38 = (Logical_Operator2_out1_18 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_29 = (Dy728_relop1 == 1'b0 ? Switch3_out1_23 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1109_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_46 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_46 <= Switch2_out1_29;
      end
    end



  assign Add631_1 = {{7{Switch1_out1_38[2]}}, Switch1_out1_38};
  assign Add631_2 = {2'b0, Unit_Delay1_out1_46};
  assign Add631_add_temp = Add631_1 + Add631_2;
  assign Add6_out1_28 = Add631_add_temp[7:0];



  assign Switch3_out1_23 = (Data_Type_Conversion_out1_16 == 1'b0 ? Add6_out1_28 :
              8'b00000000);



  assign Dy728_relop1 = Switch3_out1_23 > Switch4_out1_4;



  assign Switch33_out1_18 = (Dy728_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_18 = (Switch33_out1_18 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1103_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_47 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_47 <= Switch1_out1_39;
      end
    end



  assign Switch4_out1_9 = (Data_Type_Conversion_out1_18 == 1'b0 ? Unit_Delay1_out1_47 :
              Data_Type_Conversion_out1_17);



  assign Switch1_out1_39 = (Data_Type_Conversion_out1_17 == 1'b0 ? Switch4_out1_9 :
              Data_Type_Conversion_out1_17);



  assign Data_Type_Conversion_out1_19 = (Switch1_out1_39 != 1'b0 ? 1'b1 :
              1'b0);


  
  //assign PWMC_2_t = Data_Type_Conversion_out1_19;
assign PWMC_2_t = Data_Type_Conversion_out1_17;

  assign Not5_out1 =  ~ Data_Type_Conversion7_out1_4;



  assign Switch2_out1_30 = (Dy723_relop1 == 1'b0 ? Add6_out1_29 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay197_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_48 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_48 <= Switch2_out1_30;
      end
    end



  assign Switch1_out1_40 = (Not5_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_48);



  assign Add626_add_temp = ({8'b0, Not5_out1}) + ({1'b0, Switch1_out1_40});
  assign Add6_out1_29 = Add626_add_temp[7:0];



  assign Dy723_relop1 = Add6_out1_29 > Switch4_out1_4;

wire DeadPWM_C3 =  Switch89_out1_8;
  
  //assign Switch89_out1_8 = (Or1_out1_8 == 1'b0 ? 1'b0 :
  //            Dy723_relop1); //C3 
  //assign Switch89_out1_8 = (CtlLoop_OnDly == 1'b0 ? 1'b0 :
  //            Dy723_relop1); //C3
assign Switch89_out1_8 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy723_relop1))&(~PwmLockC); //C3

  assign Logical_Operator2_out1_19 = Switch89_out1_8;



  assign Switch1_out1_41 = (Logical_Operator2_out1_19 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_24 = (CT1_out1_18 == 1'b0 ? Add6_out1_30 :
              8'sb00000000);



  assign Dy714_relop1 = Switch3_out1_24 > Switch2_out1_6;



  assign Switch2_out1_31 = (Dy714_relop1 == 1'b0 ? Switch3_out1_24 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay180_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_49 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_49 <= Switch2_out1_31;
      end
    end



  assign Add617_1 = {{6{Switch1_out1_41[2]}}, Switch1_out1_41};
  assign Add617_2 = {Unit_Delay1_out1_49[7], Unit_Delay1_out1_49};
  assign Add617_add_temp = Add617_1 + Add617_2;
  assign Add6_out1_30 = Add617_add_temp[7:0];



  assign CT1_out1_18 = Add6_out1_30 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay229_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_19 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_19 <= Data_Type_Conversion_out1_20;
      end
    end



  assign Switch33_out1_19 = (Dy714_relop1 == 1'b0 ? Unit_Delay2_out1_19 :
              1'b1);



  assign Switch34_out1_14 = (CT1_out1_18 == 1'b0 ? Switch33_out1_19 :
              1'b0);



  assign Data_Type_Conversion_out1_20 = (Switch34_out1_14 != 1'b0 ? 1'b1 :
              1'b0);



  assign Not6_out1 =  ~ Data_Type_Conversion8_out1_3;



  assign Switch2_out1_32 = (Dy74_relop1 == 1'b0 ? Add6_out1_31 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay166_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_50 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_50 <= Switch2_out1_32;
      end
    end



  assign Switch1_out1_42 = (Not6_out1 == 1'b0 ? 8'b00000000 :
              Unit_Delay1_out1_50);



  assign Add67_add_temp = ({8'b0, Not6_out1}) + ({1'b0, Switch1_out1_42});
  assign Add6_out1_31 = Add67_add_temp[7:0];



  assign Dy74_relop1 = Add6_out1_31 > Switch4_out1_4;



  //assign Switch91_out1_8 = (Or1_out1_8 == 1'b0 ? 1'b0 :
   //           Dy74_relop1); //C4
assign Switch91_out1_8 = ((Or1_out1_8 == 1'b0 ? 1'b0 : Dy74_relop1))&(~PwmLockC); //C4


  assign Logical_Operator2_out1_20 = Switch89_out1_8 & Switch91_out1_8;



  assign Switch1_out1_43 = (Logical_Operator2_out1_20 == 1'b0 ? 3'sb111 :
              3'sb001);



  assign Switch3_out1_25 = (CT1_out1_19 == 1'b0 ? Add6_out1_32 :
              8'sb00000000);



  assign Dy716_relop1 = Switch3_out1_25 > Switch2_out1_6;



  assign Switch2_out1_33 = (Dy716_relop1 == 1'b0 ? Switch3_out1_25 :
              Switch2_out1_6);



  always @(posedge g_clk)
    begin : Unit_Delay186_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_51 <= 8'sb00000000;
      end
      else begin
        Unit_Delay1_out1_51 <= Switch2_out1_33;
      end
    end



  assign Add619_1 = {{6{Switch1_out1_43[2]}}, Switch1_out1_43};
  assign Add619_2 = {Unit_Delay1_out1_51[7], Unit_Delay1_out1_51};
  assign Add619_add_temp = Add619_1 + Add619_2;
  assign Add6_out1_32 = Add619_add_temp[7:0];



  assign CT1_out1_19 = Add6_out1_32 <= 8'sb00000000;



  always @(posedge g_clk)
    begin : Unit_Delay234_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1_20 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1_20 <= Data_Type_Conversion_out1_21;
      end
    end



  assign Switch33_out1_20 = (Dy716_relop1 == 1'b0 ? Unit_Delay2_out1_20 :
              1'b1);



  assign Switch34_out1_15 = (CT1_out1_19 == 1'b0 ? Switch33_out1_20 :
              1'b0);



  assign Data_Type_Conversion_out1_21 = (Switch34_out1_15 != 1'b0 ? 1'b1 :
              1'b0);



  assign Logical_Operator2_out1_21 =  ~ Data_Type_Conversion_out1_21;



  assign Switch1_out1_44 = (Logical_Operator2_out1_21 == 1'b0 ? 3'sb000 :
              3'sb001);



  assign Switch2_out1_34 = (Dy729_relop1 == 1'b0 ? Switch3_out1_26 :
              Switch4_out1_4);



  always @(posedge g_clk)
    begin : Unit_Delay1113_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_52 <= 8'b00000000;
      end
      else begin
        Unit_Delay1_out1_52 <= Switch2_out1_34;
      end
    end



  assign Add632_1 = {{7{Switch1_out1_44[2]}}, Switch1_out1_44};
  assign Add632_2 = {2'b0, Unit_Delay1_out1_52};
  assign Add632_add_temp = Add632_1 + Add632_2;
  assign Add6_out1_33 = Add632_add_temp[7:0];



  assign Switch3_out1_26 = (Data_Type_Conversion_out1_21 == 1'b0 ? Add6_out1_33 :
              8'b00000000);



  assign Dy729_relop1 = Switch3_out1_26 > Switch4_out1_4;



  assign Switch33_out1_21 = (Dy729_relop1 == 1'b0 ? 1'b0 :
              1'b1);



  assign Data_Type_Conversion_out1_22 = (Switch33_out1_21 != 1'b0 ? 1'b1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay1104_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1_53 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1_53 <= Switch1_out1_45;
      end
    end



  assign Switch4_out1_10 = (Data_Type_Conversion_out1_22 == 1'b0 ? Unit_Delay1_out1_53 :
              Data_Type_Conversion_out1_20);



  assign Switch1_out1_45 = (Data_Type_Conversion_out1_20 == 1'b0 ? Switch4_out1_10 :
              Data_Type_Conversion_out1_20);



  assign Data_Type_Conversion_out1_23 = (Switch1_out1_45 != 1'b0 ? 1'b1 :
              1'b0);



  //assign PWMC_3_t = Data_Type_Conversion_out1_23;
  assign PWMC_3_t = Data_Type_Conversion_out1_20;

  //assign PWMC_4_t = Data_Type_Conversion_out1_21;
  assign PWMC_4_t = Data_Type_Conversion_out1_21 & CtlLoop_On;

  assign Udp_b12 = Switch107_out1_33;

  assign Uqp_b12 = Switch107_out1_34;

  assign Udn_b12 = Switch107_out1_63;

  assign Uqn_b12 = Switch107_out1_31;

  assign Idp_b12 = Switch107_out1_57;

  assign Iqp_b12 = Switch107_out1_56;

  assign Idn_b12 = Switch107_out1_29;

  assign Iqn_b12 = Switch107_out1_30;

  assign Udp_Flted_b12 = Data_Type_S11_out1_3;

  assign Uqp_Flted_b12 = Data_Type_S12_out1_6;

  assign Udn_Flted_b12 = Data_Type_S13_out1_5;

  assign Uqn_Flted_b12 = Data_Type_S15_out1_5;

  assign Idp_Flted_b12 = Data_Type_S11_out1_4;

  assign Iqp_Flted_b12 = Data_Type_S12_out1_3;

  assign Idn_Flted_b12 = Data_Type_S13_out1_2;

  assign Iqn_Flted_b12 = Data_Type_S15_out1_4;

  assign Udp_drop_b12 = Unit_Delay3_out1;

  assign Uqp_drop_b12 = Unit_Delay4_out1_1;

  assign Udn_drop_b12 = Unit_Delay5_out1_2;

  assign Uqn_drop_b12 = Unit_Delay6_out1_2;

  assign Udp_ref_in_b12 = Switch107_out1_59;

  assign Uqp_ref_in_b12 = Switch107_out1_60;

  assign Udn_ref_in_b12 = Switch107_out1_61;

  assign Uqn_ref_in_b12 = Switch107_out1_62;

  assign Idp_ref_in_b12 = Switch107_out1_43;

  assign Iqp_ref_in_b12 = Switch107_out1_45;

  assign Idn_ref_in_b12 = Switch107_out1_9;

  assign Iqn_ref_in_b12 = Switch107_out1_8;

  assign UdpVct_Flted_b12 = Switch56_out1;

  assign UqpVct_Flted_b12 = Switch57_out1;

  assign UdnVct_Flted_b12 = Data_Type_S18_out1_1;

  assign UqnVct_Flted_b12 = Data_Type_S16_out1_1;

  assign Rco_in_b12 = Unit_Delay19_out1_3;

  assign Mdp_b12 = Switch107_out1_35;

  assign Mqp_b12 = Switch107_out1_37;

  assign Mdn_b12 = Switch107_out1_39;

  assign Mqn_b12 = Switch107_out1_64;

  assign Ma_b12 = Switch107_out1_73;

  assign Mb_b12 = Switch107_out1_71;

  assign Mc_b12 = Switch107_out1_69;

  assign Idca_b12 = Data_Type_S11_out1;

  assign Idcb_b12 = Data_Type_S12_out1;

  assign Delta_DCa_b12 = Data_Type_S17_out1_2;

  assign Delta_DCb_b12 = Data_Type_S18_out1_2;

  assign PIdp_cmp_b12 = Unit_Delay54_out1_9;

  assign PIqp_cmp_b12 = Unit_Delay56_out1_3;

  assign PIdn_cmp_b12 = Unit_Delay57_out1_8;

  assign PIqn_cmp_b12 = Unit_Delay58_out1_2;

  assign UdpVct_In_b12 = Switch91_out1;

  assign UqpVct_In_b12 = Switch92_out1;

  assign U0_b12 = Data_Type_Conversion6_out1_3;

  assign UdcDelta_Temp_b12 = Unit_Delay17_out1_5;

  assign MaIn_b12 = Unit_Delay37_out1_5;

  assign MbIn_b12 = Unit_Delay39_out1_88;

  assign McIn_b12 = Unit_Delay40_out1_3;

  assign MsvA_b12 = Unit_Delay6_out1_6;

  assign MsvB_b12 = Unit_Delay7_out1_11;

  assign MsvC_b12 = Unit_Delay8_out1_5;

  assign Saturation4_out1_1 = (Add3_out1 > 14'sb00011111111111 ? 14'sb00011111111111 :
              (Add3_out1 < 14'sb11100000000001 ? 14'sb11100000000001 :
              Add3_out1));



  assign Data_Type_Conversion8_out1_4 = Saturation4_out1_1[11:0];



  assign IcomOrgAll_b12 = Data_Type_Conversion8_out1_4;

  assign ChgPLimit_b16 = Unit_Delay66_out1_1;

  assign DischgPLimit_b16 = Unit_Delay68_out1_1;

  assign UdcPIUpLimit_Back_b16 = Unit_Delay23_out1;

  assign Pdc2ac_ref_b16 = Unit_Delay9_out1;

  assign PulseCarryx1_Hz = R6_relop1;

  assign CT181_out1 = Switch139_out1_1 == 7'b0011110;



  assign Switch309_out1 = (CT181_out1 == 1'b0 ? Unit_Delay146_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay146_process
      if (Rst_n == 1'b0) begin
        Unit_Delay146_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay146_out1 <= Switch309_out1;
      end
    end



  assign Ro14_relop1_1 = Unit_Delay74_out1 >= Unit_Delay146_out1;



  assign CT183_out1 = Switch139_out1_1 == 7'b0011111;



  assign Switch311_out1 = (CT183_out1 == 1'b0 ? Unit_Delay147_out1 :
              Data_Type_Conversion31_out1);



  always @(posedge g_clk)
    begin : Unit_Delay147_process
      if (Rst_n == 1'b0) begin
        Unit_Delay147_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay147_out1 <= Switch311_out1;
      end
    end



  assign Ro15_relop1_1 = Unit_Delay74_out1 <= Unit_Delay147_out1;



  assign Switch314_out1 = (Ro15_relop1_1 == 1'b0 ? Unit_Delay148_out1 :
              1'b1);



  assign Switch313_out1 = (Ro14_relop1_1 == 1'b0 ? Switch314_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay148_process
      if (Rst_n == 1'b0) begin
        Unit_Delay148_out1 <= 1'b0;
      end
      else begin
        Unit_Delay148_out1 <= Switch313_out1;
      end
    end



  assign Zvrting = Unit_Delay148_out1;

  assign Bit_Slice7_out1_2 = Bit_Slice5_out1_1[7:0];



  always @(posedge g_clk)
    begin : Unit_Delay812_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1_7 <= 8'b00000000;
      end
      else begin
        Unit_Delay8_out1_7 <= Bit_Slice7_out1_2;
      end
    end



  assign Relational_Operator4_relop1 = Bit_Slice7_out1_2 < Unit_Delay8_out1_7;



  assign PulseCarryx16_Hz = Relational_Operator4_relop1;

  assign Up_Mod_b12 = Unit_Delay74_out1;

  assign UmRef_Soft_b12 = Unit_Delay45_out1;
  //+++UmRef_Soft_b12

wire PWMA_1_t;
wire PWMA_2_t;
wire PWMA_3_t;
wire PWMA_4_t;
wire PWMA_1_1;
wire PWMA_2_1;
wire PWMA_3_1;
wire PWMA_4_1;
PWMTime_V1 PWMTime_V1_INSTA
          (
           .g_clk(g_clk),
           .Rst_n(1),
           .PWM1(PWMA_1_t),
           .PWM2(PWMA_2_t),
           .PWM3(PWMA_3_t),
           .PWM4(PWMA_4_t),
           .PWM2_dead(DeadPWM_A2),
           .PWM3_dead(DeadPWM_A3),
           .BlockTime(BlockTime_b8),
           .PWM1_out(PWMA_1_1),
           .PWM2_out(PWMA_2_1),
           .PWM3_out(PWMA_3_1),
           .PWM4_out(PWMA_4_1)
          );
wire PWMB_1_t;
wire PWMB_2_t;
wire PWMB_3_t;
wire PWMB_4_t;
wire PWMB_1_1;
wire PWMB_2_1;
wire PWMB_3_1;
wire PWMB_4_1;
PWMTime_V1 PWMTime_V1_INSTB
          (
           .g_clk(g_clk),
           .Rst_n(1),
           .PWM1(PWMB_1_t),
           .PWM2(PWMB_2_t),
           .PWM3(PWMB_3_t),
           .PWM4(PWMB_4_t),
           .PWM2_dead(DeadPWM_B2),
           .PWM3_dead(DeadPWM_B3),
           .BlockTime(BlockTime_b8),
           .PWM1_out(PWMB_1_1),
           .PWM2_out(PWMB_2_1),
           .PWM3_out(PWMB_3_1),
           .PWM4_out(PWMB_4_1)
          );
wire PWMC_1_t;
wire PWMC_2_t;
wire PWMC_3_t;
wire PWMC_4_t;
wire PWMC_1_1;
wire PWMC_2_1;
wire PWMC_3_1;
wire PWMC_4_1;
PWMTime_V1 PWMTime_V1_INSTC
          (
           .g_clk(g_clk),
           .Rst_n(1),
           .PWM1(PWMC_1_t),
           .PWM2(PWMC_2_t),
           .PWM3(PWMC_3_t),
           .PWM4(PWMC_4_t),
           .PWM2_dead(DeadPWM_C2),
           .PWM3_dead(DeadPWM_C3),
           .BlockTime(BlockTime_b8),
           .PWM1_out(PWMC_1_1),
           .PWM2_out(PWMC_2_1),
           .PWM3_out(PWMC_3_1),
           .PWM4_out(PWMC_4_1)
          );
//===========================PWM==================================//
wire PWMA_1_2;
wire PWMA_2_2;
wire PWMA_3_2;
wire PWMA_4_2;
wire PWMA_5_2;
wire PWMA_6_2;
wire DeadPWM_A1 = 	Switch80_out1_10;
//wire DeadPWM_A2 = 	Switch82_out1_2;
//wire DeadPWM_A3 =    Switch81_out1_5;
wire DeadPWM_A4 = 	Switch83_out1_11;   
//APWMTime_V2 APWMTime_V1_InstA
APWMTimeK24_V1 APWMTime_V1_InstA
          (
           .g_clk(g_clk), .Rst_n(1),
           .PWM1_in(DeadPWM_A1),
           .PWM2_in(DeadPWM_A2),
           .PWM3_in(DeadPWM_A3),
           .PWM4_in(DeadPWM_A4),
		   .block_b8(BlockTime_b8),
           .Dly_b8(8'd50), 
           .M_b12(MsvA_b12),
           .DeadTime_b8(DeadTime_b8),
           .CtlLoop_On(CtlLoop_On),
           .PWM1_out(PWMA_1_2),
           .PWM2_out(PWMA_2_2),
           .PWM3_out(PWMA_3_2),
           .PWM4_out(PWMA_4_2),
           .PWM5_out(PWMA_5_2),
           .PWM6_out(PWMA_6_2),
		   .Load(PwmLoadPluse),
			.DisSen(0)
          );
wire PWMB_1_2;
wire PWMB_2_2;
wire PWMB_3_2;
wire PWMB_4_2;
wire PWMB_5_2;
wire PWMB_6_2;
wire DeadPWM_B1 =    Switch84_out1_12;
//wire DeadPWM_B2 = 	Switch86_out1_2;
//wire DeadPWM_B3 =    Switch85_out1;
wire DeadPWM_B4 =    Switch87_out1_11;
//APWMTime_V2 APWMTime_V1_InstB
APWMTimeK24_V1 APWMTime_V1_InstB
          (
           .g_clk(g_clk), .Rst_n(1),
           .PWM1_in(DeadPWM_B1),
           .PWM2_in(DeadPWM_B2),
           .PWM3_in(DeadPWM_B3),
           .PWM4_in(DeadPWM_B4),
		   .block_b8(BlockTime_b8),
           .Dly_b8(8'd50), 
           .M_b12(MsvB_b12),
           .DeadTime_b8(DeadTime_b8),
           .CtlLoop_On(CtlLoop_On),
           .PWM1_out(PWMB_1_2),
           .PWM2_out(PWMB_2_2),
           .PWM3_out(PWMB_3_2),
           .PWM4_out(PWMB_4_2),
           .PWM5_out(PWMB_5_2),
           .PWM6_out(PWMB_6_2),
		   .Load(PwmLoadPluse),
			.DisSen(0)
          );
wire PWMC_1_2;
wire PWMC_2_2;
wire PWMC_3_2;
wire PWMC_4_2;
wire PWMC_5_2;
wire PWMC_6_2;
wire DeadPWM_C1 =  Switch88_out1_3;
//wire DeadPWM_C2 =  Switch90_out1_2;  
//wire DeadPWM_C3 =  Switch89_out1_8;
wire DeadPWM_C4 =  Switch91_out1_8;
//APWMTime_V2 APWMTime_V1_InstC
APWMTimeK24_V1 APWMTime_V1_InstC
          (
           .g_clk(g_clk), .Rst_n(1),
           .PWM1_in(DeadPWM_C1),
           .PWM2_in(DeadPWM_C2),
           .PWM3_in(DeadPWM_C3),
           .PWM4_in(DeadPWM_C4),
		   .block_b8(BlockTime_b8),
           .Dly_b8(8'd50), 
           .M_b12(MsvC_b12),
           .DeadTime_b8(DeadTime_b8),
           .CtlLoop_On(CtlLoop_On),
           .PWM1_out(PWMC_1_2),
           .PWM2_out(PWMC_2_2),
           .PWM3_out(PWMC_3_2),
           .PWM4_out(PWMC_4_2),
           .PWM5_out(PWMC_5_2),
           .PWM6_out(PWMC_6_2), 
		   .Load(PwmLoadPluse),
			.DisSen(0)
          ); 
Msel_V1  MSEL_V1_A
          (
           .PWM1_in1( PWMA_1_1 ),
           .PWM2_in1( PWMA_2_1 ),
           .PWM3_in1( PWMA_3_1 ),
           .PWM4_in1( PWMA_4_1 ),
           .PWM1_in2( PWMA_1_2 ),
           .PWM2_in2( PWMA_2_2 ),
           .PWM3_in2( PWMA_3_2 ),
           .PWM4_in2( PWMA_4_2 ),
           .PWM5_in2( PWMA_5_2 ),
           .PWM6_in2( PWMA_6_2 ),
           .mod_sel( m_sel ),
           .PWM1_out( PWMA_1 ),
           .PWM2_out( PWMA_2 ),
           .PWM3_out( PWMA_3 ),
           .PWM4_out( PWMA_4 ),
           .PWM5_out( PWMA_5 ),
           .PWM6_out( PWMA_6 )
          );
Msel_V1  MSEL_V1_B
          (
           .PWM1_in1( PWMB_1_1 ),
           .PWM2_in1( PWMB_2_1 ),
           .PWM3_in1( PWMB_3_1 ),
           .PWM4_in1( PWMB_4_1 ),
           .PWM1_in2( PWMB_1_2 ),
           .PWM2_in2( PWMB_2_2 ),
           .PWM3_in2( PWMB_3_2 ),
           .PWM4_in2( PWMB_4_2 ),
           .PWM5_in2( PWMB_5_2 ),
           .PWM6_in2( PWMB_6_2 ),
           .mod_sel( m_sel ),
           .PWM1_out( PWMB_1 ),
           .PWM2_out( PWMB_2 ),
           .PWM3_out( PWMB_3 ),
           .PWM4_out( PWMB_4 ),
           .PWM5_out( PWMB_5 ),
           .PWM6_out( PWMB_6 )
          );
Msel_V1  MSEL_V1_C
          (
           .PWM1_in1( PWMC_1_1 ),
           .PWM2_in1( PWMC_2_1 ),
           .PWM3_in1( PWMC_3_1 ),
           .PWM4_in1( PWMC_4_1 ),
           .PWM1_in2( PWMC_1_2 ),
           .PWM2_in2( PWMC_2_2 ),
           .PWM3_in2( PWMC_3_2 ),
           .PWM4_in2( PWMC_4_2 ),
           .PWM5_in2( PWMC_5_2 ),
           .PWM6_in2( PWMC_6_2 ),
           .mod_sel( m_sel ),
           .PWM1_out( PWMC_1 ),
           .PWM2_out( PWMC_2 ),
           .PWM3_out( PWMC_3 ),
           .PWM4_out( PWMC_4 ),
           .PWM5_out( PWMC_5 ),
           .PWM6_out( PWMC_6 )
          ); 
//==============閺夊牊鎸搁崵顓㈠箳瑜嶉崺?================
/*ANPCK1_V3 ANPCK1_V3_A
          (
           .g_clk( g_clk ), .Rst_n( 1 ),
           .PWM1_in( PWMA_1_t ),
           .PWM2_in( PWMA_2_t ),
           .PWM3_in( PWMA_3_t ),
           .PWM4_in( PWMA_4_t ),
           .PWM2_Dead( DeadPWM_A2 ),
           .PWM3_Dead( DeadPWM_A3 ), 
           .mod_sel( m_sel ? 2 : 0),
			  .m_sel(0),
           .M_b12(MsvA_b12),
           .DeadTime_b8(DeadTime_b8),
			  .BlockTime_b8( BlockTime_b8 ),
           .CtlLoop_On(CtlLoop_On), 
           .PWM1_out( PWMA_1 ),
           .PWM2_out( PWMA_2 ),
           .PWM3_out( PWMA_3 ),
           .PWM4_out( PWMA_4 ),
           .PWM5_out( PWMA_5 ),
           .PWM6_out( PWMA_6 )
          );
ANPCK1_V3 ANPCK1_V3_B
          (
           .g_clk( g_clk ), .Rst_n( 1 ),
           .PWM1_in( PWMB_1_t ),
           .PWM2_in( PWMB_2_t ),
           .PWM3_in( PWMB_3_t ),
           .PWM4_in( PWMB_4_t ),
           .PWM2_Dead( DeadPWM_B2 ),
           .PWM3_Dead( DeadPWM_B3 ), 
           .mod_sel( m_sel ? 2 : 0),
			  .m_sel(0),
           .M_b12(MsvB_b12),
           .DeadTime_b8(DeadTime_b8),
			  .BlockTime_b8( BlockTime_b8 ),
           .CtlLoop_On(CtlLoop_On), 
           .PWM1_out( PWMB_1 ),
           .PWM2_out( PWMB_2 ),
           .PWM3_out( PWMB_3 ),
           .PWM4_out( PWMB_4 ),
           .PWM5_out( PWMB_5 ),
           .PWM6_out( PWMB_6 )
          );
ANPCK1_V3 ANPCK1_V3_C
          (
           .g_clk( g_clk ), .Rst_n( 1 ),
           .PWM1_in( PWMC_1_t ),
           .PWM2_in( PWMC_2_t ),
           .PWM3_in( PWMC_3_t ),
           .PWM4_in( PWMC_4_t ),
           .PWM2_Dead( DeadPWM_C2 ),
           .PWM3_Dead( DeadPWM_C3 ), 
           .mod_sel( m_sel ? 2 : 0),
			  .m_sel(0),
           .M_b12(MsvC_b12),
           .DeadTime_b8(DeadTime_b8),
			  .BlockTime_b8( BlockTime_b8 ),
           .CtlLoop_On(CtlLoop_On), 
           .PWM1_out( PWMC_1 ),
           .PWM2_out( PWMC_2 ),
           .PWM3_out( PWMC_3 ),
           .PWM4_out( PWMC_4 ),
           .PWM5_out( PWMC_5 ),
           .PWM6_out( PWMC_6 )
          );*/
		  wire [11:0] MdpOut;
          wire [11:0] MqpOut;
          wire [11:0] MdnOut;
          wire [11:0] MqnOut;
          
          
          RR_VZ1 RR_VZ1_dp
                    (
                     .g_clk( g_clk ), .Rst_n( 1 ), .Pulse50x256_Hz( Pulse50x256_Hz1 ), .Q_b12( Q_b12[11:0] ), .work(work),
                     .Err_b12( Switch30_out1_2 ), .Min_b12( Switch103_out1_3_t ), 
                     .Dly_u8(  Dly_u8[7:0] ), .Kr_b16( Kr_b16 ), .Lmt_b12( RRLmt_b12 ), 
                     .Dbg1_b12(   ), .Dbg2_b12(   ), .Dbg3_b12( Dbg3dp_b12  ), .Mout_b12(MdpOut)
                    );
          RR_VZ1 RR_VZ1_qp
                    (
                     .g_clk( g_clk ), .Rst_n( 1 ), .Pulse50x256_Hz( Pulse50x256_Hz1 ), .Q_b12( Q_b12[11:0] ), .work(work),
                     .Err_b12( Switch31_out1_3 ), .Min_b12( Switch104_out1_3_t ), 
                     .Dly_u8(  Dly_u8[7:0] ), .Kr_b16( Kr_b16 ), .Lmt_b12( RRLmt_b12 ), 
                     .Dbg1_b12(   ), .Dbg2_b12(   ), .Dbg3_b12( Dbg3qp_b12  ), .Mout_b12(MqpOut)
                    );
          RR_VZ1 RR_VZ1_dn
                    (
                     .g_clk( g_clk ), .Rst_n( 1 ), .Pulse50x256_Hz( Pulse50x256_Hz1 ), .Q_b12( Q_b12[11:0] ), .work(work),
                     .Err_b12( Switch34_out1_1 ), .Min_b12( Switch105_out1_10_t ), 
                     .Dly_u8(  Dly_u8[7:0] ), .Kr_b16( Kr_b16 ), .Lmt_b12( RRLmt_b12 ), 
                     .Dbg1_b12(   ), .Dbg2_b12(   ), .Dbg3_b12( Dbg3dn_b12  ), .Mout_b12(MdnOut)
                    );
          RR_VZ1 RR_VZ1_qn
                    (
                     .g_clk( g_clk ), .Rst_n( 1 ), .Pulse50x256_Hz( Pulse50x256_Hz1 ), .Q_b12( Q_b12[11:0] ), .work(work),
                     .Err_b12( Switch35_out1_1 ), .Min_b12( Switch106_out1_4_t), 
                     .Dly_u8(  Dly_u8[7:0] ), .Kr_b16( Kr_b16 ), .Lmt_b12( RRLmt_b12 ), 
                     .Dbg1_b12(   ), .Dbg2_b12(   ), .Dbg3_b12( Dbg3qn_b12  ), .Mout_b12(MqnOut)
                    );
endmodule  // InvControlLoop3L_V40a

