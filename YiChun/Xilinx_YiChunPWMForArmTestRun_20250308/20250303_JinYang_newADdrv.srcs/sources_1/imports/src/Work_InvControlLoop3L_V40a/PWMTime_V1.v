// -------------------------------------------------------------
// 
// File Name: D:\PWMTime_V1\PWMTime_V1.v
// Created: 2023-03-04 09:45:29
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PWMTime_V1
// Source Path: PWMTime_V1/PWMTime_V1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PWMTime_V1
          (
           g_clk,
           Rst_n,
           PWM1,
           PWM2,
           PWM3,
           PWM4,
           PWM2_dead,
           PWM3_dead,
           BlockTime,
           PWM1_out,
           PWM2_out,
           PWM3_out,
           PWM4_out
          );



  input   g_clk;
  input   Rst_n;
  input   PWM1;
  input   PWM2;
  input   PWM3;
  input   PWM4;
  input   PWM2_dead;
  input   PWM3_dead;
  input   [7:0] BlockTime;  // uint8
  output  PWM1_out;
  output  PWM2_out;
  output  PWM3_out;
  output  PWM4_out;

  wire [7:0] Constant5_out1_dtc;  // uint8
  wire Dy1_relop1;
  wire signed [7:0] Switch4_out1;  // int8
  reg [7:0] Unit_Delay3_out1;  // uint8
  wire signed [9:0] Add1_add_temp;  // sfix10
  wire signed [9:0] Add1_1;  // sfix10
  wire signed [9:0] Add1_2;  // sfix10
  wire [7:0] Add1_out1;  // uint8
  wire [7:0] Switch5_out1;  // uint8
  wire Logical_Operator1_out1;
  wire Logical_Operator3_out1;
  wire Logical_Operator2_out1;
  wire [7:0] Constant9_out1_dtc;  // uint8
  wire Dy3_relop1;
  wire signed [7:0] Switch3_out1;  // int8
  reg [7:0] Unit_Delay2_out1;  // uint8
  wire signed [9:0] Add3_add_temp;  // sfix10
  wire signed [9:0] Add3_1;  // sfix10
  wire signed [9:0] Add3_2;  // sfix10
  wire [7:0] Add3_out1;  // uint8
  wire [7:0] Switch6_out1;  // uint8
  wire Logical_Operator9_out1;
  wire Logical_Operator10_out1;
  wire Logical_Operator6_out1;


  assign Constant5_out1_dtc = 8'b00000000;



  assign Switch4_out1 = (Dy1_relop1 == 1'b0 ? 8'sb00000000 :
              8'sb00000001);



  assign Add1_1 = {2'b0, Unit_Delay3_out1};
  assign Add1_2 = {{2{Switch4_out1[7]}}, Switch4_out1};
  assign Add1_add_temp = Add1_1 + Add1_2;
  assign Add1_out1 = Add1_add_temp[7:0];



  assign Switch5_out1 = (PWM2 == 1'b0 ? Constant5_out1_dtc :
              Add1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch5_out1;
      end
    end



  assign Dy1_relop1 = Unit_Delay3_out1 < BlockTime;



  assign Logical_Operator1_out1 =  ~ Dy1_relop1;



  assign Logical_Operator3_out1 = PWM2 & Logical_Operator1_out1;



  assign Logical_Operator2_out1 = PWM2_dead & (Logical_Operator3_out1 & PWM1);



  assign PWM1_out = Logical_Operator2_out1;

  assign PWM2_out = PWM2;

  assign PWM3_out = PWM3;

  assign Constant9_out1_dtc = 8'b00000000;



  assign Switch3_out1 = (Dy3_relop1 == 1'b0 ? 8'sb00000000 :
              8'sb00000001);



  assign Add3_1 = {2'b0, Unit_Delay2_out1};
  assign Add3_2 = {{2{Switch3_out1[7]}}, Switch3_out1};
  assign Add3_add_temp = Add3_1 + Add3_2;
  assign Add3_out1 = Add3_add_temp[7:0];



  assign Switch6_out1 = (PWM3 == 1'b0 ? Constant9_out1_dtc :
              Add3_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch6_out1;
      end
    end



  assign Dy3_relop1 = Unit_Delay2_out1 < BlockTime;



  assign Logical_Operator9_out1 =  ~ Dy3_relop1;



  assign Logical_Operator10_out1 = PWM3 & Logical_Operator9_out1;



  assign Logical_Operator6_out1 = PWM3_dead & (Logical_Operator10_out1 & PWM4);



  assign PWM4_out = Logical_Operator6_out1;

endmodule  // PWMTime_V1

