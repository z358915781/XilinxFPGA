// -------------------------------------------------------------
// 
// File Name: Work_SinTab8192_V11\SinTab8192_V11\SinTab8192_V11.v
// Created: 2017-05-22 17:53:07
// 
// Generated by MATLAB 8.6 and HDL Coder 3.7
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SinTab8192_V11
// Source Path: SinTab8192_V11/SinTab8192_V11
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SinTab8192_V11
          (
           g_clk,
           Rst_n,
           wt,
           q,
           address,
           Sinwt,
           Coswt,
           SinA,
           SinB,
           SinC
          );


  input   g_clk;
  input   Rst_n;
  input   [12:0] wt;  // ufix13
  input   signed [11:0] q;  // sfix12
  output  [10:0] address;  // ufix11
  output  signed [11:0] Sinwt;  // sfix12
  output  signed [11:0] Coswt;  // sfix12
  output  signed [11:0] SinA;  // sfix12
  output  signed [11:0] SinB;  // sfix12
  output  signed [11:0] SinC;  // sfix12


  wire [2:0] Constant5_out1;  // ufix3
  wire [2:0] Constant4_out1;  // ufix3
  wire [2:0] Switch25_out1;  // ufix3
  reg [2:0] Unit_Delay13_out1;  // ufix3
  wire [2:0] Add4_out1;  // ufix3
  wire CT3_out1;
  wire switch_compare_1;
  wire CT1_out1;
  wire [13:0] Constant3_out1;  // ufix14
  wire [28:0] Add3_out1;  // ufix29
  reg [28:0] Unit_Delay1_out1;  // ufix29
  wire [29:0] Add3_add_temp;  // ufix30
  wire [29:0] Add3_1;  // ufix30
  wire [29:0] Add3_2;  // ufix30
  wire [12:0] Bit_Slice1_out1;  // ufix13
  wire [12:0] y;  // ufix13
  wire [12:0] y_1;  // ufix13
  wire [12:0] Constant1_out1;  // ufix13
  wire [12:0] Constant2_out1;  // ufix13
  wire [12:0] Constant6_out1;  // ufix13
  wire [12:0] signal1;  // ufix13
  wire [12:0] signal1_1;  // ufix13
  wire [12:0] signal1_2;  // ufix13
  wire [12:0] signal2;  // ufix13
  wire [12:0] signal2_1;  // ufix13
  wire [12:0] signal2_2;  // ufix13
  wire [12:0] Add1_out1;  // ufix13
  reg [12:0] Unit_Delay3_out1;  // ufix13
  wire [12:0] Switch1_out1;  // ufix13
  wire [12:0] y_2;  // ufix13
  wire [12:0] y_3;  // ufix13
  wire CT2_out1;
  reg [12:0] Unit_Delay4_out1;  // ufix13
  wire [12:0] Switch2_out1;  // ufix13
  wire CT4_out1;
  reg [12:0] Unit_Delay5_out1;  // ufix13
  wire [12:0] Switch3_out1;  // ufix13
  wire [12:0] Index_Vector1_out1;  // ufix13
  wire Bit_Slice16_out1;  // ufix1
  wire y_4;  // ufix1
  wire switch_compare_1_1;
  wire [10:0] Bit_Slice15_out1;  // ufix11
  wire [10:0] y_5;  // ufix11
  wire [10:0] Constant8_out1;  // ufix11
  wire signed [11:0] Add8_sub_temp;  // sfix12
  wire signed [11:0] Add8_1;  // sfix12
  wire signed [11:0] Add8_2;  // sfix12
  wire [10:0] Add8_out1;  // ufix11
  wire [10:0] Switch7_out1;  // ufix11
  reg [2:0] Unit_Delay11_out1;  // ufix3
  reg [2:0] Unit_Delay14_out1;  // ufix3
  wire CT5_out1;
  wire Bit_Slice17_out1;  // ufix1
  wire y_6;  // ufix1
  reg  Unit_Delay2_out1;  // ufix1
  reg  Unit_Delay12_out1;  // ufix1
  wire switch_compare_1_2;
  wire signed [12:0] Unary_Minus_in0;  // sfix13
  wire signed [12:0] Unary_Minus_1;  // sfix13
  wire signed [11:0] Unary_Minus_out1;  // sfix12
  wire signed [11:0] Switch8_out1;  // sfix12
  reg signed [11:0] Unit_Delay6_out1;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire CT6_out1;
  reg signed [11:0] Unit_Delay7_out1;  // sfix12
  wire signed [11:0] Switch5_out1;  // sfix12
  wire CT7_out1;
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] Switch9_out1;  // sfix12
  wire CT8_out1;
  reg signed [11:0] Unit_Delay9_out1;  // sfix12
  wire signed [11:0] Switch10_out1;  // sfix12
  wire CT9_out1;
  reg signed [11:0] Unit_Delay10_out1;  // sfix12
  wire signed [11:0] Switch11_out1;  // sfix12

  // 50*2^29/25e6
  // 
  // Quartus构建的ROM模块具有两
  // 个时钟的延时，这里相应做两个
  // 时钟的延时处理。
  // 
  // Quartus构建的ROM模块具有两
  // 个时钟的延时，这里相应做两个
  // 时钟的延时处理。


  assign Constant5_out1 = 3'b001;



  assign Constant4_out1 = 3'b000;



  always @(posedge g_clk)
    begin : Unit_Delay13_process
      if (Rst_n == 1'b0) begin
        Unit_Delay13_out1 <= 3'b000;
      end
      else begin
        Unit_Delay13_out1 <= Switch25_out1;
      end
    end



  assign Add4_out1 = Constant5_out1 + Unit_Delay13_out1;



  assign CT3_out1 = Add4_out1 == 3'b101;



  assign switch_compare_1 = CT3_out1 > 1'b0;



  assign Switch25_out1 = (switch_compare_1 == 1'b0 ? Add4_out1 :
              Constant4_out1);



  assign CT1_out1 = Switch25_out1 == 3'b000;



  assign Constant3_out1 = 14'b00010000110010;



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 29'b00000000000000000000000000000;
      end
      else begin
        Unit_Delay1_out1 <= Add3_out1;
      end
    end



  assign Add3_1 = {16'b0, Constant3_out1};
  assign Add3_2 = {1'b0, Unit_Delay1_out1};
  assign Add3_add_temp = Add3_1 + Add3_2;
  assign Add3_out1 = Add3_add_temp[28:0];



  assign Bit_Slice1_out1 = Add3_out1[28:16];



  assign y = Bit_Slice1_out1;

  assign y_1 = Bit_Slice1_out1;

  assign Constant1_out1 = 13'b0100000000000;



  assign Constant2_out1 = 13'b1010101010101;



  assign Constant6_out1 = 13'b0101010101011;



  assign signal1 = (Switch25_out1 == 3'b000 ? wt :
              (Switch25_out1 == 3'b001 ? y :
              y_1));



  assign signal1_1 = signal1;

  assign signal1_2 = signal1_1;

  assign signal2 = (Switch25_out1 == 3'b000 ? Constant1_out1 :
              (Switch25_out1 == 3'b001 ? Constant2_out1 :
              Constant6_out1));



  assign signal2_1 = signal2;

  assign signal2_2 = signal2_1;

  assign Add1_out1 = signal1_2 + signal2_2;



  assign Switch1_out1 = (CT1_out1 == 1'b0 ? Unit_Delay3_out1 :
              Add1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 13'b0000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch1_out1;
      end
    end



  assign y_2 = Bit_Slice1_out1;

  assign y_3 = y_2;

  assign CT2_out1 = Switch25_out1 == 3'b001;



  assign Switch2_out1 = (CT2_out1 == 1'b0 ? Unit_Delay4_out1 :
              Add1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 13'b0000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch2_out1;
      end
    end



  assign CT4_out1 = Switch25_out1 == 3'b010;



  assign Switch3_out1 = (CT4_out1 == 1'b0 ? Unit_Delay5_out1 :
              Add1_out1);



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 13'b0000000000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch3_out1;
      end
    end



  assign Index_Vector1_out1 = (Switch25_out1 == 3'b000 ? wt :
              (Switch25_out1 == 3'b001 ? Unit_Delay3_out1 :
              (Switch25_out1 == 3'b010 ? y_3 :
              (Switch25_out1 == 3'b011 ? Unit_Delay4_out1 :
              Unit_Delay5_out1))));



  assign Bit_Slice16_out1 = Index_Vector1_out1[11];



  assign y_4 = Bit_Slice16_out1;

  assign switch_compare_1_1 = y_4 > 1'b0;



  assign Bit_Slice15_out1 = Index_Vector1_out1[10:0];



  assign y_5 = Bit_Slice15_out1;

  assign Constant8_out1 = 11'b11111111111;



  assign Add8_1 = {1'b0, Constant8_out1};
  assign Add8_2 = {1'b0, y_5};
  assign Add8_sub_temp = Add8_1 - Add8_2;
  assign Add8_out1 = Add8_sub_temp[10:0];



  assign Switch7_out1 = (switch_compare_1_1 == 1'b0 ? y_5 :
              Add8_out1);



  assign address = Switch7_out1;

  always @(posedge g_clk)
    begin : Unit_Delay11_process
      if (Rst_n == 1'b0) begin
        Unit_Delay11_out1 <= 3'b000;
      end
      else begin
        Unit_Delay11_out1 <= Switch25_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay14_process
      if (Rst_n == 1'b0) begin
        Unit_Delay14_out1 <= 3'b000;
      end
      else begin
        Unit_Delay14_out1 <= Unit_Delay11_out1;
      end
    end



  assign CT5_out1 = Unit_Delay14_out1 == 3'b000;



  assign Bit_Slice17_out1 = Index_Vector1_out1[12];



  assign y_6 = Bit_Slice17_out1;

  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 1'b0;
      end
      else begin
        Unit_Delay2_out1 <= y_6;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay12_process
      if (Rst_n == 1'b0) begin
        Unit_Delay12_out1 <= 1'b0;
      end
      else begin
        Unit_Delay12_out1 <= Unit_Delay2_out1;
      end
    end



  assign switch_compare_1_2 = Unit_Delay12_out1 > 1'b0;



  assign Unary_Minus_1 = {q[11], q};
  assign Unary_Minus_in0 =  - (Unary_Minus_1);
  assign Unary_Minus_out1 = Unary_Minus_in0[11:0];



  assign Switch8_out1 = (switch_compare_1_2 == 1'b0 ? q :
              Unary_Minus_out1);



  assign Switch4_out1 = (CT5_out1 == 1'b0 ? Unit_Delay6_out1 :
              Switch8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch4_out1;
      end
    end



  assign Sinwt = Unit_Delay6_out1;

  assign CT6_out1 = Unit_Delay14_out1 == 3'b001;



  assign Switch5_out1 = (CT6_out1 == 1'b0 ? Unit_Delay7_out1 :
              Switch8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay7_out1 <= Switch5_out1;
      end
    end



  assign Coswt = Unit_Delay7_out1;

  assign CT7_out1 = Unit_Delay14_out1 == 3'b010;



  assign Switch9_out1 = (CT7_out1 == 1'b0 ? Unit_Delay8_out1 :
              Switch8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch9_out1;
      end
    end



  assign SinA = Unit_Delay8_out1;

  assign CT8_out1 = Unit_Delay14_out1 == 3'b011;



  assign Switch10_out1 = (CT8_out1 == 1'b0 ? Unit_Delay9_out1 :
              Switch8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch10_out1;
      end
    end



  assign SinB = Unit_Delay9_out1;

  assign CT9_out1 = Unit_Delay14_out1 == 3'b100;



  assign Switch11_out1 = (CT9_out1 == 1'b0 ? Unit_Delay10_out1 :
              Switch8_out1);



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay10_out1 <= Switch11_out1;
      end
    end



  assign SinC = Unit_Delay10_out1;


endmodule  // SinTab8192_V11

