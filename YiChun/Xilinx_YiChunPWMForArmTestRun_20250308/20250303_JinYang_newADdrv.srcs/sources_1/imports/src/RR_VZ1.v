// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\RR_VZ1\RR_VZ1.v
// Created: 2024-08-08 08:18:09
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 3.90625e-06
// Target subsystem base rate: 3.90625e-06
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RR_VZ1
// Source Path: RR_VZ1/RR_VZ1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RR_VZ1
          (
           g_clk,
           Rst_n,
           Pulse50x256_Hz,
           Dly_u8,
           Err_b12,
           Q_b12,
           Kr_b16,
           Lmt_b12,
           Min_b12,
           work,
           Dbg1_b12,
           Dbg3_b12,
           Mout_b12,
           Dbg2_b12
          );



  input   g_clk;
  input   Rst_n;
  input   Pulse50x256_Hz;
  input   [7:0] Dly_u8;  // uint8
  input   signed [11:0] Err_b12;  // sfix12
  input   signed [11:0] Q_b12;  // sfix12
  input   signed [15:0] Kr_b16;  // int16
  input   signed [11:0] Lmt_b12;  // sfix12
  input   signed [11:0] Min_b12;  // sfix12
  input   work;
  output  signed [11:0] Dbg1_b12;  // sfix12
  output  signed [11:0] Dbg3_b12;  // sfix12
  output  signed [11:0] Mout_b12;  // sfix12
  output  signed [11:0] Dbg2_b12;  // sfix12

  wire switch_compare_1;
  wire switch_compare_1_1;
  wire signed [13:0] Unary_Minus1_out1;  // sfix14
  wire [7:0] Switch83_out1;  // uint8
  reg [7:0] Delay2_out1;  // uint8
  wire [7:0] Add8_1_out1;  // uint8
  wire [7:0] Add8_2_out1;  // uint8
  wire signed [12:0] Add13_1_out1;  // sfix13
  wire signed [13:0] Unary_Minus1_in0;  // sfix14
  wire signed [12:0] Unary_Minus1_out1_1;  // sfix13
  wire signed [11:0] Simple_Dual_Port_RAM2_out1;  // sfix12
  wire signed [12:0] Add13_1_1;  // sfix13
  wire signed [12:0] Add13_1_2;  // sfix13
  wire RO6_relop1;
  wire signed [12:0] Switch41_out1;  // sfix13
  wire RO1_relop1;
  wire signed [12:0] Switch1_out1;  // sfix13
  wire signed [12:0] LmtAV1_1_out1;  // sfix13
  wire signed [11:0] S12_6_out1;  // sfix12
  reg signed [11:0] Unit_Delay4_out1;  // sfix12
  wire signed [23:0] Pro14_1_mul_temp;  // sfix24
  wire signed [25:0] Pro14_1_out1;  // sfix26
  wire [13:0] Bit_Slice5_out1;  // ufix14
  wire signed [13:0] S14_3_out1;  // sfix14
  wire RO61_relop1;
  wire signed [13:0] Switch41_out1_1;  // sfix14
  wire RO11_relop1;
  wire signed [13:0] Switch1_out1_1;  // sfix14
  wire signed [11:0] S12_3_out1;  // sfix12
  reg signed [11:0] Unit_Delay5_out1;  // sfix12
  wire signed [11:0] Switch1_out1_2;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire switch_compare_1_2;
  reg signed [11:0] Unit_Delay2_out1;  // sfix12
  wire signed [11:0] Switch2_out1;  // sfix12
  wire [7:0] Switch3_out1;  // uint8
  reg [7:0] Delay3_out1;  // uint8
  wire [7:0] Add8_3_out1;  // uint8
  wire [7:0] Add8_4_out1;  // uint8
  wire signed [11:0] Simple_Dual_Port_RAM1_out1;  // sfix12
  wire signed [27:0] Pro28_2_out1;  // sfix28
  wire [17:0] Bit_Slice1_out1;  // ufix18
  wire signed [17:0] S18_1_out1;  // sfix18
  wire signed [17:0] S18_2_out1;  // sfix18
  wire RO62_relop1;
  wire signed [17:0] Switch41_out1_2;  // sfix18
  wire signed [18:0] Unary_Minus12_in0;  // sfix19
  wire signed [17:0] Unary_Minus1_out1_2;  // sfix18
  wire RO12_relop1;
  wire signed [17:0] Switch1_out1_3;  // sfix18
  wire signed [11:0] S12_4_out1;  // sfix12
  wire signed [18:0] Add15_2_1;  // sfix19
  wire signed [18:0] Add15_2_2;  // sfix19
  wire signed [18:0] Add15_2_out1;  // sfix19
  wire RO63_relop1;
  wire signed [18:0] Switch41_out1_3;  // sfix19
  wire signed [18:0] Unary_Minus1_out1_3;  // sfix19
  wire RO13_relop1;
  wire signed [18:0] Switch1_out1_4;  // sfix19
  wire signed [11:0] S12_1_out1;  // sfix12
  reg signed [11:0] Unit_Delay3_out1;  // sfix12

  // Delay20ms
  // 
  // Delay20ms


  assign switch_compare_1 = work > 1'b0;



  assign switch_compare_1_1 = Pulse50x256_Hz > 1'b0;



  // <S5>/Unary Minus1
  assign Unary_Minus1_out1 = 14'sb11100000000001;



  // <S1>/Switch83
  assign Switch83_out1 = (Pulse50x256_Hz == 1'b0 ? 8'b00000000 :
              8'b00000001);



  // <S1>/Add8_1
  assign Add8_1_out1 = Switch83_out1 + Delay2_out1;



  // <S1>/Delay2
  always @(posedge g_clk)
    begin : Delay2_process
      if (Rst_n == 1'b0) begin
        Delay2_out1 <= 8'b00000000;
      end
      else begin
        Delay2_out1 <= Add8_1_out1;
      end
    end



  // <S1>/Add8_2
  assign Add8_2_out1 = 8'b11111111 + Delay2_out1;



  // <S4>/Unary Minus1
  assign Unary_Minus1_in0 =  - ({Add13_1_out1[12], Add13_1_out1});
  assign Unary_Minus1_out1_1 = Unary_Minus1_in0[12:0];



  // <S1>/Add13_1
  assign Add13_1_1 = {Err_b12[11], Err_b12};
  assign Add13_1_2 = {Simple_Dual_Port_RAM2_out1[11], Simple_Dual_Port_RAM2_out1};
  assign Add13_1_out1 = Add13_1_1 + Add13_1_2;



  // <S4>/RO6
  assign RO6_relop1 = 13'sb0011111111111 > Add13_1_out1;



  // <S4>/Switch41
  assign Switch41_out1 = (RO6_relop1 == 1'b0 ? 13'sb0011111111111 :
              Add13_1_out1);



  // <S4>/RO1
  // 
  // <S1>/LmtAV1_1
  assign RO1_relop1 = Switch41_out1 < Unary_Minus1_out1_1;



  // <S4>/Switch1
  assign Switch1_out1 = (RO1_relop1 == 1'b0 ? Switch41_out1 :
              Unary_Minus1_out1_1);



  assign LmtAV1_1_out1 = Switch1_out1;

  // <S1>/S12_6
  assign S12_6_out1 = LmtAV1_1_out1[11:0];



  // <S1>/Unit Delay4
  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay4_out1 <= S12_6_out1;
      end
    end



  // <S1>/Pro14_1
  assign Pro14_1_mul_temp = Q_b12 * Unit_Delay4_out1;
  assign Pro14_1_out1 = {{2{Pro14_1_mul_temp[23]}}, Pro14_1_mul_temp};



  // <S1>/Bit Slice5
  assign Bit_Slice5_out1 = Pro14_1_out1[23:10];



  // <S1>/S14_3
  assign S14_3_out1 = Bit_Slice5_out1;



  // <S5>/RO6
  assign RO61_relop1 = S14_3_out1 > 14'sb00011111111111;



  // <S5>/Switch41
  assign Switch41_out1_1 = (RO61_relop1 == 1'b0 ? S14_3_out1 :
              14'sb00011111111111);



  // <S5>/RO1
  // 
  // <S1>/LmtAV1_2
  assign RO11_relop1 = Switch41_out1_1 < Unary_Minus1_out1;



  // <S5>/Switch1
  assign Switch1_out1_1 = (RO11_relop1 == 1'b0 ? Switch41_out1_1 :
              Unary_Minus1_out1);



  // <S1>/S12_3
  assign S12_3_out1 = Switch1_out1_1[11:0];



  // <S1>/Switch1
  assign Switch1_out1_2 = (switch_compare_1_1 == 1'b0 ? Unit_Delay5_out1 :
              S12_3_out1);



  // <S1>/Unit Delay5
  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch1_out1_2;
      end
    end



  // <S1>/Switch4
  assign Switch4_out1 = (switch_compare_1 == 1'b0 ? 12'sb000000000000 :
              Unit_Delay5_out1);



  // <S1>/Simple Dual Port RAM2
  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch4_out1),
                                                               .wr_addr(Add8_2_out1),
                                                               .wr_en(Pulse50x256_Hz),
                                                               .rd_addr(Delay2_out1),
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)
                                                               );

  assign Dbg1_b12 = Simple_Dual_Port_RAM2_out1;

  assign switch_compare_1_2 = Pulse50x256_Hz > 1'b0;



  // <S1>/Switch2
  assign Switch2_out1 = (switch_compare_1_2 == 1'b0 ? Unit_Delay2_out1 :
              S12_6_out1);



  // <S1>/Unit Delay2
  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch2_out1;
      end
    end



  // <S1>/Switch3
  assign Switch3_out1 = (Pulse50x256_Hz == 1'b0 ? 8'b00000000 :
              8'b00000001);



  // <S1>/Add8_3
  assign Add8_3_out1 = Switch3_out1 + Delay3_out1;



  // <S1>/Delay3
  always @(posedge g_clk)
    begin : Delay3_process
      if (Rst_n == 1'b0) begin
        Delay3_out1 <= 8'b00000000;
      end
      else begin
        Delay3_out1 <= Add8_3_out1;
      end
    end



  // <S1>/Add8_4
  assign Add8_4_out1 = Dly_u8 + Delay3_out1;



  // <S1>/Simple Dual Port RAM1
  // 
  // <S1>/Goto1
  // 
  // <S1>/From1
  // 
  // <S1>/Goto1
  // 
  // <S1>/From6
  // 
  // <S1>/Goto1
  // 
  // <S1>/From5
  // 
  // <S1>/Goto1
  // 
  // <S1>/From4
  // 
  // <S1>/Goto1
  // 
  // <S1>/From3
  // 
  // <S1>/Goto1
  // 
  // <S1>/From2
  SimpDualPortRAM_Wrapper_generic   #  (.AddrWidth(8),
                                        .DataWidth(12)
                                        )
                                    u_Simple_Dual_Port_RAM1   (.g_clk(g_clk),
                                                               .wr_din(Unit_Delay2_out1),
                                                               .wr_addr(Add8_4_out1),
                                                               .wr_en(Pulse50x256_Hz),
                                                               .rd_addr(Delay3_out1),
                                                               .rd_dout(Simple_Dual_Port_RAM1_out1)
                                                               );

  // <S1>/Pro28_2
  assign Pro28_2_out1 = Kr_b16 * Simple_Dual_Port_RAM1_out1;



  // <S1>/Bit Slice1
  assign Bit_Slice1_out1 = Pro28_2_out1[27:10];



  // <S1>/S18_1
  assign S18_1_out1 = Bit_Slice1_out1;



  // <S1>/S18_2
  assign S18_2_out1 = {{6{Lmt_b12[11]}}, Lmt_b12};



  // <S6>/RO6
  assign RO62_relop1 = S18_1_out1 > S18_2_out1;



  // <S6>/Switch41
  assign Switch41_out1_2 = (RO62_relop1 == 1'b0 ? S18_1_out1 :
              S18_2_out1);



  // <S6>/Unary Minus1
  assign Unary_Minus12_in0 =  - ({S18_2_out1[17], S18_2_out1});
  assign Unary_Minus1_out1_2 = Unary_Minus12_in0[17:0];



  // <S6>/RO1
  // 
  // <S1>/LmtAV1_3
  assign RO12_relop1 = Switch41_out1_2 < Unary_Minus1_out1_2;



  // <S6>/Switch1
  assign Switch1_out1_3 = (RO12_relop1 == 1'b0 ? Switch41_out1_2 :
              Unary_Minus1_out1_2);



  // <S1>/S12_4
  assign S12_4_out1 = Switch1_out1_3[11:0];



  assign Dbg3_b12 = S12_4_out1;

  // <S1>/Add15_2
  assign Add15_2_1 = {Switch1_out1_3[17], Switch1_out1_3};
  assign Add15_2_2 = {{7{Min_b12[11]}}, Min_b12};
  assign Add15_2_out1 = Add15_2_1 + Add15_2_2;



  // <S7>/RO6
  assign RO63_relop1 = Add15_2_out1 > 19'sb0000000011111111111;



  // <S7>/Switch41
  assign Switch41_out1_3 = (RO63_relop1 == 1'b0 ? Add15_2_out1 :
              19'sb0000000011111111111);



  // <S7>/Unary Minus1
  assign Unary_Minus1_out1_3 = 19'sb1111111100000000001;



  // <S7>/RO1
  // 
  // <S1>/LmtAV1_4
  assign RO13_relop1 = Switch41_out1_3 < Unary_Minus1_out1_3;



  // <S7>/Switch1
  assign Switch1_out1_4 = (RO13_relop1 == 1'b0 ? Switch41_out1_3 :
              Unary_Minus1_out1_3);



  // <S1>/S12_1
  assign S12_1_out1 = Switch1_out1_4[11:0];



  // <S1>/Unit Delay3
  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay3_out1 <= S12_1_out1;
      end
    end



  assign Mout_b12 = Unit_Delay3_out1;

  assign Dbg2_b12 = Simple_Dual_Port_RAM1_out1;

endmodule  // RR_VZ1

