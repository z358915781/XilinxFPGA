// -------------------------------------------------------------
// 
// File Name: Work_RMSP64Ch4_V10\RMSP64Ch4_V10\RMSP64Ch4_V10.v
// Created: 2017-05-12 11:06:47
// 
// Generated by MATLAB 8.6 and HDL Coder 3.7
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RMSP64Ch4_V10
// Source Path: RMSP64Ch4_V10/RMSP64Ch4_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RMSP64Ch4_V10
          (
           g_clk,
           Rst_n,
           Pulse,
           RMS_In0,
           RMS_In1,
           RMS_In2,
           RMS_In3,
           RMS_Out0,
           RMS_Out1,
           RMS_Out2,
           RMS_Out3
          );


  input   g_clk;
  input   Rst_n;
  input   Pulse;
  input   signed [11:0] RMS_In0;  // sfix12
  input   signed [11:0] RMS_In1;  // sfix12
  input   signed [11:0] RMS_In2;  // sfix12
  input   signed [11:0] RMS_In3;  // sfix12
  output  signed [11:0] RMS_Out0;  // sfix12
  output  signed [11:0] RMS_Out1;  // sfix12
  output  signed [11:0] RMS_Out2;  // sfix12
  output  signed [11:0] RMS_Out3;  // sfix12


  reg [5:0] Unit_Delay10_out1;  // ufix6
  wire [5:0] Add3_out1;  // ufix6
  wire Cmp17_out1;
  wire Cmp1_out1;
  wire Cmp2_out1;
  wire Cmp3_out1;
  wire Cmp4_out1;
  wire Or1_out1;
  wire [11:0] Switch163_out1;  // ufix12
  reg [11:0] Unit_Delay78_out1;  // ufix12
  wire [11:0] bit_shift_out1;  // ufix12
  wire Cmp8_out1;
  reg [1:0] Unit_Delay7_out1;  // ufix2
  wire [1:0] Add1_out1;  // ufix2
  wire CT60_out1;
  wire CT12_out1;
  reg  Unit_Delay54_out1;
  wire Switch20_out1;
  wire Switch17_out1;
  wire Or3_out1;
  wire Switch208_out1;
  reg  Unit_Delay55_out1;
  wire CT70_out1;
  wire Or2_out1;
  wire [7:0] Switch83_out1;  // uint8
  reg [7:0] Unit_Delay32_out1;  // uint8
  wire [7:0] Add11_out1;  // uint8
  wire Ro10_relop1;
  reg  Unit_Delay57_out1;
  wire Switch49_out1;
  wire Switch105_out1;
  reg  Unit_Delay1_out1;
  wire CT55_out1;
  wire CT57_out1;
  wire CT59_out1;
  wire CT61_out1;
  wire CT5_out1;
  wire CT90_out1;
  wire CT2_out1;
  wire CT4_out1;
  wire CT6_out1;
  wire signed [11:0] Switch8_out1;  // sfix12
  wire signed [11:0] Switch6_out1;  // sfix12
  wire signed [11:0] Switch4_out1;  // sfix12
  wire signed [11:0] Switch151_out1;  // sfix12
  wire signed [23:0] Product_out1;  // sfix24
  wire RO8_relop1;
  wire signed [23:0] Switch76_out1;  // sfix24
  wire RO7_relop1;
  wire signed [23:0] Switch2_out1;  // sfix24
  reg signed [23:0] Unit_Delay4_out1;  // sfix24
  wire signed [23:0] Switch7_out1;  // sfix24
  wire signed [23:0] signal1;  // sfix24
  wire signed [23:0] s;  // sfix24
  wire CT3_out1;
  reg signed [23:0] Unit_Delay3_out1;  // sfix24
  wire signed [23:0] Switch5_out1;  // sfix24
  wire signed [23:0] signal1_1;  // sfix24
  wire signed [23:0] s_1;  // sfix24
  wire CT1_out1;
  reg signed [23:0] Unit_Delay2_out1;  // sfix24
  wire signed [23:0] Switch3_out1;  // sfix24
  wire signed [23:0] signal1_2;  // sfix24
  wire signed [23:0] s_2;  // sfix24
  wire CT89_out1;
  reg signed [23:0] Unit_Delay69_out1;  // sfix24
  wire signed [23:0] Switch150_out1;  // sfix24
  wire switch_compare_1;
  wire signed [23:0] signal1_3;  // sfix24
  wire signed [23:0] signal1_4;  // sfix24
  wire signed [23:0] signal1_5;  // sfix24
  wire signed [23:0] Switch84_out1;  // sfix24
  wire signed [23:0] Switch97_out1;  // sfix24
  wire [7:0] Add12_out1;  // uint8
  wire signed [23:0] Simple_Dual_Port_RAM2_out1;  // sfix24
  wire switch_compare_1_1;
  wire signed [23:0] Switch98_out1;  // sfix24
  wire signed [30:0] Add2_stage2_1;  // sfix31
  wire signed [30:0] Add2_stage2_2;  // sfix31
  wire signed [30:0] Add2_op_stage2;  // sfix31
  wire CT58_out1;
  wire CT56_out1;
  wire CT51_out1;
  reg signed [29:0] Unit_Delay30_out1;  // sfix30
  wire signed [29:0] Switch79_out1;  // sfix30
  wire signed [29:0] Switch80_out1;  // sfix30
  reg signed [29:0] Unit_Delay33_out1;  // sfix30
  wire signed [29:0] Switch87_out1;  // sfix30
  reg signed [29:0] Unit_Delay34_out1;  // sfix30
  wire signed [29:0] Switch89_out1;  // sfix30
  reg signed [29:0] Unit_Delay35_out1;  // sfix30
  wire signed [29:0] signal2;  // sfix30
  wire signed [29:0] s_3;  // sfix30
  wire signed [29:0] signal2_1;  // sfix30
  wire signed [29:0] s_4;  // sfix30
  wire signed [29:0] signal2_2;  // sfix30
  wire signed [29:0] s_5;  // sfix30
  wire signed [29:0] signal2_3;  // sfix30
  wire signed [29:0] signal2_4;  // sfix30
  wire signed [29:0] signal2_5;  // sfix30
  wire signed [30:0] Add2_stage3_add_temp;  // sfix31
  wire signed [30:0] Add2_stage3_1;  // sfix31
  wire signed [29:0] Add2_out1;  // sfix30
  wire signed [29:0] Switch91_out1;  // sfix30
  wire Cmp7_out1;
  wire [23:0] Bit_Slice3_out1;  // ufix24
  wire Cmp6_out1;
  wire [23:0] Bit_Slice2_out1;  // ufix24
  wire Cmp5_out1;
  wire [23:0] Bit_Slice1_out1;  // ufix24
  wire [23:0] Bit_Slice6_out1;  // ufix24
  wire [23:0] Switch1_out1;  // ufix24
  reg [23:0] Unit_Delay5_out1;  // ufix24
  wire [23:0] Switch11_out1;  // ufix24
  wire [23:0] Switch10_out1;  // ufix24
  wire [23:0] Switch9_out1;  // ufix24
  wire [11:0] Switch162_out1;  // ufix12
  reg [11:0] Unit_Delay76_out1;  // ufix12
  wire [11:0] Switch165_out1;  // ufix12
  wire [11:0] Bitwise_Operator7_out1;  // ufix12
  wire [23:0] Product8_out1;  // ufix24
  wire RO32_relop1;
  wire signed [11:0] Data_Type_Conversion27_out1;  // sfix12
  reg signed [11:0] Unit_Delay77_out1;  // sfix12
  wire signed [11:0] Switch164_out1;  // sfix12
  wire Cmp9_out1;
  reg signed [11:0] Unit_Delay6_out1;  // sfix12
  wire signed [11:0] Switch12_out1;  // sfix12
  wire Cmp10_out1;
  reg signed [11:0] Unit_Delay8_out1;  // sfix12
  wire signed [11:0] Switch13_out1;  // sfix12
  wire Cmp11_out1;
  reg signed [11:0] Unit_Delay9_out1;  // sfix12
  wire signed [11:0] Switch14_out1;  // sfix12


  assign Add3_out1 = 6'b000001 + Unit_Delay10_out1;



  always @(posedge g_clk)
    begin : Unit_Delay10_process
      if (Rst_n == 1'b0) begin
        Unit_Delay10_out1 <= 6'b000000;
      end
      else begin
        Unit_Delay10_out1 <= Add3_out1;
      end
    end



  assign Cmp17_out1 = Unit_Delay10_out1 == 6'b001010;



  assign Cmp1_out1 = Unit_Delay10_out1 == 6'b000000;



  assign Cmp2_out1 = Unit_Delay10_out1 == 6'b001011;



  assign Cmp3_out1 = Unit_Delay10_out1 == 6'b010110;



  assign Cmp4_out1 = Unit_Delay10_out1 == 6'b100001;



  assign Or1_out1 = Cmp4_out1 | (Cmp3_out1 | (Cmp1_out1 | Cmp2_out1));



  always @(posedge g_clk)
    begin : Unit_Delay78_process
      if (Rst_n == 1'b0) begin
        Unit_Delay78_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay78_out1 <= Switch163_out1;
      end
    end



  assign bit_shift_out1 = Unit_Delay78_out1 >> 8'd1;



  assign Switch163_out1 = (Or1_out1 == 1'b0 ? bit_shift_out1 :
              12'b010000000000);



  assign Cmp8_out1 = Unit_Delay10_out1 == 6'b100001;



  assign Add1_out1 = 2'b01 + Unit_Delay7_out1;



  always @(posedge g_clk)
    begin : Unit_Delay7_process
      if (Rst_n == 1'b0) begin
        Unit_Delay7_out1 <= 2'b00;
      end
      else begin
        Unit_Delay7_out1 <= Add1_out1;
      end
    end



  assign CT60_out1 = Unit_Delay7_out1 == 2'b11;



  assign CT12_out1 = Unit_Delay7_out1 == 2'b00;



  assign Switch20_out1 = (Pulse == 1'b0 ? Unit_Delay54_out1 :
              1'b1);



  assign Switch17_out1 = (CT12_out1 == 1'b0 ? Switch20_out1 :
              1'b0);



  always @(posedge g_clk)
    begin : Unit_Delay54_process
      if (Rst_n == 1'b0) begin
        Unit_Delay54_out1 <= 1'b0;
      end
      else begin
        Unit_Delay54_out1 <= Switch17_out1;
      end
    end



  assign Or3_out1 = Pulse | Unit_Delay54_out1;



  always @(posedge g_clk)
    begin : Unit_Delay55_process
      if (Rst_n == 1'b0) begin
        Unit_Delay55_out1 <= 1'b0;
      end
      else begin
        Unit_Delay55_out1 <= Switch208_out1;
      end
    end



  assign Switch208_out1 = (CT12_out1 == 1'b0 ? Unit_Delay55_out1 :
              Or3_out1);



  assign CT70_out1 = Unit_Delay7_out1 == 2'b00;



  assign Or2_out1 = Switch208_out1 & CT70_out1;



  assign Switch83_out1 = (Switch208_out1 == 1'b0 ? 8'b00000000 :
              8'b00000001);



  assign Add11_out1 = Switch83_out1 + Unit_Delay32_out1;



  always @(posedge g_clk)
    begin : Unit_Delay32_process
      if (Rst_n == 1'b0) begin
        Unit_Delay32_out1 <= 8'b00000000;
      end
      else begin
        Unit_Delay32_out1 <= Add11_out1;
      end
    end



  assign Ro10_relop1 = Unit_Delay32_out1 > Add11_out1;



  assign Switch49_out1 = (Ro10_relop1 == 1'b0 ? Unit_Delay57_out1 :
              1'b1);



  always @(posedge g_clk)
    begin : Unit_Delay57_process
      if (Rst_n == 1'b0) begin
        Unit_Delay57_out1 <= 1'b0;
      end
      else begin
        Unit_Delay57_out1 <= Switch49_out1;
      end
    end



  always @(posedge g_clk)
    begin : Unit_Delay1_process
      if (Rst_n == 1'b0) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        Unit_Delay1_out1 <= Switch105_out1;
      end
    end



  assign Switch105_out1 = (Or2_out1 == 1'b0 ? Unit_Delay1_out1 :
              Unit_Delay57_out1);



  assign CT55_out1 = Unit_Delay7_out1 == 2'b00;



  assign CT57_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT59_out1 = Unit_Delay7_out1 == 2'b10;



  assign CT61_out1 = Unit_Delay7_out1 == 2'b11;



  assign CT5_out1 = Unit_Delay7_out1 == 2'b11;



  assign CT90_out1 = Unit_Delay7_out1 == 2'b00;



  assign CT2_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT4_out1 = Unit_Delay7_out1 == 2'b10;



  assign CT6_out1 = Unit_Delay7_out1 == 2'b11;



  assign Switch8_out1 = (CT6_out1 == 1'b0 ? RMS_In3 :
              RMS_In3);



  assign Switch6_out1 = (CT4_out1 == 1'b0 ? Switch8_out1 :
              RMS_In2);



  assign Switch4_out1 = (CT2_out1 == 1'b0 ? Switch6_out1 :
              RMS_In1);



  assign Switch151_out1 = (CT90_out1 == 1'b0 ? Switch4_out1 :
              RMS_In0);



  assign Product_out1 = Switch151_out1 * Switch151_out1;



  assign RO8_relop1 = 1'b0;



  assign Switch76_out1 = (RO8_relop1 == 1'b0 ? Product_out1 :
              24'sb011111111111111111111111);



  assign RO7_relop1 = Switch76_out1 < 24'sb100000000000000000000001;



  assign Switch2_out1 = (RO7_relop1 == 1'b0 ? Switch76_out1 :
              24'sb100000000000000000000001);



  assign Switch7_out1 = (CT5_out1 == 1'b0 ? Unit_Delay4_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay4_process
      if (Rst_n == 1'b0) begin
        Unit_Delay4_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay4_out1 <= Switch7_out1;
      end
    end



  assign signal1 = (CT61_out1 == 1'b0 ? Unit_Delay4_out1 :
              Unit_Delay4_out1);



  assign s = signal1;

  assign CT3_out1 = Unit_Delay7_out1 == 2'b10;



  assign Switch5_out1 = (CT3_out1 == 1'b0 ? Unit_Delay3_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay3_process
      if (Rst_n == 1'b0) begin
        Unit_Delay3_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay3_out1 <= Switch5_out1;
      end
    end



  assign signal1_1 = (CT59_out1 == 1'b0 ? s :
              Unit_Delay3_out1);



  assign s_1 = signal1_1;

  assign CT1_out1 = Unit_Delay7_out1 == 2'b01;



  assign Switch3_out1 = (CT1_out1 == 1'b0 ? Unit_Delay2_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay2_process
      if (Rst_n == 1'b0) begin
        Unit_Delay2_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay2_out1 <= Switch3_out1;
      end
    end



  assign signal1_2 = (CT57_out1 == 1'b0 ? s_1 :
              Unit_Delay2_out1);



  assign s_2 = signal1_2;

  assign CT89_out1 = Unit_Delay7_out1 == 2'b00;



  assign Switch150_out1 = (CT89_out1 == 1'b0 ? Unit_Delay69_out1 :
              Switch2_out1);



  always @(posedge g_clk)
    begin : Unit_Delay69_process
      if (Rst_n == 1'b0) begin
        Unit_Delay69_out1 <= 24'sb000000000000000000000000;
      end
      else begin
        Unit_Delay69_out1 <= Switch150_out1;
      end
    end



  assign switch_compare_1 = Switch105_out1 > 1'b0;



  assign signal1_3 = (CT55_out1 == 1'b0 ? s_2 :
              Unit_Delay69_out1);



  assign signal1_4 = signal1_3;

  assign signal1_5 = signal1_4;

  assign Switch84_out1 = (switch_compare_1 == 1'b0 ? 24'sb000000000000000000000000 :
              signal1_5);



  assign Switch97_out1 = (Switch208_out1 == 1'b0 ? 24'sb000000000000000000000000 :
              Switch84_out1);



  assign Add12_out1 = Add11_out1 + 8'b00000001;



  SimpDualPortRAM_Wrapper_256x24b   u_Simple_Dual_Port_RAM2   (.g_clk(g_clk),
                                                               .wr_din(Switch84_out1),  // sfix24
                                                               .wr_addr(Add11_out1),  // uint8
                                                               .wr_en(Switch208_out1),
                                                               .rd_addr(Add12_out1),  // uint8
                                                               .rd_dout(Simple_Dual_Port_RAM2_out1)  // sfix24
                                                               );

  assign switch_compare_1_1 = Switch105_out1 > 1'b0;



  assign Switch98_out1 = (Switch208_out1 == 1'b0 ? 24'sb000000000000000000000000 :
              Simple_Dual_Port_RAM2_out1);



  assign Add2_stage2_1 = {{7{Switch97_out1[23]}}, Switch97_out1};
  assign Add2_stage2_2 = {{7{Switch98_out1[23]}}, Switch98_out1};
  assign Add2_op_stage2 = Add2_stage2_1 - Add2_stage2_2;



  assign CT58_out1 = Unit_Delay7_out1 == 2'b10;



  assign CT56_out1 = Unit_Delay7_out1 == 2'b01;



  assign CT51_out1 = Unit_Delay7_out1 == 2'b00;



  assign Switch80_out1 = (CT51_out1 == 1'b0 ? Unit_Delay30_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay30_process
      if (Rst_n == 1'b0) begin
        Unit_Delay30_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay30_out1 <= Switch80_out1;
      end
    end



  assign Switch87_out1 = (CT56_out1 == 1'b0 ? Unit_Delay33_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay33_process
      if (Rst_n == 1'b0) begin
        Unit_Delay33_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay33_out1 <= Switch87_out1;
      end
    end



  assign Switch89_out1 = (CT58_out1 == 1'b0 ? Unit_Delay34_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay34_process
      if (Rst_n == 1'b0) begin
        Unit_Delay34_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay34_out1 <= Switch89_out1;
      end
    end



  assign signal2 = (CT61_out1 == 1'b0 ? Unit_Delay35_out1 :
              Unit_Delay35_out1);



  assign s_3 = signal2;

  assign signal2_1 = (CT59_out1 == 1'b0 ? s_3 :
              Unit_Delay34_out1);



  assign s_4 = signal2_1;

  assign signal2_2 = (CT57_out1 == 1'b0 ? s_4 :
              Unit_Delay33_out1);



  assign s_5 = signal2_2;

  assign signal2_3 = (CT55_out1 == 1'b0 ? s_5 :
              Unit_Delay30_out1);



  assign signal2_4 = signal2_3;

  assign signal2_5 = signal2_4;

  assign Add2_stage3_1 = {signal2_5[29], signal2_5};
  assign Add2_stage3_add_temp = Add2_op_stage2 + Add2_stage3_1;
  assign Add2_out1 = Add2_stage3_add_temp[29:0];



  assign Switch79_out1 = (switch_compare_1_1 == 1'b0 ? 30'sb000000000000000000000000000000 :
              Add2_out1);



  assign Switch91_out1 = (CT60_out1 == 1'b0 ? Unit_Delay35_out1 :
              Switch79_out1);



  always @(posedge g_clk)
    begin : Unit_Delay35_process
      if (Rst_n == 1'b0) begin
        Unit_Delay35_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        Unit_Delay35_out1 <= Switch91_out1;
      end
    end



  assign Cmp7_out1 = Unit_Delay10_out1 == 6'b010110;



  assign Bit_Slice3_out1 = Unit_Delay35_out1[29:6];



  assign Cmp6_out1 = Unit_Delay10_out1 == 6'b001011;



  assign Bit_Slice2_out1 = Unit_Delay34_out1[29:6];



  assign Cmp5_out1 = Unit_Delay10_out1 == 6'b000000;



  assign Bit_Slice1_out1 = Unit_Delay33_out1[29:6];



  assign Bit_Slice6_out1 = Unit_Delay30_out1[29:6];



  always @(posedge g_clk)
    begin : Unit_Delay5_process
      if (Rst_n == 1'b0) begin
        Unit_Delay5_out1 <= 24'b000000000000000000000000;
      end
      else begin
        Unit_Delay5_out1 <= Switch1_out1;
      end
    end



  assign Switch11_out1 = (Cmp8_out1 == 1'b0 ? Unit_Delay5_out1 :
              Bit_Slice3_out1);



  assign Switch10_out1 = (Cmp7_out1 == 1'b0 ? Switch11_out1 :
              Bit_Slice2_out1);



  assign Switch9_out1 = (Cmp6_out1 == 1'b0 ? Switch10_out1 :
              Bit_Slice1_out1);



  assign Switch1_out1 = (Cmp5_out1 == 1'b0 ? Switch9_out1 :
              Bit_Slice6_out1);



  always @(posedge g_clk)
    begin : Unit_Delay76_process
      if (Rst_n == 1'b0) begin
        Unit_Delay76_out1 <= 12'b000000000000;
      end
      else begin
        Unit_Delay76_out1 <= Switch162_out1;
      end
    end



  assign Switch165_out1 = (Or1_out1 == 1'b0 ? Unit_Delay76_out1 :
              12'b000000000000);



  assign Bitwise_Operator7_out1 = Switch163_out1 | Switch165_out1;



  assign Product8_out1 = Bitwise_Operator7_out1 * Bitwise_Operator7_out1;



  assign RO32_relop1 = Product8_out1 < Switch1_out1;



  assign Switch162_out1 = (RO32_relop1 == 1'b0 ? Switch165_out1 :
              Bitwise_Operator7_out1);



  assign Data_Type_Conversion27_out1 = Switch162_out1;



  assign Switch164_out1 = (Cmp17_out1 == 1'b0 ? Unit_Delay77_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay77_process
      if (Rst_n == 1'b0) begin
        Unit_Delay77_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay77_out1 <= Switch164_out1;
      end
    end



  assign RMS_Out0 = Unit_Delay77_out1;

  assign Cmp9_out1 = Unit_Delay10_out1 == 6'b010101;



  assign Switch12_out1 = (Cmp9_out1 == 1'b0 ? Unit_Delay6_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay6_process
      if (Rst_n == 1'b0) begin
        Unit_Delay6_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay6_out1 <= Switch12_out1;
      end
    end



  assign RMS_Out1 = Unit_Delay6_out1;

  assign Cmp10_out1 = Unit_Delay10_out1 == 6'b100000;



  assign Switch13_out1 = (Cmp10_out1 == 1'b0 ? Unit_Delay8_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay8_process
      if (Rst_n == 1'b0) begin
        Unit_Delay8_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay8_out1 <= Switch13_out1;
      end
    end



  assign RMS_Out2 = Unit_Delay8_out1;

  assign Cmp11_out1 = Unit_Delay10_out1 == 6'b101011;



  assign Switch14_out1 = (Cmp11_out1 == 1'b0 ? Unit_Delay9_out1 :
              Data_Type_Conversion27_out1);



  always @(posedge g_clk)
    begin : Unit_Delay9_process
      if (Rst_n == 1'b0) begin
        Unit_Delay9_out1 <= 12'sb000000000000;
      end
      else begin
        Unit_Delay9_out1 <= Switch14_out1;
      end
    end



  assign RMS_Out3 = Unit_Delay9_out1;




endmodule  // RMSP64Ch4_V10

