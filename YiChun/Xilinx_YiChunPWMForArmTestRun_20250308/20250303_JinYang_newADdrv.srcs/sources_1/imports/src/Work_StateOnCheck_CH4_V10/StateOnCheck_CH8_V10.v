// -------------------------------------------------------------
// 
// File Name: Work_StateOnCheck_CH4_V10\StateOnCheck_CH4_V10\StateOnCheck_CH8_V10.v
// Created: 2020-06-07 09:39:03
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-08
// Target subsystem base rate: 4e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: StateOnCheck_CH8_V10
// Source Path: StateOnCheck_CH4_V10/StateOnCheck_CH8_V10
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module StateOnCheck_CH8_V10
          (
           g_clk,
           Rst_n,
           State_On1,
           Fault_Time1,
           State_On2,
           Fault_Time2,
           State_On3,
           Fault_Time3,
           State_On4,
           Fault_Time4,
           State_On5,
           Fault_Time5,
           State_On6,
           Fault_Time6,
           State_On7,
           Fault_Time7,
           State_On8,
           Fault_Time8,
           Pulse4096Hz,
           Drv_Fault1,
           Drv_Fault2,
           Drv_Fault3,
           Drv_Fault4,
           Drv_Fault5,
           Drv_Fault6,
           Drv_Fault7,
           Drv_Fault8
          );



  input   g_clk;
  input   Rst_n;
  input   State_On1;
  input   [15:0] Fault_Time1;  // uint16
  input   State_On2;
  input   [15:0] Fault_Time2;  // uint16
  input   State_On3;
  input   [15:0] Fault_Time3;  // uint16
  input   State_On4;
  input   [15:0] Fault_Time4;  // uint16
  input   State_On5;
  input   [15:0] Fault_Time5;  // uint16
  input   State_On6;
  input   [15:0] Fault_Time6;  // uint16
  input   State_On7;
  input   [15:0] Fault_Time7;  // uint16
  input   State_On8;
  input   [15:0] Fault_Time8;  // uint16
  input   Pulse4096Hz;
  output  Drv_Fault1;
  output  Drv_Fault2;
  output  Drv_Fault3;
  output  Drv_Fault4;
  output  Drv_Fault5;
  output  Drv_Fault6;
  output  Drv_Fault7;
  output  Drv_Fault8;

  wire [1:0] Constant6_out1;  // ufix2
  wire [1:0] Constant5_out1;  // ufix2
  wire [1:0] Constant7_out1;  // ufix2
  wire [3:0] Constant7_out1_dtc;  // ufix4
  reg [3:0] Delay1_out1;  // ufix4
  wire CTC_8_out1;
  wire LO3_out1;
  wire [1:0] SW12_out1;  // ufix2
  wire [4:0] Add1_add_temp;  // ufix5
  wire [4:0] Add1_1;  // ufix5
  wire [4:0] Add1_2;  // ufix5
  wire [3:0] Add1_out1;  // ufix4
  wire [3:0] SW13_out1;  // ufix4
  wire CTC_4_out1;
  wire CTC_0_out1;
  wire CTC_1_out1;
  wire CTC_2_out1;
  wire CTC_3_out1;
  wire CTC_9_out1;
  wire CTC_10_out1;
  wire CTC_11_out1;
  wire CTC_12_out1;
  wire signal1_signal_1;
  wire s;
  wire signal1_signal_1_1;
  wire s_1;
  wire signal1_signal_1_2;
  wire s_2;
  wire signal1_signal_1_3;
  wire s_3;
  wire signal1_signal_1_4;
  wire s_4;
  wire signal1_signal_1_5;
  wire s_5;
  wire signal1_signal_1_6;
  wire s_6;
  wire signal1_signal_1_7;
  wire signal1_signal_1_8;
  wire signal1_signal_1_9;
  wire [15:0] Constant4_out1;  // uint16
  wire [15:0] Constant3_out1;  // uint16
  wire [15:0] SW7_out1;  // uint16
  wire CTC_16_out1;
  wire signal1_signal_1_10;
  wire [15:0] Constant2_out1;  // uint16
  wire [15:0] signal2_signal_2;  // uint16
  wire [15:0] s_7;  // uint16
  wire [15:0] signal2_signal_2_1;  // uint16
  wire [15:0] s_8;  // uint16
  wire [15:0] signal2_signal_2_2;  // uint16
  wire [15:0] s_9;  // uint16
  wire [15:0] signal2_signal_2_3;  // uint16
  wire [15:0] s_10;  // uint16
  wire [15:0] signal2_signal_2_4;  // uint16
  wire [15:0] s_11;  // uint16
  wire [15:0] signal2_signal_2_5;  // uint16
  wire [15:0] s_12;  // uint16
  wire [15:0] signal2_signal_2_6;  // uint16
  wire [15:0] s_13;  // uint16
  wire [15:0] signal2_signal_2_7;  // uint16
  wire [15:0] signal2_signal_2_8;  // uint16
  wire [15:0] signal2_signal_2_9;  // uint16
  wire CTC_15_out1;
  wire CTC_14_out1;
  wire CTC_13_out1;
  wire CTC_7_out1;
  wire CTC_6_out1;
  wire CTC_5_out1;
  reg [15:0] signal2;  // uint16
  wire [15:0] s_14;  // uint16
  wire [15:0] SW1_out1;  // uint16
  wire [15:0] signal2_1;  // uint16
  wire [15:0] s_15;  // uint16
  wire [15:0] signal2_2;  // uint16
  wire [15:0] signal2_3;  // uint16
  wire [15:0] s_16;  // uint16
  reg [15:0] signal2_4;  // uint16
  wire [15:0] s_17;  // uint16
  wire [15:0] signal2_5;  // uint16
  wire [15:0] s_18;  // uint16
  wire [15:0] signal2_6;  // uint16
  wire [15:0] signal2_7;  // uint16
  wire [15:0] s_19;  // uint16
  reg [15:0] signal2_8;  // uint16
  wire [15:0] s_20;  // uint16
  wire [15:0] signal2_9;  // uint16
  wire [15:0] s_21;  // uint16
  wire [15:0] signal2_10;  // uint16
  wire [15:0] signal2_11;  // uint16
  wire [15:0] s_22;  // uint16
  reg [15:0] signal2_12;  // uint16
  wire [15:0] s_23;  // uint16
  wire [15:0] signal2_13;  // uint16
  wire [15:0] s_24;  // uint16
  wire [15:0] signal2_14;  // uint16
  wire [15:0] signal2_15;  // uint16
  wire [15:0] s_25;  // uint16
  reg [15:0] signal2_16;  // uint16
  wire [15:0] s_26;  // uint16
  wire [15:0] signal2_17;  // uint16
  wire [15:0] s_27;  // uint16
  wire [15:0] signal2_18;  // uint16
  wire [15:0] signal2_19;  // uint16
  wire [15:0] s_28;  // uint16
  reg [15:0] signal2_20;  // uint16
  wire [15:0] s_29;  // uint16
  wire [15:0] signal2_21;  // uint16
  wire [15:0] s_30;  // uint16
  wire [15:0] signal2_22;  // uint16
  wire [15:0] signal2_23;  // uint16
  wire [15:0] s_31;  // uint16
  reg [15:0] signal2_24;  // uint16
  wire [15:0] s_32;  // uint16
  wire [15:0] signal2_25;  // uint16
  wire [15:0] s_33;  // uint16
  wire [15:0] signal2_26;  // uint16
  wire [15:0] signal2_27;  // uint16
  wire [15:0] s_34;  // uint16
  reg [15:0] signal2_28;  // uint16
  wire [15:0] signal2_29;  // uint16
  wire [15:0] signal2_30;  // uint16
  wire [15:0] s_35;  // uint16
  wire RO2_relop1;
  wire [15:0] Add2_out1;  // uint16
  wire [15:0] SW2_out1;  // uint16
  wire [15:0] s_36;  // uint16
  wire [15:0] signal2_31;  // uint16
  wire [15:0] s_37;  // uint16
  wire [15:0] s_38;  // uint16
  wire [15:0] signal2_signal_3;  // uint16
  wire [15:0] s_39;  // uint16
  wire [15:0] signal2_signal_3_1;  // uint16
  wire [15:0] s_40;  // uint16
  wire [15:0] signal2_signal_3_2;  // uint16
  wire [15:0] s_41;  // uint16
  wire [15:0] signal2_signal_3_3;  // uint16
  wire [15:0] s_42;  // uint16
  wire [15:0] signal2_signal_3_4;  // uint16
  wire [15:0] s_43;  // uint16
  wire [15:0] signal2_signal_3_5;  // uint16
  wire [15:0] s_44;  // uint16
  wire [15:0] signal2_signal_3_6;  // uint16
  wire [15:0] s_45;  // uint16
  wire [15:0] signal2_signal_3_7;  // uint16
  wire [15:0] signal2_signal_3_8;  // uint16
  wire [15:0] signal2_signal_3_9;  // uint16
  reg  signal1;
  wire s_46;
  wire signal1_1;
  wire s_47;
  wire signal1_2;
  wire signal1_3;
  reg  signal1_4;
  wire s_48;
  wire signal1_5;
  wire s_49;
  wire signal1_6;
  wire signal1_7;
  reg  signal1_8;
  wire s_50;
  wire signal1_9;
  wire s_51;
  wire signal1_10;
  wire signal1_11;
  reg  signal1_12;
  wire s_52;
  wire signal1_13;
  wire s_53;
  wire signal1_14;
  wire signal1_15;
  reg  signal1_16;
  wire s_54;
  wire signal1_17;
  wire s_55;
  wire signal1_18;
  wire signal1_19;
  reg  signal1_20;
  wire s_56;
  wire signal1_21;
  wire s_57;
  wire signal1_22;
  wire signal1_23;
  reg  signal1_24;
  wire s_58;
  wire signal1_25;
  wire s_59;
  wire signal1_26;
  wire signal1_27;
  reg  signal1_28;
  wire s_60;
  wire signal1_29;
  wire s_61;
  wire signal1_30;
  wire signal1_31;


  assign Constant6_out1 = 2'b00;



  assign Constant5_out1 = 2'b01;



  assign Constant7_out1 = 2'b00;



  assign Constant7_out1_dtc = {2'b0, Constant7_out1};



  assign CTC_8_out1 = Delay1_out1 < 4'b1000;



  assign LO3_out1 = Pulse4096Hz | CTC_8_out1;



  assign SW12_out1 = (LO3_out1 == 1'b0 ? Constant6_out1 :
              Constant5_out1);



  assign Add1_1 = {3'b0, SW12_out1};
  assign Add1_2 = {1'b0, Delay1_out1};
  assign Add1_add_temp = Add1_1 + Add1_2;
  assign Add1_out1 = Add1_add_temp[3:0];



  assign SW13_out1 = (Pulse4096Hz == 1'b0 ? Add1_out1 :
              Constant7_out1_dtc);



  always @(posedge g_clk)
    begin : Delay1_process
      if (Rst_n == 1'b0) begin
        Delay1_out1 <= 4'b0000;
      end
      else begin
        Delay1_out1 <= SW13_out1;
      end
    end



  assign CTC_4_out1 = Delay1_out1 == 4'b0000;



  assign CTC_0_out1 = Delay1_out1 == 4'b0000;



  assign CTC_1_out1 = Delay1_out1 == 4'b0001;



  assign CTC_2_out1 = Delay1_out1 == 4'b0010;



  assign CTC_3_out1 = Delay1_out1 == 4'b0011;



  assign CTC_9_out1 = Delay1_out1 == 4'b0100;



  assign CTC_10_out1 = Delay1_out1 == 4'b0101;



  assign CTC_11_out1 = Delay1_out1 == 4'b0110;



  assign CTC_12_out1 = Delay1_out1 == 4'b0111;



  assign signal1_signal_1 = (CTC_12_out1 == 1'b0 ? State_On8 :
              State_On8);



  assign s = signal1_signal_1;

  assign signal1_signal_1_1 = (CTC_11_out1 == 1'b0 ? s :
              State_On7);



  assign s_1 = signal1_signal_1_1;

  assign signal1_signal_1_2 = (CTC_10_out1 == 1'b0 ? s_1 :
              State_On6);



  assign s_2 = signal1_signal_1_2;

  assign signal1_signal_1_3 = (CTC_9_out1 == 1'b0 ? s_2 :
              State_On5);



  assign s_3 = signal1_signal_1_3;

  assign signal1_signal_1_4 = (CTC_3_out1 == 1'b0 ? s_3 :
              State_On4);



  assign s_4 = signal1_signal_1_4;

  assign signal1_signal_1_5 = (CTC_2_out1 == 1'b0 ? s_4 :
              State_On3);



  assign s_5 = signal1_signal_1_5;

  assign signal1_signal_1_6 = (CTC_1_out1 == 1'b0 ? s_5 :
              State_On2);



  assign s_6 = signal1_signal_1_6;

  assign signal1_signal_1_7 = (CTC_0_out1 == 1'b0 ? s_6 :
              State_On1);



  assign signal1_signal_1_8 = signal1_signal_1_7;

  assign signal1_signal_1_9 = signal1_signal_1_8;

  assign Constant4_out1 = 16'b0000000000000000;



  assign Constant3_out1 = 16'b0000000000000001;



  assign SW7_out1 = (signal1_signal_1_9 == 1'b0 ? Constant4_out1 :
              Constant3_out1);



  assign CTC_16_out1 = Delay1_out1 == 4'b0111;



  assign signal1_signal_1_10 = signal1_signal_1_7;

  assign Constant2_out1 = 16'b0000000000000000;



  assign signal2_signal_2 = (CTC_12_out1 == 1'b0 ? Fault_Time8 :
              Fault_Time8);



  assign s_7 = signal2_signal_2;

  assign signal2_signal_2_1 = (CTC_11_out1 == 1'b0 ? s_7 :
              Fault_Time7);



  assign s_8 = signal2_signal_2_1;

  assign signal2_signal_2_2 = (CTC_10_out1 == 1'b0 ? s_8 :
              Fault_Time6);



  assign s_9 = signal2_signal_2_2;

  assign signal2_signal_2_3 = (CTC_9_out1 == 1'b0 ? s_9 :
              Fault_Time5);



  assign s_10 = signal2_signal_2_3;

  assign signal2_signal_2_4 = (CTC_3_out1 == 1'b0 ? s_10 :
              Fault_Time4);



  assign s_11 = signal2_signal_2_4;

  assign signal2_signal_2_5 = (CTC_2_out1 == 1'b0 ? s_11 :
              Fault_Time3);



  assign s_12 = signal2_signal_2_5;

  assign signal2_signal_2_6 = (CTC_1_out1 == 1'b0 ? s_12 :
              Fault_Time2);



  assign s_13 = signal2_signal_2_6;

  assign signal2_signal_2_7 = (CTC_0_out1 == 1'b0 ? s_13 :
              Fault_Time1);



  assign signal2_signal_2_8 = signal2_signal_2_7;

  assign signal2_signal_2_9 = signal2_signal_2_8;

  assign CTC_15_out1 = Delay1_out1 == 4'b0110;



  assign CTC_14_out1 = Delay1_out1 == 4'b0101;



  assign CTC_13_out1 = Delay1_out1 == 4'b0100;



  assign CTC_7_out1 = Delay1_out1 == 4'b0011;



  assign CTC_6_out1 = Delay1_out1 == 4'b0010;



  assign CTC_5_out1 = Delay1_out1 == 4'b0001;



  assign s_14 = signal2;

  assign signal2_1 = (CTC_4_out1 == 1'b0 ? s_14 :
              SW1_out1);



  assign s_15 = signal2_1;

  always @(posedge g_clk)
    begin : Delay3_2_process
      if (Rst_n == 1'b0) begin
        signal2 <= 16'b0000000000000000;
      end
      else begin
        signal2 <= s_15;
      end
    end



  assign signal2_2 = signal2;

  assign signal2_3 = signal2_2;

  assign s_16 = signal2_3;

  assign s_17 = signal2_4;

  assign signal2_5 = (CTC_5_out1 == 1'b0 ? s_17 :
              SW1_out1);



  assign s_18 = signal2_5;

  always @(posedge g_clk)
    begin : Delay4_2_process
      if (Rst_n == 1'b0) begin
        signal2_4 <= 16'b0000000000000000;
      end
      else begin
        signal2_4 <= s_18;
      end
    end



  assign signal2_6 = signal2_4;

  assign signal2_7 = signal2_6;

  assign s_19 = signal2_7;

  assign s_20 = signal2_8;

  assign signal2_9 = (CTC_6_out1 == 1'b0 ? s_20 :
              SW1_out1);



  assign s_21 = signal2_9;

  always @(posedge g_clk)
    begin : Delay5_2_process
      if (Rst_n == 1'b0) begin
        signal2_8 <= 16'b0000000000000000;
      end
      else begin
        signal2_8 <= s_21;
      end
    end



  assign signal2_10 = signal2_8;

  assign signal2_11 = signal2_10;

  assign s_22 = signal2_11;

  assign s_23 = signal2_12;

  assign signal2_13 = (CTC_7_out1 == 1'b0 ? s_23 :
              SW1_out1);



  assign s_24 = signal2_13;

  always @(posedge g_clk)
    begin : Delay6_2_process
      if (Rst_n == 1'b0) begin
        signal2_12 <= 16'b0000000000000000;
      end
      else begin
        signal2_12 <= s_24;
      end
    end



  assign signal2_14 = signal2_12;

  assign signal2_15 = signal2_14;

  assign s_25 = signal2_15;

  assign s_26 = signal2_16;

  assign signal2_17 = (CTC_13_out1 == 1'b0 ? s_26 :
              SW1_out1);



  assign s_27 = signal2_17;

  always @(posedge g_clk)
    begin : Delay2_2_process
      if (Rst_n == 1'b0) begin
        signal2_16 <= 16'b0000000000000000;
      end
      else begin
        signal2_16 <= s_27;
      end
    end



  assign signal2_18 = signal2_16;

  assign signal2_19 = signal2_18;

  assign s_28 = signal2_19;

  assign s_29 = signal2_20;

  assign signal2_21 = (CTC_14_out1 == 1'b0 ? s_29 :
              SW1_out1);



  assign s_30 = signal2_21;

  always @(posedge g_clk)
    begin : Delay7_2_process
      if (Rst_n == 1'b0) begin
        signal2_20 <= 16'b0000000000000000;
      end
      else begin
        signal2_20 <= s_30;
      end
    end



  assign signal2_22 = signal2_20;

  assign signal2_23 = signal2_22;

  assign s_31 = signal2_23;

  assign s_32 = signal2_24;

  assign signal2_25 = (CTC_15_out1 == 1'b0 ? s_32 :
              SW1_out1);



  assign s_33 = signal2_25;

  always @(posedge g_clk)
    begin : Delay8_2_process
      if (Rst_n == 1'b0) begin
        signal2_24 <= 16'b0000000000000000;
      end
      else begin
        signal2_24 <= s_33;
      end
    end



  assign signal2_26 = signal2_24;

  assign signal2_27 = signal2_26;

  assign s_34 = signal2_27;

  assign signal2_29 = signal2_28;

  assign signal2_30 = signal2_29;

  assign s_35 = signal2_30;

  assign SW2_out1 = (RO2_relop1 == 1'b0 ? Add2_out1 :
              signal2_signal_2_9);



  assign SW1_out1 = (signal1_signal_1_10 == 1'b0 ? Constant2_out1 :
              SW2_out1);



  assign s_36 = signal2_28;

  assign signal2_31 = (CTC_16_out1 == 1'b0 ? s_36 :
              SW1_out1);



  assign s_37 = signal2_31;

  always @(posedge g_clk)
    begin : Delay9_2_process
      if (Rst_n == 1'b0) begin
        signal2_28 <= 16'b0000000000000000;
      end
      else begin
        signal2_28 <= s_37;
      end
    end



  assign s_38 = signal2_28;

  assign signal2_signal_3 = (CTC_12_out1 == 1'b0 ? s_38 :
              s_35);



  assign s_39 = signal2_signal_3;

  assign signal2_signal_3_1 = (CTC_11_out1 == 1'b0 ? s_39 :
              s_34);



  assign s_40 = signal2_signal_3_1;

  assign signal2_signal_3_2 = (CTC_10_out1 == 1'b0 ? s_40 :
              s_31);



  assign s_41 = signal2_signal_3_2;

  assign signal2_signal_3_3 = (CTC_9_out1 == 1'b0 ? s_41 :
              s_28);



  assign s_42 = signal2_signal_3_3;

  assign signal2_signal_3_4 = (CTC_3_out1 == 1'b0 ? s_42 :
              s_25);



  assign s_43 = signal2_signal_3_4;

  assign signal2_signal_3_5 = (CTC_2_out1 == 1'b0 ? s_43 :
              s_22);



  assign s_44 = signal2_signal_3_5;

  assign signal2_signal_3_6 = (CTC_1_out1 == 1'b0 ? s_44 :
              s_19);



  assign s_45 = signal2_signal_3_6;

  assign signal2_signal_3_7 = (CTC_0_out1 == 1'b0 ? s_45 :
              s_16);



  assign signal2_signal_3_8 = signal2_signal_3_7;

  assign signal2_signal_3_9 = signal2_signal_3_8;

  assign Add2_out1 = SW7_out1 + signal2_signal_3_9;



  assign RO2_relop1 = Add2_out1 >= signal2_signal_2_9;



  assign s_46 = signal1;

  assign signal1_1 = (CTC_4_out1 == 1'b0 ? s_46 :
              RO2_relop1);



  assign s_47 = signal1_1;

  always @(posedge g_clk)
    begin : Delay3_1_process
      if (Rst_n == 1'b0) begin
        signal1 <= 1'b0;
      end
      else begin
        signal1 <= s_47;
      end
    end



  assign signal1_2 = signal1;

  assign signal1_3 = signal1_2;

  assign Drv_Fault1 = signal1_3;

  assign s_48 = signal1_4;

  assign signal1_5 = (CTC_5_out1 == 1'b0 ? s_48 :
              RO2_relop1);



  assign s_49 = signal1_5;

  always @(posedge g_clk)
    begin : Delay4_1_process
      if (Rst_n == 1'b0) begin
        signal1_4 <= 1'b0;
      end
      else begin
        signal1_4 <= s_49;
      end
    end



  assign signal1_6 = signal1_4;

  assign signal1_7 = signal1_6;

  assign Drv_Fault2 = signal1_7;

  assign s_50 = signal1_8;

  assign signal1_9 = (CTC_6_out1 == 1'b0 ? s_50 :
              RO2_relop1);



  assign s_51 = signal1_9;

  always @(posedge g_clk)
    begin : Delay5_1_process
      if (Rst_n == 1'b0) begin
        signal1_8 <= 1'b0;
      end
      else begin
        signal1_8 <= s_51;
      end
    end



  assign signal1_10 = signal1_8;

  assign signal1_11 = signal1_10;

  assign Drv_Fault3 = signal1_11;

  assign s_52 = signal1_12;

  assign signal1_13 = (CTC_7_out1 == 1'b0 ? s_52 :
              RO2_relop1);



  assign s_53 = signal1_13;

  always @(posedge g_clk)
    begin : Delay6_1_process
      if (Rst_n == 1'b0) begin
        signal1_12 <= 1'b0;
      end
      else begin
        signal1_12 <= s_53;
      end
    end



  assign signal1_14 = signal1_12;

  assign signal1_15 = signal1_14;

  assign Drv_Fault4 = signal1_15;

  assign s_54 = signal1_16;

  assign signal1_17 = (CTC_13_out1 == 1'b0 ? s_54 :
              RO2_relop1);



  assign s_55 = signal1_17;

  always @(posedge g_clk)
    begin : Delay2_1_process
      if (Rst_n == 1'b0) begin
        signal1_16 <= 1'b0;
      end
      else begin
        signal1_16 <= s_55;
      end
    end



  assign signal1_18 = signal1_16;

  assign signal1_19 = signal1_18;

  assign Drv_Fault5 = signal1_19;

  assign s_56 = signal1_20;

  assign signal1_21 = (CTC_14_out1 == 1'b0 ? s_56 :
              RO2_relop1);



  assign s_57 = signal1_21;

  always @(posedge g_clk)
    begin : Delay7_1_process
      if (Rst_n == 1'b0) begin
        signal1_20 <= 1'b0;
      end
      else begin
        signal1_20 <= s_57;
      end
    end



  assign signal1_22 = signal1_20;

  assign signal1_23 = signal1_22;

  assign Drv_Fault6 = signal1_23;

  assign s_58 = signal1_24;

  assign signal1_25 = (CTC_15_out1 == 1'b0 ? s_58 :
              RO2_relop1);



  assign s_59 = signal1_25;

  always @(posedge g_clk)
    begin : Delay8_1_process
      if (Rst_n == 1'b0) begin
        signal1_24 <= 1'b0;
      end
      else begin
        signal1_24 <= s_59;
      end
    end



  assign signal1_26 = signal1_24;

  assign signal1_27 = signal1_26;

  assign Drv_Fault7 = signal1_27;

  assign s_60 = signal1_28;

  assign signal1_29 = (CTC_16_out1 == 1'b0 ? s_60 :
              RO2_relop1);



  assign s_61 = signal1_29;

  always @(posedge g_clk)
    begin : Delay9_1_process
      if (Rst_n == 1'b0) begin
        signal1_28 <= 1'b0;
      end
      else begin
        signal1_28 <= s_61;
      end
    end



  assign signal1_30 = signal1_28;

  assign signal1_31 = signal1_30;

  assign Drv_Fault8 = signal1_31;


endmodule  // StateOnCheck_CH8_V10

