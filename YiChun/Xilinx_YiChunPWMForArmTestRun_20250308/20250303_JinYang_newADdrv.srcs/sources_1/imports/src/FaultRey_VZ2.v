// -------------------------------------------------------------
// 
// File Name: D:\FPGA_MZ\FaultRey_VZ1\FaultRey_VZ1.v
// Created: 2024-02-19 22:17:47
// 
// Generated by MATLAB 9.1 and HDL Coder 3.9
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4e-06
// Target subsystem base rate: 4e-06
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FaultRey_VZ1
// Source Path: FaultRey_VZ1/FaultRey_VZ1
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FaultRey_VZ2
          (
           input   g_clk,
           input   Rst_n,
           input   Pluse50Hz,
           input   Pluse4096Hz,
           input   Work,
           input   Fault1,
           input   Fault2,
           input   Fault3,
			  input   OIins,
           input   [3:0] Cnt1,
           input   [3:0] Cnt2,
           input   [3:0] Cnt3,
           input   [15:0] FaultRcyDly,
			  output reg PrefZeroSet,
           output reg PwmLock,
           output reg FaultLock, 
           output reg [3:0] State
          ); 
  reg  [3:0] Fault1Cnt; 
  reg  [3:0] Fault2Cnt;  
  reg  [3:0] Fault3Cnt;   
  reg [15:0] WorkTCnt; 
  reg [15:0] FaultRcyTCnt1;  
  reg [15:0] FaultRcyTCnt2;   
  reg [31:0] OIinsFaultTCnt1;
always @(posedge g_clk) begin
	if(Work == 1'b1) begin//运行中
		if(State == 4'd0) begin//%work 
			if(Fault1 == 1'b1)  begin//%严重故障  5min内允许恢复1次
				if(Fault1Cnt < Cnt1) begin
					Fault1Cnt <= Fault1Cnt + 4'd1; 
					State     <= 4'd2;   
				end
				else begin
					State <= 4'd9; 
					FaultLock <= 1'b1;   
				end   
			end
			else if(Fault2 == 1'b1) begin//   %中级故障 15min内允许恢复3次
				if(Fault2Cnt < Cnt2) begin //0 1 2
					Fault2Cnt <= Fault2Cnt + 4'd1;
					State     <= 4'd2;   
				end
				else begin
					State <= 4'd9; 
					FaultLock <= 1'b1; 
				end  
			end		 
			else if(Fault3 == 1'b1) begin//   %一般故障 30min内允许恢复6次
				if(Fault3Cnt < Cnt3) begin
					Fault3Cnt <= Fault3Cnt + 4'd1;
					State     <= 4'd1;    
				end
				else begin
					State <= 4'd9; 
					FaultLock <= 1'b1; 
				end  
			end
			else begin
				//if(WorkTCnt < 16'd15000) begin//%5min 50*60*5
				if(WorkTCnt < 16'd9000) begin//%5min 50*60*3
					WorkTCnt <= Pluse50Hz ? (WorkTCnt+16'd1) : WorkTCnt;
				end
				else begin
					WorkTCnt <=  16'd0; 
					Fault1Cnt <= (Fault1Cnt > 4'd0) ? (Fault1Cnt - 4'd1) : Fault1Cnt;
					Fault2Cnt <= (Fault2Cnt > 4'd0) ? (Fault2Cnt - 4'd1) : Fault2Cnt;
					Fault3Cnt <= (Fault3Cnt > 4'd0) ? (Fault3Cnt - 4'd1) : Fault3Cnt; 
				end 
			end
			FaultRcyTCnt1  <= 16'd0; 
			FaultRcyTCnt2 <= 16'd0; 
			PwmLock     <= 1'b0; 
			FaultLock   <= 1'b0;
			PrefZeroSet <= 1'b0;
		end
		else if(State==4'd1) begin
			if(FaultRcyTCnt2 < 16'd81) begin //20ms
				FaultRcyTCnt2 <= Pluse4096Hz ? (FaultRcyTCnt2+16'd1) : FaultRcyTCnt2;
			end
			else begin
				FaultRcyTCnt2 <= 16'd0; 
				OIinsFaultTCnt1 <= 32'd0; 
				State <= 4'd2;
			end 
			FaultRcyTCnt1  <= 16'd0; 
			PwmLock     <= 1'b0; 
			FaultLock   <= 1'b0;
			PrefZeroSet <= 1'b1;
		end
		else if(State==4'd2) begin// %fault wait 
			if((~Fault1)&(~Fault2)&(~Fault3)) begin //no fault
				if(FaultRcyTCnt1 < FaultRcyDly) begin //100ms
					FaultRcyTCnt1 <= Pluse4096Hz ? (FaultRcyTCnt1+16'd1) : FaultRcyTCnt1;
				end
				else begin
					State <= 4'd0;
				end  
			end	
			else begin 
			   //+++++++++++++++ 情形1 脉冲封锁3s内不消除故障======================
				if(FaultRcyTCnt2 < 16'd150) begin //begin %3s内故障未能消除则故障
					FaultRcyTCnt2 <= Pluse50Hz ? (FaultRcyTCnt2+16'd1) : FaultRcyTCnt2;
					//+++++++++++++++ 情形2 脉冲封锁期间持续过流10ms保护 2024 05 16======================
					if(OIins) begin
						if(OIinsFaultTCnt1 < 32'd250000) begin //10ms
							OIinsFaultTCnt1 <= OIinsFaultTCnt1+32'd1;
						end
						else begin
							State     <= 4'd9;  
							FaultLock <= 1'b1; 
						end  
					end
					else begin
						if(OIinsFaultTCnt1 > 32'd0) begin //100ms
							OIinsFaultTCnt1 <= OIinsFaultTCnt1-32'd1;
						end 
					end
				end
				else begin
					State     <= 4'd9;  
					FaultLock <= 1'b1; 
				end  
				FaultRcyTCnt1 <= 16'd0;  
			end  
			PwmLock <= 1'b1; 
			PrefZeroSet <= 1'b1;
			WorkTCnt  <= 16'd0;
		end 
		else begin //%S9 fault lock
			PwmLock     <= 1'b1; 
			FaultLock   <= 1'b1;
			PrefZeroSet <= 1'b1;
		end
	end
	else begin //%not work
		State       <= 4'd0;
		PwmLock     <= 1'b0;
		FaultLock   <= 1'b0;
		PrefZeroSet <= 1'b1;
		WorkTCnt      <= 16'd0;
		FaultRcyTCnt1  <= 16'd0;
		FaultRcyTCnt2 <= 16'd0;
		Fault1Cnt   <= 4'd0; 
		Fault2Cnt   <= 4'd0;  
		Fault3Cnt   <= 4'd0;  
	end
end

endmodule  // FaultRey_VZ1

